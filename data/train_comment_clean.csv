gets the balance of the specified address .
function to check the amount of tokens that an owner allow to a spender .
frees free ' tokens from the gastoken at address gas_token ' .
frees free ' tokens from the gastoken at address gas_token ' .
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
mitigate the erc20 short address attack .
transfer tokens .
destroy tokens .
adds or update an address .
"internal transfer , only can be call by this contract ."
approves and then call the receive contract .
merge ( call from our mine leader ) .
transfer the zerogold reward to our mine leader 's payout wallets .
calculate the current reward value .
set the mine leader .
set the mint helper .
set the reward divisor .
total supply .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
function accept tokens from users a a payment for servises and burn their .
function transfer tokens from special address to users .
"multiplies two number , revert on overflow ."
gets the balance of the specified address .
function to check the amount of tokens that an owner allow to a spender .
transfer token for a specified address .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
transfer tokens from one address to another .
increase the amount of tokens that an owner allow to a spender .
"integer division of two number truncate the quotient , revert on division by zero ."
internal function that mint an amount of the token and assign it to an account .
internal function that burn an amount of the token of a give account .
"internal function that burn an amount of the token of a give account , deduct from the sender 's allowance for say account ."
burns a specific amount of tokens from the target address and decrements allowance .
overrides standardtoken . _burn .
"subtracts two number , revert on overflow ( i . e ."
"adds two number , revert on overflow ."
renouncing to ownership will leave the contract without an owner .
transfers control of the contract to a newowner .
modifier to make a function callable only when the contract be not pause .
modifier to make a function callable only when the contract be pause .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to start mint new tokens .
throws if call by any account other than the owner .
the tokens on sale base on the user address .
the token price with the fee .
"user send token to sell to exchange - at this point the exchange contract take ownership , but will map token ownership back to owner for auotmated withdraw on cancel - require that user be the rightful owner and be not ask for a null price ."
allows true owner of token to cancel sale at anytime .
"performs the purchase of a token that be present on the market - this include check that the proper amount be send + appliced fee , update seller 's balance , update collected fee and transfer token to buyer ."
transfers the collect fee to the owner .
internal function to remove a token from the users barn array .
"helper function which store in memory an array which be pass in , and ."
require token to be on the market current owner be exchange .
is the user the owner of this token ? .
renouncing to ownership will leave the contract without an owner .
is this the original owner of the token - at exchange level .
is this the original owner of the token - at exchange level .
is a nonzero price be send ? .
do we have a token address .
used to add new symbol to the bytes array .
"true if user be winner + name of the win horse ( ltc , btc , eth , . . . ) ."
changes multiplier for rarity on fee .
sets a new muliplier for free a horse .
sets a new rename per character cost in wei .
sets a new claim fee in wei .
allows the current owner to transfer control of the contract to a newowner .
allows to add a race address for race validation .
owner can withdraw the current balance .
"adds a new horse index to the possible horse list ( btc , eth , ltc , . . . ) ."
gets the complete list of token ids which belong to an address .
allows to check if an eth_address can claim a horsey from this contract should we also check if already claim here ? .
allows a user to claim a special horsey with the same dna a the race one .
allows a user to give a horsey a name or rename it .
allows a user to burn a token he own to get carrots .
returns the amount of carrots the user own .
returns horsey data of a give token .
transfers control of the contract to a newowner .
allows to fee a horsey to increase it feedingcounter value .
allows user to stop feed a horsey .
internal function to increase a horsey 's rarity .
create a special token id base on the race and the coin index .
internal function to generate a special horsey token we then use the erc721 inherit mint process the dna be a bytes32 target for a keccak256 .
internal function call to increase a horsey rarity .
shift a bytes32 leave by n position .
shift a bytes32 right by n position .
modifier to ensure user can afford a rehorse .
insure the caller pay the required amount .
modifier to make a function callable only when the contract be not pause .
require the address to be non null .
require that the user isnt feed a horsey already .
require that the user isnt feed a horsey already .
require that the user isnt feed a horsey already .
used to deploy children contract a a one shoot call .
transfers joker ownership to a new address .
transfers knight ownership to a new address .
transfers paladin ownership to a new address .
allow ceo to withdraw from pending value always check to update redist .
acquire fund from own contract .
modifier to make a function callable only when the contract be pause .
allow a noble to access his hold .
make a proposal and add to pending proposals .
call to vote on a pending proposal .
helps move pending balance from one role to another .
called at the start of withdraw to distribute any pending balance that live in the contract will only ever be call if balance be non-zero ( fund should be distribute ) .
execute the proposal .
require the sender to be on the contract owners list .
"require that a proposal be not in process or have exceed it lifetime , and have cool down after be veto ."
"requries that if this proposer be the last proposer , that he or she have reach the cooldown limit ."
"call by the owner to pause , trigger stop state ."
require a proposal to be active .
require the voter to not have vote already .
require the voter to not have vote already .
"call by the owner to unpause , return to normal state ."
"since the exchange require the horsey contract and horsey contract require exchange address , we cant initialize both of them in constructors ."
allows the owner to change market fee .
"adds two number , revert on overflow ."
"divides two number and return the remainder ( unsigned integer modulo ) , revert when divide by zero ."
gets the balance of the specified address .
gets the owner of the specify token id .
approves another address to transfer the give token id .
"gets the approved address for a token id , or zero if no address set ."
sets or unsets the approval of a give operator .
tells whether an operator be approve by a give owner .
transfers the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
returns whether the specify token exist .
returns whether the give spender can transfer a give token id .
internal function to mint a new token .
internal function to burn a specific token .
internal function to clear current approval of a give token id .
internal function to add a token id to the list of a give address .
internal function to invoke onerc721received on a target address .
gets the token name .
gets the token symbol .
returns an uri for a give token id .
gets the token id at a give index of the tokens list of the requested owner .
gets the total amount of tokens store by the contract .
gets the token id at a give index of all the tokens in this contract .
internal function to set the token uri for a give token .
internal function to add a token id to the list of a give address .
internal function to remove a token id from the list of a give address .
internal function to mint a new token .
internal function to burn a specific token .
allows to change the address of the current horsey contract .
gets the complete list of token ids which belong to an address .
stores a horsey name .
stores carrot credit on the clients account .
require the address to be non null .
require the caller to be the master .
implement supportsinterface ( bytes4 ) use a lookup table .
private method for register an interface .
"this function will return false if invoke during the constructor of a contract , a the code be not actually create until after the constructor finish ."
"multiplies two number , revert on overflow ."
"integer division of two number truncate the quotient , revert on division by zero ."
"subtracts two number , revert on overflow ( i . e ."
onlyowner : return 0 in mew .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
allows the current owner to transfer control of the contract to a newowner .
withdraw tokens only after crowdsale end .
overrides parent by store balance instead of issue tokens right away .
overrides the way in which ether be convert to tokens .
deliver tokens to receiver_ after crowdsale end .
checks whether the period in which the crowdsale be open have already elapse .
closes the period in which the crowdsale be open .
set the bonus multiplier .
withdraw tokens excess on the contract after crowdsale .
"add tokens for specify beneficiary ( referral system tokens , for example ) ."
withdraw tokens for receiver_ after crowdsale end .
executed when a purchase have be validate and be ready to be execute .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
check if transfer be allow .
check if token offer address be set or not .
check if address be a valid destination to transfer tokens to - must not be zero address - must not be the token address - must not be the owner 's address - must not be the admin 's address - must not be the token offer contract address .
set token offer to approve allowance for offer contract to distribute tokens .
enable transfer .
transfer from sender to another account .
allows the current owner to transfer control of the contract to a newowner .
modifier that require certain stage before execute the main function body .
"withdraw available ethers into beneficiary account , serve a a safety , should never be need ."
whitelist participant address .
start the offer .
end the offer .
"bool return true if purchase succeed , false otherwise ."
bool return true if token offer have end .
modifier that validate a purchase at a tier .
end token offer by set the stage and endtime .
"allocate tokens for presale participants before public offer , can only be execute at stages . setup ."
bulk version of allocatetokensbeforeoffering .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
gets the balance of the specified address .
burns a specific amount of tokens .
total number of tokens in existence .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
allows the current owner to relinquish control of the contract .
function to mint tokens .
function to stop mint new tokens .
this modifier will be use to disable erc20 transfer functionalities during the mint process .
transfer token for a specified address .
transfer tokens from one address to another .
transfer all ether hold by the contract to the owner .
modifier throw if call by any account other than the pendingowner .
allows the current owner to set the pendingowner address .
allows the pendingowner address to finalize the transfer .
"internal transfer , only can be call by this contract ."
transfer token for a specified address with pause feature for owner .
transfer tokens from one address to another with pause feature for owner .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"adds two number , throw on overflow ."
only people with tokens .
precautionary measure in case we need to adjust the masternode rate .
"if we want to rebrand , we can ."
"if we want to rebrand , we can ."
method to view the current ethereum store in the contract .
retrieve the total token supply .
erc 20 .
retrieve the tokens own by the caller .
retrieve the dividends own by the caller .
retrieve the token balance of any single address .
only people with profit .
retrieve the dividend balance of any single address .
return the buy price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
calculate token price base on an amount of incoming ethereum .
calculate token sell value .
"this be where all your gas go , sorry ."
"multiplies two number , throw on overflow ."
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
"integer division of two number , truncate the quotient ."
"substracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
alias of sell ( ) and withdraw ( ) .
"in case one of u die , we need to replace ourselves ."
calculates the amount that have already vest .
call to initialize distribution * * * do not override .
allows the owner to revoke the vest .
"call by the owner to unpause , return to normal state ."
transfer token for a specified address .
transfer tokens from one address to another .
set allowance for other address and notify .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
throws if call by any account other than the ico .
allows the current owner to transfer control of the contract to a newowner .
"call by the owner to pause , trigger stop state ."
freeze ? prevent allow target from send receive token precondition .
"internal transfer , only can be call by this contract ."
set allowance for other address and notify .
this modifier check that only the creator of the contract can call this smart contract .
add a new insurance for the give flight .
update the status of a flight .
manually resolve an insurance contract .
modifier to allow action only when the contract is pause .
function to access symbol of token .
function to access decimals of token .
function to access total supply of tokens .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
modifier to allow action only when the contract is not pause .
owner can transfer out any accidentally send erc20 tokens .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
function to access name of token .
safely transfer the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
returns whether the give spender can transfer a give token id .
internal function to clear current approval of a give token id .
internal function to add a token id to the list of a give address .
internal function to remove a token id from the list of a give address .
internal function to invoke onerc721received on a target address .
"this function will return false if invoke during the constructor of a contract , a the code be not actually create until after the constructor finish ."
gets the balance of the specified address .
gets the owner of the specify token id .
returns whether the specify token exist .
approves another address to transfer the give token id .
"gets the approved address for a token id , or zero if no address set ."
sets or unsets the approval of a give operator .
tells whether an operator be approve by a give owner .
transfers the ownership of a give token id to another address .
"multiplies two number , throw on overflow ."
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
send coin .
allow another contract to spend some tokens in your behalf .
transfer balance to owner .
total number of tokens in existence .
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
transfer token for a specified address .
transfer tokens from one address to another .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
approve should be call when allow _spender 0 .
transfers vest tokens to beneficiary .
allows the owner to revoke the vest .
calculates the amount that have already vest .
burns a specific amount of tokens .
only allow to execute before the token sale be close .
reallocate the unsold and leftover bounty tokens .
open the trade for everyone .
trading limit .
trading limit .
total number of tokens in existence .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"substracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
x to the power of y .
'owner ' can set end time of fund .
'owner ' can set transfer enable or disable .
'owner ' can set number of tokens per ether in prefunding .
'owner ' can set number of tokens per ether in fund .
owner can set tokenvault .
owner can call to allocate tokens to investor who invest in other currencies .
transfer the tokens to investor 's address .
withdraw ether during pre-sale and sale .
balance tokens of investor address .
amount of remain tokens allow to spend .
amount of remain tokens allow to spend .
whether the transfer be successful or not .
whether the transfer be successful or not .
whether the approval be successful or not .
whether the approval be successful or not .
whether the burn be successful or not .
whether the transfer be successful or not .
upgrade tokens to the new token contract .
use this a function modifier that should not execute if contract state halted .
set address of upgrade target contract and enable upgrade process .
use this a function modifier that should execute only if contract state halted .
'owner ' can set minimum ether to accept .
'owner ' can set maximum ether to accept .
'owner ' can set start time of pre fund .
'owner ' can set start time of fund .
create a crowdsale .
buy token with wei .
whether crowdsale goal be reach or not .
refund surplus tokens to refund wallet .
pay commission by raise wei amount of crowdsale .
refund crowdsale tokens to refund wallet .
enable refund of crowdsale .
finalize a crowdsale .
"pause crowdsale , which will set the crowdsale state to refunding ."
claim crowdsale raise wei .
"claim token , which will transfer bought token amount to buyer ."
"claim refund , which will transfer refunded wei amount back to buyer ."
"divides two number and return the remainder ( unsigned integer modulo ) , revert when divide by zero ."
"note no default constructor be require , but remember to set commission wallet before operate ."
magic trade balance algorithm .
"substracts two number , throw on overflow ( i . e ."
"erc20 transferfrom , modify such that an allowance of max_uint represent an unlimited amount ."
"claim vrf tokens daily , require an eth verify account ."
total supply .
get the token balance for account tokenowner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
getters to allow the same blacklist to be use also by other contract ( include upgrade thanhnv ) .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
deprecate current contract in favour of a new one .
deprecate current contract if favour of a new one .
allows the current owner to transfer control of the contract to a newowner .
issue a new amount of tokens these tokens be deposit into the owner address .
redeem tokens .
fix for the erc20 short address attack .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens than an owner allow to a spender .
"internal transfer , only can be call by this contract ."
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
set allowance for other address .
destroy tokens .
destroy tokens from other account .
"internal transfer , only can be call by this contract ."
mint tokens and assign to some one .
burn tokens from owner account .
use to make sure no one can interact with contract until it have be activate .
"calculate unmasked earn ( just calculate , do not update mask ) ."
return the amount of key you would get give an amount of eth .
return current eth price for x key .
receive entire player name list .
get exist or register new pid .
check to make sure user pick a valid team .
decide if round end need to be run new round start .
move any unmasked earn to gen vault .
prevent contract from interact with fomo3d .
update round timer base on number of whole key buy .
generate a random number between 0-99 and check to see if thats result in an airdrop win .
update mask for round and player when key be buy .
"add up unmasked earn , vault earn , set them all to 0 ."
calculate number of key receive give x eth .
calculate amount of eth receive if you sell x key .
calculate how many key would exist with give an amount of eth .
set boundaries for incoming tx .
calculate how much eth would be in contract give a number of key .
"multiplies two number , throw on overflow ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
give square root of give x .
give square .
x to the power of y .
return the price buyer will pay for next 1 individual key .
return time leave .
solidity hat stack limit .
decrease the amount of tokens that an owner allow to a spender .
transfer token for a specified address .
transfer tokens .
set allowance for other address .
destroy tokens .
throws if call by any account other than the owner .
renouncing to ownership will leave the contract without an owner .
allows the current owner to transfer control of the contract to a newowner .
transfers control of the contract to a newowner .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
use to make sure no one can interact with contract until it have be activate .
return all current round info need for front end - functionhash - 0x747dff42 .
return player info base on address .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
receive name / player info from name contract .
prevent contract from interact with fomo3d .
receive entire player name list .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
update round timer base on number of whole key buy .
"distribute eth base on fee to com , aff , and poh ."
distribute eth base on fee to gen and pot .
set boundaries for incoming tx .
prepare compression data and fire event for buy or reload tx 's .
filter name string - convert uppercase to lower case .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
return the price buyer will pay for next 1 individual key .
return player earn per vault - functionhash - 0x63066434 .
filter name string - convert uppercase to lower case .
"multiplies two number , throw on overflow ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
give square root of give x .
x to the power of y .
delete proposal signature data after successfully execute a multisig function .
return a hashed version of msg . data .
return number of signers for any give function .
return address of an admin who sign for any give function .
register a name .
"players , if you register a profile , before a game be release , or set the all bool to false when you register , use this function to push your profile to a single game ."
"players , use this to push your player profile to all register game ."
players use this to change back to one of your old name .
use to make sure no one can interact with contract until it have be activate .
return all current round info need for front end - functionhash - 0x747dff42 .
return player info base on address .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
receive entire player name list .
get exist or register new pid .
end the round .
move any unmasked earn to gen vault .
generate a random number between 0-99 and check to see if thats result in an airdrop win .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
set boundaries for incoming tx .
calculate how many key would exist with give an amount of eth .
calculate how much eth would be in contract give a number of key .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
return the price buyer will pay for next 1 individual key .
return player earn per vault - functionhash - 0x63066434 .
allows the current owner to transfer control of the contract to a newowner .
dev - use this to add admins .
dev - use this to remove admins .
dev - change the number of required signatures .
dev - change the number of required dev signatures .
send erc20 token to multi address .
send erc20 token to multi address with decimals .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
set allowance for other address and notify .
approve should be call when allowance _spender 0 .
destroy tokens from other account .
this modifier limit function execution to the admin .
this function transfer the adminship of the contract to _newadmin .
contribution handler .
check status .
closure handler .
function to claim any token stick on contract .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
"performs the purchase of a token that be present on the market - this include check that the proper amount be send + appliced fee , update seller 's balance , update collected fee and transfer token to buyer ."
allows the current owner to transfer control of the contract to a newowner .
"true if user be winner + name of the win horse ( ltc , btc , eth , . . . ) ."
allows a user to claim a special horsey with the same dna a the race one .
allows a user to give a horsey a name or rename it .
internal function to increase a horsey 's rarity .
internal function call to increase a horsey rarity .
validate a multihash bytes value .
cast or change your vote .
create a poll and store the address of the poll in this contract .
recover signer address from a message by use his signature .
limit address to the create address .
check the balance of many address ' weth ( which be a 0x eth wrapper for 0x exchange ) .
selfdestruct for cleanup .
"backup withdraw , if somehow erc20 tokens get in here ."
check the token allowance of a wallet in a token contract .
check the token balance of a wallet in a token contract .
check the token balance of a wallet for multiple tokens .
check the token allowance of a wallet for multiple tokens .
"similar to walleta , with the addition of support multiple users ."
"similar to allbalances , with the addition of support multiple users ."
logic run whenever a buy order be execute .
this be the core logic for any buy / reload that happen while a round be live .
prevent contract from interact with fomo3d .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
withdraws all of your earn .
zero address not allow .
change the address of the registry logic which have exclusive write control over this contract .
check if an address be associate with any user account .
create an account for a user and emit an event .
remove an address from an id .
end the round .
"distribute eth base on fee to com , aff , and poh ."
prevent contract from interact .
register a name .
"players , if you register a profile , before a game be release , or set the all bool to false when you register , use this function to push your profile to a single game ."
players use this to change back to one of your old name .
filter name string - convert uppercase to lower case .
function to set new admin address .
function to set burn lock .
get the balance of an specified address .
transfer token to a specified address .
assign allowance to an specify address to use the owner balance .
get the allowance of an specified address to use another address balance .
burn token of an specified address .
"multiplies two number , throw on overflow ."
"subtracts two number , throw on overflow ( i . e ."
allows the current owner to transfer control of the contract to a newowner .
interface declaration .
self check if all reference be correctly set .
pricing tell if this be a presale purchase or not .
calculate the current price for buy in amount .
approves and then call the receive contract .
access modifier for ceo-only functionality .
burns a specific amount of tokens .
permissions when transferenabled be false : .
check if token sale address be not set .
check if token transfer destination be valid .
set amount of token sale to approve allowance for sale contract .
set transferenabled variable to true .
set transferenabled variable to false .
transfer token from message sender to another .
transfer token from 'from ' address to 'to ' addreess .
"burn token , only owner be allow ."
disable transfer tokens more than allow amount from certain account .
enable transfer tokens of locked account .
modifier to check current stage be same a expect stage .
modifier to check current round be sane a expect round .
modifier to check purchase be valid .
withdraw ethers to fund address .
add users to whitelist .
add one user to whitelist .
remove users from whitelist .
remove users from whitelist .
set minimum contribution for round .
set max contribution for round .
set hard cap for round .
set up several information for next round .
start sale in current round .
end sale in crrent round .
add user and his allowed amount to allocation list .
add users and their allowed amount to allocation list .
remove user from allocation list .
remove users from allocation list .
allocate tokens to user .
allocate tokens to user .
batch token transfer .
transfer token for a specified address .
transfer tokens from one address to another .
approve should be call when allow _spender 0 .
burns a specific amount of tokens .
callback of approveandcall - transfer pinakions in the contract .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
the balance of _owner at the current block .
this function make it easy to read the allowed map .
this function make it easy to get the total number of tokens .
queries the balance of _owner at a specific _blocknumber .
total amount of tokens at a specific _blocknumber .
creates a new clone token with the initial distribution be this token at _snapshotblock .
jurors can withdraw their pnk from here .
burns _amount tokens from _owner .
getvalueat retrieve the number of tokens at a give block number .
updatevalueatnow use to update the balance map and the totalsupplyhistory .
internal function to determine if an address be a contract .
helper function to return a min betwen the two uints .
update the dapp by create a new token with new functionalities the msg . sender .
request a random number .
withdraw the fund of a give juror .
get a uncorrelated random number .
contribute to the reward of a random number .
return the random number .
save the random number for this blockhash and give the reward to the caller .
save the random number for this blockhash and give the reward to the caller .
give a rule for a dispute .
appeal a rule .
callback of approveandcall - transfer pinakions of a juror in the contract .
withdraw tokens .
to call to go to a new period .
deposit tokens in order to have chance of be draw .
vote a rule .
steal part of the tokens and the arbitration fee of a juror who fail to vote .
execute all the token repartition .
execute token repartition on a dispute for a specific number of vote .
return the amount of jurors which be or will be draw in the dispute .
must be use to verify that a juror have be draw at least _draws . length .
create a dispute .
the attacker can withdraw their pnk from here after the bribe have be settle .
appeal a rule .
execute the rule of a dispute which be in the state executable .
compute the cost of arbitration .
compute the cost of appeal .
compute the amount of jurors to be draw .
compute the minimum activate pinakions in alpha .
getter for account in vote .
getter for rule in vote .
getter for winningchoice in votecounter .
getter for winningcount in votecounter .
settles the p + e bribe with the jurors .
getter for votecount in votecounter .
getter for lastsessionvote in dispute .
is the juror draw in the draw of the dispute .
return the current rule of a dispute .
return the status of a dispute .
general call function where the contract execute an arbitrary call with data and eth follow governor order .
setter for rng .
setter for arbitrationfeeperjuror .
setter for defaultnumberjuror .
setter for minactivatedtoken .
setter for timeperperiod .
setter for alpha .
setter for maxappeals .
setter for governor .
changes the controller of the contract .
send _amount tokens to _to from msg . sender .
access modifier for ceo-only functionality .
called by any c-level role to pause the contract .
this be public rather than external so it can be call by derived contract .
create a game .
join a game .
creator reveal game choice .
close game settlement reward .
access modifier for cfo-only functionality .
access modifier for coo-only functionality .
count amount with tip .
withdraw tip .
assigns a new address to act a the ceo .
assigns a new address to act a the cfo .
modifier to allow action only when the contract is not pause .
low level token purchase * * * do not override .
validation of an incoming purchase .
source of tokens .
executed when a purchase have be validate and be ready to be execute .
override to extend the way in which ether be convert to tokens .
determines how eth be store / forward on purchase .
get stage index .
get stage name .
function to change the minimum contribution can only be call from owner wallet .
function to change the maximum contribution can only be call from owner wallet .
function to withdraw longtermfoundationbudget fund to the owner wallet can only be call from owner wallet .
function to withdraw legalcontingencyfunds fund to the owner wallet can only be call from owner wallet .
function to withdraw marketingandcommunityoutreach fund to the owner wallet can only be call from owner wallet .
function to withdraw cashreservefund fund to the owner wallet can only be call from owner wallet .
function to withdraw operationalexpenses fund to the owner wallet can only be call from owner wallet .
function to withdraw softwareproductdevelopment fund to the owner wallet can only be call from owner wallet .
function to withdraw foundersteamandadvisors fund to the owner wallet can only be call from owner wallet .
function to withdraw all fund to the owner wallet can only be call from owner wallet .
function to change the end timestamp of the ico can only be call by owner wallet .
function to change the start timestamp of the ico can only be call by owner wallet .
function to pause the crowdsale can only be call from owner wallet .
function to resume the crowdsale if it be pause can only be call from owner wallet .
sending tokens for sale to the sale contract address .
sending reserve tokens to the sale contract address .
team tokens accrual .
investors tokens accrual .
advisors tokens accrual .
bonus tokens accrual .
function to access name of token .
function to access symbol of token .
function to access decimals of token .
function to access total supply of tokens .
burns a specific amount of tokens .
function to mint tokens .
function to stop mint new tokens .
function to collect tokens from the list of address .
function to distribute tokens to the msg . sender .
allows the current owner to transfer control of the contract to a newowner .
prevent target from send or receive tokens .
prevent target from send or receive tokens by set unix time .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
the gravatar at position 0 of gravatars be fake it 's a mythical gravatar that do n't really exist dani will invoke this function once when this contract be deploy but then no more .
tells the address of the owner .
allows the upgradeability owner to upgrade the current version of the proxy and call the new implementation to initialize whatever be need through a low level call .
sets the address of the owner .
tells the version name of the current implementation .
tells the address of the current implementation .
upgrades the implementation address .
throws if call by any account other than the owner .
tells the address of the proxy owner .
allows the current owner to transfer control of the contract to a newowner .
allows the upgradeability owner to upgrade the current version of the proxy .
"call by the owner to unpauseunpause , return to normal state ."
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
terminate contract and refund to owner .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
freeze ? prevent allow target from send receive tokens .
only people with tokens .
transfer tokens from the caller to a new holder .
transfer token to a specify address and forward the data to recipient .
additional check that the game address we be send tokens to be a contract assemble the give address bytecode .
this function be a way to spread dividends to tokenholders from other contract .
"in case one of u die , we need to replace ourselves ."
precautionary measure in case we need to adjust the masternode rate .
"add or remove game contract , which can accept proofofhumanity tokens ."
"if we want to rebrand , we can ."
"if we want to rebrand , we can ."
only people with profit .
set approve contract that can purchase / sell tokens ( this be if we ever need a whale contract in the future ) .
method to view the current ethereum store in the contract .
retrieve the total token supply .
retrieve the tokens own by the caller .
retrieve the dividends own by the caller .
retrieve the token balance of any single address .
retrieve the dividend balance of any single address .
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
"administrators can : - change the name of the contract - change the name of the token - change the pos difficulty ( how many tokens it cost to hold a masternode , in case it get crazy high later ) they can not : - take fund - disable withdrawals - kill the contract - change the price of tokens ."
function for the frontend to dynamically retrieve the price scale of sell order .
function for the frontend to show ether wait to be send to charity in contract .
make sure we will send back excess if user send more then 5 ether before 100 eth in contract .
calculate token price base on an amount of incoming ethereum .
calculate token sell value .
"ensure that the first tokens in the contract will be equally distributed mean , no divine dump will be ever possible result : healthy longevity ."
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
sends charity money to the https : / / giveth . io .
converts all of caller 's dividends to tokens .
alias of sell ( ) and withdraw ( ) .
withdraws all of the callers earn .
liquifies tokens to ethereum .
constructor function .
function to mint tokens .
function to stop mint new tokens .
give ( tovoter ) the right to vote on this ballot .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
transfer tokens from one address to another .
allows _spender to spend no more than _value tokens in your behalf .
function to check the amount of tokens that an owner allow to a spender .
burns a specific amount of tokens .
function to mint tokens .
function to stop mint new tokens .
function to distribute tokens to the list of address by the provided amount .
function to collect tokens from the list of address .
delegate your vote to the voter ( to ) .
function to distribute tokens to the msg . sender .
give a single vote to proposal ( toproposal ) .
prevent target from send or receive tokens .
prevent target from send or receive tokens by set unix time .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
the function can be call only before or after the tokens have be releasesd .
the function can be call only by a whitelisted release agent .
set the contract that can call release and make the token transferable .
owner can allow a particular address ( a crowdsale contract ) to transfer tokens despite the lock up period .
"call by the owner on emergency , trigger stop state ."
"call by the owner on end of emergency , return to normal state ."
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
buy tokens from contract by send ether .
sell amount tokens to contract .
transfer tokens from other address .
"internal transfer , only can be call by this contract ."
allow to ( re ) set finalize agent .
allow crowdsale owner to close early or extend the crowdsale .
allow to ( re ) set price strategy .
allow to change the team multisig address in the case of emergency .
true if the crowdsale have raise enough money to be a successful .
check if the contract relationship look good .
crowdfund state machine management .
interface marker .
interface declaration .
interface marker .
allow the token holder to upgrade some of their tokens to a new contract .
set an upgrade agent that handle .
get the state of the token upgrade .
change the upgrade master .
child contract can enable to provide the condition when the upgrade can begin .
limit token transfer until the crowdsale be over .
"call by the owner on emergency , trigger stop state ."
set the contract that can call release and make the token transferable .
owner can allow a particular address ( a crowdsale contract ) to transfer tokens despite the lock up period .
one way function to release the tokens to the wild .
the function can be call only before or after the tokens have be releasesd .
the function can be call only by a whitelisted release agent .
make sure we be not do yet .
create new tokens and allocate them to an address . .
owner can allow a crowdsale contract to mint new tokens .
"when token be release to be transferable , enforce no new tokens can be create ."
allow upgrade agent functionality kick in only if the crowdsale be success .
"call by the owner on end of emergency , return to normal state ."
owner can update token information here .
claim tokens that be accidentally send to this contract .
check that we can release the token .
distribute reserve tokens .
make an investment .
allow anonymous contributions to this crowdsale .
the basic entry point to participate the crowdsale process .
check that we can release the token .
called from invest ( ) to confirm if the curret investment do not break our cap rule .
dynamically create tokens and assign them to the investor .
change the owner .
accept the ownership .
transfers tokens from your address to other .
approve other address to spend tokens on your account .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
get the amount of allow tokens to spend .
airdrops some tokens to some account .
"return all tokens back to owner , in case any be accidentally transfer to this contract ."
destroy this contract and recover any ether to the owner .
approves and then call the receive contract .
gets the balance of the specified address include freeze tokens .
gets the balance of the specified address without freeze tokens .
get freeze count .
get freeze end date and freezing balance for the freezing portion specify by index .
freeze your tokens to the specify address .
release first available freeze tokens .
release all available for release freeze tokens .
mint the specified amount of token to the specify address and freeze it until the specified date .
"multiplies two number , throw on overflow ."
transfers award mils to the caller 's account .
transfers any un-awarded mils to the contract owner .
restricts privilege function to the contract owner .
functions that can only be call before the end of the lock-up period .
functions that can only be call after the end of the lock-up period .
functions that can only be call if the award be fully fund .
changes contract ownership .
award mils to people that will become available after lock-up period ( if fund ) .
transfer token for a specified address .
transfer tokens from one address to another .
accept an invite use the sign model describe in the contract description .
create an account for a user and emit an event .
add an address to an exist id on behalf of a user to pay the gas cost .
add an address to an exist id by a user .
add an address to an exist id .
remove an address from an account for a user .
addresses with bloom account already be not allow .
addresses without bloom account already be not allow .
restricted to registryadmin .
change the implementation of the signinglogic contract by set a new address .
"change the address of the registryadmin , who have the privilege to create new account ."
create an invite use the sign model describe in the contract description .
"multiplies two number , throw on overflow ."
"private function , can only be call by this contract ."
claim your eth .
claim eth for address .
claim your tokens .
claim on behalf of payee address .
transfers the unclaimed token amount for the give token and address .
returns the amount of a token ( tokenaddr ) that payee can claim .
add a new payee to the contract .
add a new payee to the contract .
irreversibly close the add of cheque .
"however unlikely , it be possible that the number of tracked tokens reach the point that would make the gas cost of transfer zur exceed the block gas limit ."
reclaim all erc20basic compatible tokens .
reject all erc223 compatible tokens .
reclaim ownership of ownable contract .
throws if call by any account that 's not whitelisted .
add an address to the whitelist .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
checks if the supplied address be able to perform transfer .
computes keccak256 hash of the supplied value .
check if the mint for the supplied key be already perform .
this function enable the whitelisted application ( internal application ) to set the ico end date and can only be use once .
this function enable the whitelisted application ( internal application ) to set whether or not the softcap be reach .
this function enable token transfer for everyone .
this function disable token transfer for everyone .
mints the tokens only once against the supplied key ( category ) .
mints the below-mentioned amount of tokens allocate to the vibeo team .
mints the below-mentioned amount of tokens allocate to the vibeo treasury wallet .
mints the below-mentioned amount of tokens allocate to the vibeo board advisors .
mints the below-mentioned amount of tokens allocate to the vibeo partner .
mints the below-mentioned amount of tokens allocate to reward the vibeo community .
mints the below-mentioned amount of tokens allocate to vibeo user adoption .
mints the below-mentioned amount of tokens allocate to the vibeo market channel .
enables or disable the specified address to become a transfer agent .
checks if the specified address be a transfer agent .
mints the supplied value of the tokens to the destination address .
transfers tokens from a specified wallet address .
approves a wallet address to spend on behalf of the sender .
increases the approval of the spender .
decreases the approval of the spender .
returns the sum of supplied value .
allows only the admins and / or whitelisted applications to perform bulk transfer operation .
burns the coin hold by the sender .
close game settlement reward .
override to extend the way in which ether be convert to tokens .
determines how eth be store / forward on purchase .
reverts if not in crowdsale time range .
checks whether the period in which the crowdsale be open have already elapse .
extend parent behavior require to be within contribute period .
"must be call after crowdsale end , to do some extra finalization work ."
checks whether the cap have be reach .
extend parent behavior require purchase to respect the fund cap .
overrides delivery by mint tokens upon purchase .
investors can claim refund here if crowdsale be unsuccessful .
checks whether fund goal be reach .
"overrides crowdsale fund forward , send fund to vault ."
override to extend the way in which ether be convert to tokens .
low level token purchase * * * do not override .
validation of an incoming purchase .
source of tokens .
copies a slice to a new string .
set the price of asset .
set the tradeable status of asset .
set the remark1 .
set the remark2 .
modify the link of the indexth data to be url .
cancel contract .
get the number of assetinfo .
transfer holder .
returns a slice contain the entire string .
returns true if the slice be empty ( have a length of 0 ) .
"splits the slice , set self to everything after the first occurrence of needle , and token to everything before it ."
"splits the slice , set self to everything after the first occurrence of needle , and return everything before it ."
"returns the memory address of the first byte of the first occurrence of needle in self , or the first byte after self if not find ."
counts the number of nonoverlapping occurrences of needle in self .
initialize a new asset needle be needle be needle be .
get base asset info .
get data info by index .
erc20 methods .
token drain .
checks whether the cap have be reach .
correction of current rate .
close current round .
set token address .
set address od deposit wallet .
change minimal amount of investment .
flag to sell wpt without check .
set amount of gas for internal transactions .
set cap for current round .
start new crowdsale round if already not start .
checks whether the period in which the crowdsale be open .
low level token purchase * * * do not override .
extend parent behavior require purchase to respect the fund cap .
source of tokens .
executed when a purchase have be validate and be ready to be execute .
override to extend the way in which ether be convert to tokens .
determines how eth be store / forward on purchase .
transfers control of the contract to a newowner .
allows the owner to set the minter contract .
"internal transfer , only can be call by this contract ."
"internal transfer , only can be call by this contract ."
"in case you change your mind , this will get your ether back to your account ."
"returns the first rune in the slice , advance the slice to point to the next rune ."
returns the number of the first codepoint in the slice .
returns the keccak-256 hash of the slice .
returns true if self start with needle .
"if self start with needle , needle be remove from the begin of self ."
returns true if the slice end with needle .
"if self end with needle , needle be remove from the end of self ."
"returns the memory address of the first byte after the last occurrence of needle in self , or the address of self if not find ."
modifies self to contain everything from the first occurrence of needle to the end of the slice .
returns the length of a null-terminated bytes32 string .
modifies self to contain the part of the string from the start of self to the end of the first occurrence of needle .
"splits the slice , set self to everything before the last occurrence of needle , and token to everything after it ."
"splits the slice , set self to everything before the last occurrence of needle , and return everything after it ."
returns true if self contain needle .
returns a newly allocate string contain the concatenation of self and other .
"joins an array of slice , use self a a delimiter , return a newly allocate string ."
urgency situation .
"returns a slice contain the entire bytes32 , interpret a a null-terminated utf-8 string ."
returns a new slice contain the same data a the current slice .
returns the length in run of the slice .
"returns a positive number if other come lexicographically after self , a negative number if it come before , or zero if the content of the two slice be equal ."
returns true if the two slice contain the same text .
"extracts the first rune in the slice into rune , advance the slice to point to the next rune and return self ."
set the price of asset .
set the tradeable status of asset .
set the remark1 .
set the remark2 .
modify the link of the indexth data to be url .
initialize a new asset needle be needle be needle be .
get base asset info .
get data info by index .
send coin .
low level token purchase * * * do not override .
compression key 0-14 - timestamp 15-29 - caller pusher tracker 30-44 - global pusher tracker 45-46 - percent 47 - greedy .
change the state of stop flag .
withdraw the amount of token that be remain in this contract .
update the information regard to period and amount .
get the total number of address which receive airdrop .
get the remain amount of token user can receive .
return the total amount of token user receive .
confirm that airdrop be available .
confirm that airdrop be available for msg . sender .
do the airdrop to msg . sender .
prevent contract from interact with fomo3d .
modifier - - - owner section .
erc20 section .
locked section .
erc20 token section .
owner section .
locked section .
"because too many unlocking step * account , it will burn lot of gas ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ."
burns a specific amount of tokens from the target address and decrements allowance .
owner may add or remove a locker address for the contract .
transfer token with timelocks .
lockers set by owners may transfer token with timelocks .
standard erc20 transferfrom .
should only be call when first set an allowance .
increase or decrease allowance .
"should n't happen , just in case ."
fast-forward the timelocks for all account .
delay the timelocks for all account .
show unlocked balance of an account .
show timelocked balance of an account .
standard erc20 balanceof with timelock add .
show timelocks in an account .
show value lock in an account 's timelocks .
calculate and process the timelock state of an account .
standard erc20 transfer .
"internal transfer , only can be call by this contract ."
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
buy tokens from contract by send ether .
sell amount tokens to contract .
transfer tokens .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
destroy tokens from other account .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
freeze ? prevent allow target from send receive tokens .
method to view the current ethereum store in the contract .
retrieve the dividends own by the caller .
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
calculate token price base on an amount of incoming ethereum .
"administrators can : - change the name of the contract - change the name of the token - change the pos difficulty ( how many tokens it cost to hold a masternode , in case it get crazy high later ) they can not : - take fund - disable withdrawals - kill the contract - change the price of tokens ."
"ensure that the first tokens in the contract will be equally distributed mean , no divine dump will be ever possible result : healthy longevity ."
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
converts all of caller 's dividends to tokens .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
low level token purchase * * * do not override .
allows the owner to set the minter contract .
allows the current owner to transfer control of the contract to a newowner .
"internal transfer , only can be call by this contract ."
transfer tokens .
stop take donations .
start take donations .
"withdraw all the ethereum user hold in the contract , set balance to 0 ."
returns contract eth balance .
returns user eth tokens balance in contract .
"buy in stake pool , transfer ethereum in the contract , pay 2 fee ."
"withdraw select amount of ethereum from the contract back to user , update the balance ."
returns the confirmation status of a transaction .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
returns number of confirmations of a transaction .
returns total number of transactions after filers be apply .
returns list of owners .
"returns array with owner address , which confirm transaction ."
returns list of transaction ids in defined range .
allows to add a new owner .
allows to remove an owner .
allows to replace an owner with a new owner .
allows an owner to submit and confirm a transaction .
allows an owner to confirm a transaction .
allows an owner to revoke a confirmation for a transaction .
call have be separate into it own function in order to take advantage of the solidity 's code generator to produce a loop that copy tx . data .
"internal transfer , only can be call by this contract ."
get lucky pending size .
get lucky record size .
get the game info .
get the player info by address .
get dealer and lucky record .
withdraw the balance and share pot .
buy the token .
"handle the pot ( share , final , lucky and dealer ) ."
handle lucky pot .
handle dealer pot .
end the game .
update the finish time .
change the fee owner .
withdraw the fee .
give square root of give x .
throws if sender be not account ( contract etc . ) .
token balance for player .
allows the current owner to set the pendingowner address .
allows the pendingowner address to finalize the transfer .
reclaim ownership of ownable contract .
reclaim all erc20 compatible tokens .
somebody may call this to sell his tokens .
calculates how much eth somebody can receive for sell amount bob .
calculates how much bob tokens this contract can buy ( during current buyback round ) .
checks if buyback round be run .
changes buyback parameters .
"starts buyback at specified time , with specified rate ."
claim all bob tokens store on the contract and send them to owner .
transfer all ether hold by the contract to the owner .
transfers the current balance to the owner and terminate the contract .
"in case one of u die , we need to replace ourselves ."
"administrator can : - change the name of the contract - change the name of the token - change the pos difficulty ( how many tokens it cost to hold a masternode , in case it get crazy high later ) they can not : - take fund - disable withdrawals - kill the contract - change the price of tokens ."
liquifies tokens to ethereum .
redistribution of dividends .
this be the core logic for any buy / reload that happen while a round be live .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
filter name string - convert uppercase to lower case .
withdraws all of your earn .
return the price buyer will pay for next 1 individual key .
"internal transfer , only can be call by this contract ."
transfer tokens .
check user 's donated amount .
check if user be a backer .
for example for convert all tokens of user account to another tokens .
erc-20 functions https : / / github . com / ethereum / eips / blob / master / eips / eip-20 - token-standard . md methods .
interaction with other contract .
for convenience : .
appends a byte array to the end of the buffer .
oraclize callback ( trigger by oraclize ) .
allows owner to schedule future oraclize call .
allows owner to schedule future oraclize call on a rolling schedule .
appends a byte to the end of the buffer .
allows owner to set oracle to ignore all oraclize pricce update .
allows owner to set url use in oraclize query .
allows owner to set new sanity bound for price update .
allows owner to set new gas price for future oraclize query .
returns price and correspond update time .
allows owner to set new gas limit on oraclize query .
allows owner to set time after which price be consider stale .
allows owner to ignore specific requestid result from oraclize .
allows owner to set up admin address that can schedule update .
allows owner to set new time tolerance on oraclize query .
appends a byte to the end of the buffer .
returns address of oracle currency ( 0x0 for eth ) .
returns symbol of oracle currency ( 0x0 for eth ) .
returns denomination of price .
returns price - should throw if not valid .
returns balance to owner .
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
allows the current owner to relinquish control of the contract .
"this function will return false if invoke during the constructor of a contract , a the code be not actually create until after the constructor finish ."
returns whether the give spender can transfer a give token id .
internal function to mint a new token .
internal function to burn a specific token .
internal function to clear current approval of a give token id .
internal function to add a token id to the list of a give address .
internal function to remove a token id from the list of a give address .
guarantees msg . sender .
checks msg . sender .
gets the owner of the specify token id .
approves another address to transfer the give token id .
transfers the ownership of a give token id to another address .
accepts ether and create new cc tokens .
secure withdraw .
players use this to change back to one of your old name .
register a name .
check the address be human or contract .
address not zero .
owner may add or remove admins .
admins may add or remove game .
"admins and game may add players , and players can not be remove ."
interface methods .
"should n't happen , just in case ."
erc20 code .
transfer donations or accidentally receive erc20 tokens .
end of erc20 code .
used to enforce permissions .
the owner can transfer ownership .
the owner can change the oracle .
the owner can remove the oracle .
the owner can change the maintainer .
allows the user the redeem an amount of karma verify by the oracle .
this function be a workaround because this . redeemedkarma .
transfer donations or accidentally receive ethereum .
called by the sale contract to create a disbursement .
transfers tokens to a beneficiary .
only people with tokens .
retrieve the tokens own by the caller .
retrieve the dividends own by the caller .
retrieve the token balance of any single address .
retrieve the dividend balance of any single address .
return the sell price of 1 individual token .
return the buy price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
internal function to actually purchase the tokens .
calculate token price base on an amount of incoming ethereum .
only people with profit .
calculate token sell value .
this be where all your gas go .
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
converts all of caller 's dividends to tokens .
alias of sell ( ) and withdraw ( ) .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
method to view the current ethereum store in the contract .
retrieve the total token supply .
transfer token for a specified address .
transfer tokens from one address to another .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
make sure we will send back excess if user send more then 4 ether before 100 eth in contract .
public api .
push add element a last item in array .
itematindex return the item at index .
returns the length of the array .
push add element a last item in array and return the index it be insert at .
replaces item at index with last item in array and resize array accordingly .
pop return last element of array and delete it from array .
popnext keep track of an index that loop through the array and pop the next item so that push pop do n't necessarily return the item you push .
itematindex return the item at index .
returns the length of the array .
returns whether item be contain in dict .
coin functions .
adds an item to the set .
remove an item from the set .
this utilized compact array popnext function to have a rotating pop .
returns the current number of items in the set .
contains bet record for a bet record id .
function that return a bet record for a bet record id .
insert betting record into storage .
retrieve the next bet record .
delete betting record .
returns the number of bet record leave to be process .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"substracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
throws if transaction size be great than the provided amount .
update the dividend balance associate with an account .
transfer token for a specified address .
transfer tokens from one address to another .
deposit ether into the contract for dividend split .
withdraw dividends owe to an address .
throws if call by any account other than the owner .
give a rabbit to a specific user .
"create a new gene and put it up for sale , this operation take place on the server ."
"create a new rabbit , accord to the cooldown ."
set the cooldown for childbirth .
we set the cost of rent our genes .
we set the cost of rent our genes .
private contract .
set up a new address for a private contract .
get the cost of the reward for pair .
for check .
we get cooldown .
get rabbit price .
we be sell rabbit for sale .
remove from sale rabbit .
acquisition of a rabbit from another user .
save some gas by make only one contract call .
call by the owner to set new pause flag pausedpublic ca n't be false while pausedowneradmin be true .
approve should be call when allow _spender 0 .
internal function that mint an amount of the token and assign it to an account .
internal function that burn an amount of the token of a give account .
"internal function that burn an amount of the token of a give account , deduct from the sender 's allowance for say account ."
function to mint tokens .
burns a specific amount of tokens from the target address and decrements allowance .
overrides standardtoken . _burn .
ico contract configuration function new_eth_qco be the new rate of eth in qco to use when no bonus apply newendblock be the absolute block number at which the ico must stop .
emergency pause for the ico .
in case we want to completely abort .
in case of a failed / abort ico every investor can get back their money .
"after the ico have run it course , the withdraw account can drain fund bit-by - bite a need ."
if this contract get a balance in some other erc20 contract - or even iself - then we can rescue it .
end ico function .
transfers tokens hold by timelock to beneficiary .
timestamp function base on https : / / github . com / pipermerriam / ethereum-datetime / blob / master / contract / datetime . sol .
use storage keyword so that we write this to persistent storage .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to mint tokens .
true if tokensale event have end .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
get the balance of an address .
burnes _value number of tokens .
access control modifier that allow only the current owner to call the function .
"transfering the ownership be a two-step process , a we prepare for the transfer by set newowner and require newowner to accept the transfer ."
the newowner finish the ownership transfer process by accept the ownership .
allows a function to be call only when the token contract be not pause .
pauses the token contract .
unpauses the token contract .
overrides of the standard token 's function to add the paused / unpaused functionality .
the initialization method for the token .
the basic fundraiser initialization method .
checks the amount of tokens that an owner allow to a spender .
sets the new conversion rate .
sets the beneficiary of the fundraiser .
create and send tokens to _address consider amount fund and conversionrate .
this overridable function return the current conversion rate for the fundraiser .
this overridable function that calculate the tokens base on the ether amount .
it throw an exception if the transaction do not meet the precondition .
check whether the fundraiser pass endtime .
the initialization method that create a new mintable token .
mint the specific amount tokens .
this function put the initial gas limit .
give permission to _spender to spend _value number of tokens on your behalf .
this function allow the owner to change the gas limit any time during the fundraiser .
the transaction be valid if the gas price limit be lifted-off or the transaction meet the requirement .
forward fund directly to beneficiary .
transfers _value number of tokens to the _to address .
allows another contract to spend tokens on behalf of the _from address and send them to the _to address .
internal function that this reuse by the transfer function .
allows a function to be execute only if mint be still allow .
allows a function to be call only by the minter .
creates new _value number of tokens and send them to the _to address .
disable the mint of new tokens .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
"distribute eth base on fee to com , aff , and p3d ."
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
destroy tokens from other account .
transfer token for a specified address .
transfer tokens from one address to another .
create mintedamount tokens .
transfer all ether hold by the contract to the owner .
withdraw the amount of token that be remain in this contract .
allows the current owner to transfer control of the contract to a newowner .
do the airdrop to msg . sender .
"multiplies two number , throw on overflow ."
function that be call when transaction target be a contract .
burns a specific amount of tokens .
function to mint tokens .
function to stop mint new tokens .
function to check the amount of tokens that an owner allow to a spender .
function to increaseapproval to the spender .
function to decreaseapproval to spender .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
function that be call when transaction target be an address .
burns a specific amount of tokens .
update verifier 's data .
payout to verifier .
manual withdraw fund from a bet after outcome be set .
external view .
math utilities .
make a bet .
increase total fund of a bet .
update odds of a bet .
pause a bet .
reopen a bet .
close a bet and withdraw unused fund .
take a bet .
payout to maker .
payout to taker .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
"multiplies two number , throw on overflow ."
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
burns a specific amount of tokens .
function to mint tokens .
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
modifier to make a function callable only when the contract be not pause .
modifier to make a function callable only when the contract be pause .
"call by the owner to unpause , return to normal state ."
transfer token for a specified address .
participate presale .
participate ico .
calculate time and referral bonus with base tokens .
get time bonus percentage .
claim ibc .
update sale stage manually .
withdraw ether .
burn the remain pool of prediction bonus tokens .
math utilities .
only way to give blackpearlwhale eth be via by use fallback .
number of tokens the contract own .
number of dividends owe to the contract .
eth balance of contract .
a trap door for when someone send tokens other than the intended ones so the overseers can decide where to send them .
solidity hat stack limit .
return all current round info need for front end - functionhash - 0x747dff42 .
return player info base on address .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
"calculate unmasked earn ( just calculate , do not update mask ) ."
return the amount of key you would get give an amount of eth .
return current eth price for x key .
receive name / player info from name contract .
receive entire player name list .
get exist or register new pid .
check to make sure user pick a valid team .
decide if round end need to be run new round start .
end the round .
move any unmasked earn to gen vault .
update round timer base on number of whole key buy .
generate a random number between 0-99 and check to see if thats result in an airdrop win .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
update mask for round and player when key be buy .
"add up unmasked earn , vault earn , set them all to 0 ."
prepare compression data and fire event for buy or reload tx 's .
calculate number of key receive give x eth .
calculate amount of eth receive if you sell x key .
calculate how many key would exist with give an amount of eth .
calculate how much eth would be in contract give a number of key .
filter name string - convert uppercase to lower case .
"multiplies two number , throw on overflow ."
"subtracts two number , throw on overflow ( i . e ."
convert all incoming ethereum to key .
"adds two number , throw on overflow ."
give square root of give x .
give square .
x to the power of y .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
return the price buyer will pay for next 1 individual key .
return time leave .
return player earn per vault - functionhash - 0x63066434 .
register a name .
"players , if you register a profile , before a game be release , or set the all bool to false when you register , use this function to push your profile to a single game ."
"players , use this to push your player profile to all register game ."
players use this to change back to one of your old name .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
batchtransfer token for a specified address .
transfer tokens from one address to another .
send coin .
a contract attempt to get the coin .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and pooh ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
"internal transfer , only can be call by this contract ."
"uint value 0 : amountget , 1 : amountgive , 2 : expire , 3 : nonce , 4 : amount , 5 : tradenonce , 6 : feemake , 7 : feetake address 0 : tokenget , 1 : tokengive , 2 : maker , 3 : taker signature binary v 0 rs 0 rs 1 : signature for order v 1 rs 2 rs 3 : signature for trade ."
use to make sure no one can interact with contract until it have be activate .
solidity hat stack limit .
return all current round info need for front end - functionhash - 0x747dff42 .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
"calculate unmasked earn ( just calculate , do not update mask ) ."
return the amount of key you would get give an amount of eth .
receive name / player info from name contract .
prevent contract from interact with ratscam .
receive entire player name list .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
move any unmasked earn to gen vault .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
set boundaries for incoming tx .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
return time leave .
function to mint tokens .
function to stop mint new tokens .
function to mint tokens .
burns a specific amount of tokens .
"administrators can : - change the name of the contract - change the name of the token - change the pos difficulty ( how many tokens it cost to hold a masternode , in case it get crazy high later ) they can not : - take fund - disable withdrawals - kill the contract - change the price of tokens ."
use to make sure no one can interact with contract until it have be activate .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
"calculate unmasked earn ( just calculate , do not update mask ) ."
return the amount of key you would get give an amount of eth .
return current eth price for x key .
prevent contract from interact with supercard .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
return active flag time .
calculate how much eth would be in contract give a number of key .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
return the price buyer will pay for next 1 individual key .
return player earn per vault - functionhash - 0x63066434 .
"administrators can : - change the name of the contract - change the name of the token - change the pos difficulty ( how many tokens it cost to hold a masternode , in case it get crazy high later ) they can not : - take fund - disable withdrawals - kill the contract - change the price of tokens ."
"multiplies two number , throw on overflow ."
returns a pointer to the execution storage buffer .
returns the location point to by the free memory pointer .
returns the current storage action .
"if the current action be not storing , revert ."
"if the current action be not emit , revert ."
"if the current action be not pay , revert ."
initializes a storage buffer in memory .
checks whether or not it be valid to create a stores action request .
checks whether or not it be valid to create an emits action request .
checks whether or not it be valid to create a pays action request .
runtime getters : .
returns the original sender from memory .
reading from storage : .
checks that a call push a storage destination to the buffer be expect and valid .
checks that a call push a storage value to the buffer be expect and valid .
checks that a call push a payment destination to the buffer be expect and valid .
checks that a call push a payment amount to the buffer be expect and valid .
checks that a call push an event to the buffer be expect and valid .
"subtracts two number , throw on overflow ( i . e ."
begins create a storage buffer - value and locations push will be commit to storage at the end of execution .
sets a pass in location to a value pass in via 'to ' .
sets a previously-passed - in destination in storage to the value .
sets a previously-passed - in destination in storage to the value .
sets a previously-passed - in destination in storage to the value .
sets a previously-passed - in destination in storage to the value .
"decreases the value at some field by a maximum amount , and set it to 0 if there will be underflow ."
begins create an event log buffer - topics and data push will be emit by storage at the end of execution .
begins create a storage buffer - destinations enter will be forward wei before the end of execution .
pushes an amount of wei to forward to the buffer .
"adds two number , throw on overflow ."
"push an address to forward wei to , to the buffer ."
sets the free memory pointer to point beyond all accessed memory .
returns the enum represent the next expected function to be call .
returns the number of events push to the storage buffer .
returns the number of storage slot push to the storage buffer .
returns the number of payment destinations and amount push to the storage buffer .
returns the index address for this exec id .
storage seed for a script executor 's execution permission map .
returns the location of a provider 's list of registered applications in storage .
returns the location of a registered app 's name under a provider .
returns the location of an app 's list of versions .
returns the location of a version 's name .
returns the location of a registered app 's index address under a provider .
"returns the location of an app 's function selectors , register under a provider ."
"returns the location of an app 's implement address , register under a provider ."
returns the location of the version before the current version .
returns storage location of appversion list at a specific index .
registers an application under a give name for the sender .
"sets up contract execution - read execution id and sender from storage and place in memory , create getters ."
replaces the script exec address with a new address .
bytes32 : the late version of the application .
address : the index address of this version .
impl : an address array contain all of this version 's implement address .
sels : a bytes4 array contain all of this version 's function selectors .
sets up contract execution when initialize an instance of the application .
"calls the passed-in function , perform a memory state check before and after the check be execute ."
"calls the passed-in function , perform a memory state check before and after the check be execute ."
"ensures execution complete successfully , and revert the created storage buffer back to the sender ."
returns the storage location of a script execution address 's permissions .
simple init function - set the sender a a script executor for this instance .
returns the location of a provider 's list of registered applications in storage .
returns the location of a registered app 's name under a provider .
returns the location of an app 's list of versions .
returns the location of a version 's name .
returns the location of a registered app 's index address under a provider .
"returns the location of an app 's function selectors , register under a provider ."
"returns the location of an app 's implement address , register under a provider ."
return a list of versions of an app register by the maker .
returns the late version of an application .
"returns a version 's index address , function selectors , and implement address ."
creates an instance of a registry application and return the execution id .
ptr_bounds : the pointer can not be this value and be read from returndata .
length : the value store at that pointer .
"executes the throws action , revert any return data back to the caller ."
"ptr : an updated pointer , point to the end of the pays action request in memory ."
"ptr : an updated pointer , point to the end of the stores action request in memory ."
"ptr : an updated pointer , point to the end of the emits action request in memory ."
"return the bytes4 action requestor store at the pointer , and clean the remain bytes ."
"sets the execution id and sender address in special storage locations , so that they be able to be read by the target application ."
"stores data to a give location , with a key ( exec id ) ."
"new_exec_id : a new , unique execution id pair with the created instance of the application ."
data : the data store at the location after hash .
data_read : the correspond data store in the requested locations .
n_emitted : the number of events emit on behalf of the application .
n_emitted : the number of events emit on behalf of the application .
"returns the index address of an application use a give exec id , or 0x0 if the instance do not exist ."
receives a storage pointer and return the value map to the seed at that pointer .
maps the seed to the value within the execution id 's storage .
receives a storage pointer and map the seed to the value at that pointer .
throws if call by any account that 's not whitelisted .
add an address to the whitelist .
add address to the whitelist .
remove an address from the whitelist .
remove address from the whitelist .
prevent contract from interact with fomo3d .
withdraws all of your earn .
this be the core logic for any buy / reload that happen while a round be live .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
bet detail .
pause the subscriptions .
constructor function .
a trap door for when someone send tokens other than the intended ones so the overseers can decide where to send them .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
token owner can approve for spender to transferfrom ( . . . ) .
check wallet on unfreeze tokens amount .
prevents user to send transaction on his own address .
give deprive permission to a wallet for freeze tokens .
freeze tokens on sender wallet if have permission .
show date in unix time format .
"allow owner to remove any exclusion from certain recipients , allow their lock token balance to be unlockable again ."
allow anyone to check the unlocked and locked token balance of a recipient .
allow anyone to check the a list of all lock token recipients .
allow check of the daily and total amount of unlocked tokens .
a boolean represent whether the function be execute succesfully .
transfer tokens from one address to another .
balanceof function get the balance of the specified address .
allowance function check the amount of tokens allow by an owner for a spender to spend .
totalsupply function return the total supply of tokens .
decimals function return the decimal units of the token .
symbol function return the symbol ticker of the token .
name function return the name of the token .
allow owner to transfer tokens which be lock by default .
allow owner to change the locked balance of a recipient manually .
allow owner to unlock 0 . 2 .
allow owner to exclude certain recipients from have their lock token balance unlock .
the address of the controller be the only address that can call a function with this modifier .
changes the controller of the contract .
function to mint tokens .
fix for the erc20 short address attack .
beneficiary claim tokens hold by time lock .
gets the locked balance of the specified address .
gets the releasetime of the specified address .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
function to check the amount of tokens than an owner allow to a spender .
function to mint tokens .
function to stop mint new tokens .
this method can be use by the owner to extract mistakenly sent tokens to this contract .
this famous algorithm be call exponentiation by square and calculate x n with x a fixed-point and n a regular unsigned .
"this function will return false if invoke during the constructor of a contract , a the code be not actually create until after the constructor finish ."
determine if addr have role .
add a role to an address .
remove a role from an address .
modifier to scope access to a single role ( use msg . sender .
throws if operator be not whitelisted .
add an address to the whitelist .
getter to determine if address be in whitelist .
add address to the whitelist .
remove an address from the whitelist .
remove address from the whitelist .
reverts if not in crowdsale time range .
"crowdsale must be open and we do not accept contribution send from contract because we credit tokens back it might trigger problem , eg , from exchange withdraw contract ."
checks whether the period in which the crowdsale be open have already elapse .
finalize crowdsale .
internal interface ( extensible ) .
perform buytokens action for buyer .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
give an address access to this role .
remove an address ' access to this role .
check if an address have this role / / revert .
check if an address have this role .
revert if addr do not have role .
"the modifier check , if address can send tokens or not at current contract state ."
function to unpause transfer restriction .
transfers tokens hold by timelock to beneficiary .
number of tokens currently belong to the owner of give address .
set new owner for the smart contract .
freeze all token transfer .
unfreeze all token transfer .
a user be able to unintentionally send tokens to a contract and if the contract be not prepared to refund them they will get stick in the contract .
freeze specific account .
"true if tokens be transfer successfully , false otherwise account _to + _value account _to for overflow check which be already in safemath ."
"true if tokens be transfer successfully , false otherwise account _to + _value account _to for overflow check which be already in safemath ."
"true if token transfer be successfully approve , false otherwise ."
number of tokens give spender be currently allow to transfer from give owner .
total number of tokens in circulation .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"true if token transfer be successfully approve , false otherwise ."
"call by the owner , pause ico ."
"call by the owner , resume ico ."
what be the total supply of the ech tokens .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
transfer the balance from owner 's account to another account .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and zaynixkey ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
"implement the functionality , which check whether a transfer go to a contract ."
this function specify the possibility of a complete data set transfer the web3_batch_function explain how you use this function .
false and true a arguments for freeze .
a mention in the erc223 standard you need a function that check whether an receive wallet address be a contract .
gen limit handle .
logic run whenever a reload order be execute .
calc invalid keys by rid pid .
return invalid keys .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
use these to register name .
return player earn per vault - functionhash - 0x63066434 .
this method can be use by the owner to extract mistakenly sent tokens or ether send to this contract .
owner can burn a specific amount of tokens from the target address .
allows the current owner to transfer control of the contract to a newowner .
modifier to make a function callable only when the contract be not pause .
"enable withdrawals , only callable by the owner when the withdrawals be disable ."
"disable withdrawals , only callable by the owner when the withdrawals be enable ."
throws if call by any account other than the whitelister .
only callable by the whitelister .
checks if the specified address be whitelisted .
changes the current whitelister .
sets the usd / eth rate .
sets the threshold .
low level token purchase * * * do not override .
withdraws the tokens .
this method can be use by the owner to extract mistakenly sent tokens or ether send to this contract .
checks how much of elp tokens one can get for the specify usd amount .
gets the usd amount for specify wei amount .
gets the current phase of crowdsale .
modifier to make a function callable only when the contract be stop .
modifier to make a function callable only when the contract be not stop .
"call by the owner to stop , trigger stop state ."
"call by the owner to restart , trigger restart state ."
do n't allow zero address .
custom timelocker method .
standard erc20 compliant transferfrom method .
standard erc20 compliant approve method .
owner may add remove optional locker contract .
owner may fast-forward or delay all timelocks .
show unlock balance .
show lock balance .
standard erc20 compatible balance accessor .
show the timelock periods and locked value .
calculate and handle the timelocks before related operations .
erc20 compliant transfer method .
custom timelocked transfer method .
layout of message : : bytes : offset 0 : 32 bytes : : uint256 - message length offset 32 : 20 bytes : : address - recipient address offset 52 : 32 bytes : : uint256 - value offset 84 : 32 bytes : : bytes32 - transaction hash offset 104 : 20 bytes : : address - contract address to prevent double spend bytes 1 to 32 be 0 because message length be store a little endian .
burn tokens to burnaddress from msg . sender .
_founderswallet wallet of founder .
allows to users withdraw eth in frozen stage .
allows an owner to confirm a change settings request .
allows an owner to confirm freezeng process .
"status of tgr be initially define by the start block of the tgr , if it 's zero then tgr be not live ."
amount of block leave to the end of this stage of tgr .
"keep in mind that internally stage count be start from 0 while user receive it incremented , i . e ."
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
burns a specific amount of tokens from the target address and decrements allowance .
authorize an issuer .
deauthorize an issuer .
function to issue tokens to an address .
function to issue tokens to the caller .
transfer token for a specified address .
creates a new clone token with the initial distribution be this token at _snapshotblock .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
update the dapp by create a new token with new functionalities the msg . sender .
checks whether it can transfer or otherwise throw .
checks modifier and allow transfer if tokens be not lock .
checks modifier and allow transfer if tokens be not lock .
default transferable tokens function return all tokens for a holder ( no limit ) .
grant tokens to a specified address .
revoke the grant of tokens of a specifed address .
revoke all grant of tokens of a specifed address .
calculate the total amount of transferable tokens of a holder at a give time .
check the amount of grant that an address have .
calculate amount of vested tokens at a specifc time .
get all information about a specifc grant .
get the amount of vested tokens at a specific time .
calculate the date when the holder can trasfer all it tokens .
nominate a new owner of this contract .
"the result of subtract y from x , throw an exception in case of overflow ."
true iff multiply x and y would not overflow .
"the result of multiply x and y , throw an exception in case of overflow ."
"a unit factor be divide out after the product of x and y be evaluate , so that product must be less than 2 * * 256 ."
true iff the denominator of x / y be nonzero .
"the result of divide x by y , throw an exception if the divisor be zero ."
throws an exception in case of overflow or zero divisor ; x must be less than 2 256 / unit .
convert an unsigned integer to a unsigned fixed-point decimal .
change the associate contract to a new address .
accept the nomination to be owner .
set erc20 allowance .
set the balance in a give account .
returns the erc20 allowance of one party to spend on behalf of another .
returns the erc20 token balance of a give account .
set the address of the tokenstate contract .
perform an erc20 token transfer .
perform an erc20 token transferfrom .
approves spender to transfer on the message sender 's behalf .
"set the transfer fee , anywhere within the range 0-10 ."
set the address of the user / contract responsible for collect or distribute fee .
set the beneficiary address of this contract .
calculate the fee charge on top of a value be send .
the value that you would need to send so that the recipient receive a specified value .
the amount the recipient will receive if you send a certain number of tokens .
collected fee sit here until they be distribute .
base of transfer function .
erc20 friendly transfer function .
erc20 friendly transferfrom function .
ability to transfer where the sender pay the fee ( not erc20 ) .
ability to transferfrom where they sender pay the fee ( not erc20 ) .
withdraw tokens from the fee pool into a give account .
begin the self-destruction counter of this contract .
donate tokens from the sender 's balance into the fee pool .
override erc20 transfer function in order to check whether the recipient account be frozen .
override erc20 transferfrom function in order to check whether the recipient account be frozen .
the owner may allow a previously-frozen contract to once again accept and transfer nomins .
allow havven to issue a certain number of nomins from an account .
allow havven to burn a certain number of nomins from an account .
terminate and reset the self-destruction timer .
a simple alias to totalvestedaccountbalance : provide erc20 balance integration .
the number of vest date in an account 's schedule .
get a particular schedule entry for an account .
get the time at which a give schedule entry will vest .
get the quantity of havvens associate with a give schedule entry .
obtain the index of the next schedule entry that will vest for a give user .
obtain the next schedule entry that will vest for a give user .
obtain the time at which the next schedule entry will vest for a give user .
obtain the quantity which the next schedule entry will vest for a give user .
withdraws a quantity of havvens back to the havven contract .
"if the self-destruction delay have elapse , destroy this contract and remit any ether it own to the beneficiary address ."
destroy the vest information associate with an account .
add a new vest entry at a give time and quantity to an account 's schedule .
construct a vest schedule to release a quantities of havvens over a series of intervals .
allow a user to withdraw any havvens in their schedule that have vest .
change the paused state of the contract .
true iff add x and y will not overflow .
"the result of add x and y , throw an exception in case of overflow ."
true iff subtract y from x will not overflow in the negative direction .
burns a specific amount of tokens .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
"true if the transaction can buy tokens from presale or ico , include fund cap check ."
true if crowdsale event have end .
burn tokens .
burn tokens on behalf of someone .
transfer to owner any tokens send here by mistake .
approve should be call when allow _spender 0 .
low level token purchase function .
send coin .
"internal transfer , only can be call by this contract ."
sell amount tokens to contract .
transfer tokens .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
freeze ? prevent allow target from send receive tokens .
changes the address of the supported token .
checks the order value by the customer 's address and send require promo tokens base on the received amount of this tokens and eth .
public entry point for the _checkorder function .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow - only owner be allow to send tokens to any address - not owners can transfer the balance only to owner 's address .
allowance be not allow .
approve be not allow .
transferfrom be not allow .
owner can transfer out any accidentally send erc20 tokens .
owner can transfer out promo token .
owner can return specified amount from tokenowner .
return a contract address of the supported token .
owner can return all tokens from tokenowner .
sets price value .
returns current price ( without decimals ) .
total supply .
changes the total supply value .
get the token balance for account tokenowner .
get the order 's balance of tokens for account customer .
delete customer 's order .
allows the user the redeem an amount of karma verify by the oracle .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
internal function .
only owner function .
public function .
function to release tokens already vest of the transaction sender .
function to revoke the beneficiary 's access to unvested tokens .
calculates the amount that have already be vest .
the token price with the fee .
"true if user be winner + name of the win horse ( ltc , btc , eth , . . . ) ."
allows to add a legit owner address for race validation .
allows a user to claim a special horsey with the same dna a the race one .
acquire fund from own contract .
called at the start of withdraw to distribute any pending balance that live in the contract will only ever be call if balance be non-zero ( fund should be distribute ) .
execute the proposal .
add a role to an address .
remove a role from an address .
modifier to scope access to a single role ( use msg . sender .
modifier to scope access to admins / / revert if call not by admin .
modifier to scope access of backend key store on investor 's portal / / revert if call not by backend .
modifier allow call from investors successfully pass kyc verification / / revert if call by investor who do n't pass kyc via investor 's portal .
withdraws all remain ( not sell ) tokens from the crowdsale contract .
called when investor 's portal ( backend ) receive non-ethereum payment .
computes total bonuses amount by value .
calculates amount of tokens by cents .
add admin role to an address .
revoke admin privilege from an address .
add backend privilege to an address .
revoke backend privilege from an address .
mark investor 's address a kyc-verified person .
revoke kyc verification from the person .
calculates and apply bonuses and implement actual token transfer and events .
revert if addr do not have role .
determine if addr have role .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
modifier to check if transfer be allow .
owner can transfer out any accidentally send erc20 tokens .
administrator can mint additional tokens .
administrator can burn tokens .
administrator can allow transfer of tokens .
administrator can disallow transfer of tokens .
owner can add administrators of tokens .
owner can remove administrators of tokens .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
validation of an incoming purchase .
source of tokens .
for sponsor 20 tokens .
returns the topics for a transfer agent status update event .
returns the topics for a crowdsale finalization event .
returns the topics for a token initialization event .
checks input and then create storage buffer for token initialization .
checks input and then create storage buffer for transfer agent update .
checks input and then create storage buffer for reserve token update .
checks input and then create storage buffer for reserve token removal .
checks input and then create storage buffer for reserve token distribution .
checks input and then create storage buffer for crowdsale finalization .
gets number of tokens to distribute .
checks input and then create storage buffer for token distribution .
storage location of crowdsale admin address .
"whether the crowdsale and token be configure , and the sale be ready to run ."
whether or not the crowdsale be post-purchase .
storage location of the amount of tokens sell in the crowdsale so far .
storage location for token name .
storage location for token ticker symbol .
storage location for token decimals .
storage location for token totalsupply .
whether or not the token be unlocked for transfer .
stores the number of address for which tokens be reserve .
stores the index of an address in the reserveddestinations list ( 1-indexed ) .
stores the number of tokens reserve for a destination .
stores the number of percent of tokens sell reserve for a destination .
stores the number of decimals in the previous percentage ( 2 be add by default ) .
ensures the sale be finalize .
ensures that the sender be the admin address .
"ensures that the sender be the admin address , and the sale be not initialize ."
ensures both storage and events have be push to the buffer .
ensures the pending state change will only store .
"ensures the sender be the admin , the sale be initialize , and the sale be not finalize ."
initializes the token to be sell during the crowdsale .
sets the status of an account a a transfer agent .
updates multiple reserve token list .
removes a reserve token list .
"allows anyone to distribute reserved tokens , assume the sale be finalize ."
"allows the admin to finalize the crowdsale , distribute reserve tokens , and unlock the token for transfer ."
"allows anyone to unlock token transfer and distribute reserve tokens , as long a the sale be finalize ."
recover signer address from a message by use their signature .
prefix a bytes32 value with x19ethereum signed message : .
setup function set external contract ' address .
starts auction and set startblock .
changes auction ceiling and start price factor before auction be start .
calculates current token price .
"returns correct stage , even if a function with timedtransitions modifier have not yet be call yet ."
claims tokens for bidder after auction .
calculates stop price .
calculates token price .
private function .
sets the address associate with an ens node .
sets the content hash associate with an ens node .
sets the multihash associate with an ens node .
"sets the name associate with an ens node , for reverse record ."
sets the abi associate with an ens node .
sets the secp256k1 public key associate with an ens node .
sets the text data associate with an ens node and key .
the associated text data .
"x , y the x and y coordinate of the curve point for the public key ."
contenttype the content type of the return value .
the associate name .
the associated content hash .
the associated multihash .
the associated address .
finalize this liability .
xrt emission value for utilized gas .
only lighthouse guard .
parameter can be use only once .
create robot liability smart contract .
create lighthouse smart contract .
is call whan after liability finalization .
append token recipe source alternative .
set sink of token recipe .
run distillation process .
returns the topics for a transfer event .
"ensures the sender be a transfer agent , or that the tokens be unlocked ."
implements the logic for a token transfer .
implements the logic for a token transferfrom .
returns the events and data for an 'approval ' event .
implements the logic to create the storage buffer for a token approval .
implements the logic to create the storage buffer for a token approval .
implements the logic to create the storage buffer for a token approval .
ensures the sale 's token have be initialize .
allows a token holder to transfer tokens to another address .
allows an approved spender to transfer tokens to another address on an owner 's behalf .
approves a spender to spend an amount of your tokens on your behalf .
increases a spender 's approval amount .
decreases a spender 's approval amount .
"call by the owner on emergency , trigger stop state ."
"call by the owner on end of emergency , return to normal state ."
"store sent amount a credit to be pull , call by payer ."
"withdraw accumulate balance , call by payee ."
burn away the specified amount of ant coins .
vesting initialization function .
amount of tokens that can be send .
setup array with vest stag date and percentages .
function for tokens withdrawal from the vest smart contract .
send tokens to withdrawaladdress .
amount of tokens that can be send accord to provide percentage .
percent of tokens allow to be send .
returns the topics for a crowdsale configuration event .
returns the topics for a crowdsale finalization event .
checks input and then create storage buffer for sale initialization .
checks input and then create storage buffer for sale finalization .
checks input and then create storage buffer to create sale tiers .
checks input and then create storage buffer to whitelist address .
checks input and then create storage buffer to update a tier 's duration .
checks input and then create storage buffer to update a tier 's minimum cap .
storage location of the crowdsale 's start time .
"storage location of the amount of time the crowdsale will take , account for all tiers ."
stores the number of tiers in the sale .
stores the name of the tier .
stores the number of tokens that will be sell in the tier .
"stores the price of a token ( 1 * 10 decimals units ) , in wei ."
stores the minimum number of tokens a user must purchase for a give tier .
stores the duration of a tier .
whether or not the tier 's duration be modifiable ( before it have begin ) .
returns the storage location of the tier 's whitelist status .
storage location of the index of the current tier .
storage location of the end time of the current tier .
stores a tier 's whitelist .
stores a spender 's maximum number of tokens allow to be purchase .
stores a spender 's minimum token purchase amount for a give whitelisted tier .
"ensures that the sender be the admin address , and the sale be not initialize ."
"ensures that the sender be the admin address , and the sale be not finalize ."
ensure that the sender be the sale admin .
allows the admin to add additional crowdsale tiers before the start of the sale .
allows the admin to whitelist address for a tier which be setup to be whitelist-enabled .
"allows the admin to update a tier 's duration , provide it be mark a modifiable and have not start ."
allows the admin to update a tier 's minimum purchase amount ( if it be mark modifiable ) .
"allows the admin to initialize a crowdsale , mark it configure ."
"allows the admin to finalize a crowdsale , mark it complete ."
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
transfer balance to owner .
marketplace function .
new round function .
find new villgage .
returns the event topics for a 'purchase ' event .
implements the logic to create the storage buffer for a crowdsale purchase .
reads from storage and return information about the current crowdsale tier .
returns information about the current crowdsale tier .
"returns information about the current crowdsale tier by time , so that storage can be update ."
calculates the amount of wei spend and number of tokens purchase from sale detail .
returns the storage location of the number of tokens sell .
stores the amount of unique contributors so far in this crowdsale .
maps address to a boolean indicate whether or not this address have contribute .
storage location of the total number of tokens remain for purchase in the current tier .
storage location of team fund wallet .
"storage location of amount of wei raise during the crowdsale , total ."
returns the storage location of the total token supply .
ensures both storage and events have be push to the buffer .
"ensures the sale have be configure , and that the sale have not finish ."
allows the sender to purchase tokens .
allows to add a new owner .
allows to remove an owner .
allows to replace an owner with a new owner .
allows to change the number of required confirmations .
allows an owner to submit and confirm a withdraw transaction .
allows an owner to submit and confirm a withdraw token transaction .
allows an owner to submit and confirm a withdraw token transaction .
allows an owner to submit and confirm a withdraw token transaction .
allows an owner to confirm a transaction .
allows an owner to revoke a confirmation for a transaction .
allows anyone to execute a confirmed transaction .
function to send wei to address .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
approves and then call the receive contract .
returns token 's symbol .
token_name : the name of the token .
"returns whether or not an address be a transfer agent , mean they can transfer tokens before the crowdsale be finish ."
num_destinations : the length of the crowdsale 's reserve token destination array .
"destination_list_index : the index in the reserve token destination list where this address be find , plus 1 ."
creates a crowdsale with initial condition .
returns the address of the admin of the crowdsale .
wei_raised : the amount of wei raise in the crowdsale so far .
is_crowdsale_full : whether or not the total number of tokens to sell in the crowdsale have be reach .
returns the number of unique contributors to a crowdsale .
start_time : the start time of the first tier of a crowdsale .
tier_name : the name of the current tier .
tier_name : the name of the return tier .
wei_raise_cap : the maximum amount of wei to raise .
tier_start : the time when the give tier start .
returns the number of tokens sell so far this crowdsale .
minimum_purchase_amt : the minimum ammount of tokens the buyer must purchase .
num_whitelisted : the length of the tier 's whitelist array .
returns the token balance of an address .
returns the amount of tokens a spender may spend on an owner 's behalf .
returns the number of display decimals for a token .
returns the total token supply .
returns the token 's name .
"only end time , onwer can transfer contract 's ether out ."
"if this epoch be the last , then the reward call by the owner ."
"ensures the sender be a transfer agent , or that the tokens be unlocked ."
implements the logic for a token transferfrom .
transfer balance to owner .
transfer the specified amount of tokens to the specify address .
assemble the give address bytecode .
transfer tokens from one address to another .
transfer token for a specified address .
"modifiers - - note , these be function here to allow use a a lib ."
usage : use ixlib for ixiface .
global ix data .
global backend data .
democ specific payment / account data .
democ getters .
we want to be able to call outside contract ( e . g .
reclaim all erc20basic compatible tokens .
safety feature if admins go bad or something .
"this be internal so contract can all it , but not expose anywhere in this contract ."
library meta .
"always allow scs to upgrade themselves , even after lockdown ."
base scs .
global funcs .
db lookup helper .
init ballot .
allow the owner to reveal the secret key after ballot conclusion .
functions constructor function - init core params on deploy timestampts be uint64s to give u plenty of room for millennia .
note : test only .
add a new bbfarm .
getters for backends .
admin methods .
this be one way only ! .
democ getters - deprecate .
only way a democ admin can deploy a ballot .
internal logic around add a ballot .
check an account have pay up enough for this ballot .
base contract overload .
owner democ admin function .
preferably for emergencies only .
user democ admin function .
what svindex use to add a ballot .
democ getters .
util for calculate editor key .
base scs .
financial calculations .
account management .
account status - getters .
admin utils for account .
admin setters global .
global getters .
payments stuff .
sets the address associate with an ens node .
sets the content hash associate with an ens node .
"sets the name associate with an ens node , for reverse record ."
sets the abi associate with an ens node .
sets the secp256k1 public key associate with an ens node .
sets the text data associate with an ens node and key .
ballot submission note : if use_enc then curve25519 key should be generate by client for each ballot ( then throw away ) .
true if the contract implement the requested interface .
this skip the check perform by _addvote .
boundaries for construct the msg we 'll validate the signature of .
send / withdraw _amount to _payee .
updates _currentprice .
transfers the current balance to the owner and terminate the contract .
purchase _tokenid .
decrease the amount of tokens that an owner allow to a spender .
transfer tokens from one address to another .
the owner can use this function to force the exit of an investor from the contract during an emergency withdrawal in the following situations : .
modifier to allow action only when the contract is pause .
modifier to allow action only when the contract is not pause .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
transfer token for a specified address when not pause .
transfer tokens from one address to another when not pause .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
returns the event topics for a 'purchase ' event .
implements the logic to create the storage buffer for a crowdsale purchase .
calculate current purchase rate .
"calculates amount to spend , amount leave able to be spend , and number of tokens purchase ."
returns the storage location of number of tokens remain in crowdsale .
returns the storage location of crowdsale 's starting sale rate .
returns the storage location of crowdsale 's end sale rate .
storage location of the minimum amount of tokens allow to be purchase .
whether or not the sale be whitelist-enabled .
stores the sale 's whitelist .
stores a spender 's maximum number of tokens allow to be purchase .
stores a spender 's minimum token purchase amount .
"ensures the sale have be configure , and that the sale have not finish ."
make a proposal and add to pending proposals .
returns whether the specify token exist .
approves another address to transfer the give token id .
transfers the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
internal function to clear current approval of a give token id .
internal function to invoke onerc721received on a target address .
gets the token name .
gets the token symbol .
returns an uri for a give token id .
internal function to set the token uri for a give token .
internal function to remove a token id from the list of a give address .
stores a horsey name .
guarantees msg . sender .
checks msg . sender .
set minimum price .
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
total supply .
get the token balance for account tokenowner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
token owner can approve for spender to transferfrom ( . . . ) .
checks input and then create storage buffer to configure sale token .
checks input and then create storage buffer to update minimum .
checks input and create storage buffer to update sale whitelist .
checks input and create storage buffer to set crowdsale start time and duration .
checks input and then create storage buffer for transfer agent update .
checks input and then create storage buffer for sale initialization .
checks input and then create storage buffer for sale finalization .
"whether the unsold tokens will be burn on finalization , or be send to the team wallet ."
"ensures that the sender be the admin address , and the sale be not initialize ."
"ensures that the sender be the admin address , and the sale be not finalize ."
allows the admin to update the global minimum number of tokens to purchase .
allows the admin to whitelist address for the sale .
initializes the token to be sell during the crowdsale .
allows the sale admin to set the sale start time and duration ( if it have not start yet ) .
send coin .
mint new coin by send ether .
function to mint tokens .
function to mint frozen tokens .
transfer token for a specified address .
transfer token for a specified address .
transfer tokens from one address to another .
transfer tokens from one address to another .
burns a specific amount of tokens .
low level token purchase * * * do not override .
reverts if not in crowdsale time range .
checks whether the period in which the crowdsale be open have already elapse .
extend parent behavior require to be within contribute period .
extend parent behavior require purchase to respect the fund cap .
count of bonuses in list .
count of members in archive .
allows the current owner to transfer token 's control to a newowner .
"finalization task , call when owner call finalize ( ) ."
validation of an incoming purchase .
overrides delivery by mint tokens upon purchase .
add bonuses for users .
allow load refund back on the contract for the refund .
buyers can claim refund .
basic token functions .
return the balance of an specified account .
transfer function .
erc20 token functions .
extended functionalites .
emit new tokens .
revert a transfer in case of error .
returns the storage location of crowdsale 's max number of tokens to sell .
creates a crowdsale with initial condition .
wei_raised : the amount of wei raise in the crowdsale so far .
is_crowdsale_full : whether or not the total number of tokens to sell in the crowdsale have be reach .
start_time : the start time of the crowdsale .
start_rate : the price of 1 token ( 10 decimals ) in wei at the start of the sale .
current_rate : the price of 1 token ( 10 decimals ) currently .
returns the total number of tokens sell during the sale so far .
minimum_purchase_amt : the minimum ammount of tokens the buyer must purchase .
num_whitelisted : the length of the sale 's whitelist .
"in case of _pending true , the function will check the loanspending ."
retorna el balance en tokens del banco .
asigna un valor al loan para ser comprado por otro banco .
permite comprar con tokens un loan .
funcion interna para intercambiar el dueño del loan .
en caso de pasar true como parametro revisa las deudas aun no aprobadas .
crear portolio .
agregar loan to portfolio .
funciones del usuario .
esta funcion e llamada por el cliente para pedir un prestamo .
"esta funcion e llamada por el cliente , cuando el banco central ( estado ) le otorga el dinero ."
esta funcion e llamada por cliente para saber cuantos tokens le quedan disponibles .
"funcion llamada por el banco owner del loan , permite saldar la deuda ."
increase the amount of tokens that an owner allow to a spender .
transfer token for a specified address .
transfer tokens from one address to another .
allows the current owner to transfer control of the contract to a newowner .
function to mint tokens .
function to stop mint new tokens .
change owner addr to crowdsale contract to enable mint if successful the crowdsale contract will reset owner to token_owner .
available only to whitelisted address after startblock .
"available to contributers after deadline and only if unfunded if contributer use a different address a _beneficiary , only this address can claim refund ."
"a owner , whitelist individual address ."
"in case where fund be not pay in eth to this contract , a owner , whitelist and give tokens to address ."
"withdraw funds only if fund , a owner ."
revert if addr do not have role .
determine if addr have role .
add a role to an address .
remove a role from an address .
modifier to scope access to a single role ( use msg . sender .
give an account access to this role .
remove an account 's access to this role .
check if an account have this role / / revert .
check if an account have this role .
add an address to the whitelist .
getter to determine if address be in whitelist .
add address to the whitelist .
remove an address from the whitelist .
remove address from the whitelist .
time check modifier .
check modifier on the collected hardcap .
ico completion function .
the function of change the minimum purchase amount of tokens .
"true if execution of transfer be successful , false otherwise ."
"true if execution of transfer be successful , false otherwise ."
backwards compatible transfer function to satisfy erc20 .
transfer function that be call when transaction target be an address .
transfer function that be call when transaction target be a contract .
"update the addresslut list of address by check if the address be in the list already , and if not , add the address to the list ."
self-destruct function for this contract .
getter methods for basic contract info .
the total supply of this coin .
toggle beingedited status of this account .
the balance of the give account .
check if the give address be a contract .
owner mint new coin the sender of this message must be the owner / minter / creator of this contract .
returns total supply of issue tokens .
returns balance of address .
transfers tokens from your address to other .
approve other address to spend tokens on your account .
a contract attempt to get the coin .
see if address have enough sdc .
see if address have enough sdc .
custom timelocked method .
xrt emission value for utilized gas .
"change the signer or lif token address , only call by owner ."
add a refund policy .
change a refund policy .
"increase the amount of room offer , only call by owner ."
"book a room for a certain address , internal function ."
cancel a book .
"withdraw tokens and eth , only from owner contract ."
book a room pay with eth .
book a room pay with lif .
get the total room for a room type .
prefix a bytes32 value with x19ethereum signed message : and hash the result .
get a book information .
get the availability of a specific room .
get the available room for certain nights .
get the first available room for certain nights .
number of tokens that can be purchase with the specified _usdcents .
return the current stage of sale .
burn the unsold tokens .
finalize the crowdsale . after .
set the value of ether price in cents . can .
validation of the capped restrictions .
source of tokens .
function that be call when transaction target be a contract .
"transfer function , revert if the contract be pause ."
"transferfrom function , revert if the contract be pause ."
"approve function , revert if the contract be pause ."
"increaseapproval function , revert if the contract be pause ."
"decreaseapproval function , revert if the contract be pause ."
check if the give address be a contract address .
add contract address to tokenfallbackwhitelist .
remove contract address from tokenfallbackwhitelist .
modifiers mitigate short address attack thank to https : / / github . com / numerai / contract / blob / c182465f82e50ced8dacb3977ec374a892f5fa8c / contract / safe . sol l30-l34 .
burns a specific amount of tokens .
end : events .
end : constructor .
end : overriden methods .
allows the current owner to transfer control of the contract to a newowner .
returns number of tokens own by give address .
allows allow third party to transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
add or delete admin .
modifier for pause constract .
call by the owner to set new pause flag pausedpublic ca n't be false while pausedowneradmin be true .
if active balance be not enought .
active balance of address .
lock one address one address only be lock at the same time .
transfer and lock this value only call by admins ( limit when setlock ) .
"transfer to multi account if need multi account with diffient value , please create a help contract ."
modifier for some action only owner can do .
modifier for some action only admin or owner can do .
change this constract 's owner .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
get the account balance for an address .
transfer the balance from owner 's account to another account .
allow _spender to withdraw from your account up to _amount .
spender of coin transfer coin from the owner 's balance .
returns the amount of coin approve by the owner that can be transfer by spender .
granting / mint of market coin by owner .
granting / mint of company bonus coin by owner .
"burn the provide the _value , can be use only by the owner of the contract ."
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
use to make sure no one can interact with contract until it have be activate .
solidity hat stack limit .
return all current round info need for front end - functionhash - 0x747dff42 .
return player info base on address .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
"calculate unmasked earn ( just calculate , do not update mask ) ."
return the amount of key you would get give an amount of eth .
return current eth price for x key .
receive name / player info from name contract .
prevent contract from interact with fomodd .
receive entire player name list .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
move any unmasked earn to gen vault .
update round timer base on number of whole key buy .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
update mask for round and player when key be buy .
set boundaries for incoming tx .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
return the price buyer will pay for next 1 individual key .
return time leave .
return player earn per vault - functionhash - 0x63066434 .
owner can transfer eth from contract to address .
basic entry point for buy insurance .
sets buy price for insurance .
sets tokens contract address from which check balance of tokens .
returns address of tokens contract from which check balance of tokens .
transfer erc20 tokens from contract to address tokensamount - 18 decimals .
function to mint tokens .
function to stop mint new tokens .
allows the current owner to transfer control of the contract to a newowner .
if token transfer .
transfer token for a specified address .
transfer tokens from one address to another .
oraclizeaddrresolveri constant public oar oraclize_setnetwork ( ) ; .
returns a slice contain the entire string .
"returns a slice contain the entire bytes32 , interpret a a null-terminated utf-8 string ."
returns a new slice contain the same data a the current slice .
copies a slice to a new string .
returns the length in run of the slice .
returns true if the slice be empty ( have a length of 0 ) .
"returns a positive number if other come lexicographically after self , a negative number if it come before , or zero if the content of the two slice be equal ."
returns true if the two slice contain the same text .
"extracts the first rune in the slice into rune , advance the slice to point to the next rune and return self ."
oraclizei constant public oraclize oraclizei ( oar . getaddress ( ) ) ; .
"returns the first rune in the slice , advance the slice to point to the next rune ."
returns the number of the first codepoint in the slice .
returns the keccak-256 hash of the slice .
returns true if self start with needle .
"if self start with needle , needle be remove from the begin of self ."
returns true if the slice end with needle .
"if self end with needle , needle be remove from the end of self ."
"returns the memory address of the first byte of the first occurrence of needle in self , or the first byte after self if not find ."
"returns the memory address of the first byte after the last occurrence of needle in self , or the address of self if not find ."
modifies self to contain everything from the first occurrence of needle to the end of the slice .
internalize w / o experimental .
modifies self to contain the part of the string from the start of self to the end of the first occurrence of needle .
"splits the slice , set self to everything after the first occurrence of needle , and token to everything before it ."
"splits the slice , set self to everything after the first occurrence of needle , and return everything before it ."
"splits the slice , set self to everything before the last occurrence of needle , and token to everything after it ."
"splits the slice , set self to everything before the last occurrence of needle , and return everything after it ."
counts the number of nonoverlapping occurrences of needle in self .
returns true if self contain needle .
returns a newly allocate string contain the concatenation of self and other .
"joins an array of slice , use self a a delimiter , return a newly allocate string ."
internalize w / o experimental .
allows the current owner to transfer control of the contract to a newowner .
"just check if can be roll and update balance , not calculate here ."
internalize w / o experimental .
"do the calculation return : success , isend , winer , tax ."
tlsnotary for oraclize call .
internalize w / o experimental .
"set to internal do n't cause major increase in deployment and save gas per use , for this tiny function ."
expect 0x prefix .
use to make sure no one can interact with contract until it have be activate .
prevent contract from interact with fomo3d .
set boundaries for incoming tx .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
withdraws all of your earn .
use these to register name .
return the price buyer will pay for next 1 individual key .
return time leave .
return player earn per vault - functionhash - 0x63066434 .
solidity hat stack limit .
return all current round info need for front end - functionhash - 0x747dff42 .
return player info base on address .
logic run whenever a buy order be execute .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
return the amount of key you would get give an amount of eth .
return current eth price for x key .
receive name / player info from name contract .
receive entire player name list .
get exist or register new pid .
get exist or register new pid .
check to make sure user pick a valid team .
decide if round end need to be run new round start .
end the round .
move any unmasked earn to gen vault .
update round timer base on number of whole key buy .
generate a random number between 0-99 and check to see if thats result in an airdrop win .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
update mask for round and player when key be buy .
"add up unmasked earn , vault earn , set them all to 0 ."
prepare compression data and fire event for buy or reload tx 's .
prepare compression data and fire event for buy or reload tx 's .
transfer token for a specified address .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
verify that address be sign with needed private key .
verify that claim params be correct and the link key be n't use before .
withdraw tokens to receiver address if withdraw params be correct .
get boolean if link be already claim .
withdraw ether back deposit to the smart contract .
modifier to make a function callable only when the contract be not stop .
modifier to make a function callable only when the contract be stop .
"call by the owner to pause , trigger stop state ."
transfer tokens from one address to another .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
interface declaration .
burn extra tokens from a balance .
interface marker .
allow the token holder to upgrade some of their tokens to a new contract .
set an upgrade agent that handle .
change the upgrade master .
allows the current owner to transfer control of the contract to a newowner .
limit token transfer until the crowdsale be over .
owner can lock a particular address ( a crowdsale contract ) .
the function can be call only before or after the tokens have be releasesd .
the function can be call only by a whitelisted release agent .
create new tokens and allocate them to an address . .
make sure we be not do yet .
allow upgrade agent functionality kick in only if the crowdsale be success .
owner can update token information here .
here the owner can reclaim the tokens from a participant if the token be not release yet .
fix for the erc20 short address attack .
destroy tokens .
destroy tokens from other account .
total supply .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
freeze ? prevent allow from from send receive tokens .
"internal transfer , only can be call by this contract ."
"internal transfer , only can be call by this contract ."
batch detach function .
function to facilitate detachment when contract be pause .
set attachment time period ( this restrict user from continuously trigger detachment ) .
detach asset from system .
batch function to detach multiple assets .
function to update attach value .
helps a wallet to create a sale use our sale contract .
batch function to put 10 or less collectibles on sale .
approves another address to transfer the give token id .
sets or unsets the approval of a give operator .
tells whether an operator be approve by a give owner .
transfers the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
returns whether the give spender can transfer a give token id .
internal function to mint a new token .
internal function to burn a specific token .
internal function to clear current approval of a give token id .
internal function to add a token id to the list of a give address .
internal function to remove a token id from the list of a give address .
internal function to invoke onerc721received on a target address .
"the user / developper need to add the tokenid , in the end of url , to use the uri and get all detail ."
gets the token id at a give index of the tokens list of the requested owner .
gets the total amount of tokens store by the contract .
gets the token id at a give index of all the tokens in this contract .
internal function to set the token uri for a give token .
internal function to add a token id to the list of a give address .
internal function to remove a token id from the list of a give address .
gets the token name .
gets the token symbol .
internal function to mint a new token .
internal function to burn a specific token .
introspection interface a per erc-165 ( https : / / github . com / ethereum / eips / issue / 165 ) .
for create nft .
gets attribute of nft .
operation modifiers for limit access only to managers .
operation modifiers for limit access to only banker .
operation modifiers for any operators .
operation modifier for any other manager .
assigns a new address to act a the primary manager .
assigns a new address to act a the secondary manager .
assigns a new address to act a the banker .
assigns a new address to act a the other manager .
modifier to allow action only when the contract is not pause .
modifier to allow action only when the contract is pause .
modifier to allow action only when the contract have error .
called by any operator role to pause the contract .
unpauses the smart contract .
errors out the contract thus mkaing the contract non-functionable .
removes the error hold from the contract and resume it for work .
internal function to update player override id .
an internal method that help in generation of new nft collectibles .
"internal function , helps in update the creation stop time ."
internal function to update mlb player id .
internal function to update asset earnedby value for an asset / token .
guarantees msg . sender .
add an address to the approved list .
remove an address from approved list .
the generation of an asset if limit via the generationseasoncontroller .
helps in create seed collectible . the .
helps in redeem the rewards use our oracle .
"helps to generate collectibles / tokens / asset and transfer to eth cards , which can be redeem use our web-app . the ."
sets the address for the nft contract .
checks msg . sender .
"used to mark the smart contract a upgraded , in case of a issue ."
checks msg . sender .
returns the teamid associate with the asset / collectible / token .
returns the position of the asset / collectible / token .
returns the gamecard associate with the asset / collectible / token .
returns isattached property value for an asset / collectible / token .
returns the ability of an asset / collectible / token from attribute .
updates the gamecardid properrty of the asset .
adds an attachment to collectible .
removes all attachments from collectible .
transfers the ownership of nft from one address to another address .
gets the balance of the specified address .
"the user / developper need to add the tokenid , in the end of url , to use the uri and get all detail ."
sets the player override identifier .
updates the generation season controller .
_value of 1 : mean generation of collectible be allow .
updates the generation season dict .
gets the mlb player id from the player attribute .
gets the attachments for an asset .
helps in update the earned _by property of an asset / token .
batch function to create assets .
batch function to create assets .
gets the owner of the specify token id .
helps in trasnferring assets .
batch trasnfer with multpple to address .
batch transferfrom with the same to from address .
batch safetransferfrom with multiple from and to addresses .
batch safetransferfrom from a single address to another address .
batch function to approve the spender .
facilitates batch approveall .
"a wallet can request to detach it collectible , so , that it can be use in other third-party contract ."
attaches the collectible to our contract .
batch attach function .
destroy tokens .
destroy tokens from other account .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
"true if function execute successfully , false otherwise ."
allows for the bonus to be change at any point in time by the owner of the contract .
"true if function execute successfully , false otherwise ."
"true if function execute successfully , false otherwise ."
the total amount of credit the address have ( minus any bonus credit ) .
the total amount of bonus credit the address have ( minus non-bonus credit ) .
the total amount of credit the address have ( bonus + non-bonus credit ) .
the total amount of eth balance the address have .
"true if function execute successfully , false otherwise ."
"true if function execute successfully , false otherwise ."
the erc20 token allowance from token owner to this contract .
"true if function execute successfully , false otherwise ."
allows for refund to be make by the owner of the contract .
"true if function execute successfully , false otherwise ."
"true if function execute successfully , false otherwise ."
invoked internally by the airdrop function .
"true if function execute successfully , false otherwise ."
any function with this modifier in it method signature can only be execute by the owner of the contract .
allows for the transfer of ownership to another address ; .
"true if the token be query have not use it 100 first free trial drop , false otherwise ."
the total remain free trial drop of a token .
"true if function execute successfully , false otherwise ."
the maximum number of recipients per transaction .
user register a link .
anyone can finalize a round .
count elhts track by this contract .
actually perform the safetransferfrom .
do the real transfer with out any condition check .
card creation .
one specific attribute of the equipment modify .
equiment attribute modify ( max 4 stats modify ) .
equipment destruction .
safe transfer by trust contract .
get fashion attrs by tokenid .
get tokenids and flag by owner .
search for token quantity address .
elht token info return base on token id transfer ( 64 at most ) .
find the owner of an elht .
transfers the ownership of an elht from one address to another address .
transfers the ownership of an elht from one address to another address .
"transfer ownership of an elht , '_to ' must be a vaild address , or the elht will lose ."
set or reaffirm the approved address for an elht .
enable or disable approval for a third party ( operator ) to manage all your asset .
get the approved address for a single elht .
"true if _operator be an approved operator for _owner , false otherwise ."
called by any operator role to pause the contract .
this be public rather than external so it can be call by derived contract .
returns true if the claimant own the token .
transfers an erc721 token own by this contract to another address .
adds an sale to the list of open sales .
adds an sale to the list of open sales .
cancels an sale ( give the collectibleid be not 0 ) .
removes an sale from the list of open sales .
returns true if the ft ( erc721 ) be on sale .
returns current price of an ft ( erc721 ) on sale .
computes the current price of an sale .
computes owner 's cut of a sale .
this be public rather than external so we can call super . unpause .
"remove all ether from the contract , which be the owner 's cut as well a any ether send directly to the contract address ."
"internal function , help in create team sale ."
this be a state-modifying function that can be call while the contract be pause .
this be a state-modifying function that can be call while the contract be pause .
fetches the detail relate to the sale .
returns the current price of an sale .
calculates the new price for sale item .
put a collectible up for sale .
put a collectible up for sale .
transfers the balance of the sales manager contract to the cslcollectible contract .
function to chnage the ownercut only accessible by the owner of the contract .
creates a new collectible and create an auction for it .
creates a new collectible and create an auction for it .
creates team sale auction .
computes the next auction start price .
work the same a default bid method .
sets the address for the nft contract .
added this module to allow retrieve of accidental asset transfer to contract .
added this module to allow retrieve of accidental asset transfer to contract .
creates new seed team colelctibles .
this be a state-modifying function that can be call while the contract be pause .
helps to toggle batch support flag .
operation modifiers for limit access .
batching operation : creates a new collectible and create an auction for it .
operation modifiers for limit access to only banker .
operation modifiers for access to any manager .
assigns a new address to act a the gm .
assigns a new address to act a the gm .
assigns a new address to act a the banker .
"return the product of multiply _x by _y , assert if the calculation overflow ."
withdraw tokens hold by the contract and send them to an account can only be call by the owner .
send coin throw on any error rather then return a false flag to minimize user errors .
an account / contract attempt to get the coin throw on any error rather then return a false flag to minimize user errors .
"allow another account / contract to spend some tokens on your behalf throw on any error rather then return a false flag to minimize user errors also , to minimize the risk of the approve / transferfrom attack vector ( see https : / / docs . google . com / document / d / 1ylptqxzu1uavo9cz1o2rpxbbt0mooh4dykja_jp-rlm / ) , ."
allow execution only when transfer be n't disable .
disable / enable transfer can only be call by the contract owner .
increase the token supply and send the new tokens to an account can only be call by the contract owner .
remove tokens from an account and decrease the token supply can be call by the contract owner to destroy tokens from any account or by any holder to destroy tokens from his / her own account .
"send coin throw on any error rather then return a false flag to minimize user errors in addition to the standard check , the function throw if transfer be disable ."
allow execution by the owner only .
"an account / contract attempt to get the coin throw on any error rather then return a false flag to minimize user errors in addition to the standard check , the function throw if transfer be disable ."
allow transfer the contract ownership the new owner still need to accept the transfer can only be call by the contract owner .
use by a new owner to accept an ownership transfer .
verify that an amount be great than zero .
validate an address - currently only check that it be n't null .
verify that the address be different than this contract address .
"return the sum of _x and _y , assert if the calculation overflow ."
"return the difference of _x minus _y , assert if the subtraction result in a negative number ."
modifier to only allow the execution of certain function restrict to the owners .
change bet expect time .
change bet expect start time .
change bet expect end time .
"determine the outcome manually , immediately ."
callback from oraclize .
returns the total amount bet for the sender .
returns whether a user have withdraw money or not .
"returns whether win collections be now available , or not ."
returns true if we can bet ( in bet window ) .
function for user to bet on launch outcome .
empty remainder of the value in the contract to the owners .
performs payout to owners .
"cancel bet and relase all the bet back to the better if , for any reason , payouts can not be complete ."
"function that let better collect their money , either if the bet be cancel , or if they win ."
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
modifier to only allow empty the remain value of the contract to owners .
"modifier to only allow the collection of bet payouts when winner be determine , ( or withdrawals if the bet be cancel ) ."
modifier to only allow the execution of owner payout when winner be determine .
modifier to only allow the execution of certain function when bet be close .
safe math functions .
transfer tokens from one address to another .
release tokens of an individual address .
true if investors can buy at the moment .
true if crowdsale event have end .
"must be call after crowdsale end , to do some extra finalization work ."
auto refund tokens .
refund tokens of a single address .
approve should be call when allow _spender 0 .
function to mint tokens .
function to mint tokens .
must be call to start the crowdsale .
release tokens .
send ether to the fund collection wallet .
send ether to the fund collection wallet .
must be call to start the crowdsale .
the function initialize a group with a release date .
add new account with locked token balance to the specify group id .
allows an account to be release if it meet the time constraints of the group .
the initialization method .
extends the transaction validation to check if the value this high than the minumum cap .
we validate the new amount do n't surpass maximum contribution cap .
the initialization method .
adds additional check if the hard cap have be reach .
overrides the method from the default fundraiser contract to additionally check if the hardcap be reach .
finalizes the fundraiser .
override this function to add extra work when a fundraiser be finalize .
sets the beneficiary address .
deposits eth into the refund safe .
closes the refund safe .
moves the refund safe into a state of refund .
refunds a participant in the fundraiser .
the constructor .
defines the abstract function from basefundraiser to add the fund to the refundsafe .
checks if the soft cap be reach by the fundraiser .
"if the fundraiser fail to reach the soft cap , participants can use this method to get their ether back ."
overrides the setbeneficiation fucntion to set the beneficiary of the refund safe .
overrides the default function from finalizablefundraiser to check if soft cap be reach and appropriatelly allow refund or simply close the refund safe .
disable mint upon finalization .
source of tokens .
approves another address to transfer the give token id .
"gets the approved address for a token id , or zero if no address set ."
sets or unsets the approval of a give operator .
tells whether an operator be approve by a give owner .
returns whether the give spender can transfer a give token id .
transfers the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
internal function to invoke onerc721received on a target address .
count nfts track by this contract .
enumerate valid nfts .
enumerate nfts assign to an owner .
a descriptive name for a collection of nfts in this contract .
an abbreviated name for nfts in this contract .
a distinct uniform resource identifier ( uri ) for a give asset .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
guarantees msg . sender .
checks msg . sender .
gets the balance of the specified address .
gets the owner of the specify token id .
returns whether the specify token exist .
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
people be allow to withdraw only if min .
gets champ 's reward in wei .
move champ reward to pending withdrawal to his wallet .
is call from from attack function after the winner be already choose .
address _from be msg . sender .
distribute input fund between contract owner and players .
set the rate for each stage .
set the wallet address in case of emergency .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
override the mintable token modifier to add role base logic .
add a minter role to an address .
remove a minter role from an address .
function to mint tokens .
allows the current owner to transfer control of the contract to a newowner .
function to mint tokens .
throws if call by any account that 's not a superuser .
getter to determine if address have superuser role .
allows the current superuser to transfer his role to a newsuperuser .
allows the current superuser or owner to transfer control of the contract to a newowner .
use to make sure no one can interact with contract until it have be activate .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
prevent contract from interact with fomo3d .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
filter name string - convert uppercase to lower case .
withdraws all of your earn .
return player earn per vault - functionhash - 0x63066434 .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
approve should be call when allow _spender 0 .
allows the current owner to transfer control of the contract to a newowner .
function to mint tokens .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer .
mine your own 0xbtclove functions ! ! .
function to mint tokens .
close the token sale and transfer ownership .
get time left .
"integer division of two number , truncate the quotient ."
"true if tokens be create successfully , false otherwise ."
tells whether an operator be approve by a give owner .
transfers the ownership of a give token id to another address .
returns whether the give spender can transfer a give token id .
internal function to invoke onerc721received on a target address .
gets the token id at a give index of the tokens list of the requested owner .
"this function will return false if invoke during the constructor of a contract , a the code be not actually create until after the constructor finish ."
function to access name of token .
function that be call when transaction target be a contract .
function to access symbol of token .
function to access decimals of token .
function to access total supply of tokens .
transfer balance to owner .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
modifier to check if transfer be allow .
administrator can mint additional tokens .
administrator can burn tokens .
modifier to check admin status .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
allows the current owner to transfer control of the contract to a newowner .
freeze ? prevent allow target from send receive tokens .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
use to make sure no one can interact with contract until it have be activate .
logic run whenever a buy order be execute .
gen limit handle .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
"calculate unmasked earn ( just calculate , do not update mask ) ."
return the amount of key you would get give an amount of eth .
return current eth price for x key .
get exist or register new pid .
decide if round end need to be run new round start .
move any unmasked earn to gen vault .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
add wy 2018-8 - 10 end .
calculate how much eth would be in contract give a number of key .
withdraws all of your earn .
return the price buyer will pay for next 1 individual key .
return player earn per vault - functionhash - 0x63066434 .
function to access total supply of tokens .
function to access option pool of tokens .
function to access option option pool total of tokens .
function to access option option pool total max of tokens .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
returns balance of the _owner .
public function ( anyone can call ) .
function for stakeholders ( debtor or creditor ) .
functions for creditor .
"internal transfer , only can be call by this contract ."
buy tokens from contract by send ether .
sell amount tokens to contract .
transfer tokens .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
destroy tokens from other account .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
freeze ? prevent allow target from send receive tokens .
modifier - the sender must be the contract administrator .
returns a list of execution ids under which the give app name be deploy .
uint : the number of instance deploy by the deployer .
"indx : the index address for the registry application - contain getters for the registry , as well a it init funciton ."
index : the index address of the instance - hold the app 's getter function and init function .
success : whether execution succeed or not .
returns the first 4 bytes of calldata .
exec_id : the execution id under which the registry will store data .
registers an application a the admin under the provider and registry exec id .
registers a version of an application a the admin under the provider and registry exec id .
success : the success of the call to the application 's updateinstance function .
success : the success of the call to the application 's updateexec function .
configure various default for a script exec contract .
"checks to see if an error message be return with the failed call , and emit it if so ."
checks data return by an application and return whether or not the execution change state .
allows the exec admin to set the registry exec id from which applications will be initialize .
allows the exec admin to set the provider from which applications will be initialize in the give registry exec id .
allows the admin to set a new admin address .
register a name .
get the customer 's tx of payment for mcw data - amount of kwh which be record in the tx .
get the customer 's tx of payment for mcw data - timestamp of payment for mcw which be record in the tx .
get the customer 's tx of payment for mcw data - tx of payment for kwh which be record in the tx .
get the customer 's tx of payment for mcw data - timestamp of payment for kwh which be record in the tx .
check the customer 's tx of payment for mcw .
check if the customer 's tx of payment for mcw be spend .
check the customer 's tx of payment for kwh .
get the customer 's tx of payment for mcw by tx payment for kwh .
owner can add a new customer to registry .
owner can add a new tx of payment for mcw to the customer 's txregistry .
owner can mark a customer 's tx of payment for mcw a spend .
get the current amount of customers .
get the customer 's address from customers list by index .
get the customer 's txregistry contract .
check the customer 's address .
get the customer 's tx of payment for mcw amount .
get the customer 's tx of payment for mcw from customer 's tx list by index .
get the customer 's tx of payment for mcw data - tx of original mcw transfer in ethereum network which be record in the tx .
get the customer 's tx of payment for mcw data - amount of mcw tokens which be record in the tx .
get the customer 's tx of payment for mcw data - amount of kwh which be record in the tx .
get the customer 's tx of payment for mcw data - timestamp of payment for mcw which be record in the tx .
get the customer 's tx of payment for mcw data - tx of payment for kwh which be record in the tx .
get the customer 's tx of payment for mcw data - timestamp of payment for kwh which be record in the tx .
check the customer 's tx of payment for mcw .
check if the customer 's tx of payment for mcw be spend .
check the customer 's tx of payment for kwh .
get the customer 's tx of payment for mcw by tx payment for kwh .
owner can add a new tx of payment for mcw to the customer 's txregistry .
owner can mark a customer 's tx of payment for mcw a spend .
get the customer 's tx of payment for mcw amount .
get the customer 's tx of payment for mcw from customer 's tx list by index .
get the customer 's tx of payment for mcw data - tx of original mcw transfer in ethereum network which be record in the tx .
get the customer 's tx of payment for mcw data - amount of mcw tokens which be record in the tx .
a simple setter function .
you can call it anything you want .
functions with this modifier can only be execute by the owner .
burning tokens .
what be the total supply of the ech tokens .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
in case the ownership need to be transfer .
transfer tokens from the from account to the to account .
transfer owner to new address .
accept the ownership .
total supply .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer by owner .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
mint tokens .
initialize to prepare for sale .
initialize to prepare for sale .
"internal transfer , only can be call by this contract ."
buy ticket of the lottery .
withdraw game 's earn .
ending the game : 1 ) we calculate the winner address 2 ) we update earn array 3 ) we reset variables .
helpers : cool way to manage big array with limited gas .
"internal transfer , only can be call by this contract ."
transfer tokens .
owner can transfer out any accidentally send erc20 tokens .
return free tokens .
return release tokens .
return allocate tokens .
calculate release tokens by the owner .
call by the owner to alloc the release tokens .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
gets the total amount of tokens store by the contract .
gets the balance of the specified address .
gets the list of tokens own by a give address .
gets the approved address to take ownership of a give token id .
transfers the ownership of a give token id to another address .
approves another address to claim for the ownership of the give token id .
claims the ownership of a give token id .
mint token function .
burns a specific token .
tells whether the msg . sender .
internal function to clear current approval and transfer the ownership of a give token id .
internal function to clear current approval of a give token id .
internal function to add a token id to the list of a give address .
internal function to remove a token id from the list of a give address .
modifier for accessibility to add deposit .
grant ace to deposit heroes .
revoke ace to deposit heroes .
modifier for accessibility to deploy a hero on a location .
grant ace to deploy heroes .
revoke ace to deploy heroes .
modifier for accessibility to define new hero type .
grant ace to mint heroes .
revoke ace to mint heroes .
mint tokens with _amount to the address .
get the class 's entire infomation .
get the class 's name .
get the class 's rank .
get the heroes ever mint for the class .
get the hero 's entire infomation .
get the hero 's class id .
get the hero 's name .
get the hero 's level .
get the hero 's location .
get the time when the hero become available .
get the hero 's bp .
get the hero 's require gold for level up .
get the hero 's require exp for level up .
get the deposit of gold of the player .
get the token id of the player 's th token .
get the total bp of the player .
set the hero 's name .
set the address of the contract that represent erc20 gold .
set the required golds to level up a hero .
set the required golds to level up a hero .
define a new hero type ( class ) .
"mint a new hero , with _heroclassid ."
"set where the heroes be deploy , and when they will return ."
add exp .
add deposit .
level up the hero with _tokenid .
transfer deposit ( with the allowance pattern . ) .
withdraw deposit .
return a pseudo random number between low and upper bound .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
destroy tokens from other account .
set the price of summon a hero with eth .
set blacklist .
function that be call when try to use plat for payments from approveandcall .
pay with plat .
summon a hero .
return a pseudo random number between low and upper bound .
allows the pendingowner address to finalize the transfer .
constructor function .
constrctor function .
"internal transfer , only can be call by this contract ."
transfer tokens from one address to another .
function to burn tokens .
safemath start .
erc20interface end .
call by the owner to start the crowdsale .
returns the rate of tokens per wei at the present time .
low level token purchase * * * do not override .
validation of an incoming purchase .
override to extend the way in which ether be convert to tokens .
call by the owner to withdraw unsold tokens .
"transfer owner right , can use only owner ( the best practice of secure for the contract ) ."
airdrop batch with lock .
vip batch with lock .
send token with lock .
send initial tokens .
accept tranfer owner right .
admin tool .
lock tokens or lock 0 to release all .
batch lock or lock 0 to release all .
batch lock amount with array .
withdraw tokens only after crowdsale end .
overrides parent by store balance instead of issue tokens right away .
"must be call after crowdsale end , to do some extra finalization work ."
checks whether the cap have be reach .
extend parent behavior require purchase to respect the token cap .
overrides parent to increase the number of tokenssold .
returns the rate of wei per token at the present time .
overrides parent method take into account variable rate .
allows the owner to update the address of the to-be - write foi token contract .
validate that enough ether be send to buy at least one token .
public function for get the number of tokens _weiamount contribute would purchase .
overrides parent method take into account the token cap .
calculates how many tokens have not be sell in the pre-sale .
gets the balance of the specified address .
"overrides parent to calculate how much extra wei be send , and issue a refund ."
overrides parent to forward the complete balance to the wallet .
overrides parent to only allow withdraw after the pre-sale have be finalize .
overrides parent to perform custom finalization logic .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
modifier to make a function callable only when the contract be not fuse .
overriding pause ( ) such that we use the fuse functionality .
function to set the value of the fuse internal variable .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
approve should be call when allow _spender 0 .
low level token purchase function .
true if the transaction can buy tokens .
true if crowdsale event have end .
update token contract .
transfer tokens .
allows the current owner to transfer control of the contract to a newowner .
sets a new owner address .
modifier throw if call by any account other than the pendingowner .
allows the current owner to set the pendingowner address .
allows the pendingowner address to finalize the transfer .
tells the version name of the current implementation .
throws if call by any account other than the owner .
tells the address of the owner .
disapprove investors in bulk .
throws if call by any account other than the validator .
allows the current validator to transfer control of the contract to a newvalidator .
updates whitelist contract address .
updates token fee for approve a transfer .
updates fee recipient address .
updates token name .
updates token symbol .
transfer request .
transferfrom request .
approve transfer / transferfrom request .
reject transfer / transferfrom request .
true if investor be approve .
approve an investor .
approve investors in bulk .
disapprove an investor .
transfer request .
transferfrom request .
low level token purchase function .
true if crowdsale event have end .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
"must be call after crowdsale end , to do some extra finalization work ."
updates whitelist contract address .
buy tokens request .
approve buy tokens request .
reject buy tokens request .
claim back ether if buy tokens request be reject .
updates token contract address .
transfer ownership of the token contract .
erc 20 standard token interface transfer function .
erc 20 standard token interface transfer function .
change owner address ( where ico eth be be forward ) .
only owner can kill .
return player earn per vault - functionhash - 0x63066434 .
this be the core logic for any buy / reload that happen while a round be live .
end the round .
generate a random number between 0-99 and check to see if thats result in an airdrop win .
"distribute eth base on fee to com , aff , and p3d mark by 33 ."
distribute eth base on fee to gen and pot .
tells whether an operator be approve by a give owner .
safely transfer the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
returns whether the give spender can transfer a give token id .
internal function to mint a new token .
internal function to invoke onerc721received on a target address .
throws if call by any account other than the owner .
modifier throw if call by any account other than the manager .
modifier throw if call by any account other than the pendingowner .
allows the current owner to set the pendingowner address .
allows the pendingowner address to finalize the transfer .
sets the manager address .
gets the token name .
gets the token symbol .
returns an uri for a give token id .
gets the token id at a give index of the tokens list of the requested owner .
gets the token id at a give index of all the tokens in this contract .
internal function to set the token uri for a give token .
internal function to remove a token id from the list of a give address .
internal function to mint a new token .
implement supportsinterface ( bytes4 ) use a lookup table .
private method for register an interface .
"call by the owner to unpause , return to normal state ."
"withdraw accumulate balance , call by payee ."
called by the payer to store the send amount a credit to be pull .
introspection interface a per erc-165 ( https : / / github . com / ethereum / eips / issue / 165 ) .
"transfer a player own by another address , for which the call address have previously be grant transfer approval by the owner ."
"this function will return false if invoke during the constructor of a contract , a the code be not actually create until after the constructor finish ."
"call by the owner to pause , trigger stop state ."
transfers the ownership of a give token id to another address .
close a deed and refund a specified fraction of the bid value .
close a deed and refund a specified fraction of the bid value .
start an auction for an available hash .
start multiple auction for good anonymity .
submit a new seal bid on a desired hash in a blind auction .
start a set of auction and bid on one of them .
submit the properties of a bid to reveal them .
cancel a bid .
finalize an auction after the registration date have pass .
the owner of a domain may transfer it to someone else at any time .
"after some time , or if we 're no long the registrar , the owner can release the name and get their ether back ."
submit a name 6 character long or less .
allows anyone to delete the owner and resolver record for a ( subdomain of ) a name that be not currently own in the registrar .
"transfers the deed to the current registrar , if different from this one ."
accepts a transfer from a previous registrar ; stub out here since there be no previous registrar implement this interface .
"this function will return false if invoke during the constructor of a contract , a the code be not actually create until after the constructor finish ."
state transition for name : .
determines if a name be available for registration yet .
returns available date for hash .
hash the value require for a secret bid .
"assign the owner in ens , if we 're still the registrar ."
returns the maximum of two unsigned integers .
returns the minimum of two unsigned integers .
returns the length of a give string .
constrctor function .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
destroy tokens from other account .
total supply .
get the token balance for account tokenowner .
transfer the balance from token owner 's account to 'to ' account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
return the address of the contract owner .
"call by the owner to unpause , return to normal state ."
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
throws if call by any account other than the owner .
"call by the owner to pause , trigger stop state ."
"sweep out any other erc20 tokens that get send to the contract , send to the manager ."
be they part of a community .
key with a specific label .
get the name of an account .
get the address of an account alias .
check if user be verify .
return the total that this user have donate .
manager may drain the eth on the contract .
guard overflow by make 0 an impassable barrier .
guard underflow by make 0 an impassable barrier .
only the manager can verify account .
manager can set minimum donation price to purchase an alias .
"names can be set by anyone for a donation , manager do this for free in order to reserve name ."
"allows a user to specify a key map to a label , useful for pki , not a good place to share a symmetric key ."
joining a community allow the community to credit or debit your aviv and vip balance .
leaving a community prevent that community from credit or debit your aviv and vip balance .
total number of claimants .
check eth balance of this contract .
check balance of this smart contract .
admin fuction to add claimants .
recover tokens tha be not claim .
this method can be use by admin to extract eth accidentally send to this smart contract .
public function - to be call by people claim reward .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
burning capable account .
"true if burnt successfully , false otherwise ."
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
owner can withdraw ether if token receive .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
return all current round info need for front end - functionhash - 0x747dff42 .
return player info base on address .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
generate a random number between 0-99 and check to see if thats result in an airdrop win .
"distribute eth base on fee to com , aff , and rp1 ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
filter name string - convert uppercase to lower case .
convert all incoming ethereum to key .
x to the power of y .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
return player earn per vault - functionhash - 0x63066434 .
addition to erc20 token methods .
addition to erc20 token methods .
addition to erc20 token methods .
addition to standardtoken methods .
addition to standardtoken methods .
function to mint tokens .
function to stop mint new tokens .
buy tokens from contract by send ether .
sell amount tokens to contract .
create mintedamount tokens and send it to target .
function to distribute tokens to the msg . sender .
check if msg . sender .
check for global lock status to be unlocked .
check for address lock to be unlocked .
allows token issuer to lock token transfer for an address .
allows token issuer to lock token transfer for an address .
allows token issuer to unlock token transfer for an address .
"transfer _value token to _to from msg . sender , ."
send _value token to _to from _from on the condition that global token lock and individual address lock in the from account be both release .
transfer tokens from one address to another .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
returns balance of the _owner .
total supply .
get the token balance for account tokenowner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
the isowner constructor set the original owner of the contract to the sender account .
this method must never be call by smart contract code .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"substracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
access modifier for ceo-only functionality .
assigns a new address to act a the ceo .
withdraw dev cut .
function to distribute tokens to the list of address by the provided amount .
bancorcontract public bancortradingcontract bancorcontract ( 0x8fff721412503c85cffef6982f2b39339481bca9 ) ; .
getters to allow the same blacklist to be use also by other contract ( include upgraded flyingcash ) .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
deprecate current contract in favour of a new one .
deprecate current contract if favour of a new one .
issue a new amount of tokens these tokens be deposit into the owner address .
redeem tokens .
fix for the erc20 short address attack .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens than an owner allow to a spender .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
transfer tokens from one address to another .
transfers the current balance to the owner and terminate the contract .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
"erc20 transferfrom , modify such that an allowance of max_uint represent an unlimited amount ."
send vnet token .
rescue compatible erc20basic token .
withdraw ether .
restrict to the current owner .
disable trade .
"play central banker and set the fractional reserve ratio , from 1 to 1000000 ppm ."
"audit the reserve balance , in the base token and in ether ."
get the sell price base on the order size .
sell tokens for ether .
approveandcall flow for sell entry point .
variant of sell for one step order .
restrict to any admin .
add an admin with basic privilege .
transfer ownership .
remove an admin .
deposit tokens to the reserve .
withdraw tokens from the reserve .
withdraw ether from the reserve .
enable trade .
we use parameter '_tokenid ' a the divisibility .
allows to remove an owner .
allows to replace an owner with a new owner .
allows to change the number of required confirmations .
allows an owner to submit and confirm a transaction .
allows an owner to confirm a transaction .
allows an owner to revoke a confirmation for a transaction .
allows anyone to execute a confirmed transaction .
returns the confirmation status of a transaction .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
returns number of confirmations of a transaction .
transfer participation to a new owner .
returns total number of transactions after filers be apply .
returns list of owners .
"returns array with owner address , which confirm transaction ."
returns list of transaction ids in defined range .
create new first commons forum .
"turn on this contract to be tradable , so owners can transfer their token ."
helper function ( internal function ) .
add the divisibility to new owner .
remove divisibility from last owner .
remove divisibility from last owner .
withdraw ether from this contract to multi sigin wallet .
allows to add a new owner .
helper function for calculateeggssincelasthatch .
add an address to the whitelist .
remove an address from the whitelist .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
destroy tokens .
destroy tokens from other account .
"internal transfer , only can be call by this contract ."
an uint256 represent the amount own by the passed address .
a uint256 specify the amount of tokens still available for the spender .
allows the current owner to transfer control of the contract to a newowner .
fix for the erc20 short address attack .
batch token transfer .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
"burns a token , reduce the current number of kts by 1 ."
the modifer to regulate a kt 's decomposability .
this be for get the ether back to the contract owner 's account .
for check how many tokens you own .
for check the owner of the give token .
the private helper function for transfer ownership .
this method can be call if you be the token owner and you want to transfer the token to someone else .
an approve user can 'claim ' a token of another user .
the user to be approve must be approve by the current token holder .
this method be for decompose ( or split ) a token .
this function be for merge 2 tokens .
the creator of kts .
this method be for edit your personal note ! .
"pauses a token , do by krypital ."
"unpauses a token , do by krypital ."
appends a byte array to the end of the buffer .
appends a byte to the end of the buffer .
appends a byte to the end of the buffer .
the callback function be call by oraclize when the result be ready the oraclize_randomds_proofverify modifier prevent an invalid proof to execute this function code : the proof validity be fully verify on-chain .
owner check modifier .
holder balance .
holder to spender allowance .
asset decimals .
only owner can call it .
emits erc20 transfer event on this contract .
emits erc20 approval event on this contract .
asset implementation contract address .
asset implementation contract address .
freeze-time start .
asset implementation contract .
register user .
discard user registration .
create group .
change group status .
add users in group .
remove users in group .
check be user register .
check be user in group .
check be group exist .
get current group name .
execution be allow only by authorize contract .
update access manager address .
sign in contract .
sign out contract .
register new policy rule .
remove policy rule .
add transaction .
delete transaction .
accept transaction .
allow access only for oracle .
decline transaction .
revoke user vote for transaction .
revoke vote for transaction .
check transaction status .
check policy detail .
check policy include target group .
check be policy exist .
check be transaction exist .
sign current transaction and add it to transaction pending queue .
return pending manager address .
only platform be allow to call .
add emission provider .
remove emission provider .
add burn man .
remove burn man .
update a profiterole address .
update a treasury address .
update pending manager address .
check target address be service .
checks user be holder .
only current asset owner be allow to call .
"returns holder id for the specified address , create it if need ."
adds new address equivalent to holder .
remove an address own by a holder .
change operational status for holder .
changes text for holder .
updates limit per day for holder .
updates limit per month for holder .
change country limit .
only asset implementation contract assign to sender be allow to call .
asset total supply .
transform with fee of treatz token .
simple single-sig function modifier .
kill the contract send everything to _to .
outside-visible transact entry point .
multi-sig function modifier : the operation must have an intrinsic hash in order that later attempt can be realise a the same underlying operation and thus count a confirmations .
revokes a prior confirmation of the give operation .
replaces an owner _from with another _to .
gets an owner by 0-indexed position ( use numowners a the count ) .
reset the amount already spend today .
check to see if there be at least _value leave from the daily limit today .
determine today 's index .
gets share ( in percents ) the user have on provide date .
gets user balance that be deposit .
gets amount of lock deposit for user .
gets list of lock up deposit with date when they will be available to withdraw .
gets total amount of bmc-day accumulated due provide date .
makes a checkpoint to start count a new period .
guards function only for distributionsource invocations .
sets new treasury address .
sets new wallet address for profiterole .
add distribution source to whitelist .
removes distribution source from whitelist .
allows to withdraw user 's bonuses that he deserve due to treasury share for every distribution period .
gets total amount of bonuses user have during all distribution periods .
gets an amount of bonuses user have for concrete distribution date .
gets total amount of deposit that have leave after users ' bonus withdrawals .
gets an amount of deposit that have leave after users ' bonus withdrawals for select date .
makes checkmark and deposit tokens on profiterole account to pay them later a bonuses for treasury share holders .
allow access only for oracle .
add oracles to whitelist .
removes oracles from whitelist .
only profiterole contract allow to invoke guarded function .
deposits tokens on behalf of users .
withdraws deposit tokens on behalf of users .
allowed only for contract owner .
allowed only for contract owner .
call destroy ( address tokens ) instead .
allowed only for reward .
allowed only for reward .
allowed only for reward .
"internal transfer , only can be call by this contract ."
only for function that return bool success before any change make .
generic substitution for require ( ) .
buy a country directly from the contract for the calculated price which ensure that the owner get a profit .
transferring a country to another owner will entitle the new owner the profit from buy .
"unlocks erc721 behaviour , allow for trade on third party platforms ."
"function be virtual , and mean to be overridden ."
"function be virtual , and mean to be overridden ."
only assigned proxy be allow to call .
"function be final , and must not be override ."
"function be final , and must not be override ."
"function be final , and must not be override ."
init function for atxasset .
performs transfer call on the platform by the name of specified sender .
performs allowance transfer call on the platform by the name of specified sender .
"function be final , and must not be override ."
todo need additional check : not clear check of country limit : .
"function be virtual , and mean to be overridden ."
modifier to make a function callable only by the owner of the contract .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
set the ico_contract .
recover signer address from a message by use their signature .
"reclaim an expired , non-empty swap into a multisig ."
withdraw ether and delete the htlc swap .
withdraw ether and delete the htlc swap .
prefix a bytes32 value with x19ethereum signed message : .
send ether out of this contract to multisig owner and update or delete entry in multisig map .
send ether out of this contract to swap beneficiary and update or delete entry in swap map .
initialise and reparametrize multisig .
deposit msg . value .
convert swap from multisig to htlc mode .
withdraw ether and delete the htlc swap .
withdraw ether and delete the htlc swap .
"reclaim all the expire , non-empty swap into a multisig ."
transfer the ether to the beneficiaryaddress .
allow founder to end the private sale .
allow founder to set the token contract address .
allow founder to start the presale .
allow founder to start the crowdsale phase1 .
allow founder to start the crowdsale phase2 .
allow founder to start the crowdsale phase3 .
allow founder to change the minimum investment of ether .
allow founder to change the ether rate .
return the state base on the timestamp .
return the rate base on the state and timestamp .
calculate the number of tokens to be transfer to the investor address base on the invested ethers .
transfer the tokens to the investor address .
allow founder to end the crowsale and transfer the remain tokens of crowdfund to the company address .
set the token contract address .
user can withdraw there airdrop tokens if address exist in the whitelist .
founder can withdraw the remain tokens of airdrop contract .
set the airdrop contract address .
check whether the address be in the whitelist .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
allows the current owner to transfer control of the contract to a newowner .
"internal transfer , only can be call by this contract ."
track who be the customer make the payment so we can send thank you email .
allow anonymous contributions to this crowdsale .
"invest to tokens , recognize the payer and clear his address ."
"invest to tokens , recognize the payer ."
finalize a succcesful crowdsale .
allow to ( re ) set finalize agent .
set policy do we need to have server-side customer ids for the investments .
set policy if all investors must be clear on the server side first .
set the base eth cap .
set the max eth per address .
allow crowdsale owner to close early or extend the crowdsale .
allow to ( re ) set price strategy .
allow to change the team multisig address in the case of emergency .
allow load refund back on the contract for the refund .
crowdfund state machine management .
this be for manual test of multisig wallet interaction .
limit token transfer until the crowdsale be over .
called once by crowdsale finalize ( ) if the sale be success .
make an investment .
preallocate tokens for the early investors .
allow anonymous contributions to this crowdsale .
called from invest ( ) to confirm if the curret investment do not break our cap rule .
we be sell out when our approve pool become empty .
get the amount of unsold tokens allocate to this contract ; .
transfer tokens from approve ( ) pool to the buyer .
protection against short address attack .
transfer token for a specified address .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
approve should be call when allow _spender 0 .
token distribution .
peterson 's law protection .
calculate the current price for buy in amount .
allow the token holder to upgrade some of their tokens to a new contract .
set an upgrade agent that handle .
allows to change the daily limit .
returns if amount be within daily limit and reset spenttoday after one day .
returns maximum withdraw amount .
allows anyone to execute a confirmed transaction .
transfer ownership now transfer all owners tokens to new owner .
release tokens for advisors .
after ico close it help to lock tokens for pool .
sell amount tokens to contract .
destroy tokens .
destroy tokens from other account .
initializing the round .
we check whether we collect the necessary minimum fund .
collected fund for the current round .
returns the amount of fee for both phase .
returns the percentage of the bonus on the current date .
returns the percentage of the bonus on the give date .
remove the pause of exchange .
enable the pause of exchange .
"issue of tokens for the zero round , it be usually call : private pre-sale ( round 0 ) ."
pause of sale .
"for example - after 5 years of the project 's existence , all of u suddenly decide collectively ( company + investors ) that it would be more profitable for everyone to switch to another smart contract responsible for tokens ."
"if a little more than a year have elapse ( round2 start date + 400 days ) , a smart contract will allow you to send all the money to the beneficiary , if any money be present ."
"we accept payments other than ethereum ( eth ) and other currencies , for example , bitcoin ( btc ) ."
the function for obtain smart contract fund in eth .
transfers the fund of the investor to the contract of return of fund .
check for the possibility of buy tokens .
check for the ability to finalize the round .
the logic of finalization .
the manager freeze the tokens for the team .
transfers tokens hold by timelock to beneficiary .
only allow to execute before the token sale be close .
the trade will open when this be set to true .
whitelist an address so it 's able to transfer before the trade be open .
trading limit - require the token sale to have close .
function to check the amount of tokens that an owner allow to a spender .
buy tokens from contract by send ether .
transfer the specified amount of tokens to the specify address .
send _value token to _to from msg . sender .
lock tokens .
start timer .
release lock tokens .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
sell or transfer the token .
the the game status .
finish the game .
start the game .
end the game with game final result .
reset team token state .
reset team state and recalculate the price .
gets the balance of the specified address .
function to check the amount of tokens that an owner allowed_ to a spender .
transfer token for a specified address .
allows the current owner to transfer control of the contract to a newowner .
total number of tokens in existence .
transfer token for a specified address .
reduce sender balance and token total supply .
calculate the amount of tokens an address can use .
modifiers check if the address can transfer tokens .
transfer tokens from one address to another .
approves and then call the receive contract .
"internal transfer , only can be call by this contract ."
destroy tokens .
destroy tokens from other account .
allows the current owner to transfer control of the contract to a newowner .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
avoid short address attack .
transfer token for a specified address .
approve should be call when allow _spender 0 .
constructor function .
send coin .
transfer token for a specified address .
transfer tokens from one address to another .
low level token purchase * * * do not override .
source of tokens .
allows the current owner to transfer control of the contract to a newowner .
total supply .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
approves and then call the receive contract .
checks the amount of tokens leave in the allowance .
"call by the owner , pause ico ."
"call by the owner , resume ico ."
what be the total supply of the ech tokens .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
transfer the balance from owner 's account to another account .
transfer the balance from owner 's account to another account .
withdraw any eth inside .
burns a specific amount of tokens .
allows the current owner to transfer control of the contract to a newowner .
function to mint tokens .
throws if call by any account other than the owner .
adding new owners .
deleting owners .
reverts if beneficiary be not whitelisted .
adds single address to whitelist .
adds list of address to whitelist .
removes single address from whitelist .
extend parent behavior require beneficiary to be in whitelist .
returns the cap per a user .
returns the amount contribute so far by a sepecific user .
extend parent behavior require purchase to respect the user 's fund cap .
extend parent behavior to update user contributions .
throws if call by any account other than the owner .
adds single address to blacklist .
adds list of address to blacklist .
removes single address from blacklist .
get address who have bonus tokens .
distribute bonus tokens to address who have bonus tokens .
to transfer token contract ownership .
owner can transfer out any erc20 tokens send in by mistake .
transfer tokens from one address to another .
function to mint tokens .
function to distribute tokens to the list of address by the provided amount .
function to distribute tokens to the msg . sender .
transfer token for a specified address .
unset a tweedentity .
returns the keccak256 of the app nickname .
returns the appid .
returns the user-id associate to a wallet .
returns the user-id associate to a wallet a a unsigned integer .
returns the address associate to a user-id .
returns the timestamp of last update by address .
returns the timestamp of last update by user-id .
private methods .
sets the manager .
sets new manager .
sets new manager .
sets the app .
checks if a tweedentity be upgradable .
sets a tweedentity .
"any non-contract address can call this function and begin play addresswars ! please note that a there be a lot of write to storage operations , this function will be quite expensive in term of gas so keep that in mind when send your transaction to the network ! 350k gas should be enough to handle all of the storage operations but metamask will give a good estimate when you initialize the transaction in order to enlist in addresswars , you must first pay the enlistingfee ( free for beta ! ) ."
this be where you can wager one of your address for a certain amount .
"this be the main battle function of the contract , it take the card address you wish to claim as well a your card choices a input ."
wallet functions .
helper functions .
getter functions .
"substracts two number , throw on overflow ( ie if subtrahend be great than minuend ) ."
fix for the erc20 short address attack .
function wrapper to check for allocation lock .
function wrapper to check for allocation lock .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
function to check the amount of tokens than an owner allow to a spender .
stop transactions from team member allocations during lock period .
true if the current timestamp be before the allocation lock period .
is the spender address one of the cryphos team ? .
function wrapper to check for allocation lock .
returns natural exponential function value of give x .
returns whether an add operation cause an overflow .
returns whether a subtraction operation cause an underflow .
returns whether a multiply operation cause an overflow .
returns sum if no overflow occur .
returns difference if no overflow occur .
returns product if no overflow occur .
transfers sender 's tokens to a give address .
allows allow third party to transfer tokens from one address to another .
returns natural logarithm value of give x .
returns number of allow tokens for give address .
returns number of tokens own by give address .
returns total supply of tokens .
trickers the update process via the proxymaster for a new address _mastercopy update be only possible after 30 days .
execute the update process via the proxymaster for a new address _mastercopy .
set minter .
change owner / creator of the contract .
mints owl .
burns owl .
locks gno inside this contract and mint owl for gno if endtime be not past .
returns base 2 logarithm value of give x .
withdraws lock gno if endtime be past .
returns maximum of an array .
returns whether an add operation cause an overflow .
returns whether a subtraction operation cause an underflow .
returns whether a multiply operation cause an overflow .
returns sum if no overflow occur .
returns difference if no overflow occur .
returns product if no overflow occur .
get freeze count .
get freeze end date and freezing balance for the freezing portion specify by index .
freeze your tokens to the specify address .
release first available freeze tokens .
mint the specified amount of token to the specify address and freeze it until the specified date .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
function to mint tokens .
gets the store manage the specify app .
returns true if the registry look ready .
sets new manager .
"sets a wallet a customer service to perform emergency removal of wrong , abused , squatted tweedentities ( due , for example , to hack of the twitter account ) ."
internal getters .
gets the app-id associate to a nickname .
allows other contract to check if a store be set .
return a numeric code about the upgradability of a couple wallet-uid in a certain app .
returns the address of a store .
returns the address of any customerservice account .
sets a new identity .
unsets an existent identity .
allow the sender to unset it existent identity .
update the minimum time before allow a wallet to update it data .
sets a store to be use by the manager .
sets the claimer which will verify the ownership and call to set a tweedentity .
sets a new claimer during update .
allow a wallet to claim ownership of an account .
receive the call from oraclize .
private methods .
"in case one of u die , we need to replace ourselves ."
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
calculate token sell value .
"administrators can : - change the name of the contract - change the name of the token - change the pos difficulty ( how many tokens it cost to hold a masternode , in case it get crazy high later ) they can not : - take fund - disable withdrawals - kill the contract - change the price of tokens ."
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
transfer specify amount of wei the owner .
increases end time by specified amount of second .
throws if crowdsale time be not start or finish .
approves token mint for specified investor .
declines token mint for specified investor .
sets rate if it be not set earlier .
change the address for the specified role .
could be call only from withdraw address .
amount of tokens that could be send .
"date : date of stage in unix timestamp format . , ."
setup array with vest stag date and percents .
main method for withdraw tokens from vest .
set initial tokens balance when make a first withdraw .
send tokens to withdrawaddress .
amount of tokens that could be send accord to provide percentage .
this be a constructor function which mean the following function name have to match the contract name declare above .
burning tokens .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
call from crowdsale : .
burns a specific amount of tokens .
function to mint tokens .
reissue your tokens .
modifier to make a function callable only when the contract be not pause .
add a wallet ignore the exchange pause .
"call by the owner to pause , trigger stop state ."
0 - destruct 1 - close 2 - restart 3 - refund 4 - calc 5 - update exchange .
call from crowdsale : .
remove multiple address from the investorlist .
function below this line be onlyowner .
public function .
determines whether the give transfer be possible .
function below this line be onlyledger let the ledger send transfer events ( the most obvious case be when we mint directly to the ledger and need the transfer ( ) events to appear in the token ) .
function below this line be onlytoken .
starts the 2-step process of change ownership .
function below this line be onlyowner .
todo : not sure if this function should stay long term .
send receive tokens to anyone .
function below this line be onlycontroller .
"walks through the list of tokenlots for the give address , attempt to find amount tokens that can be transfer ."
set liven .
withdraw all of the ether to owner .
withdraw some of the ether to owner .
withdraw tokens to owner .
completes the process of transfer ownership to a new owner .
function below this line be onlyowner .
function below this line be public .
function below this line be onlypayloadsize .
function below this line be onlycontroller .
"sets the authorization for a transfer to occur between the 'from ' and 'to ' address , to expire at the 'expiry ' time ."
returns the expiration time for the transfer authorization between the give address .
throws if call by any account that 's not investorlisted .
getter to determine if address be in investorlist .
getter for address role if address be in list .
returns a boolean indicate if the give address be in the list with the give role .
add single address to the investorlist .
add multiple address to the investorlist .
remove single address from the investorlist .
only owners can generate a forwarder .
get deployed forwarders .
modifier that will execute internal code block only if the sender be among owners .
execute a token transfer of the full balance from the forwarder token to the parent address .
it be possible that fund be send to this address before the contract be deploy .
utility internal function use to safely transfer value tokens from - to .
"utility function , which act the same a approve ( . . . ) , ."
"same a approveviasignature , but for approveandcall ."
"tokendistributor be authorize to distribute tokens to the party who participate in the token sale by the time the lastmint function be trigger , which close the ability to mint any new tokens forever ."
the last mint that will ever happen .
erc20 tokens be not design to hold any other tokens ( or ether ) on their balance .
"utility function that allow to change the rescueaccount address , which can rescue tokens accidentally send to this smart contract address ."
"utility internal function use to safely transfer value1 tokens from - to1 , and value2 tokens from - to2 , minimize gas usage ( call internaltransfer twice be more expensive ) ."
internal method that make sure that the give signature correspond to a give data and be make by signer .
utility costly function to encode bytes hex representation a string .
transfer value tokens to to address from the account of sender .
this function distincts transaction signer from transaction executor .
allow spender to take value tokens from the transaction sender 's account .
"same a transferviasignature , but for approve ."
"transfer value tokens to to address from the from account , use the previously set allowance ."
"same a transferviasignature , but for transferfrom ."
only the owner of contract .
the contributor .
record trio transfer schedule to _contributor .
remove schedule by _cid and _sids .
all the schedule of _cid .
the schedule .
"withdraw trio token balance from contract account , the balance will transfer to the contract owner ."
auto transfer all schedules .
transfer the ownership to other - only the owner can operate .
accept the ownership from last owner .
the contributor be valid .
the schedule be valid .
record _contributor .
remove contributor by _cid .
record _contributors .
remove contributor by _cids .
all the contributors .
only owners can generate a forwarder .
create new forwarder .
modifier that will execute internal code block only if the sender be among owners .
function to be fire by the initpgomonthlyinternalvault function from the gotcrowdsale contract to set the .
allows a sender to transfer vested tokens to the beneficiary 's address .
transfers vest tokens to the sender 's address .
allows to check an investment .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
override vestedamount from pgomonthlyinternalvault .
this method can be override to enable some sender to buy token for a different address .
transfers vest tokens to parkingo wallet .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
mints unlock tokens to unlockedliquiditywallet and assings tokens to be hold into the internal reserve vault contract .
sets the state of the internal monthly lock vault contract and mint tokens .
sets the state of the reserve presale vault contract and mint reserve presale tokens .
"mint all token collect by second private presale ( call reservation ) , all kyc control be make outside contract under responsability of parkingo ."
allows the owner to close the crowdsale manually before the end time .
"allows the owner to unpause tokens , stop mint and transfer ownership of the token contract ."
calculates the price a tokens / ether base on the corresponding bonus bracket .
implements the icoengineinterface .
implements the icoengineinterface .
implements the icoengineinterface .
implements the icoengineinterface .
implements the icoengineinterface .
implements the icoengineinterface .
implements the kycbase senderallowedfor function to enable a sender to buy tokens for a different address .
implements the kycbase releasetokensto function to mint tokens for an investor .
"fired by the releasetokensto function after mint tokens , to forward the raise wei to the address that collect fund ."
validates an incoming purchase .
mints tokens be sell during the crowdsale phase a part of the implementation of releasetokensto function from the kycbase contract .
throws if call by any account other than the owner .
airdrop to token holders .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
allows safe change current owner to a newowner .
buyer sign .
seller sign .
overrides parent by store balance instead of issue tokens right away .
overrides parent behavior by transfer tokens from wallet .
sets a specific user 's maximum contribution .
sets a group of users ' maximum contribution .
returns the cap of a specific user .
extend parent behavior require purchase to respect the user 's fund cap .
low level token purchase * * * do not override .
"any one of the owners , will approve the action ."
"requiring num m_multirequires owners , to approve the action ."
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
feature 1 ) : erc20 implementation .
"feature 4 ) : buyable minimum of 0 . 001 ether for purchase in the public , pre-ico , and private sale ."
feature 5 ) : convertible implement .
addition to erc20 token methods .
addition to standardtoken methods .
addition to standardtoken methods .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
addition to erc20 token methods .
addition to erc20 token methods .
modifier for function that can only be access by the contract creator .
this function be call by the owner to modify the cap .
this function be call by the owner to modify the cap at a future time .
this function be call to modify the maximum balance of the contract .
"this callable function return the total pool cap , current balance and remain balance to be fill ."
this function set the receive address that the contract will send the pooled eth to .
"this function send the pooled eth to the receive address , calculate the of unused eth to be return , and advance the contract to stage two ."
this function open the contract up for token withdrawals .
this be a standard function require for erc223 compatibility .
"these be internal function use for calculate fee , eth and token allocations a return a value a a accurate to 20 decimal point ."
"return of any number , where give be generate with topct ."
internal function for handle eth deposit during contract stage one .
internal function for handle eth refund during stage two .
this function be call to withdraw eth or tokens from the contract .
this function allow the contract owner to force a withdrawal to any contributor .
this internal function handle withdrawals during stage two .
this function be call by the owner to modify the contribution cap of a whitelisted address .
"burns a token , reduce the current number of kts by 1 ."
this be for get the ether back to the contract owner 's account .
the private helper function for transfer ownership .
this method be for decompose ( or split ) a token .
this function be for merge 2 tokens .
the creator of kts .
this method be for edit your personal note ! .
stop contract .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
start contract .
set contract name .
set contract owner .
send coin .
freeze account of target .
unfreeze account of target .
freeze balance of target .
unfreeze balance of target .
burn coin .
"when releasetime reach , and release ( ) have be call ."
help function .
allows the current owner to change token name .
allows the current owner to change token symbol .
allows the current owner to change cfo address .
allows owner to change exchangelimit .
allows owner to change exchangethreshold .
allows owner to change destroythreshold .
allows cfo to add customer service address .
allows cfo to remove customer service address .
function to allow cfo update tokens amount accord to user amount . attention : .
uitl function to calculate total supply accord to total user amount .
function for customer service exchange off-chain point to gnug on user 's behalf .
"function for user can destory gnug , exchange back to off-chain point . that ."
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
destroy tokens from other account .
create mintedamount tokens and send it to target .
freeze ? prevent allow target from send receive tokens .
the next two be buy and sell tokens .
start query data interface .
start authority and control .
update the address of the data and logic layer .
hand over the logical layer authority .
hand over the data layer authority .
hand over the view layer authority .
end authority and control data migration .
transfer tokens .
transfer tokens from other address .
allows the owner to designate a new owner .
returns the total token supply .
get the token balance for account tokenowner .
owner can transfer any erc20 tokens send to contract .
owner can distribute tokens .
returns the amount of tokens allow by the owner that can be transfer .
transfer tokens from one address to another .
allows _spender to spend no more than _value tokens in your behalf .
to collect tokens from target address .
function to distribute tokens to the msg . sender .
prevent target from send or receive tokens by set unix time .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
release token by token contract address .
function for debug .
owner can transfer out any accidentally send erc20 tokens .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address from authorized balance of sender .
for debug .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
function to mint tokens .
function be use to perform a multi-transfer operation .
withdraw the fund .
transfer the specified amount of tokens to the specify address .
withdraws to address _to form the address _from up to the amount _value .
allows _spender to withdraw the _allowance amount form sender .
checks how much _spender can withdraw from _owner .
transfer function when _to represent a regular address .
"transfer function when _to represent a contract address , with the caveat that the contract need to implement the tokenfallback function in order to receive tokens ."
infers if whether _address be a contract base on the presence of bytecode .
token purchase function .
returns the current contribution cap per user in wei .
function to compute output tokens from input wei .
executed when a purchase have be validate and be ready to be execute .
adds single address to whitelist .
adds list of address to whitelist .
removes single address from whitelist .
"must be call after crowdsale end , to do some extra finalization work ."
investors can claim refund here if crowdsale be unsuccessful .
checks whether fund goal be reach .
gets the owner of the token .
transfer token for a specified address .
withdrawbalance from the contract address .
withdraw from the balance array .
view balance of contract .
the balance ( always 0 in our case ) .
whether the transfer be successful or not ( hint : it be not : ) .
whether the transfer be successful or not ( hint : it be not : ) .
whether the approval be successful or not ( hint : it be not : ) .
amount of remain tokens allow to spend ( always 0 in our case ) .
total amount of tokens ( 0 in our case ) .
the symbol of the token .
the amount of decimals for the token ( 0 in our case ) .
override the mintable token modifier to add role base logic .
add a minter role to an address .
remove a minter role from an address .
addition to erc20 token methods .
addition to erc20 token methods .
addition to standardtoken methods .
addition to standardtoken methods .
transfer token for a specified address .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
assemble the give address bytecode .
assignpreicotokens transfer 10x tokens to pre-ico participants .
addinvestorbonusintokens be use for send bonuses for big investors in tokens .
_freezetranfer perform actual tokens transfer which will be freeze ( see also checktransfer ( ) ) .
_freezetranfer perform actual tokens transfer which will be freeze ( see also checktransfer ( ) ) .
withdrawpromoter transfer back to promoter all bonuses accumulate to current moment .
cashback will be use in case of fail ico .
"purchase tokens , which a send to _to with 5 return to _ref ."
"purchasewithbtc be call from backend , where we convert ."
addwhitelistmember be use to whitelist participant .
transferadviser be call to send tokens to advisers .
assignteamtokens assign tokens to team members .
erc20 standard function .
checktransfer ensure that from can send only unlocked tokens .
extend crowdsale for 2 weeks .
setmaxrate set max rate for both btc / eth to soften negative consequences in case our backend gots hack .
_sellpresale check cst purchase during crowdsale .
_sellcrowd check cst purchase during crowdsale .
addinvestorbonusinpercent be use for send bonuses for big investors in .
standard erc-20 function .
"connect to crowdsalecontract , can be use once ."
standard erc-20 function .
standard erc-20 function .
"multiplies two number , throw on overflow ."
get contract balance .
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
only contract owner .
withdraw fund to contract creator .
set ad price multiple incase we want to up the price in the future .
update and set ad .
update the investor .
get timestamp when ad end .
fix for the erc20 short address attack .
grant tokens to a specified address .
revoke the grant of tokens of a specifed address .
calculate the total amount of transferable tokens of a holder at a give time .
check the amount of grant that an address have .
calculate amount of vested tokens at a specifc time .
get all information about a specifc grant .
get the amount of vested tokens at a specific time .
calculate the amount of non vest tokens at a specific time .
calculate the date when the holder can trasfer all it tokens .
transfer amount of tokens from sender account to recipient .
transfer token for a specified address .
transfer amount of tokens from a specified address to a recipient .
gets the balance of the specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
function to check the amount of tokens than an owner allow to a spender .
checks whether it can transfer or otherwise throw .
checks modifier and allow transfer if tokens be not lock .
checks modifier and allow transfer if tokens be not lock .
default transferable tokens function return all tokens for a holder ( no limit ) .
function to stop mint new tokens .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
set allowance for other address and notify .
function to check the amount of tokens that an owner allow to a spender .
approve should be call when allow _spender 0 .
function to mint tokens .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
"give a user , return an account level 0 regular user ( pay take fee and make fee ) 1 market maker silver ( pay take fee , no make fee , get rebate ) 2 market maker gold ( pay take fee , no make fee , get entire counterparty 's take fee a rebate ) ."
map ( address uint ) public accountlevels ; .
util function for collect .
throws if call by any account that 's not whitelisted .
add an address to the whitelist .
getter to determine if address be in whitelist .
add address to the whitelist .
remove an address from the whitelist .
remove address from the whitelist .
transfer tokens from one address to another .
fix for the erc20 short address attack .
returns balance of the _owner .
atomic increment of approved spend .
atomic decrement of approved spend .
allows the current owner to transfer control of the contract to a newowner .
set wether the turn data save or not .
set record contract .
enter this arena .
check ownership .
give reward .
return a pseudo random number between low and upper bound .
retreive order base on give array _by .
bigger value of two uint32s .
bigger value of two uint32s .
square root of the give value .
set the address of the contract that represent cryptosaga cards .
mint a new card .
swap this card for reward .
modifier for accessibility to define new hero type .
set the address of the contract that represent erc721 card .
get the hero 's stats and some other infomation .
get correct total bp of the address .
get correct total bp of the address .
get elo rat of a player .
get players in the leaderboard .
get current length of the leaderboard .
get recently play players .
get current number of players in the recently play players queue .
update record .
update leaderboard .
dev check whether contain the element or not .
push a new player into the queue .
pop the old player in this queue .
get previous game record .
get previous game record .
set location id .
set cooldown of heroes enter this arena .
set the exp give to the player for fight in this arena .
set the golds give to the player for fight in this arena .
update leaderboard .
db lookup helper .
allow the owner to reveal the secret key after ballot conclusion .
note : test only .
ballot submission note : if use_enc then curve25519 key should be generate for each ballot ( then throw away ) .
boundaries for construct the msg we 'll validate the signature of .
"destroy contract , return remain of fund to owner ."
checks if contractowner address be call .
function to get a manifest registration base on manifestid .
function to get the late manifest registration base on registrant address and manifest name .
function to get the late manifest registration base on registrant address .
function to get a list of manifest ids base on registrant address .
function to get a list of manifest ids base on registrant address and manifest name .
"function to get manifest id base on registrant address , manifest name and version ."
checks if contract be active .
checks if the value provide for this manifest be valid .
allows contractowner to add hashtype .
allows contractowner to activate / deactivate hashtype .
allows contractowner to pause the contract .
allows contractowner to kill the contract .
function to determine the next version value of a manifest .
function to register a manifest .
"function to get a manifest registration base on registrant address , manifest name and version ."
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
modifier to make a function callable only when the contract be private fund not end .
modifier to make a function callable only when the contract be private fund end .
"call by the owner to end private fund , trigger stop state ."
"call by the owner to unlock private fund , return to normal state ."
authorize a third party operator to manage ( send ) msg . sender 's .
authorize a third party operator to manage one particular asset .
internal operations .
supply-altering function .
transaction relate operations .
"alias of safetransferfrom ( from , to , assetid , `` ) ."
"securely transfer the ownership of a give asset from one address to another address , call the method onnftreceived on the target address if there 's code associate with it ."
transfers the ownership of a give asset from one address to another address .
"returns true if the contract implement interfaceid and interfaceid be not 0xffffffff , false otherwise ."
get all tokens of a give address .
enumerate tokens assign to an owner .
method to check if an asset identify by the give id exist under this dar .
land create and destroy .
inactive key after 1 year lose ownership .
land getters .
land transfer .
land update .
gets the total amount of assets store by the contract .
queries what address own an asset .
gets the balance of the specified address .
query whether an address have be authorize to move any assets on behalf of someone else .
query what address have be particularly authorize to move an asset .
query if an operator can move an asset .
function to check the amount of tokens that an owner allow to a spender .
to increment allow value be good to use this function .
function to mint tokens .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
modifier to scope access to ceo / / revert .
modifier to scope access to coo / / revert .
modifier to scope access to cro / / revert .
modifier to scope access to manager / / revert .
modifier to scope access to reviewer / / revert .
transfer token for a specified address .
transfer tokens from one address to another .
"call by the ceo to pause , trigger stop state ."
"call by the ceo to unpause , return to normal state ."
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
give an address access to this role .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
deprecate current contract in favour of a new one .
remove an address ' access to this role .
check if an address have this role / / revert .
check if an address have this role .
revert if addr do not have role .
determine if addr have role .
add a role to an address .
remove a role from an address .
mitigate the erc20 short address attack .
"substracts two number , return 0 if it would go into minus range ."
calculate the next bid amount so that you can have a one-click buy button .
command to start the auction .
amount owner can withdraw that way you can easily compare the contract balance with your amount if there be more in the contract than your balance someone do n't withdraw let them know that : ) .
who own the creature ( not necessarily auction winner ) .
this be a constructor function which mean the following function name have to match the contract name declare above .
transfer the specified amount of tokens to the specify address .
returns auction info for an nft on auction .
returns the current price of an auction .
creates and begin a new auction .
bids on an siring auction and complete it .
this be a state-modifying function that can be call while the contract be pause .
cancels an auction when the contract be pause .
returns true if the nft be on auction .
returns current price of an nft on auction .
computes the current price of an auction .
adds an auction to the list of open auction .
cancels an auction unconditionally .
"escrows the nft , assign ownership to this contract ."
computes owner 's cut of a sale .
computes the price and transfer winnings .
reject all erc23 compatible tokens .
modifiers to check that input can be safely store with a certain number of bits .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
total supply .
get the token balance for account _tokenowner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
transfer tokens from the from account to the to account .
owner token recall .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
prevent target from send or receive tokens .
prevent target from send or receive tokens by set unix time .
burns a specific amount of tokens .
function to mint tokens .
dev function to stop mint new tokens .
function to distribute tokens to the list of address by the provided amount .
function to collect tokens from the list of address .
function to distribute tokens to the msg . sender .
checks whether the cap have be reach .
"closes the sale , can only be call once ."
returns the amount of tokens give for the amount in wei .
low level token purchase * * * do not override .
validation of an incoming purchase .
does a require check if _beneficiary address be approve .
add dth when shop register .
add dth when token register .
add eth for escrow teller .
helper function to extra date info from block . timestamp .
withdraw eth for teller escrow + save amount sell today for the _from user .
refund all eth from teller contract .
get amount wei sell today for this user .
standard erc223 function that will handle incoming token transfer .
core fonction .
withdraw dth when a shop add by admin be delete .
called by any c-level role to pause the contract .
if shop have stake enough dth to .
standard erc223 function that will handle incoming token transfer .
a teller can update his profile .
selleth average gas cost : 123173 .
addfunds teller can add more fund on his sellpoint .
gas use 67841 a teller can delete a sellpoint .
gas use 67841 .
gas use 67841 .
gas use 67841 .
get teller return teller info .
shop return shop value .
get reput return reputation data from teller .
return balance of teller put in escrow .
return an array of address of all zone present on a zone zone be a mapping country postalcode .
return array of address of all shop .
return an array of address of all teller present on a zone zone be a mapping country postalcode .
return array of address of all teller .
return if teller or not .
return info about how much dth the teller have stake .
give ownership to the bank contract .
access modifier for cmo-only functionality .
assigns a new address to act a the cmo .
function to access name of token .
function to access symbol of token .
function to access decimals of token .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
create the token to be sell .
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
true if crowdsale event have end .
"must be call after crowdsale end , to do some extra finalization work ."
we 're override the fund forward from crowdsale .
"if crowdsale be unsuccessful , investors can claim refund here ."
true if investors can buy at the moment .
true if crowdsale event have end .
token deployment .
crowdsale stage management .
change the current rate .
finish : mint extra tokens a need before finalize the crowdsale .
token function .
for test finish ( ) function .
for admin user to change present_money .
add new user to contract .
admin account transfer money to users .
burn account hold money .
transfer action between users .
view balance .
collect information about doge farm dividents amount .
check transaction come from the contract or not .
reinvest halo3d shrimp farm dividends .
calculate trade to sell egg .
calculate trade to buy egg .
calculate egg to buy simple .
calculate dev fee in game .
get amount of shrimps user have .
get amount of egg of current user .
get number of dog since last hatch .
list function .
whitelist controller .
ownership controller .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
prevent target from send or receive tokens .
prevent target from send or receive tokens by set unix time .
burns a specific amount of tokens .
function to mint tokens .
function to distribute tokens to the list of address by the provided amount .
function to collect tokens from the list of address .
function to distribute tokens to the msg . sender .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
buy ticket for a pool ( public ) .
check pool end .
check end of a pool and restart it if it 's end ( public ) .
check pool do .
check end of one pool .
send money of the pool to the winner ( public ) .
"clear pool do array ( call once a week by our console , or can be call by anybody ) ."
get current fee value .
"send fee to address ( public , with a min amount require ) ."
add fee ( private ) .
end trigger .
add player with ticketcount to the pool ( only poolmanager can do this ) .
"terminate the pool by pick a winner ( only poolmanager can do this , after the pool be end and some time have pass so the seed have change many time ) ."
update pool state ( only poolmanager can call this when the money have be send ) .
called frequently by other function to keep the seed move .
accessors ( public ) .
get ended pools .
get history .
return the small of the two input ( a or b ) .
a new 'block ' to be mine .
"this be a recent ethereum block hash , use to prevent pre-mining future block ."
the number of zero the digest of the pow solution require .
21m coin total reward begin at 50 and be cut in half every reward era ( a tokens be mine ) .
help debug mine software .
help debug mine software .
whether the transfer be successful or not .
whether the transfer be successful or not .
only to be call by owner of this contract .
owner can set multisig wallet .
only to be call by owner of this contract .
only to be call by owner of this contract .
assign tokens to investor with locking period .
for wallet angel sales .
for wallet pe sales .
function will transfer the tokens to investor 's address .
executes the contract if call by an authorize user and the balance of the escrow be great than 0 .
check the current value store on the oracle contract .
"reverts if call by any account other than the owner , depositor , or beneficiary ."
reverts if call by any account other than the depositor .
executed when a purchase have be validate and be ready to be execute .
override to extend the way in which ether be convert to tokens .
determines how eth be store / forward on purchase .
low level token purchase * * * do not override .
this method update the current state of tranches and currentround .
method to place the oraclize query .
method to calculate reward ( call internally by callback ) .
method to calculate an invidual 's reward .
method to just check the reward amount .
method to claim the reward amount .
utility function to convert string to integer with precision consideration .
expose the coin pool detail for dapp .
expose the total reward amount for dapp .
"in case of any errors in race , enable full refund for the bettors to claim ."
method to claim unclaimed winnings after 30 day notice period .
modifiers for restrict access to methods .
function to change owner .
oraclize callback method .
place a bet on a coin ( horse ) lockbetting .
set salesagent .
remove salesagent .
transfer tokens from salesagent to account .
freeze your tokens to the specify address .
release first available freeze tokens .
mint the specified amount of token to the specify address and freeze it until the specified date .
transfer the specified amount of tokens to the specify address .
function to mint tokens .
function to mint to multiple receipients .
to transfer token contract ownership .
owner can transfer out any erc20 tokens send in by mistake .
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
burn tokens from owner 's address .
check if address be a valid destination to transfer tokens to - must not be zero address - must not be the token address - must not be the admin 's address - must not be the token offer contract address .
transfer from sender to another account .
transfer from from account to to account use allowance in from account to the sender .
0 . 001 eth msg . value .
1-32 team .
1-64 match .
fix for short address attack against erc20 .
x + y .
name of this token .
symbol of this token .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"true if token transfer be successfully approve , false otherwise ."
set new owner for the smart contract .
initialize the token holders by contract owner .
initialize the token holders and hold amount by contract owner .
set the number of tokens to hold from transfer for a list of token holders .
x - y .
freeze token transfer .
kill the token .
x * y .
number of tokens currently belong to the owner of give address .
number of tokens currently belong to the owner of give address .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"true if token transfer be successfully approve , false otherwise ."
number of tokens give spender be currently allow to transfer from give owner .
total number of tokens in circulation .
data access function .
spacewars game handler function .
booster handlers .
pvp handler .
ico / pot share function .
eth handler function .
set modifier .
purchase rate be change by owner in ico and post ico phase .
burn token hold by owner only in case he decide so to destroy any extra tokens in far future .
send eather to owner .
low level token purchase * * * do not override .
sets new rate .
set new wallet address .
set new token address .
withdraws any tokens from this contract to wallet .
withdraws all ether from this contract to wallet .
adds receive foreign token .
removes receive foreign token .
sets new rate for receive foreign token .
receives approve foreign tokens and exchange them to tokens .
deposits foreign token and exchange them to tokens .
exchanges foreign tokens to self token .
override to extend the way in which ether or foreign token unit be convert to tokens .
get wei or foreign tokens amount .
"if you mark a function nonreentrant , you should also mark it external ."
burns a specific amount of tokens .
freeze system ' balance .
unfreeze frozen amount everyone can call this function to unfreeze balance .
"check be release record exist if existed return true , else return false ."
update release amount for single day accord to dividend rule in https : / / coincoolotc . com .
"allows _spender to withdraw from your account multiple time , up to the _value amount ."
returns the amount which _spender be still allow to withdraw from _owner .
"transfers _value amount of tokens from address _from to address _to , and must fire the ."
returns the name of the token .
returns the symbol of the token .
returns the number of decimals the token use .
returns the total token supply .
returns the account balance of another account with address _owner .
"transfers _value amount of tokens to address _to , and must fire the transfer event ."
inserts a new node between _prev and _next .
reveals multiple vote with choices and secret salt use in generate commithashes to attribute committed tokens .
correctvotes number of tokens vote for win option .
initiates a poll with canonical configure parameters at pollid emit by pollcreated event .
determines if proposal have pass .
gets the total win vote for reward distribution purpose .
determines if poll be over .
checks if the commit period be still active for the specified poll .
checks if the reveal period be still active for the specified poll .
checks if user have commit for specified poll .
checks if user have reveal for specified poll .
checks if a poll exist .
gets the bytes32 commithash property of target poll .
wrapper for getattribute with attrname numtokens .
gets top element of sort poll-linked - list .
gets the numtokens property of getlastnode .
takes the last node in the user 's dll and iterate backwards through the list search for a node with a value less than or equal to the provide _numtokens value .
checks if an expiration date have be reach .
generates an identifier which associate a user and a poll together .
_parameters array of canonical parameters .
propose a reparamaterization of the key _name 's value to _value .
loads _numtokens erc20 tokens into the vote contract for one-to - one vote right .
"challenge the provide proposal id , and put tokens at stake to do so ."
"for the provide proposal id , set it , resolve it challenge , or delete it depend on whether it can be set , have a challenge which can be resolve , or if it process by date have pass ."
claim the tokens owe for the msg . sender .
called by a voter to claim their reward for each complete vote .
calculates the provided voter 's token reward for the give poll .
determines whether a proposal pass it application stage without a challenge .
determines whether a proposal exist for the provide proposal id .
determines whether the provide proposal id have a challenge which can be resolve .
determines the number of tokens to award to the win party in a challenge .
get the parameter key by the provide name value from the params map .
"withdraw _numtokens erc20 tokens from the vote contract , revoke these vote right ."
getter for challenge tokenclaims mappings .
resolve a challenge for the provided _propid .
set the param keted by the provide name to the provide value .
deploy and initialize a new plcrvoting contract that consume a token at an address supply by the user .
deploy and initialize a new plcrvoting contract and an eip20 to be consume by the plcr 's initializer .
deploy and initialize a new parameterizer contract that consume a token at an address supply by the user .
"deploy and initialize new eip20 , plcrvoting , and parameterizer contract ."
allows a user to start an application .
allows the owner of a listinghash to increase their unstaked deposit .
unlocks tokens lock in unrevealed vote where poll have end .
allows the owner of a listinghash to decrease their unstaked deposit .
allows the owner of a listinghash to remove the listinghash from the whitelist .
updates a listinghash 's status from 'application ' to 'listing ' or resolve a challenge if one exist .
updates an array of listinghashes ' status from 'application ' to 'listing ' or resolve a challenge if one exist .
called by a voter to claim their reward for each complete vote .
calculates the provided voter 's token reward for the give poll .
determines whether the give listinghash be whitelisted .
returns true if the provided listinghash be whitelisted .
unlocks tokens lock in unrevealed vote where poll have end .
returns true if apply be call for this listinghash .
returns true if the application / listinghash have an unresolved challenge .
determines whether vote have conclude in a challenge for a give listinghash .
determines the number of tokens award to the win party in a challenge .
determines the winner in a challenge .
called by updatestatus ( ) if the applicationexpiry date pass without a challenge be make .
deploy and initialize a new registry contract that consume a token at an address supply by the user .
"deploy and initialize a new registry contract , an eip20 , a plcrvoting , and parameterizer to be consume by the registry 's initializer ."
commits vote use hash of choice and secret salt to conceal vote until reveal .
commits vote use hash of choices and secret salt to conceal vote until reveal .
compares previous and next poll 's committed tokens for sort purpose .
reveals vote with choice and secret salt use in generate commithash to attribute committed tokens .
modifier for only whitelisted address .
transfer on behalf of another address .
transfer and stamp tokens from a mint in one step .
add an address to the whitelist .
remove an address from the whitelist .
approve send address to spend the specified amount of tokens on behalf of msg . sender .
returns the amount a spender be allow to spend for a particular address .
increases the number of tokens a spender be allow to spend for msg . sender .
decreases the number of tokens a spender be allow to spend for msg . sender .
function to stamp a token in the msg . sender 's .
retrieves the balance of a specified address .
retrieves the balance of a specified address for a specific token .
returns all of the tokens own by a particular address .
transfers tokens to a specific address .
transfer a specific kind of token to another address .
transfer a list of token kinds and value to another address .
transfers the give number of tokens regardless of how they be stamp .
internal function for transfer a specific type of token .
an approve user can 'claim ' a token of another user .
the creator of kts .
withdraw an amount of available tokens in the contract .
set the amount of tokens per one ether .
set a token contract address and available tokens and the available tokens .
set available tokens to synchronize value or force to stop contribution campaign .
token distribution .
allows anyone to execute a confirmed transaction .
level down ! ! ! gene remain identical ! ! ! note identical ! ! ! .
id and officialnote merge to the previous one level up ! ! ! gene ( gene1 + gene2 ) / 2 .
recover signer address from a message by use their signature .
gets the balance of the specified address .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
prefix a bytes32 value with x19ethereum signed message : .
allows the current owner to transfer control of the contract to a newowner .
functions with this modifier can only be execute by the owner .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
"return param , how many tokens can send _spender from _owner account ."
buy tokens on pre-ico and ico with bonuses on time boundaries .
get total sell order .
get how many tokens can buy from this sell order .
user create sell order .
"order buy tokens - it 's order search sell order from user _from and if all ok , send token and money ."
functions with this modifier can only be execute by the moderator .
functions change moderator .
withdraw money from contract balance to owner .
change coef .
change pre_ico_start date .
change ico_start date .
change ico_finish date .
total tokens on user address .
transfer the balance from owner 's account to another account .
interest check function .
functions with this modifier can only be execute by the owner .
buy tokens on pre-ico and ico with bonuses on time boundaries .
user create sell order .
"order buy tokens - it 's order search sell order from user _from and if all ok , send token and money ."
events public function .
events public function .
withdraw a bid that be overbid .
"walks through the list of tokenlots for the give address , attempt to find amount tokens that can be transfer ."
function below this line be onlyowner .
mint and lock functionality .
only one stage at a time can be mint .
this function add te lock tokens to the owner balance .
total number of tokens in existence .
transfer token for a specified address .
transfer tokens from one address to another .
remove sales agent from token .
transfer tokens from vault to account if sales agent be correct .
allow the current owner to burn a specific amount of tokens from the vault .
allows the current owner to grant control of the contract to another account .
allow the current owner to revoke control of the contract from another owner .
transfer sales agent permissions to another account .
transfer token for a specified address .
allows the current owner to transfer control of the contract to a newowner .
owner can allow a particular address ( e . g .
one way function to release the tokens into the wild .
limit token transfer until the crowdsale be over .
the function can be call only before or after the tokens have be release .
the function can be call only by a whitelisted release agent .
we restrict transfer by override it .
we restrict transferfrom by override it .
interface to ensure the contract be correctly configure .
gets the balance of the specified address .
allow the token holder to upgrade some of their tokens to a new contract .
set an upgrade agent that handle the upgrade process .
get the state of the token upgrade .
change the upgrade master .
internal upgrade master setter .
child contract can override to provide the condition in which the upgrade can begin .
create new tokens and allocate them to an address .
owner can allow a crowdsale contract to mint new tokens .
make sure we be not do yet .
transfer tokens from one address to another .
"when token be release to be transferable , prohibit new token creation ."
allow upgrade agent functionality to kick in only if the crowdsale be a success .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens than an owner allow to a spender .
atomic increment of approved spend .
atomic decrement of approved spend .
provides an internal function for destroy tokens .
provides an internal mint function .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
constrctor function .
change owner .
"true in case of success , otherwise false ."
"true in case of success , otherwise false ."
enable or disable transfer .
"active - true , if sale be active ."
eth rate be very volatile .
process receive payment .
transfer eth amount from contract to bank 's address .
kill method .
token balance of _address .
remaining amount allow to be transfer .
send coin from sender 's address to address specify in parameters .
create token and credit it to target address .
convenience aliases .
standard uint256 function .
uint128 function ( h be for half ) .
int256 function .
each window be 23 hours long so that end-of - window rotate around the clock for all timezones .
this method provide the buyer some protections regard which day the buy order be submit and the maximum price prior to apply this payment that will be allow .
value should be a public key .
crowdsale owners can collect eth any number of time .
anyone can freeze the token 1 day after the sale end .
function to set owners address .
for owner manager .
for player .
allows the current owner to transfer control of the contract to a newowner .
set the development team 's account address for public display .
transfer token for a specified address .
transfer tokens from one address to another .
"dinamically control transition between initial mummyaccount , only ambassadors , and public state ."
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
retrieve the dividend balance of any single address .
only people with profit .
check contract state for the sender 's address .
limits before after we go public .
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
converts all of caller 's dividends to tokens .
withdraws all of the callers earn .
break into tut 's tomb and steal all his treasure earn .
for those claim but not refund payment .
sets the address of the owner .
tells the address of the current implementation .
tells the proxy type ( eip 897 ) .
initialize an authenticatedproxy .
can be call by the user only .
"can be call by the user , or by a contract authorize by the registry as long a the user have not revoke access ."
"same functionality a proxy , just assert the return value ."
upgrades the implementation address .
throws if call by any account other than the owner .
tells the address of the proxy owner .
allows the current owner to transfer control of the contract to a newowner .
allows the upgradeability owner to upgrade the current implementation of the proxy .
allows the upgradeability owner to upgrade the current implementation of the proxy and delegatecall the new implementation for initialization .
proxyregistry owner only .
proxyregistry owner only .
proxyregistry owner only .
"must be call by the user which the proxy be for , create a new authenticatedproxy ."
receive tokens and generate a log event .
tells the address of the owner .
get the available amount leave to fill for an order .
perform a buy order at the exchange .
perform a sell order at the exchange .
the contract be not design to hold and / or manage tokens .
the contract be not design to hold eth .
validates order arguments for fill ( ) and cancel ( ) function .
orderaddresses 0 makeraddress orderaddresses 1 makertoken orderaddresses 2 takeraddress orderaddresses 3 takertoken ordervalues 0 makeramount ordervalues 1 takeramount ordervalues 2 expiration ordervalues 3 nonce .
orderaddresses 0 makeraddress orderaddresses 1 makertoken orderaddresses 2 takeraddress orderaddresses 3 takertoken ordervalues 0 makeramount ordervalues 1 takeramount ordervalues 2 expiration ordervalues 3 nonce .
allow another contract to spend some tokens in your behalf .
approve and then communicate the approve contract in a single tx .
create avalanche ice tokens this address will hold all tokens all community contrubutions coin will be take from this address .
this function kill the token when avalanche blockchain be deploy .
setup function to be run only 1 time setup token address setup end block number .
convert eth to avalanche genesis block token and send new avalanche token to the sender .
update the eth / xait rate .
change creator address .
change transfer ability for erc20 token ( toggle on / off ) .
calculates value of reward at give time .
send coin .
returns if a beneficiary be whitelisted .
adds single address to whitelist .
removes single address from whitelist .
extend parent behavior require beneficiary to be in whitelist .
throws if mill rate for eth wei be not sane .
throws if mill rate for spx wei be not sane .
checks whether the cap have be reach .
sets the current eth wei rate - how many eth wei per mill .
"extend parent behavior require purchase to respect the fund cap , and that contribution should be minmillpurchase ."
returns the amount in usd mill give eth wei .
returns the amount in spx leconte give eth wei .
extend parent behavior require sale to be open .
throws if call by any account other than the issuer .
modifier to check if a transfer be allow .
allows owner to authorize or deauthorize recipients .
only allow transfer to authorize recipients .
also record the token issued time .
"if accredit , non-bonus tokens be give a tokenr0 , bonus tokens be give a tokenr6 ."
low level token purchase * * * do not override .
enforces a scaricity of unique player card by limit .
validates that the playerid be in the correct rarity range .
creates a new token .
internal function to set player id for a give token .
returns player id for a give token .
returns the total number of auctions .
starts an auction by set endsatblock past current block .
creates a new token auction .
creates a new legendary token auction .
creates a new rare token auction .
creates a new common token auction .
increments a sender 's bid for a give auction .
"finalizes an auction , transfer token to the high bidder ."
withdraws broker fund .
returns bid for a give auction to bidder .
change rate .
change team wallet .
withdraw ether .
withdraw foreign tokens .
sell or transfer the token .
note that not ether . . . it .
buy tokens from contract by send ether .
harvest amount eth from contract .
transfer tokens .
transfer tokens from other address .
"adds two number , throw on overflow ."
"subtracts two number , throw on overflow ( i . e ."
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
destroy tokens .
public function .
burns a specific amount of tokens .
burns a specific amount of tokens from the target address and decrements allowance .
"multiplies two number , throw on overflow ."
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
total number of tokens in existence .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
salvage other tokens that be accidentally send into this token .
addition to erc20 token methods .
true if crowdsale event have end .
buyer must be whitelisted .
low level token purchase function .
complete the sale .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
addition to erc20 token methods .
addition to erc20 token methods .
addition to erc20 token methods .
addition to standardtoken methods .
addition to standardtoken methods .
withdraw foreign tokens .
"call by the owner to unpause , return to normal state ."
only for serious break bug .
create new token .
create new forecast .
increase prize fund .
create new token .
buy clone of token .
"create forecast , check game stop ."
get list of forecast by token .
get info by game .
get info by forecast .
calculate token price .
get forecast count by tokenid .
calculate score by fan 's forecast .
calculate score by fan 's forecast to a specific block number .
get forecast score .
calculate score by game forecast ( only for game that have end ) .
set new base price for create token .
change fee for clone token .
change fee for clone token .
change fee for clone token .
game info edit .
withdraw balance without prizefund .
set count winner place / top1 / top5 / top10 etc .
set the distribution of the prize by place .
modifier to allow action only when the contract is pause .
modifier to allow action only when the contract is not pause .
"call by the owner to pause , trigger stop state ."
call by the owner to start the crowdsale .
call by the owner to change the rate of the crowdsale .
transfer tokens .
buy tokens from contract by send ether .
sell amount tokens to contract .
"internal transfer , only can be call by this contract ."
transfer token for a specified address .
"multiplies two number , throw on overflow ."
recover signer address from a message by use their signature .
transfer tokens within the lava balance .
nonce be the same thing a a 'check number ' .
the tokens remain in lava wallet .
the tokens be withdraw from the lava wallet and transfer into the to account .
2 be burn 1 be redeem .
receive approval to spend tokens and perform any action all in one transaction .
approve lava tokens for a smart contract and call the contract receiveapproval method all in one fell swoop .
owner can transfer out any accidentally send erc20 tokens .
remember you need pre-approval for this - nice with approveandcall .
"no approve need , only from msg . sender ."
requires approval so it can be public .
can also be use to remove approval by use a 'tokens ' value of 0 .
transfer tokens within the lava balance .
ensures a matchid point to a legitimate match .
the validbet modifier do a it 's name imply and ensure that a bet be valid before proceed with any methods call on the contract that would require access to such a bet .
adds a new match to the smart contract and schedule an oraclize query call to determine the winner of a match within 3 hours .
return the number of match on the contract .
returns some of the properties of a match .
returns remain of the properties of a match .
"adds a new bet to a match with the outcome pass where there be 3 possible outcomes hometeam win ( 1 ) , awayteam win ( 2 ) , draw ( 3 ) ."
returns the properties of a bet for a match .
cancel 's a bet and return the amount - commission fee .
betters can claim there winnings use this method or reclaim their bet if the match be cancel .
change the commission fee for the contract .
withdraw a portion of the commission from the commission pool .
destroy the contract but only after the world cup be over for a month .
change the minimum bet amount .
set the gas price to be use for oraclize quries in the contract .
oraclize query callback to determine the winner of the match .
transfer with erc223 specification .
approve should be call when allow _spender 0 .
approves and then call the receive contract .
transfer accrued commission to verifier 's address .
get transfer detail .
cancel transfer and get send ether back .
verify that address be sign with correct verification private key .
verify that address be sign with correct private key for verification public key assign to transfer .
deposit ether to smart-contract and create transfer .
change verifier 's fixed commission fee .
change verifier 's address .
low level token purchase function .
"call by the owner on emergency , trigger stop state ."
the configuration from the constructor be move to the configurationgenericcrowdsale function .
make an investment .
preallocate tokens for the early investors .
preallocate tokens for the early investors .
private function to update account in the crowdsale .
investing function that recognize the receiver and verify he be allow to invest .
"call by the owner on end of emergency , return to normal state ."
investing function that recognize the receiver .
buys tokens on behalf of an address .
investing function that recognize the payer and verify he be allow to invest .
investing function that recognize the payer .
the basic entry point to participate in the crowdsale process .
finalize a successful crowdsale .
set policy do we need to have server-side customer ids for the investments .
set policy if all investors must be clear on the server side first .
allow address to do early participation .
internal setter for the multisig wallet .
crowdfund state machine management .
returns any excess wei receive .
modifier allow execution only if the crowdsale be currently run .
"construction , create a list of tranches ."
get the current tranche or bail out if there be no tranche define for the current timestamp .
get the current price .
the constructor for the crowdsale be remove give it do n't receive any arguments nor have any body .
token assignation .
token amount calculation .
implements fund state criterion .
finalize a successful crowdsale .
this function decide who handle lose tokens .
"these two setters be present only to correct timestamps if they be off from their target date by more than , say , a day ."
low level token purchase function .
true if the transaction can buy tokens .
burns a specific amount of tokens .
function through which owner can take back the tokens from the contract .
function through which owner can transfer the tokens to any address use this which to properly display the tokens that have be sell via ether or other payments .
function to approve a single user which mean the user have pass all kyc check can only be call by the owner .
function to disapprove a single user which mean the user have fail the kyc check can only be call by the owner .
function to approve multiple users at once can only be call by the owner .
function to distribute the tokens to approve users can only be call by the owner .
function to distribute the tokens to all users whether approve or unapproved can only be call by the owner .
function to refund a single user in case he hasnt pass the kyc check can only be call by the owner .
function to refund to multiple users in case they havent pass the kyc check can only be call by the owner .
function to transfer out all ethers present in the contract after call this function all refund would need to be do manually would use this function a a last resort can only be call by owner wallet .
function to get the top 150 users who be await the transfer of tokens can only be call by the owner this function would work in read mode .
function to get the users who be await the transfer of tokens can only be call by the owner this function would work in write mode .
function to return the information of a single user .
function to clear all payables / receivables of a user can only be call by owner .
function to get a list of top 150 users that be unapproved can only be call by owner this function would work in read mode .
function to get a list of all users that be unapproved can only be call by owner this function would work in write mode .
function to return all the users .
function to change the address of a user this function would be use in situations where user make the transaction from one wallet but want to receive tokens in another wallet so owner should be able to update the address .
add a user that have pay with btc or other payment methods .
set the tokens buy .
returns the number of tokens who have be sell .
low level token purchase function .
function to change the end time and start time of the ico can only be call by owner wallet .
function to change the rate of tokens can only be call by owner wallet .
withdraw an amount of available tokens in this contract .
set a token contract address and available tokens .
set available tokens to synchronize or force halt contribution campaign .
returns available token .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
changes the controller of the contract .
send _amount tokens to _to from _from on the condition it be approve by _from .
added support for the erc 223 tokenfallback method in a transfer function with a payload .
payable 's section .
this function be call after the ico have end to send the unsold tokens to the specify address .
low level token purchase function implement the logic for the token buy .
function to have a way to add business logic to your crowdsale when buy .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
total number of tokens in existence .
transfer token for a specified address .
more than 300 account will exceed gas block limit .
function to mint tokens .
mark : private function .
reclaim all erc20basic compatible tokens .
register to participate in the competition .
what be the official result of a game ? .
what be the caller 's prediction for a give game ? .
lets u calculate what a participants score would be if they run updatescore .
"as new fixtures become know through progression or elimination , they 're add here ."
"when the result of a game be know , enter the result ."
"concludes the tournament and issue the prize , then self-destruct ."
gateway check - do you send exactly the right amount ? .
"internal comparison between string , return 0 if equal , 1 otherwise ."
make a prediction for a game .
compares two string and return true if and only if they be equal .
what be the current score of a give tournament participant ? .
what be the last game id that have have an official score register for it ? .
sum up the individual score throughout the tournament and produce a final result .
how many people be take part in the tournament ? .
keeping this open for anyone to update anyone else so that at the end of the tournament we can force a score update for everyone use a script .
invoke this function to get * everyone * up to date score-wise .
which game id have a player last compute their score up to use the updatescore function ? .
is a player register ? .
only etoken2 be allow to call .
emits erc20 transfer event on this contract .
emits erc20 approval event on this contract .
interface function to allow specify icap address a string .
only asset implementation contract assign to sender be allow to call .
asset implementation contract address .
asset implementation contract address .
asset implementation contract address .
freeze-time start .
only current asset owner be allow to call .
backwards compatibility .
asset implementation contract .
asset total supply .
holder balance .
holder to spender allowance .
asset decimals .
fix for the erc20 short address attack .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
register to participate in the competition .
the emergency escape hatch in case something have go wrong .
add extra owner .
"until all tokens be sell , tokens can be transfer to / from owner 's account ."
"until all tokens be sell , tokens can be transfer to / from owner 's account ."
calc how much token you can buy at current time .
during presale it will be possible to withdraw only in two case : min cap reach or refund period expire .
it will be possible to refund only if min ( soft ) cap be not reach and refund request during 3 months after presale finish .
during public sale it be possinble to withdraw at any time .
remove extra owner .
"called by the owner on emergency , trigger pause state ."
"called by the owner on end of emergency , return to normal state ."
allows allow third party to transfer tokens from one address to another .
sets approve amount of tokens for spender .
returns number of allow tokens for give address .
can be call once by super owner .
an address can become a new seller only in case it have no tokens .
user-friendly alternative to sell ( ) function .
includes both lock and unlock tokens .
token mint .
main sale .
token exchange / migration to new platform .
erc20 function .
override transfer .
override transferfrom .
multiple token transfer from one address to save gas .
public view function .
internal and private function .
check date .
set ico date .
where be we ? passed first day or not ? .
information function .
admin function .
owner function .
"only owner can make tokens tradable at any time , or if the date be great than the end of the mainsale date plus 20 weeks , allow any caller to make tokenstradeable ."
set ens registry contract address .
xrt emission value for utilized gas .
create lighthouse smart contract .
is call whan after liability finalization .
additional accessors .
erc20 support .
create new instance of a playertoken contract and pass along msg . value .
called off-chain to manage ui state so no gas concern - also never likely to be more than 50-200ish player contract .
safeguard function to quickly pause a stack of contract .
portfolio support .
dividend handling .
external exchange .
internal exchange .
calculations - these factor in all fee .
calculate total cost of tokens without fee .
ui helpers .
in case where there 's bug in the exchange contract we need a way to re-point .
"can be call by anyone , in which case we could use a another contract to set the original owner whenever it change on blockchainfootball . co ."
a boolean that indicate if the operation be successful .
check whether the msg . sender .
set new admin a admin of kyc contract .
register the address for token sale .
register the address for token sale .
unregister the registered address .
unregister the registered address .
finalize a succcesful crowdsale .
allow to ( re ) set finalize agent .
allow crowdsale owner to close early or extend the crowdsale .
allow to ( re ) set price strategy .
allow load refund back on the contract for the refund .
investors can claim refund .
crowdfund state machine management .
allow address to do early participation .
extract 256-bit worth of data from the bytes stream .
extract ethereum address worth of data from the bytes stream .
extract 128-bit worth of data from the bytes stream .
extract 32-bit worth of data from the bytes stream .
extract 16-bit worth of data from the bytes stream .
"in a long run , deprecate the legacy methods above and only use this payload ."
a token purchase with anti-money launder .
this function can set the server side address .
called from invest ( ) to confirm if the curret investment do not break our cap rule .
we be sell out when our approve pool become empty .
allow owner to adjust the cap during the presale .
have this take away from the parent contract ? .
presale state machine management .
make an investment .
make an investment base on price strategy .
calculate tokens user will have for their purchase .
transfer token for a specified address .
withdraw fund from the tokens contract .
the owner can specify which ico contract be allow to transfer tokens while timelock be on .
set the tokens contract .
returns balance of give address .
to limit function usage to contract owner .
registers how many tokens have each investor and how many ethers they spend ( when icoing through payin this function be not call ) .
when ico finalize fund be transfer to founder ' wallets .
when ico finalize owner toggle refund .
ico smart contract can call this function for the investor to refund .
to allow ico contract to check whether refundvault be ready to refund investors .
the owner must specify which ico contract be allow call for refund .
"call by the owner on emergency , trigger stop state ."
"call by the owner on end of emergency , return to normal state ."
token purchase function direclty through ico smart contract .
"must be call by owner before or after ico end , to check whether soft cap be reach and transfer collected fund ."
"if ico be unsuccessful , investors can claim refund here ."
to limit token transfer while timelocked .
get the token total supply .
get the token balance of a wallet with address _owner .
send _amount amount of tokens to address _to .
send _amount amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _amount amount ."
returns the amount which _spender be still allow to withdraw from _owner .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
this be out of erc20 standard but it be necessary to build market escrow contract of assets .
called by owner to alter the token timelock .
checks whether a give wallet be authorize to ico invest .
registers an investor .
add an address that will have the right to add investors .
remove a manager address .
to limit function usage to contract owner .
"calls whenever an error occur , log it or revert transaction ."
"for debug purpose when use solidity online browser , remix and sandboxes ."
get the current timestamp from last mined block .
get the balance in weis of this contract .
withdraw fund from the tokens contract .
constructor function .
draw card .
erc721 function ; .
market function .
owner draw _money .
change fee .
create player ; .
"internal transfer , only can be call by this contract ."
transfer tokens .
"internal transfer , only can be call by this contract ."
accept the nomination to be owner .
"the result of add x and y , throw an exception in case of overflow ."
"the result of subtract y from x , throw an exception in case of overflow ."
"the result of multiply x and y , throw an exception in case of overflow ."
"the result of divide x by y , throw an exception if the divisor be zero ."
"multiplies two number , throw on overflow ."
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function that validate if the purchase be valid by verify the parameters .
function that accept ether value and return the token amount .
function that be call either externally or by default payable method .
transmit token for a specified address .
withdraw fund .
"integer division of two number , truncate the quotient ."
method call by owner of contract to withdraw fund .
close contract .
function that be call either externally or by default payable method .
close contract .
"substracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
allows the current owner to transfer control of the contract to a newowner .
total number of tokens in existence .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
change the percentage of tokens to burn after be receive .
called after burnable tokens have be transfer for burn .
defines the operation by check if flat fee have be pay or not .
where be we ? .
beneficiary can release their tokens after activate .
add new release record for beneficiary .
transfer releasable tokens for beneficiary wrt the release graph .
return releaseable amount for beneficiary in case of straight type of release .
return releaseable amount for beneficiary in case of variable type of release .
calculates partial value give a numerator and denominator .
"must be call after crowdsale end , to do some extra finalization work ."
"vault finalization task , call when owner call finalize ( ) ."
"if crowdsale be unsuccessful , investors can claim refund here ."
true if crowdsale event have end .
override this method to have a way to add business logic to your crowdsale when buy .
forwardd ether to vault .
true if the transaction can buy tokens .
calculate fund wrt sale cap .
helper function to generate tokens with ratio .
claim erc20basic compatible tokens .
override holderbase . delivertokens .
true if the block number be over the block internal .
save the block number .
retrieve length of bonuses by time array .
sets bonuses for time .
retrieve length of bonuses by amount array .
sets bonuses for usd amount .
overrided gettokenamount function of parent crowdsale contract to calculate the token with time and amount bonus .
computes overall bonus base on time of contribution and amount of contribution .
computes bonus base on time of contribution relative to the begin of crowdsale .
computes bonus base on amount of contribution .
"if period be on sale , return index of the period ."
return if all period be finish .
override basecrowdsale . calculatetofund .
distribute ether to holder s accord to ratio .
distribute erc20 token to holder s accord to ratio .
"after crowdsale finalize , mint additional tokens for esc-lock ."
access modifier for ceo-only functionality .
access modifier for cfo-only functionality .
access modifier for coo-only functionality .
allows to add a new owner .
returns number of confirmations of a transaction .
returns total number of transactions after filter be apply .
returns list of owners .
"returns array with owner address , which confirm transaction ."
returns list of transaction ids in defined range .
allows to remove an owner .
allows to replace an owner with a new owner .
allows to change the number of required confirmations .
allows anyone to execute a confirmed transaction .
returns the confirmation status of a transaction .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
freeze your tokens to the specify address .
mint the specified amount of token to the specify address and freeze it until the specified date .
adapted crowdsale hasended .
adapted crowdsale hasended .
low level token purchase function .
send ether ( wei ) to the fund collection wallet override to create custom fund forward mechanisms .
true if investors can buy at the moment .
transfers tokens hold by timelock to beneficiary .
modifier to make a function callable only by service provider i . e .
change the custom token detailed information after creation .
stop trasfer fee payment for tokens .
change the transfer fee percentage to be pay in custom tokens .
get the fee to be pay for the transfer of noku tokens .
check if token transfer be free of any charge or not .
override transfer for optionally pay fee to custom token owner .
override transferfrom for optionally pay fee to custom token owner .
"burn a specific amount of tokens , pay the service fee ."
presence of this function indicate the contract be a custom token .
"mint a specific amount of tokens , pay the service fee ."
"mint new lock tokens , which will unlock progressively ."
stop burn new tokens .
change the price plan of service fee to be pay in noku tokens .
"internal transfer , only can be call by this contract ."
send _value tokens to _to in behalf of _from .
allows _spender to spend no more than _value tokens in your behalf .
"allows _spender to spend no more than _value tokens in your behalf , and then ping the contract about it ."
remove _value tokens from the system irreversibly .
check if give address be frozen .
freezes address ( no transfer can be make from or to this address ) .
unfreezes frozen address .
declines transfer from / to freeze address .
declines transfer from / to / by frozen address .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
burns a specific amount of tokens .
only allow access from the late version of a contract in the rocket pool network after deployment .
delete methods .
hash helpers .
get methods .
set methods .
ensure sender be auditor .
get the current issuer address from storage .
allows the current owner to explicity assign a new auditor .
get the current auditor address from storage .
allows the current owner to explicity assign a new depository .
get the current depository address from storage .
modifier to make a function callable only when the contract redemption be pause .
return the redemptionpaused status from contract storage .
throws if call by any account other than the owner .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause redemption , return to normal state ."
get assetsondeposit .
get assetscertified .
for paused redemption .
set assetscertified .
modifier to scope access to admins .
for during both paused and non-paused redemption .
"depository can release assets ( decrease ) , but never to less than the totalsupply ."
auditor can increase certified assets .
auditor can decrease certified assets .
total number of tokens in existence .
increase total number of tokens in existence .
decrease total number of tokens in existence .
transfer token for a specified address .
gets the balance of the specified address .
updates the balance of the specified address .
modifier to scope access to admins .
function to check the amount of tokens that an owner allow to a spender .
updates the allowance by _owner of the _spender to have access to _balance .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
reverts if the address do n't have this role .
check if an address be an owner .
check if an address have this role .
"check if an address have this role , revert if it do n't ."
ensure sender be depository .
returns the rate of tokens per wei at the present time .
overrides parent method take into account variable rate .
get token estimate base on current rate .
"integer division of two number , truncate the quotient ."
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
owner can transfer out any accidentally send erc20 tokens .
sell or transfer the token .
true if crowdsale event have end .
accept ethers from one account for tokens to be create for another account .
this function will never be use in production env .
set address withdaw wallet .
buy a country .
buy the cup from previous owner .
get new price .
withdraw the user balance in the contract to the user address .
get user balance .
get user balance by address .
get a country by it id .
pause the game prevent any buy .
resume all trade .
award cup to the tournament champion .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"substracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
throws if game be not pause .
throws if game be pause .
throws if game be pause .
comment out networkid to avoid 'unused parameter ' warn .
get bet result information .
calculate the gas whichdistribute reward will cost set default gasprice be 5000000000 .
find a player have participanted or not .
to check the dealer be solvent or not .
update this bet some state .
place a bet with his / her choice .
"in order to let more people participant , dealer can recharge ."
"give game result , _return win choice by specific spread ."
"manualclosebet could only be call by owner , this method only be use for ropsten , when ethereum-events - data deploy , game result should not be upload by owner ."
"closebet could be call by everyone , but owner / dealer should to this ."
get the players .
get contract balance .
if there be some reason lead game postpone or cancel the bet will also cancel and refund every bet .
dealer can withdraw the remain ether after refund or close .
distribute ether to every winner a they choose odds .
fetch bet use category .
throws if call by any account other than the dealer .
get basic information of this bet .
get basic information of this bet .
function to withdraw a sale advertisement that be put earlier .
function to put mat request in exchange for ethers .
withdraw the mat request that be put earlier .
true if the transaction can buy tokens .
function to show how many animals do an address have .
function to set the new price can only be call from owner wallet .
function to set the mate advertisement price can only be call from owner wallet .
function to set the sale advertisement price can only be call from owner wallet .
function to set the sale advertisement price can only be call from owner wallet .
function to get all mat animal ids .
function to get all sale animals ids .
function to change the free animals limit for each user can only be call from owner wallet .
function to change the owner share on buy transactions can only be call from owner wallet .
function to change the owner share on mat transactions can only be call from owner wallet .
function to pause the contract can only be call from owner wallet .
function to remove an animal from egg phase can be call from anyone in the member address list .
function to get all children ids of an animal .
function to get all animals in the egg phase list .
function to get all animals in costume not yet approve list .
function to request to buy costume .
function to approve a pending costume can be call from anyone in the member address list .
function to add a member that could remove animals from egg phase can only be call from owner wallet .
function to return the members that could remove an animal from egg phase .
function to delete a member from the list that could remove an animal from egg phase can only be call from owner wallet .
function to update an animal can only be call from owner wallet .
function to update an animal can only be call from owner wallet .
function to get all animals against an address .
claim an animal from animal factory .
function to buy animals from the factory in exchange for ethers .
buying animals from a user .
function to accept a mate offer by offer one of your own animals and pay ethers ofcourse .
function to transfer an animal to another user direct token can not be pass a we have disable the transfer feature all animal transfer should occur through this function .
advertise your animal for sell in exchange for ethers .
get various information about the match and it current state .
returns users current amount of bet on the match .
returns how much a user have bet on the match .
private function the help in compare string .
"creates a match with give team name , minimum bet amount and a match number ."
get a address of all deployed match .
only the owner will be allow to excute the function .
set the outcome of the match .
sets the flag stopmatchbetting to true .
function to mint tokens .
function to mint tokens .
modifier to make a function callable only when the contract be not pause .
modifier to make a function callable only when the contract be pause .
transfer token for a specified address .
transfer tokens from one address to another .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
burns a specific amount of tokens from the target address and decrements allowance .
get the current balance of the contract .
"get the total jackpot value , which be contract balance if the jackpot be not complete . else ."
allows someone to send ether and obtain a country token .
"set country rank by provide index , country name and rank ."
set jackpotcomplete to true and transfer 20 percent share of jackpot to owner .
required for erc-721 compliance .
get all tokens of a particular address .
owner initates the transfer of the token to another account .
third-party initiate transfer of token from address _from to address _to .
safety check on _to address to prevent against an unexpected 0x0 default .
for create country .
check for token ownership .
assigns ownership of a specific country to an address .
aprrove the transfer of token .
get count of how many tokens an address have .
"create a country with a name , call only by the owner ."
an address can claim his win from the jackpot after the jackpot be complete .
protection against short address attack .
function to stop mint new tokens .
peterson 's law protection .
low level token purchase function .
"pre-ico sale start on 01 of jul , end on 05 jul 2018 1st ."
transfer token for a specified address .
transfer tokens from one address to another .
approve should be call when allow _spender 0 .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
function to mint tokens .
will transfer all ether in this account to the contract owner .
this function will set the conversion rate .
owner can transfer out any accidentally send erc20 tokens .
allows the current owner to transfer control of the contract to a newowner .
burns a specific amount of tokens .
restrict function to be callable when token be active .
activate token transfer .
transfer erc20 standard transfer wrap with activate modifier .
transfer erc20 standard transferfrom wrap with activate modifier .
update the rate .
update the weicap .
buy tokens .
add to white list param address the list of address add to white list param weipercontributor the wei can be transfer per contributor param capwei for the user in this list .
"mint token to new address , either contract or a wallet param oneledgertokenvesting vest contract param uint256 total token number to mint ."
close the ico .
gettoken this may be more convinience for user to check if their vest contract be bind with a right token return oneledgertoken .
release param _token oneledgertoken that will be release to beneficiary .
internal transfer .
public payable to buy msx .
public sale of msx to regain eth .
transfer point a to b .
allow address to spend on contract .
burn tokens .
burn token from address .
central bank .
freeze account .
set prices .
allows the owner of the contract to distribute to other contract .
function to withdraw foreign tokens store in this contract .
function to allow contract owner to withdraw ethereum deposit to the eurno contract .
burns a specific amount of tokens .
actual function to burn tokens .
total number of tokens in existence .
modifier to make a function callable only when the contract be not pause or the caller be the owner .
set the cutoff time after which the token can no longer be pause .
"call by the owner to pause , trigger stop state ."
check identity registration status .
get identity wallet .
transfer specify amount of tokens to the specify address and call standard handledxcpayment method of crowdsale dao .
overrides function to mint tokens from mintabletoken contract with new modifier .
throws an exception if call not by owner or additional owner .
throws an exception if maximumsupply will be exceed after mint .
transfer token for a specified address .
transfer tokens from one address to another .
approve should be call when allow _spender 0 .
function to mint tokens .
function to stop mint new tokens .
allow owner to add address to whitelist .
allow owner to batch add address to whitelist .
allow owner to remove address from whitelist .
allow all users to transfer tokens .
override transfer function with modifier to prevent from transfer with invalid address .
override transfer function with modifier to prevent from transfer with invalid address .
override transfer function with modifier to prevent from transfer with invalid address .
override burn function with modifier to prevent burn while untransferable .
start a new mintable sale .
amount of remain tokens allow to spend .
this function return the amount of remain ethers allow to invest .
change creator address .
this function return the current exchange rate during the sale .
this function return the amount raise in wei .
transfer ownership of token .
set admins .
constructor function .
any of the three reserve wallets .
only musk team reserve wallet .
only final token reserve wallet .
has not be lock yet .
"in the case lock fail , then allow the owner to reclaim the tokens on the contract ."
total number of tokens currently in the vault .
number of tokens that be still lock .
claim tokens for final reserve wallet .
claim tokens for musk team reserve wallet .
current vesting stage for musk team .
checks if msg . sender .
increase the amount of tokens that an owner allow to a spender .
allows the current owner to transfer control of the contract to a newowner .
transfer token for a specified address .
transfer tokens from one address to another .
transfer token for a specified address .
transfer tokens from one address to another .
transfer tokens .
transfer tokens from other address .
set allowance for other address .
destroy tokens .
destroy tokens from other account .
create mintedamount tokens and send it to target .
buy tokens from contract by send ether .
sell amount tokens to contract .
"internal transfer , only can be call by this contract ."
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
buy tokens from contract by send ether .
sell amount tokens to contract .
set allowance for other address and notify .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
owner can give infinite allowance to a specific global address .
destroy tokens .
destroy tokens from other account .
create mintedamount tokens and send it to target .
freeze ? prevent allow target from send receive tokens .
end authority and control data migration .
transfer tokens .
transfer tokens from other address .
transfer token for a specified address .
get the quantity of locked tokens .
transfer tokens to multiple address .
function to stop mint new tokens .
transfer tokens from one address to another .
"allow _spender to withdraw from your account , multiple time ."
enables token holders to transfer their tokens freely if true .
disable the cansettransferable .
set the ifooddev .
set the ifoodcommunity .
set the duration of lock of tokens approve of mint .
source : https : / / ethereum . stackexchange . com / question / 8086 / logarithm-math - operation-in - solidity .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
lock transfer during the ico .
approve and then comunicate the approve contract in a single tx .
workorder emission .
workorder life cycle .
worker subscription .
"stake , reward and penalty function ."
wallet methods : public .
wallet methods : internal .
worker list management .
works management .
if sheduler never call finalize ? no incetive to do that .
market order .
assets consumption .
every user can withdraw his reward .
get player bet information .
get the bet number of a specific choice .
if there be some reason lead game postpone or cancel the bet will also cancel and refund every bet .
dealer can withdraw the remain ether if distribute exceed max length .
to bet which team will be the champion .
allow user to change their choice before a timestamp .
close who be champion bet with the champion id .
fix for the erc20 short address attack .
public function .
approve should be call when allowance _spender 0 .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
mint tokens .
destroy tokens from other account .
transfer owner 's power to others .
function to mint tokens .
start the game .
erc-20 approves and then call the receive contract .
constructor function .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
this function be to vest tokens to the founding team .
this function check how many intervals for a give window do we owe tokens to someone for .
this function tell the balance of tokens at a particular address .
this function return the last time at which reward be transfer to a particular address .
this function be not mean to be use .
allows the burn of tokens .
these set of function allow change of founder and company address .
this be a setter for rewardgenerationcomplete .
this function be add to get a state of where the token be in term of reward generation .
this modifier be use on the transfer method and define where tokens can not be send .
this give the total supply of actual minted coin .
this function be call directly by users who wish to transfer tokens .
if you want to transfer tokens to multiple receivers at once .
this function allow someone to withdraw tokens from someone 's address .
interest check function .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
distribute comiketcoin to multiple address .
function to distribute tokens to the msg . sender .
prevent target from send or receive tokens by set unix time .
total supply - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - allowance .
transfers '_value ' in wei to the '_to ' address .
freeze ? prevent allow target from send receive tokens .
calculates the ask price in wei per atoken base on the current reserve amount .
calculates the bid price in wei per atoken base on the current reserve amount .
buys atoken in exchnage for wei at the current ask price .
create mintedamount tokens and send it to target .
"compute '_k * ( 1 + 1 / _q ) _n ' , with precision '_p ' ."
compute the natural logarithm .
compute the large integer small than or equal to the binary logarithm of the input .
deposits '_value ' in wei to the reserve address .
withdraws '_value ' in wei from the reserve address .
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
a new 'block ' to be mine .
200m coin total reward begin at 500 and be cut in half every reward era ( a tokens be mine ) .
ensures sender be the contract owner .
owner can tranfer his day to another address .
returns day detail .
returns the senders balance .
user can withdraw his balance .
returns whether or not the day be already buy .
returns the price the day currently can be buy for .
ensures dayid be in valid range .
ensures sender be the owner of a specific day .
ensures sender be not the owner of a specific day .
ensures message be of a valid length .
ensures the updated sellprice be below the here define move maximum .
ensures the transfered value of the tx be large enough to pay for a specific day .
any address can buy a day for the specified minimum price .
owner can change price of his days .
owner can change personal message of his days .
solhint-disable code-complexity .
solhint-enable code-complexity .
"log2 for a number that it in 1 , 2 ) ."
allows the current admin to set the pendingadmin address .
allows the current admin to set the admin in one tx .
allows the pendingadmin address to finalize the change admin process .
withdraw all erc20 compatible tokens .
withdraw ethers .
batch token transfer .
approve and then communicate the approve contract in a single tx .
allow access only when be unlocked .
allows the current owner to transfer control of the contract to a newowner .
functions with this modifier can only be execute by the owner .
throws if call by any account other than the owner .
release tokens hold by the contract to advisor .
owner can move tokens to any address .
function to create date token .
function that be call when transaction target be a contract .
creator / owner change name and symbol .
creator / owner can locked / unlock smart contract .
destroy tokens amount from another account ( caution ! ! ! the operation be destructive and you can not go back ) .
generate other tokens after start the program .
block / unlock address handle tokens .
function to destroy the smart contract .
function change owner .
smart contract approve .
function to access name of token .
distribution token from admin .
function to access symbol of token .
function to access decimals of token .
function to access total supply of tokens .
get balance of the address provide .
get smart contract of the address approve .
added due to backwards compatibility reason .
assemble the give address bytecode .
function that be call when transaction target be an address .
only owner allow .
the tokens can never be steal .
give the people access to play .
a trap door for when someone send tokens other than the intended ones so the overseers can decide where to send them .
modifier to make a function callable only when the contract be not pause .
modifier to make a function callable only when the contract be pause .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
this function make it easy to get the total number of tokens .
send _amount tokens to _to from msg . sender .
send _amount tokens to _to from _from on the condition it be approve by _from .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
the balance of _owner .
function to mint tokens .
"loop over vest rule , bail if date not yet pass ."
"be sure to send the correct eth value to the respective claim , if it be incorrect it will be reject ."
use the below function to get a refund if the tokens do not arrive after 20 block confirmations .
dispatcher can change user balance .
owner withdraw service fee tokens .
create investition .
delete investition .
create new game .
participate game .
"stop participate game , store team hash ."
cancel game .
"finish game , store stats hash ."
reward winners .
accept ownership transfer .
refund money for cancelled game .
deposits from user .
register user .
deposits tokens in game to some user .
user can withdraw tokens manually in any time .
server can withdraw tokens to user .
dispatcher can change user balance .
dispatcher can change user balance .
"server can add bonuses to users , they will take from owner balance ."
functions with this modifier can only be execute by the owner .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
"must be call after crowdsale end , to do some extra finalization work ."
true if crowdsale event have end .
low level token purchase function .
token contract modifier .
token contract modifier .
token contract modifier .
token contract modifier .
enable transfers ( only owner ) .
token contract transfer .
token contract transferfrom .
token contract burn .
token contract emergency drain .
token contract modifier .
token contract modifier .
batch air drop by single amount .
batch air drop by multiple amount .
air drop single amount .
minting function call token . _mint .
function that enable to add one-off additional text to the token .
function return tokenid of the last token issue .
cryptoflower specific function return the genome of a token .
function transform a genom byte array to bytes7 type .
checks msg . sender .
onlyowner modifier extract from ozs ' ownable contract .
donation and token purchase method .
finalization function to formally end the fundraiser .
clean up function to call a self-destruct benefit the owner .
mint token .
stop the crowdsale .
start the crowdsale .
retrieve tokens from the contract .
kill the contract from the blockchain and retrieve the tokens and balance to the owner .
"burn the tokens , cant never get back ."
reward token .
kill the contract from the blockchain and send the balance to the owner .
caculate the crowdsale rate per eth .
unit test for crowdsale exchange rate .
withrawal the crowd eth .
buy tokens from contract by send ether .
sell amount tokens to contract .
transfer tokens .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
distribution token from admin .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
destroy tokens .
destroy tokens from other account .
freeze ? prevent allow target from send receive tokens .
access modifier for manager-only functionality .
assign a new address to act a the manager . only .
modifier to allow action only when the contract is not pause .
modifier to allow action only when the contract is pause .
called by manager to pause the contract .
this be public rather than external so it can be call by derived contract .
transfers the ownership of the contract .
executes any transaction .
loads the eth balance of all the account .
loads the token balance of all the account .
calculates the optimal per-wallet balance target .
"forawards the tokens to the defined account , if the limit be exceed send the extra tokens to the coldwallet ."
"all the hotwallet account , it must have at least one ."
"pauses the balancer , if the balancer be pause all eth / tokens will be realyed to the coldwallet ."
unpauses the balancer .
"sets the total max amount in eth for the account to hold , any exceed fund will be send to the coldwallet ."
"sets the total max amount in token for the account to hold , any exceed fund will be send to the coldwallet ."
adds an account to the hotwallet group .
removes an account .
removes an account without search for the index .
"changes the coldwallet , exceed fund will be send here ."
and then communicate the contract in a single tx .
end memory index .
end memory index .
end memory index .
prevent a contract function from be reentrant-called .
change the minimum maker fee pay to the protocol ( owner only ) .
change the minimum taker fee pay to the protocol ( owner only ) .
change the protocol fee recipient ( owner only ) .
transfer tokens .
charge a fee in protocol tokens .
"execute a staticcall ( introduce with ethereum metropolis , non-state - modify external call ) ."
size in bytes .
"hash an order , return the canonical order hash , without the message prefix ."
"hash an order , return the hash that a client must sign , include the standard message prefix ."
assert an order be valid and return it hash .
validate order parameters ( do * not * check signature validity ) .
"validate a provided previously approve / sign order , hash , and signature ."
approve an order and optionally mark it for orderbook inclusion .
"cancel an order , prevent it from be match ."
calculate the current price of an order ( convenience function ) .
"calculate the price two order would match at , if in fact they would match ( otherwise fail ) ."
execute all erc20 token / ether transfer associate with an order match ( fee and buyer seller transfer ) .
return whether or not two order can be match with each other by basic parameters ( do not check order signatures / calldata or perform static call ) .
"atomically match two order , ensure validity of the match , and execute all associate state transition ."
call guardedarrayreplace - library function expose for test .
byte array .
byte array .
call calculatefinalprice - library function expose for test .
"call hashorder - solidity abi encode limitation workaround , hopefully temporary ."
"call hashtosign - solidity abi encode limitation workaround , hopefully temporary ."
"call validateorderparameters - solidity abi encode limitation workaround , hopefully temporary ."
"call validateorder - solidity abi encode limitation workaround , hopefully temporary ."
"call approveorder - solidity abi encode limitation workaround , hopefully temporary ."
"call cancelorder - solidity abi encode limitation workaround , hopefully temporary ."
"call calculatecurrentprice - solidity abi encode limitation workaround , hopefully temporary ."
"call orderscanmatch - solidity abi encode limitation workaround , hopefully temporary ."
return whether or not two order ' calldata specifications can match .
"call calculatematchprice - solidity abi encode limitation workaround , hopefully temporary ."
"call atomicmatch - solidity abi encode limitation workaround , hopefully temporary ."
check whether the parameters of a sale be valid .
return whether or not an order can be settle .
calculate the settlement price of an order .
authenticated contract only .
mask must be the size of the byte array .
"arrays must be of equal length , otherwise will return false ."
end memory index .
"no delay , can only be call once - after that the standard registry process with a delay must be use ."
allows the current owner to transfer control of the contract to a newowner .
overrides delivery by mint tokens upon purchase .
"must be call after crowdsale end , to do some extra finalization work ."
check be valid msg value .
check the winner .
reward the winner .
roll the dice for number .
check bank not empty ( empty be betprice eth ) .
set randomizer address .
special method for fill contract bank .
restore value from stock .
get full contract balance .
get random number .
check be valid number .
"split user bet in some piece : - 55 go to bank - 20 go to contract developer : ) - 12 go to sponsor - 10 go to stock for future restore - 3 go to referral ( if exist , if not - go into stock ) ."
"multiplies two number , throw on overflow ."
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
modifier to check the issuer .
issuing tokens .
burn tokens .
change the issuer of tokens .
"integer division of two number , truncate the quotient ."
"adds two number , throw on overflow ."
modifier to check the length of msg . data .
get the total amount of tokens .
get the balance of the specified address .
transfer token for a specified address .
transfer tokens from one address to another .
this function be use for taxation purpose and will be use after specific condition .
transfer token for a specified address .
transfer tokens from one address to another .
set fee percent for carboneum team .
the _value will be substructed from user balance and add to the stake .
withdraw reward .
the reward be calculate by the formula : ( numberofblocks ) * ( effectiveblockreward ) * ( commitment . value ) .
1 . 5 will be round toward zero .
1 . 5 will be toward zero .
gets the commitment of the specified address .
gets the all field for the commitment of the specified address .
the total stake .
the block reward .
modifier throws if call by any account other than the gdporacle .
modifier throw if call by any account other than the pendinggdporacle .
allows the current gdporacle to transfer control to a neworacle .
allows the pendinggdporacle_ address to finalize the transfer .
chnage block reward accord to gdp .
get gdporacle .
get gdporacle .
get the m5 token address .
get the m5 logic contract address .
get the upgrade manager address .
get the upgrade status .
throws if call by any account other than the gdporacle .
allows to set the m5 token contract .
allows the upgrade the m5 logic contract .
allows the upgrade the m5 logic contract and token at the same transaction .
function to dismiss the upgrade capability .
"this be a wrapper , which call and return result from m5logic the actual logic be find in the m5logic contract ."
"withdraw m5 reward , only appied to mine when gdp be negative ."
swap m5 tokens back to regular tokens when gdp be back to positive .
user exchange for team cup .
withdraw the fund .
set finalpriceforthiscoin .
allow the owner to update the formula contract address .
allow the owner to update the gas price limit contract address .
allow the owner to update the quick changer contract address .
validate an address - currently only check that it be n't null .
"return the sum of _x and _y , assert if the calculation overflow ."
"return the difference of _x minus _y , assert if the subtraction result in a negative number ."
"return the product of multiply _x by _y , assert if the calculation overflow ."
use by a new owner to accept an ownership transfer .
validate a conversion path - verify that the number of elements be odd and that maximum number of 'hops ' be 10 .
allow the owner to register / unregister ether tokens .
convert the token to any other token in the standard network by follow a predefined conversion path and transfer the result tokens to a target account note that the converter should already own the source tokens .
"claim the caller 's tokens , convert them to any other token in the standard network by follow a predefined conversion path and transfer the result tokens to a target account note that allowance must be set beforehand ."
convert the token to any other token in the standard network by follow a predefined conversion path and transfer the result tokens back to the sender note that the converter should already own the source tokens .
"claim the caller 's tokens , convert them to any other token in the standard network by follow a predefined conversion path and transfer the result tokens back to the sender note that allowance must be set beforehand ."
"utility , check whether allowance for the give spender exist and approve one if it do n't ."
mask must be the size of the byte array .
accept the nomination to be owner .
returns total number of transactions after filter be apply .
public function start here .
create mintedamount tokens and send it to target .
transfers tokens hold by timelock to beneficiary .
returns the rate of tokens per wei at the present time .
validation of an incoming purchase .
getters to allow the same blacklist to be use also by other contract ( include upgrade tether ) .
require quorum so it 's callable only via a script execute by this contract .
require quorum so it 's callable only via a script execute by this contract .
"ui helper fx - returns signers from offset a signer id ( index in allsigners ) , address a uint , isactive 0 or 1 ."
"ui helper fx - returns script from offset a scriptid ( index in scriptaddresses ) , address a uint , state , signcount ."
can be public because it require approval .
nonce be the same thing a a 'check number ' .
the tokens be withdraw from the lava wallet and transfer into the to account .
the tokens remain in lava wallet .
approve lava tokens for a smart contract and call the contract receiveapproval method all in one fell swoop .
owner can transfer out any accidentally send erc20 tokens .
remember you need pre-approval for this - nice with approveandcall .
"no approve need , only from msg . sender ."
requires approval so it can be public .
"no approve need , only from msg . sender ."
close the ico .
prefix a bytes32 value with x19ethereum signed message : .
transfers base on an offline sign transfer instruction .
erc20 transferfrom attack protection : https : / / github . com / decentlabs / dcm-poc / issue / 57 .
issue tokens .
burn tokens .
to upgrade feeaccount ( eg .
transferandnotify can be use by contract which require tokens to have only 1 tx ( instead of approve + call ) .
transferandnotify base on an instruction sign offline .
locker request interest when lock fund .
locker notify when release fund to update kpis .
issue loan if ltd stay within range allow by ltd params .
nb : this be call by lender contract with the sum of all loan collect in batch .
function to migrate old totalloanamount and totallockedamount from old monetarysupervisor contract when it 's upgraded .
to allow upgrade of interestearnedaccount and augmintreserves contract .
user can request to convert their tokens from old augminttoken versions in 1 : 1 transfernotification be call from augminttoken 's transferandnotify .
helper function for ui .
helper function for ui .
return maximum lockable token amount allow by ltd params .
return maximum borrowable token amount allow by ltd params .
to allow upgrade of rates contract .
this function require previous approval to transfer tokens .
place sell token order call from augminttoken 's transferandnotify .
match any two order if the sell price buy price trade price be the price of the maker ( the order place earlier ) revert if any of the order have be remove .
match a many order a possible from the passed order .
"return chunk_size order start from offset order be encode a id , maker , price , amount ."
"repay loan , call from augminttoken 's transferandnotify ."
to allow upgrade of rates and monetarysupervisor contract .
"return chunk_size loan products start from some offset : productid , mindisbursedamount , term , discountrate , collateralratio , defaultingfeept , maxloanamount , isactive ."
return chunk_size loan start from some offset .
"return chunk_size loan of a give account , start from some offset ."
"internal function , assume repayment amount already transfer ."
"lock fund , call from augminttoken 's transferandnotify ."
"return 20 lock products start from some offset lock products be encode a perterminterest , durationinsecs , minimumlockamount , maxlockamount , isactive ."
"return chunk_size lock start from some offset lock products be encode a lockid , owner , amountlocked , interestearned , lockeduntil , perterminterest , durationinsecs , isactive ."
"return chunk_size lock of a give account , start from some offset lock products be encode a lockid , amountlocked , interestearned , lockeduntil , perterminterest , durationinsecs , isactive ."
internal function .
restricted function to allow pretoken signers to fix incorrect issuance .
function to transfer agreement ownership to other wallet by owner it 's in erc20 form so owners can use standard erc20 wallet just need to pass full balance a value .
restricted function to allow pretoken signers to fix if pretoken owner lose key .
private function use by transferagreement transfer .
"ui helper fx - returns all agreements from offset a index in allagreements , account address a uint , balance , agreementhash a uint , discount a uint , valuationcap a uint ."
todo : this be only for first pilot to avoid fund stick in contract due to bug .
allows anyone to execute a confirmed transaction or ether withdraws until daily limit be reach .
airdrop to token holders .
burns a specific amount of tokens .
"helper method to get token detail , name , symbol and totalsupply in one go ."
make sure this function name match the contract name above .
replace service account with new one .
is caller ( sender ) service account .
public check method .
override token creation to set token address in constructor .
update release amount for single day accord to dividend rule in https : / / coincool . top .
set the default wallet address .
util function to change bytes data to bytes32 data .
"receive approval from an erc20 token contract , take a record ."
check if withdraw amount be not valid .
"withdraw tokens , send tokens to target default wallet ."
get the deposit record number .
get the one of the deposit record .
get the withdraw record number .
get the one of the withdraw record .
bind a contract a it owner .
change the owner of the contract from this contract address to the original one .
change the owner of the contract from this contract address to another one .
"withdraw tokens , send tokens to target default wallet ."
create deposit contract address for the default withdraw wallet .
get the number of withdraw wallet address bindig to the deposit contract address .
get the withdraw wallet address list bind to the deposit contract address .
change the default withdraw wallet address bind to the deposit contract address .
freeze the tokens in the deposit address .
withdraw the tokens from the deposit address to default wallet with charge fee .
check if the wallet name be not match the expected wallet address .
"withdraw tokens from this contract , send tokens to target withdraw wallet ."
"withdraw tokens , send tokens to target withdraw wallet ."
"withdraw , send ether to target ."
"withdraw tokens , send tokens to target ."
terminate contract and refund to owner .
"panicbutton and refunduser be here incase of an emergency , or launch of a new contract ."
internal functions .
allow transfer if the owner provide an allowance .
set allowance for other address and notify .
the address . call ( ) .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
transfer token for a specified address .
function to mint tokens .
function to mint tokens .
source of tokens .
determines how eth be store / forward on purchase .
low level token purchase * * * do not override .
override to extend the way in which ether be convert to tokens .
computes overall bonus base on time of contribution and amount of contribution .
"this will be invoke by the owner , when owner want to rescue tokens ."
"interface function , can be overwrite by the superclass ."
burn extra tokens from a balance .
allow the token holder to upgrade some of their tokens to a new contract .
set an upgrade agent that handle .
"internal transfer , only can be call by this contract ."
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
get the current buy and sell price .
buy tokens from contract by send ether .
sell amount tokens to contract .
transfer tokens from other address .
destroy tokens .
destroy tokens from other account .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
freeze ? prevent allow target from send receive tokens .
"compute the earned discount , top at 60 ."
set the contract that can call release and make the token transferable .
owner can allow a particular address ( a crowdsale contract ) to transfer tokens despite the lock up period .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
when new user will contribute ico contract will automatically send bonus to referral .
"call by the owner on emergency , trigger stop state ."
"call by the owner on end of emergency , return to normal state ."
limit token transfer until the crowdsale be over .
burns a specific amount of tokens .
total supply .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer .
token owner can approve for spender to transferfrom ( . . . ) .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
decreasing totalsupply .
transfer tokens from one address to another param _from address the address which you want to send tokens from param _to address the address which you want to transfer to param _value uint256 the amout of tokens to be transfer .
return total number of token .
transfer _value tokens to _to from msg . sender .
return _owner how many tokens .
destroy his tokens .
return how many tokens _owner approve to _spender .
increase approval to _spender .
decrease approval to _spender .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
freeze account ( address ) .
unfreeze account ( address ) .
transfers tokens hold by timelock to beneficiary .
"create token with _name , internally ."
assigns a new address to act a the coo .
allows the cfo to capture the balance available to the contract .
return tokenid array .
return tokens price list .
modifier to make a function callable only when the contract be not auctionpaused .
modifier to make a function callable only when the contract be auctionpaused .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
change eth cost of token ( goal be to keep it peg to 0 . 10 usd ) .
lock token supply .
increase total supply ( issue new tokens ) .
end crowd sale .
open a new crowd sale .
add amount owe ( usually from broker to user ) .
token owner can approve for spender to transferfrom ( . . . ) .
allow an address to participate in the crowd sale up to some limit .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
token deployment .
crowdsale stage management .
change the current rate .
finish : mint extra tokens a need before finalize the crowdsale .
only owner can withdraw all contract 's eth .
send _value tokens to _to from msg . sender .
"send _value tokens to _to from '_from ' address , the '_value ' ca n't large then allowance by '_from ' who set to 'msg . sender ' ."
freeze or unfreeze account .
only the contract owner can mint token .
allows the current owner to transfer control of the contract to a newowner .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
get the token balance for account tokenowner .
this be to add the token sale platform ownership to send tokens .
to be do after kill the old conttract else conflict can take place .
functiion to force finalize the ico by the owner no check call here .
change the fund end block .
change the funding start block .
the min cap usd function too chage the miin cap usd .
fucntion to change the max cap usd .
owner can transfer out any accidentally send erc20 tokens .
remember you need pre-approval for this - nice with approveandcall .
"no approve need , only from msg . sender ."
requires approval so it can be public .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
the address of the controller be the only address that can call a function with this modifier .
send _amount tokens to _to from _from on the condition it be approve by _from .
added support for the erc 223 tokenfallback method in a transfer function with a payload .
added support for the erc 223 tokenfallback method in a transfer function with a payload .
added support for the erc 223 tokenfallback method in a transfer function with a payload .
approves and then call the receive contract .
returns number of tokens in circulation .
"disables the contract and wipe all the balance , can be use only by owner ."
returns the balance of specific account .
"user can transfer tokens with this method , method be disable if emergencylock be activate ."
"this be use to allow some account to utilise transferfrom and send tokens on your behalf , this method be disable if emergencylock be activate ."
"this be use to send tokens and execute code on other smart contract , this method be disable if emergencylock be activate ."
"sender can transfer tokens on others behalf , this method be disable if emergencylock be activate ."
returns the amount od tokens that can be send from this addres by spender .
creates new tokens as long a total supply do not reach limit .
destroys the amount of tokens and lower total supply .
"saves exidentaly sent tokens to this contract , can be use only by owner ."
add an address to the whitelist .
tokenamount how mony tokens be buy .
preallocate tokens for the early investors .
allow anonymous contributions to this crowdsale .
track who be the customer make the payment so we can send thank you email .
allow anonymous contributions to this crowdsale .
"invest to tokens , recognize the payer ."
legacy api signature .
called from invest ( ) to confirm if the curret investment do not break our cap rule .
dynamically create tokens and assign them to the investor .
addition to erc20 token methods .
addition to erc20 token methods .
addition to erc20 token methods .
addition to standardtoken methods .
addition to standardtoken methods .
"call by the owner to unpause , return to normal state ."
transfer token for a specified address when not pause .
transfer tokens from one address to another when not pause .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
"call by the owner to pause , trigger stop state ."
allow transfer if the owner provide an allowance .
set allowance for other address and notify .
creator / owner can locked / unlock smart contract .
destroy tokens amount ( caution ! ! ! the operation be destructive and you can not go back ) .
destroy tokens amount from another account ( caution ! ! ! the operation be destructive and you can not go back ) .
distribution token from admin .
disable trade .
"play central banker and set the fractional reserve ratio , from 1 to 1000000 ppm ."
gets price base on a sample 1 ether buy order .
get the buy price base on the order size .
get the sell price base on the order size .
buy tokens with ether .
sell tokens for ether .
enable trade .
compute the large integer small than or equal to the binary logarithm of the input .
"the global maxexparray be sort in descend order , and therefore the following statements be equivalent : ."
this function can be auto-generated by the script 'printfunctiongeneralexp . py ' .
return log ( x / fixed_1 ) * fixed_1 .
return e ( x / fixed_1 ) * fixed_1 .
"give a token supply , connector balance , weight and a deposit amount ( in the connector token ) , calculate the return for a give conversion ( in the main token ) ."
"give a token supply , connector balance , weight and a sell amount ( in the main token ) , calculate the return for a give conversion ( in the connector token ) ."
general description : .
compute log ( x / fixed_1 ) * fixed_1 .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
burns a specific amount of tokens .
function to mint tokens .
function to stop mint new tokens .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
low level token purchase function .
allow execution by the manager only .
allow execution by either the owner or the manager only .
allow transfer the contract management the new manager still need to accept the transfer can only be call by the contract manager .
use by a new manager to accept a management transfer .
ensure that the controller be the token 's owner .
ensure that the controller be not the token 's owner .
allow transfer the token ownership the new owner still need to accept the transfer can only be call by the contract owner .
use by a new owner to accept a token ownership transfer can only be call by the contract owner .
disable / enable token transfer can only be call by the contract owner .
withdraw tokens hold by the controller and send them to an account can only be call by the owner .
validate a connector token address - verify that the address belong to one of the connector tokens .
validate a token address - verify that the address belong to one of the convertible tokens .
validate maximum conversion fee .
validate conversion fee .
validate connector weight range .
allow execution only when conversions be n't disable .
return the number of connector tokens define .
allow the owner to update the registry contract address .
"allow the owner to update enable the conversion whitelist contract address when set , only address that be whitelisted be actually allow to use the converter note that the whitelist check be actually do by the bancornetwork contract ."
allow the manager to update the quick buy path .
allow the manager to clear the quick buy path .
return the length of the quick buy path array .
disable the entire conversion functionality this be a safety mechanism in case of a emergency can only be call by the manager .
update the current conversion fee can only be call by the manager .
"give a return amount , return the amount minus the conversion fee ."
define a new connector for the token can only be call by the owner while the converter be inactive .
update one of the token connectors can only be call by the owner .
disable purchase with the give connector token in case the connector token get compromise can only be call by the owner note that sell be still enable regardless of this flag and it can not be disable by the owner .
"return the connector 's virtual balance if one be define , otherwise return the actual balance ."
return the expected return for convert a specific amount of _fromtoken to _totoken .
return the expected return for buy the token for a connector token .
return the expected return for sell the token for one of it connector tokens .
return the expected return for sell one of the connector tokens for another connector token .
convert a specific amount of _fromtoken to _totoken .
convert a specific amount of _fromtoken to _totoken .
buy the token by deposit one of it connector tokens .
sell the token by withdraw from one of it connector tokens .
"convert the token to any other token in the bancor network by follow a predefined conversion path note that when convert from an erc20 token ( a oppose to a smart token ) , allowance must be set beforehand ."
"convert the token to any other token in the bancor network by follow a predefined conversion path note that when convert from an erc20 token ( a oppose to a smart token ) , allowance must be set beforehand ."
"deprecate , backward compatibility ."
"helper , dispatch the conversion event ."
copy the connectors from the old converter to the new one .
copy the conversion fee from the old converter to the new one .
copy the quick buy path from the old converter to the new one .
transfer the balance of each connector in the old converter to the new one .
return the connector settings .
allow the owner to update the factory contract address .
allow the owner to update the contract registry contract address .
upgrade an old converter to the late version will throw if ownership be n't transfer to the upgrader before call this function .
create a new converter with same basic data a the original old converter the newly create converter will have no connectors at this step .
create a new converter with the give arguments and transfer the ownership and management to the sender .
calculate amount .
sell token and send to contributor address .
user balance .
true if the transaction can buy tokens .
true if the goal be reach .
true if crowdsale event have end .
should be call after crowdsale end or to emergency stop the sale .
transfer token to _to .
transfer token from _from to _to .
transfer value token to _to .
get balance .
approve send token .
approve _spender send token .
the function can be call only before or after the tokens have be releasesd .
recycle user token to owner account .
create new tokens and allocate them to an address . .
"when token be release to be transferable , enforce no new tokens can be create ."
owner can update token information here .
fix for the erc20 short address attack .
the function can be call only by a whitelisted release agent .
limit token transfer until the crowdsale be over .
"minimum of 0 . 001 ether for purchase in the public , pre-ico , and private sale ."
reverts if not in crowdsale time range .
increase owner token .
register to participate in the competition .
"concludes the tournament and issue the prize , then self-destruct ."
the emergency escape hatch in case something have go wrong .
gateway check - do you send exactly the right amount ? .
transfer and lock this value only call by admins ( limit when setlock ) .
"when the result of a game be know , enter the result ."
"concludes the tournament and issue the prize , then self-destruct ."
gateway check - do you send exactly the right amount ? .
make a prediction for a game .
how many people be take part in the tournament ? .
keeping this open for anyone to update anyone else so that at the end of the tournament we can force a score update for everyone use a script .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
change owner of contract .
remove validate contract .
check whether contract be valid .
throws if call by non-allowed contract .
transfer ixt .
set new token address in case of update .
create / updates action .
retrieve price for action .
add account to allow call of transferixt .
remove account from allow account .
throws if call by other account than owner .
throws if contract be pause .
throws if contract be not pause .
allows drain of tokens ( to owner ) that might accidentally be send to this address .
allows drain of ether .
switches the contract from pause to non-paused or vice-versa .
"signal that new upgrade be available , contract must be most recent upgrade and allow to upgrade ."
"confirmation that this be indeed the next version , call from previous version of contract ."
add validate contract .
throws if call by other account than broker or client .
"allows broker and client to cancel contract , when both have cancel , status be update and contract become upgradeable ."
"creates policy , transfer ownership to msg . sender , ."
retrieve all contract that msg . sender .
retrieve all contract ever create .
change address of payment contract .
function that be call when transaction target be an address .
function to access name of token .
function that be call when a user or another contract want to transfer fund .
transfer owner to another address .
fix for the erc20 short address attack .
transfer modifier .
set transfer lock .
permanently turn off the blacklist switch .
set blacklist .
set reflect switch .
setminimum amount to participate .
add single address to whitelist .
remove single address from whitelist .
getbfex function .
calculate token amont .
check if address be on the whitelist .
disable whitelist state .
enable whitelist state .
set rate of token per 1 eth .
setminimum amount to participate .
gets the balance of the specified address .
total supply .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
owner can transfer out any accidentally send erc20 tokens .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
send coin from the caller 's account .
allow another account to withdraw up to some number of coin from the caller .
send coin from an account that previously approve this caller to do so .
permanently delete some number of coin that be in the caller 's account .
make some of the caller 's coin temporarily unavailable .
frozen coin can be make available again by unfreeze them .
make sure you allow this contract enough erc20 tokens before use this function a erc20 contract do n't have an allowance function to check how much it can spend on your behalf .
transfer tokens .
function to allow creation of new coin .
get the token balance for account tokenowner .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
the tokens can never be steal .
"external be cheap to use because it use the calldata opcode while public need to copy all the arguments to memory , a describe here ."
rev1 related information function .
a trap door for when someone send tokens other than the intended ones so the overseers can decide where to send them .
dev cut .
buy function .
balance of an address .
owner of token .
tokens of an address .
token exist .
approve for .
contract owner .
set charity address .
set item registry .
add admin .
remove admin .
a new 'block ' to be mine .
1m piece total reward begin at 4 and be cut in half every reward era ( a tokens be mine ) .
investors can claim refund here if whitelisted be unsuccessful .
withdraw tokens only after whitelisted end and after crowdsale end .
change the phase from phase1 to phase2 .
change the phase from phase2 to phase3 sale .
reverts if beneficiary be not whitelisted .
adds single address to whitelist .
withdraw tokens only after investors add into whitelist .
change crowdsale closingtime .
change token rate per eth .
change admin chargers .
change mincontribution amountamount .
checks whether the goal have be reach .
tokens distribution .
assemble the give address bytecode .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newadmin .
function to mint tokens .
"internal transfer , only can be call by this contract ."
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
burns a specific amount of tokens .
claim your mtu or ether .
allow mtu transfer .
redeem mtu .
for non issuance deposit .
it be address of multieventshistory caller assume we be inside of delegate call .
trust an address to perform recovery procedure for the caller .
revoke trust to perform recovery procedure from an address .
adds a co-owner of a contract .
emoves a co-owner of a contract .
sets eventshstory contract address .
adds a co-owner for an asset with provided symbol .
removes a co-owner for an asset with provided symbol .
provides a cheap way to get number of symbols register in a platform .
check asset existance .
returns asset decimals .
returns asset name .
returns asset description .
returns asset reissuability .
returns asset owner address .
check if specify address have asset owner right .
checks if a specified address have asset owner or co-owner right .
returns asset total supply .
returns asset balance for a particular holder .
returns asset balance for a particular holder id .
returns current address for a particular holder id .
sets proxy contract address for a particular asset .
returns holder id for the specified address .
transfers asset balance between holders wallets .
issues new asset token on the platform .
issues new asset token on the platform .
issues additional asset tokens if the asset have dynamic supply .
destroys specify amount of senders asset tokens .
passes asset ownership to specify address .
check if specify holder trust an address with recovery procedure .
perform recovery procedure .
sets asset spend allowance for a specified spender .
returns asset allowance from one holder to another .
prforms allowance transfer of asset balance between holders wallets .
transfers asset balance between holders wallets .
transfers asset balance between holders wallets .
ask asset proxy contract to emit erc20 compliant transfer event .
"returns holder id for the specified address , create it if need ."
sets asset spend allowance for a specified spender .
returns asset allowance from one holder to another .
emits error if call not by asset owner .
unauthorized if call not by one of symbol 's partowners or owner .
unauthorized if call not by one of partowners or contract 's owner .
emits error if call not by asset proxy .
emits error if _from do n't trust _to .
adds a new match to the smart contract and schedule an oraclize query call to determine the winner of a match within 3 hours .
oraclize query callback to determine the winner of the match .
the function contain this modifier can only call the owner of the contract .
"start the ico period , be require the waitingforico state of the contract ."
5 ( 25 million tokens ) will remain in the superium foundation and will be use to far development over next four years .
change the owner of the contract .
creates the required number of tokens on the specified account .
"burns tokens on the contract , without affect the token holders and the owner of the contract ."
withdraws tokens from the contract if they accidentally or on purpose be it place there .
withdraws all the ether from the contract to the owner account .
purchasing tokens be only allow for presale and ico contract state .
"call function transfer transferfrom and approve , be only allow with active state of the contract ."
"finish the pre-sale period , be require the presale state of the contract ."
destroy tokens from other account .
approve should be call when allowance _spender 0 .
fix for the erc20 short address attack .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
transfer tokens to multiple address .
destroy tokens .
function to freeze account .
"internal transfer , only can be call by this contract ."
transfer tokens from one address to another .
burns a specific amount of tokens .
low level token purchase * * * do not override .
source of tokens .
override to extend the way in which ether be convert to tokens .
total supply .
get the token balance for account tokenowner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
this override of the owned contract ensure that the new owner of the contract have a token .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
token owner can approve for spender to transferfrom ( . . . ) .
only old controller can call setcontrolleraddress .
function to stop mint new tokens .
uint constant minbanktime 1 days ; .
this be a constructor function which mean the following function name have to match the contract name declare above .
transfer token for a specified address .
source of tokens .
determines how eth be store / forward on purchase .
change the feetake amount .
change the feerebate amount .
add a erc20 token contract address to the whitelisted ones .
remove a erc20 token contract address from the whitelisted ones .
add an user address to the whitelisted ones .
remove an user address from the whitelisted ones .
deposit wei into the exchange contract .
withdraw wei from the exchange contract back to the user .
perform a new token deposit to the exchange contract .
withdraw the give token amount from the requester balance .
check the balance of the give user in the give token .
place a new order to the this contract .
cancel an exist order .
perform a trade .
check if the trade with provided parameters will pass or not .
calculate the available volume for a give trade .
trade balance of give tokens amount between two users .
validate an order hash .
ensure the function caller be the contract admin .
change the admin address .
change the accountlevels contract address .
change the feeaccount address .
change the feemake amount .
distribute incoming fund to the 7 address base on agree .
this be a constructor function which mean the following function name have to match the contract name declare above .
destroy tokens from other account .
sell amount tokens to contract .
create mintedamount tokens and send it to target .
set allowance for other address .
destroy tokens .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
burns a specific amount of tokens .
function to mint tokens .
function to resume mint new tokens .
set the minimum amount in wei that can be invest per each purchase .
set the overall maximum amount in wei that can be invest by user .
extend parent behavior require purchase to have minimum weiamount and be within overall maxweiamount .
transfer ownership of token back to wallet .
deposit ether with smart contract to allow refund .
allow withdraw fund from smart contract .
set the new rate .
this method refund all the contribution that _purchaser have do .
returns the api url for a give token id .
string helpers below be take from oraclize .
only people with tokens .
future game can be add so they ca n't earn divs on their token balance .
want to prevent snipers from buy prior to launch .
retrieve the total token supply .
retrieve the tokens own by the caller .
retrieve the dividends own by the caller .
retrieve the token balance of any single address .
retrieve the dividend balance of any single address .
return the buy and sell price of 1 individual token .
function for the frontend to dynamically retrieve the price of buy order .
only people with profit .
function for the frontend to dynamically retrieve the price of sell order .
calculate token sell value .
calculate token price base on an amount of incoming ethereum .
calculate token sell value .
only owner .
only non-whales .
"converts all incoming ethereum to tokens for the caller , and pass down the referral address ."
converts all of caller 's dividends to tokens .
alias of sell ( ) and withdraw ( ) .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
mint mintamount token .
transfer tokens from other address .
set allowance for other address .
roll the dice for number .
special method for fill contract bank .
get random number .
create all tokens 180 millions this address will hold all tokens all community contrubutions coin will be take from this address .
update contract configuration .
add admin to whitelist .
remove admin from whitelist .
allow admin to reclaim all unclaim tokens back to the specify wallet .
admin / staffs update contract configuration .
return list of bounty address .
update contract configuration .
admin / staffs update contract configuration .
remove user from whitelist .
update multiple users reward amount .
query display function .
check be the address be in staff list .
return admin address list .
return staff address list .
return list of bounty address .
check be the user be in signed up list .
update contract configuration .
bounty claim their reward tokens by send zero eth to this smart contract .
bounty claim their reward tokens by send zero eth to this smart contract .
get reward function base on the payout style .
function for who will receive the pay ether .
owner retrieve contract configuration .
owner retrieve contract configuration .
add staff to whitelist .
remove staff from whitelist .
allow admin to reclaim all unclaim tokens back to the specify wallet .
update contract configuration .
returns the development fund balance .
returns the total amount development fund have earn .
returns affiliate commision .
withdraw development fund .
withdraws all of the callers earn .
withdraws affiliate earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
only people with profit .
retrieve the dividends own by the caller .
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
converts all of caller 's dividends to tokens .
converts all of caller 's affiliate reward to tokens .
returns the saved referral .
returns the total referral commision earn .
determines if token exist by check it 's price .
withdraw dev 's cut .
admin may refund a submission to a user .
refund a submission by a specific tokenid .
change how much it cost to submit a meme .
gets the owner of the specify token id .
approves another address to claim for the ownership of the give token id .
internal function to clear current approval and transfer the ownership of a give token id .
internal function to clear current approval of a give token id .
mint token function .
internal function to add a token id to the list of a give address .
purchase meme from previous owner .
safetransfer allow a push to an address that will not revert if the address throw .
transfer token from previous owner to new owner .
determines next price of token .
used by posters to submit and create a new meme .
withdraw anyone 's creator balance .
return all relevant data for a meme .
check the creator balance of a certain address .
burns a specific amount of tokens .
get random number .
check be valid number .
"split user bet in some piece : - 55 go to bank - 20 go to contract developer : ) - 12 go to sponsor - 10 go to stock for future restore - 3 go to referral ( if exist , if not - go into stock ) ."
check the winner .
reward the winner .
claim your share of the balance .
claim part of your share of the balance .
add a new payee to the contract .
add to payee balance .
internal functions .
the value gain from hit the character ( zero be the character be protect ) .
find the old character .
distribute the give amount among the survive character .
allow the owner to collect the accumulated fee send the give amount to the owner 's address if the amount do not exceed the fee ( can not touch the players ' balance ) minus 100 finney ( ensure that oraclize fee can be pay ) .
withdraw ndc and tpt tokens .
pay out the players .
pay out the players and kill the game .
sell the character of the give id throw an exception in case of a knight not yet teleport to the game .
receive approval to spend some tokens .
"knight be only enter the game completely , when they be teleport to the scene ."
add protection to a character .
"the type , value and owner of the character ."
the character id .
"4 array contain the ids , type , value and owners of the character ."
the number of dragons .
the number of knight .
the accumulated fee .
set the price of the character type .
set the fight factor .
set the fee to charge on each purchase .
buy a many character a possible with the transfered value of the give type .
set the maximum number of character allow in the game .
set the teleport price .
set the protection price .
set the eruption threshold .
the uint .
"add a single dragon of the give type to the ids array , which be use to iterate over all character ."
leave the game .
replaces the character with the give id with the last character in the array .
the volcano eruption can be trigger by anybody but only if enough time have pass since the last eription .
"a knight may attack a dragon , but not choose which one ."
the index of a random dragon .
the random number .
"integer division of two number , truncate the quotient ."
withdraw a bid that be overbid .
function to collect tokens from the list of address .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
set whether _to be on the list or not .
allows the current owner to set the pendingowner address .
initiate the distribution .
return allocation for give window .
return information about the select window .
return information for the current window .
return the number of the current window .
commit fund for a give window .
commit fund for the current window .
withdraw tokens after the window have close .
get the reward from all closed windows .
return a array which contain reward for every closed window a convinience function to be call for update a gui .
return a array fill with commitments of address for every window a convinience function to be call for update a gui .
return a array fill with eth total for every window a convinience function to be call for update a gui .
move eth to the foundation wallet .
"call by the owner to pause , trigger stop state ."
"call by the owner to resume , return to normal state ."
burns a specific amount of tokens .
internal interface ( extensible ) .
locked account .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
modifier to make a function callable only when the contract be not pause .
modifier to make a function callable only when the contract be pause .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
low level token purchase * * * do not override .
allows the current owner to transfer control of the contract to a newowner .
validation of an incoming purchase .
source of tokens .
executed when a purchase have be validate and be ready to be execute .
override to extend the way in which ether be convert to tokens .
determines how eth be store / forward on purchase .
checks whether the cap have be reach .
extend parent behavior require purchase to respect the fund cap .
reverts if not in crowdsale time range .
checks whether the period in which the crowdsale be open have already elapse .
extend parent behavior require to be within contribute period .
reverts if beneficiary be not whitelisted .
adds single address to whitelist .
adds list of address to whitelist .
removes single address from whitelist .
extend parent behavior require beneficiary to be in whitelist .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
"weight in emont , x * x ."
for payment contract to call .
public function .
public get .
cell have valid fish or bonus .
send _amount tokens to _to from msg . sender .
send _amount tokens to _to from _from on the condition it be approve by _from .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
function to stop mint new tokens .
burns a specific amount of tokens .
claim interest generate by poscontroller .
proxypayment implement minimetoken controller 's proxypayment .
ontransfer implement minimetoken controller 's ontransfer .
onapprove implement minimetoken controller 's onapprove .
override dotransfer function .
invoke ontransfer function before actual transfer function be execute .
invoke ontransfer function before actual transfer function be execute .
invoke onapprove function before actual transfer function be execute .
internal function to determine if an address be a contract .
buy a team directly from the contract for the calculated price which ensure that the owner get a profit .
transferring a team to another owner will entitle the new owner the profit from buy .
checks if a give address currently have transferapproval for a particular token .
take win money or money for cancel lottery .
fix for the erc20 short address attack .
the function can be call only by a whitelisted release agent .
transfer tokens from one address to another .
approve should be call when allow _spender 0 .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
"internal transfer , only can be call by this contract ."
fix for the erc20 short address attack .
transfer token for a specified address .
fix for the erc20 short address attack .
grant tokens to a specified address .
revoke the grant of tokens of a specifed address .
is currently in the period after the private start time and before the public start time .
transfer token for a specified address .
is currently the crowdfund period .
is complete .
may only be call by the owner address .
may only be call if the crowdfund have not be halt .
transfer amount of tokens from sender account to recipient .
transfer amount of tokens from a specified address to a recipient .
constant function return the current dans price .
"calculate wmount of dans we get , give the wei and the rat we 've define per 1 eth ."
"given the rate of a purchase and the remain tokens in this tranche , it will throw if the sale would take it past the limit of the tranche ."
special function can only be call by pre-buy and only during the pre-crowdsale period .
gets the balance of the specified address .
to be call at the end of crowdfund period .
may be use by owner of contract to halt crowdsale and no long except ether .
failsafe drain .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
function to check the amount of tokens than an owner allow to a spender .
checks whether it can transfer or otherwise throw .
checks modifier and allow transfer if tokens be not lock .
checks modifier and allow transfer if tokens be not lock .
default transferable tokens function return all tokens for a holder ( no limit ) .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
check if it be safe to add two number .
check if it be safe to subtract two number .
check if it be safe to multiply two number .
total supply .
get the token balance for account tokenowner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
check the amount of grant that an address have .
calculate amount of vested tokens at a specifc time .
get all information about a specifc grant .
get the amount of vested tokens at a specific time .
calculate the amount of non vest tokens at a specific time .
transfer amount of tokens from sender account to recipient .
transfer token for a specified address .
transfer amount of tokens from a specified address to a recipient .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
checks modifier and allow transfer if tokens be not lock .
checks modifier and allow transfer if tokens be not lock .
default transferable tokens function return all tokens for a holder ( no limit ) .
"internal transfer , only can be call by this contract ."
transfer all ether hold by the contract to the owner .
makes the contract type verifiable .
establishes ownership and bring token into existence aka mint a token .
return next high even _multiple for _amount parameter ( e . g .
allow u to transfer out airdropped tokens if we ever receive any .
add price ( only bw owner can do this ) .
remove price ( only bw owner can do this ) .
checks if two coordinate be adjacent : xxx xox xxx .
add price ( only bw owner can do this ) .
checks if entire game ( except battle value withdraw ) be pause or not .
"only allow wallets to call this function , not contract ."
allow a new user to claim one or more previously unclaimed tile by pay ether .
allow an exist user to claim one or more previously unclaimed tile by pay ether .
"allow users to change name , image url , tag and home url ."
this function fortify multiple previously claim tile in a single transaction .
"a new user attack a tile claim by someone else , try to make it theirs through battle ."
"an exist user attack a tile claim by someone else , try to make it theirs through battle ."
"converts ( x , y ) to tileid xy ."
move army block value from one block to an adjacent block .
allow users to withdraw battle value in ether .
transfer block value to battle point for free .
only use by owner for raffle .
allow update censor status .
"pause the entire game , but let users keep withdraw battle value ."
"the owner can transfer ownership of own tile to other users , a prize in competitions ."
"converts _tileid to ( x , y ) ."
this function claim multiple previously unclaimed tile in a single transaction .
return a pseudo random number between low and upper bound give the number of previous block it should hash .
a user try to claim a tile that 's already own by another user .
lets a tile owner offer a tile for sale .
throws if call by any account other than the owner .
the transaction address and send the event a approval .
the amount which spender be still allow to withdraw from owner .
allows the current owner to transfer control of the contract to a newowner .
security wallet address set .
start or pause tradable to transfer token .
total tokens supply .
the balanace the particular account .
send value token to to from msg . sender .
returns the account balance of another account with address _owner .
"transfers _value amount of tokens to address _to , and must fire the transfer event ."
"transfers _value amount of tokens from address _from to address _to , and must fire the transfer event ."
"allows _spender to withdraw from your account multiple time , up to the _value amount ."
returns the amount which _spender be still allow to withdraw from _owner .
pause or unpause the contract in case a problem be detect .
allow owner to grant / revoke admin privilege to other account .
remove a token and / or account from the blacklist to allow them to submit a token again .
approve a give token and account address to make it available for airdrop .
remove token and airdropper from whitelist .
allow admins to add users to the list manually .
"before call this function , you must have give the airdrop central an allowance of the tokens to distribute ."
return unclaimed tokens to the airdropper after the airdrop expire .
user can signup to the airdrop central to receive token airdrops .
warning : quiting from the airdrop central will make you lose tokens not yet withdraw .
calculate the amount of tokens the user will be able to withdraw .
calculate and withdraw the amount of tokens the user have be award by airdrops .
"update marriage licence image hash , either partner can update ."
"update prenup text , but only if both partner have previously agree to update the prenup ."
"update partner 1 will , only partner 1 can update ."
"update partner 2 will , only partner 2 can update ."
"add life event , either partner can update ."
update partner 1 vow only once .
update partner 2 vow only once .
update marriage status only if both partner have previously vote to update the prenup .
partners can sign the contract .
"function to vote to allow for update marital status , both partner must vote to allow update ."
"function to vote to allow for update prenup , both partner must vote true to allow update ."
"update coupleimage hash , either partner can update ."
take win money or money for cancel game .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address from authorized balance of sender .
transfer token for a specified address .
oraclize callback method .
transfer some fund to the target purchase address .
transfer with additional gas .
this allow transfer to multisigs that use more than 2300 gas in their fallback function .
we can use this function to move unwanted tokens in the contract .
this contract be design to have no balance .
this method can be override to enable some sender to buy token for a different address .
input pass in to this function base on the parameters above .
modifier to handle token distribution .
claim unclaimed derivative tokens .
set the address and release time of the next token distribution .
make sure derivative tokens be handle for the _from and _to address .
make sure derivative tokens be handle for the msg . sender .
owner can transfer out any accidentally send erc20 tokens .
help debug mine software .
help debug mine software .
a new 'block ' to be mine .
the number of zero the digest of the pow solution require .
100m coin total reward begin at 250 and be cut in half every reward era ( a tokens be mine ) .
function to mint tokens .
function to stop mint new tokens .
minter can pass it 's role to another address .
owner can unfreeze any address .
activation of the token allow all tokenholders to operate with the token .
low level token purchase function .
return true if the transaction can buy tokens .
get the amount of unsold tokens allocate to this contract ; .
return true if the crowdsale have raise enough money to be a successful .
allow to update tokens rate for owner .
allow load refund back on the contract for the refund .
buyers can claim refund .
allows the owner to set a string with their contact information .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
validation of an incoming purchase .
"modifier to make a function callable only if user be in whitelist a , or in whitelist b and openingtimeb have pass ."
change the whitelist manager .
change the gas price limit .
add a group of users to whitelist a .
add a group of users to whitelist b .
remove a group of users from whitelist a .
remove a group of users from whitelist b .
allow adjustment of the close time .
record a transaction that happen during the presale and transfer tokens to lock tokens wallet .
returns the confirmation status of a transaction .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
returns number of confirmations of a transaction .
returns total number of transactions after filers be apply .
returns list of owners .
"returns array with owner address , which confirm transaction ."
returns list of transaction ids in defined range .
allows to add a new owner .
allows to remove an owner .
allows to replace an owner with a new owner .
allows to change the number of required confirmations .
allows an owner to submit and confirm a transaction .
allows an owner to confirm a transaction .
allows an owner to revoke a confirmation for a transaction .
allows anyone to execute a confirmed transaction .
call have be separate into it own function in order to take advantage of the solidity 's code generator to produce a loop that copy tx . data .
our tokens .
remove a role from an address .
allows execution by the contract manager only .
set rate of eth and update token price .
enable token transfer .
issue tokens for investors who pay in ether .
allows company withdraw investments when round be over .
function to mint tokens .
invoke this function after each dividend payout .
when transfer tokens decrease dividendpayments for sender and increase for receiver .
when transfer tokens decrease dividendpayments for token owner and increase for receiver .
"if you mark a function nonreentrant , you should also mark it external ."
true if the transaction can buy tokens .
allow refund in case of unsuccess presale .
true if crowdsale event have end .
refund ether to the investors in case of under soft cap end .
refund t4t tokens to the investors in case of under soft cap end .
get bonus percent .
get number of tokens with bonus .
send weis to the wallet .
send t4t tokens to the wallet .
withdrawal eth from contract .
success finish of presale .
change owner of tokens after end of presale .
change rate .
buy ics tokens .
buy hics tokens .
buy tokens - helper function .
buy tokens for t4t tokens .
manual transfer tokens by owner ( e . g . : .
buy tokens with update rate state by owner .
low level token purchase function .
allow the owner to update the contract registry contract address .
allow the owner to update the gas price limit contract address .
allow the owner to update the signer address .
"verify that the signer address be trust by recover the address associate with the public key from elliptic curve signature , return zero on error ."
convert the token to any other token in the bancor network by follow a predefined conversion path and transfer the result tokens to a target account note that the converter should already own the source tokens .
convert the token to any other token in the bancor network by follow a predefined conversion path and transfer the result tokens to a target account .
convert token to any other token in the bancor network by follow the predefined conversion paths and transfer the result tokens to a targeted account .
convert token to any other token in the bancor network by follow a predefined conversion paths and transfer the result tokens to a target account .
execute the actual conversion by follow the conversion path .
"check whether the give converter support a whitelist and if so , ensure that the account that should receive the conversion result be actually whitelisted ."
"claim the caller 's tokens , convert them to any other token in the bancor network by follow a predefined conversion path and transfer the result tokens to a target account note that allowance must be set beforehand ."
convert the token to any other token in the bancor network by follow a predefined conversion path and transfer the result tokens back to the sender note that the converter should already own the source tokens .
"claim the caller 's tokens , convert them to any other token in the bancor network by follow a predefined conversion path and transfer the result tokens back to the sender note that allowance must be set beforehand ."
"deprecate , backward compatibility ."
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
set allowance for other address .
destroy tokens .
destroy tokens from other account .
approve should be call when allowance _spender 0 .
calculates value of reward at give time .
send coin .
set allowance for other address .
transfer token for a specified address .
total supply .
get the token balance of address .
transfer tokens from owner address .
transfer tokens .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
destroy tokens from other account .
withdraw balance .
get random star position .
create star .
update start method .
delete star .
set star sell price .
gift star .
buy star .
add new star .
get star by id .
set validation data .
get set box .
get z index and z count .
validate star parameters .
check name and message length .
check be valid msg value .
get random number .
allow total number of tokens .
transfer token for a specified address .
"internal transfer , only can be call by this contract ."
transfer tokens from one address to another .
decrease the amount of tokens that an owner allow to a spend .
mintabletoken functionality .
function to mint tokens .
owner can transfer other tokens that be send here by mistake .
throws if call by any account other than the owner .
allows the current owner to transfer mint control of the contract to a newowner .
fix for the erc20 short address attack .
transfer token for a specified address .
burns a specific amount of tokens .
function override in order to maintain the token lock during the ico .
enable token transfer .
enable token burn .
batch transfer with different amount for each address .
batch transfer with same amount for each address .
get sum of array value .
function that be call from kycbase .
finalize an ico in dependency on the goal reach : 1 ) reach goal ( successful ico ) : - release sell token for the transfer - close the vault - close the ico successfully 2 ) not reach goal ( not successful ico ) : - call finalizenok ( ) .
finalize an unsuccessful ico : - enable the refund - close the ico not successfully .
"if crowdsale be unsuccessful , investors can claim refund here ."
get the next cap a a function of the amount of sell token .
from icoengineinterface .
from icoengineinterface .
return the price a number of tokens release for each ether .
update the struc each time a country be sell .
first step to withdraw : players must confirm their pending divs before withdraw this function sum the pending balance ( pendingdividends and the pending divs from playerscore ) .
"second step to withdraw : after confirm divs , players can withdraw divs to their wallet ."
"after 7 days without any buy , the rich user and the late player will share the contract balance ! ."
"if no new buy occur ( dividendsscore 0 ) and the richest and late players do n't withdraw their dividends after 3 jackpots , the game can be stick forever ."
get the referrer of a player .
set a referrer .
dispatch the referrer bonus when a country be sell .
dispatch dividends to former owners of a country .
"we need to update the oldowner and newowner balance each time a country be sell , their handicap and playerscore will also change ."
update the worldscore .
update timestamplimit : the date on which the rich player and the last buyer will be able to share the contract balance ( 1 / 4 each ) .
refund the buyer if excess .
buy a country directly from the contract for the calculated price which ensure that the owner get a profit .
practical informations .
transferring a country to another owner will entitle the new owner the profit from buy .
"subtract two number , throw on overflow ( i . e ."
be contract .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
"unlocks erc721 behaviour , allow for trade on third party platforms ."
sets crowdsale contract address ( use for check ico status ) .
"call by user the to pause , trigger stop state not actualy use ."
modifier to make a function callable only when the contract be not pause or when sender be whitelisted .
"call by the user to unpause at ico end or by owner , return token to unlocked state ."
add wallet address to transfer whitelist ( may transfer tokens before ico end ) .
delete wallet address to transfer whitelist ( may transfer tokens before ico end ) .
returns crowdsale status ( if active return true ) .
returns tokens amount cap for current stage .
returns tokens amount available to sell at current stage .
returns base rate ( bul / eth ) of current stage .
returns actual ( base + bonus ) rate ( bul / eth ) of current stage .
main token puchase function .
forcibility withdraw contract eth balance .
calculate tokens amount and refund amount at purchase procedure .
sets withdraw wallet address .
make partical refund at purchase procedure .
give owner ability to burn some tokens amount at ico contract .
returns cost of give tokens amount .
switch contract to next stage and reset stage stats .
any of the five reserve wallets .
team reserve wallet .
life token reserve wallet .
finance token reserve wallet .
economic token reserve wallet .
develop token reserve wallet .
already lock .
token allocations have not be set .
gets totalsupply .
lock the vault for the wallets .
recover tokens in case incorrect amount be send to contract .
claim tokens for team reserve wallet .
current vesting stage for team .
claim tokens for life reserve wallet .
current vesting stage for life wallet .
claim tokens for finance reserve wallet .
current vesting stage for finance wallet .
gets account 's balance .
claim tokens for economic reserve wallet .
current vesting stage for economic wallet .
claim tokens for development reserve wallet .
check address be approve investor .
get eth deposit .
transfers the balance from msg . sender .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
get allowance .
approve should be call when allow _spender 0 .
signature methods .
builds a prefixed hash to mimic the behavior of eth_sign .
"integer division of two number , truncate the quotient ."
transfer tokens to the beneficiary account .
freeze the account at the target address .
remove tokens from the system irreversibly .
allow another contract to spend some tokens in your behalf .
approve and then communicate the approve contract in a single tx .
transfer tokens between account .
accept payment and transfer to owner account .
provides balance of the account request .
transfer tokens to the beneficiary account .
transfer tokens between account .
increase the number of coin .
function to check the amount of tokens that an owner allow jto a spender .
function to mint tokens .
total number of tokens in exsitence .
transfer tokens from one address to another .
remaining tokens for sale .
add the team and advisory members .
view the private sale end date and time .
view the presale end date and time .
set the private sale end date and time .
set the pre sale end date and time .
set the ico end date and time .
low level token purchase function .
send ether to the fund collection wallet .
"call by the owner to unpause , return to normal state ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
destroy tokens from other account .
modifier to make a function callable only when the contract be not pause .
modifier to make a function callable only when the contract be pause .
"call by the owner to pause , trigger stop state ."
total supply .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
interface to the web app .
approves and then call the receive contract .
"withdraw tokens , send tokens to target ."
"withdraw tokens , send tokens to target default wallet ."
get deposit contract address by use the default withdraw wallet .
get deposit balance and frozen amount by use the deposit address .
change the default withdraw wallet address bind to the deposit contract address .
freeze the tokens in the deposit address .
withdraw the tokens from the deposit address with charge fee .
check if the wallet name be not match the expected wallet address .
"withdraw tokens , send tokens to target withdraw wallet ."
initialize a congress contract address for this token .
set a congress contract address for this token must change this address by the last congress contract .
salvage other tokens that be accidentally send into this token .
set allowance for other address and notify .
"start vest , vesting start now ! ! ! as long a token is not paused ."
register a vest schedule to transfer senc from a group senc wallet to an individual wallet .
whichperiod return the vesting period we be in 0 - before start or not eligible 1 - n : the timeperiod we be in .
returns the amount of tokens you can withdraw .
add new endorsement to an actor .
add new endorsement to a vineyard .
add new endorsement to harvest operation .
add new endorsement to a winery operation .
add new endorsement to product winery operation .
create a record for hold tokens .
fund escrow record .
only authorized address .
only authorized address .
only work after lock expire .
user wont be able to claim tokens back after this be call by arbitrator address .
this function be a way to get other etc20 tokens back to their rightful owner if send by mistake .
minimum reqired ether to enter competition .
"manager only function : pause , finalizecontract ."
contract will be manually pause before on election day by manager .
user can join competition with this function .
get user 's vote history .
stats only function .
for pause contract .
send ether to winners . ( 5 .
guards against execute the function if the sale be not run .
return the number of contributors in the list of contributors .
executes a purchase .
allows users to collect purchase tokens after the sale .
collects the balance for members of the purchase .
shuts down the contract .
enable fee update - must be between 0 and 100 ( ) .
not really need a we fix the max tiers on contract creation but just for completeness ' sake we 'll call this when all tiers have be add to the contract ( not possible to deploy with all of them ) .
tier pop .
eof tier pop .
public data retrieval funcs .
nb : we use this to manually process tokens send in from contract not able to interact direct with mny .
note : this function be use to redistribute the swapped mny after swap have end .
we will use this to distribute tokens own in other contract e . g .
erc20 compliance addition .
allows applications to sign up users on their behalf iff users sign their permission .
allows users to sign up with their own address .
allows users to delete their account .
allows the hydro api to link to the hydro token .
returns a bool indicate whether a give username have be claim ( either exactly or a any case-variant ) .
returns user detail ( include case username ) by any cased / uncase user name that map to a particular user .
returns user detail by user address .
"checks whether the provide ( v , r , s ) signature be create by the private key associate with _address ."
checks unprefixed signatures .
checks prefix signatures ( e . g .
common internal logic for all user signups .
bytes1 the convert value if the pass value be alphabetic and in a upper case otherwise return the original value .
allows owner to withdraw ether from the contract .
allows owner to withdraw erc20 tokens from the contract .
requires an address to have a minimum number of hydro .
product methods .
end products .
get the token balance for account tokenowner .
transfer the balance from owner 's account to another account .
transfer tokens from one address to another .
total supply .
no need for the same require anymore .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
user relate stuff .
safety check on _to address to prevent against an unexpected 0x0 default .
possibility to adjust single data field of players during presale .
for check approval of transfer for address _to .
required for erc-721 compliance .
check for token ownership .
for pay out balance on contract .
assigns ownership of a specific player to an address .
required for erc-721 compliance .
all function that be only executable by the owner of the contract .
all function that be only executable by the owner of the contract .
all function that make our life easy .
required for erc-721 compliance .
purchase relate stuff .
trade in reserve ( eth / met ) and mint new smart tokens .
"redeem smart tokens , get back reserve ( eth / met ) token ."
"pricer constructor , calculate 10 , 100 and 1000 time of 0 . 99 ."
price of met at nth minute out during operational auction .
price of met at nth minute during initial auction .
allows the current owner to transfer control of the contract to a newowner .
allows the current owner to transfer control of the contract to a newowner .
allows the new owner to accept ownership of the contract .
init reference of other contract and initial supply .
set address of token porter .
allow minter and tokenporter to mint token and assign to address .
allow autonomousconverter and tokenporter to mint token and assign to address .
provide allowance information .
transfer tokens from sender to the provided address .
transfer tokens base on allowance .
approve spender to spend the tokens ie approve allowance .
transfer the tokens from sender to all the address provide in the array .
increase allowance of spender .
decrease allowance of spender .
transferable modifier to allow transfer only after initial auction end .
transfer tokens from caller to another address .
transfer tokens from one address to another .
transfer the token from sender to all the address provide in array .
import met tokens from another chain to this chain .
export met tokens from this chain to another chain .
subscribe for a weekly recur payment .
cancel a subcription .
get subcription detail .
caller can withdraw the token from subscribers .
allow callers to withdraw token in one go from all of it subscribers .
trigger met token transfer for all pair of subscribers and beneficiaries .
return the expected met for eth .
return the expected eth for met .
send eth and get met .
send met and get eth .
forward 0 . 25 .
current tick ( minute ) of the metronome clock .
current auction .
tick count at the timestamp t .
auction count at give the timestamp t .
one single function tell everything about metronome auction .
skip initialization and mint if we 're not the og metronome .
initialize auctions parameters .
mint initial supply for founder and move to token locker .
suspend auction if not start yet .
return information about initial auction status .
global met supply .
global met daily supply .
current price of met in current auction .
daily mintable met in current auction .
total tokens on this chain .
current mintable met in auction .
prepare auction when first import be do on a non eth chain .
find out what the result would be of a prospective purchase .
return the information about the next auction .
calculate result of a purchase .
met supply for next auction also consider carry forward meet .
price at a number of minutes out in initial auction and daily auction .
square root .
calculate number of tick elapse between auction start time and give tick .
calculate number of tick elapse between lastpurchasetick and auction start time of give tick .
first calculate the auction which contain the give tick and then calculate auction start time of give tick .
start the next day 's auction .
"if auction be initialize , call to this function will result in lock of deposited tokens and further deposit of tokens will not be allow ."
it will deposit tokens into the locker for give beneficiary .
this function will allow token withdraw from locker .
initialize tokenporter contract .
set address of validator contract .
set address of chainledger contract .
only owner can add destination chain .
only owner can remove destination chain .
destination met token contract call claimreceivables to record burn tokens have be mint in new chain .
import met tokens from another chain to this chain .
export met tokens from this chain to another chain .
set address of token porter .
fix for the erc20 short address attack .
privilege transfer .
get priveleged balance .
admin only can transfer from the privileged account .
create new tokens and allocate them to an address . .
erc223 fetch contract size ( must be nonzero to be a contract ) .
atomic increment of approved spend .
atomic decrement of approved spend .
burn extra tokens from a balance .
allow the token holder to upgrade some of their tokens to a new contract .
"convert the token to any other token in the bancor network by follow a predefined conversion path note that when convert from an erc20 token ( a oppose to a smart token ) , allowance must be set beforehand ."
copy the connectors from the old converter to the new one .
transfer the balance of each connector in the old converter to the new one .
"give two connector balance / weight and a sell amount ( in the first connector token ) , calculate the return for a conversion from the first connector token to the second connector token ( in the second connector token ) ."
destroy tokens .
destroy tokens from other account .
create mintedamount tokens and send it to target .
convert the token to any other token in the bancor network by follow a predefined conversion path and transfer the result tokens to a target account note that the converter should already own the source tokens .
convert the token to any other token in the bancor network by follow a predefined conversion path and transfer the result tokens to a target account .
"return true if a give contract support the give feature ( s ) , false if not ."
allow a contract to enable / disable certain feature ( s ) .
get the current buy and sell price .
sell amount tokens to contract .
return the address associate with the give contract name .
register a new address for the contract name .
"adds two number , throw on overflow ."
"subtracts two number , throw on overflow ( i . e ."
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
get the token balance of owner .
transfer tokens from an address to another one through an allowance make before .
approve an address to send tokenamount tokens to msg . sender .
get the remain allowance for a spender on a give address .
"used to mark the smart contract a upgraded , in case there be a serious break bug ."
register an audit request .
withdraw an audit request .
mark contract a audit .
ability for owner to change the service commmission .
calculate the solidstamp commmission .
ability for owner to withdraw the commission .
this be public rather than external so we can call super . unpause .
84 m coin total reward begin at 50 and be cut in half every reward era ( a tokens be mine ) .
send coin .
a contract attempt to get the coin .
allow another contract to spend some tokens in your behalf .
transfer tokens to multiple address .
transfer balance to owner .
allows the current owner to transfer control of the contract to a newowner .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
approve should be call when allow _spender 0 .
function to mint tokens .
function to stop mint new tokens .
low level token purchase function .
true if the transaction can buy tokens .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
transfer token for a specified address .
burns a specific amount of tokens .
return true if sender be owner or super-owner of the contract .
get the token balance for account tokenowner .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
approve should be call when allow _spender 0 .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow - dev override .
the balance .
send _value token to _to from msg . sender .
send _value token to _to from _from on the condition it be approve by _from .
amount of remain tokens allow to spend .
"internal transfer , can only be call by this contract ."
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
function to mint tokens .
total supply .
public function start here .
enumerate nfts assign to an owner .
gets the owner of the specify token id .
gets the approved address to take ownership of a give token id .
tells whether the msg . sender .
tells whether the msg . sender .
tells whether an operator be approve by a give owner .
transfers the ownership of a give token id to another address .
approves another address to claim for the ownership of the give token id .
enable or disable approval for a third party ( operator ) to manage all your assets .
approves another address to claim for the ownership of any tokens own by this account .
removes approval for another address to claim for the ownership of any tokens own by this account .
claims the ownership of a give token id .
"transfer a token own by another address , for which the call address have previously be grant transfer approval by the owner ."
transfers the ownership of an nft from one address to another address .
"approve a contract address for mint tokens and transfer tokens , when approve by the owner ."
unapprove a contract address for mint tokens and transfer tokens .
finalize the contract so it will be forever impossible to change the approved contract list .
mint token function .
mint token function .
internal function to clear current approval and transfer the ownership of a give token id .
internal function to clear current approval of a give token id .
internal function to add a token id to the list of a give address .
internal function to remove a token id from the list of a give address .
damagetype : 0 physical 1 magic 2 water 3 earth 4 fire .
rarity 0 : common ( 1 element ) rarity 1 : rare ( 2 elements ) rarity 2 : epic ( 3 elements ) rarity 3 : legendary ( 4 elements ) rarity 4 : ultimate ( all 5 elements ) .
via https : / / github . com / oraclize / ethereum-api / blob / master / oraclizeapi_0 . 5 . sol .
guarantees msg . sender .
gets the balance of the specified address .
modifiers to check that input can be safely store with a certain number of bits .
computes the current price of an auction .
computes owner 's cut of a sale .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
creates and begin a new auction .
"bids on an open auction , complete the auction and transfer ownership of the nft if enough ether be supply ."
this be a state-modifying function that can be call while the contract be pause .
cancels an auction when the contract be pause .
returns auction info for an nft on auction .
returns the current price of an auction .
creates and begin a new auction .
updates lastsaleprice if seller be the nft contract .
"escrows the nft , assign ownership to this contract ."
transfers an nft own by this contract to another address .
adds an auction to the list of open auction .
cancels an auction unconditionally .
computes the price and transfer winnings .
removes an auction from the list of open auction .
returns true if the nft be on auction .
returns current price of an nft on auction .
allow a narco to travel between district travel be do by take exit - - index into the loctions .
never call this from a contract .
"used to mark the smart contract a upgraded , in case there be a serious break bug ."
callable by other contract to control economy .
function to be call when want to add fund to all district .
function to be call when want to add fund to a district .
grant another address the right to transfer a specific narco via transferfrom ( ) .
"transfer a narco own by another address , for which the call address have previously be grant transfer approval by the owner ."
transfers the balance of the sale auction contract to the doperaidercore contract .
"we can create promo narco , up to a limit ."
creates a new gen0 narco with the give genes and create an auction for it .
"computes the next gen0 auction start price , give the average of the past 4 price + 50 ."
modifier to allow action only when the contract is pause .
"used to mark the smart contract a upgraded , in case there be a serious break bug ."
will generate a new narco and generate the event .
respect it 's call now .
never call this from a contract .
checks if a give address be the current owner of a particular narco .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
returns the number of narcos own by a specific address .
transfers a narco to another address .
this be a modifier for function to check if the send user address be the same a the admin user address .
changes the official admin user address .
changes the account address that receive trade fee .
changes the fee on take .
changes the date that trade be free until .
changes the successor .
"deposits , withdrawals , balances ."
this function handle withdrawals of ether from the contract .
this function handle deposit of ethereum base tokens to the contract .
this function provide a fallback solution a outline in erc223 .
this function handle withdrawals of ethereum base tokens from the contract .
the amount of tokens on the exchange for a give user address .
facilitates a trade from one user to another .
"bool : true if the trade would be successful , false otherwise ."
uint : amount of volume available for the give order in term of amountget / tokenget .
uint : amount of the give order that have already be fill in term of amountget / tokenget .
contract versioning / migration .
"this function handle deposit of ether into the contract , but allow specification of a user ."
"this function handle deposit of ethereum base tokens into the contract , but allow specification of a user ."
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"substracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
from https : / / ethereum . stackexchange . com / question / 10811 / solidity-concatenate - uint-into - a-string .
set the price of the token .
get the price of the token .
buy the token from the owner .
get the bound box ( in metres ) of this parcel .
set a url to load this scene from .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
burns the amount of tokens by the owner .
freeze the amount of tokens by the owner .
unfreeze the amount of tokens by the owner .
function to claim any token stick on contract at any time .
this modifier limit function execution to the admin .
this function transfer the adminship of the contract to _newadmin .
whitelist handler .
contribution handler .
closure handler .
function to claim eth on contract .
modifier to allow action only when the contract is not pause .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
adapted from memcpy ( ) by arachnid ( nick johnson email protect ) .
returns a uri point to a metadata package for this token conform to .
allows the current owner to transfer control of the contract to a newowner .
send approve tokens to one address .
admin can destroy this contract .
create 2500 promo eggs - can only be call once .
issue a new amount of tokens these tokens be deposit into the owner address .
redeem tokens .
transfers vest tokens to beneficiary .
allows the owner to revoke the vest .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
allow withdraw any token other than the relevant one .
lock mana into the contract .
allows the owner of the contract to pause acceptingdeposits .
set the contract that can move the staked mana .
only allow call from the beneficiary of the vest contract .
allow the beneficiary to change it address .
transfers vest tokens to beneficiary .
transfers vest tokens to a target address .
make sure this function name match the contract name above .
create all tokens 99 b this address will hold all tokens all community contrubutions coin will be take from this address .
setup function to be run only 1 time setup token address setup end block number .
convert eth to token and send new token to the sender .
update the eth / coin rate .
change transfer status for erc20 token .
public function to get the amount of tokens hold for an address .
function to create hold tokens for developer .
function to release held tokens for developers .
submit a presigned transfer .
submit a presigned approval .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
transfer tokens from one address to another .
bool returns true if revocation be successful .
hash ( keccak256 ) of the payload use by transferpresigned .
hash ( keccak256 ) of the payload use by approvepresigned .
hash ( keccak256 ) of the payload use by increaseapprovalpresigned .
hash ( keccak256 ) of the payload use by decreaseapprovalpresigned .
hash ( keccak256 ) of the payload use by transferfrompresigned .
recover signer address from a message by use his signature .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
low level token purchase * * * do not override .
checks whether the cap have be reach .
extend parent behavior require purchase to respect the fund cap .
adds single address to whitelist .
adds list of address to whitelist .
removes single address from whitelist .
withdraw tokens only after crowdsale end .
sets the parameters for each round .
returns the available supple ( total supply minus tokens hold by owner ) .
owner can transfer out any accidentally send erc20 tokens .
sets the alias for the msg . sender 's .
standard erc677 function that will handle incoming token transfer .
collect information about doge farm dividents amount .
get tokens balance of the doge farm .
dev should initially seed the game before start .
reinvest proof shrimp farm dividends .
calculate trade to sell egg .
calculate egg to buy simple .
calculate devfee in game .
method call when winner be pick .
method for manually locking fiunds .
to manually allow game lock .
method call by participants to unlock and transfer their fund .
check internall balance of this .
implemented token interface to transfer tokens to this .
calibrate game state and take tokens .
return all variables need for dapp in a single call .
salvage tokens from this .
kill contract if need .
generate random winner .
set token address .
set game address .
method call when game end .
verify if game be approve .
funds must be transfer by call contract before call this contract .
call crb token to mint champion tokens .
check the crb balance of this .
method call by game contract msg . sender .
method call by game contract when last participant have withdraw msg . sender .
failsafe if game need to be remove .
verify if game be lock .
check if game lock can be remove .
set crb token address here .
when new game be create it need to be approve here before it start .
remove fail game .
sets whether or not the image data in a plot should be block from the ethplot ui .
gets the information for a specific plot base on it index .
gets the data store with a specific plot .
gets the length of the ownership array which represent the number of owned plot which exist .
this function do a lot of the heavy lift for validate that all of the data pass in to the purchase function be ok .
checks that the sub-plots which we be purchase be all valid and then distribute fund to the owners of those sub-plots .
"given a rect to purchase and the plot index , return the total price to be pay ."
stores the plot information and data for a newly purchase plot .
it be assume that we will have call dorectanglesoverlap before call this method and we will know they overlap .
"purchases a new plot with at the location ( purchase 0 , purchase 1 ) and dimension purchase 2 x purchase 2 ."
updates the price per pixel of a plot which the message sender own .
updates the data for a specific plot .
"withdraws the fee which have be collect back to the contract owner , who be the only person that can call this ."
function for safe math .
function for free bets .
configuration functions .
function who regulate every bet and his proccess .
function for save bet information .
function to identify pattern and figure to calculate prize .
here the owner can reclaim the tokens from a participant if the token be not release yet .
to query of allowance of one user to the other .
allows the current owner to transfer control of the contract to a newowner .
true bool if successful .
to enable code export functionality .
it will send tokens to sender base on the token price .
will be able to mint tokens in the future .
transfer tokens to give address .
to query balance of account .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
do inner check .
do inner action if check be success .
override purchase validation to add extra value logic .
override hasended to add minimal value logic .
set up fee distribution status thresholds .
set up specific fee and status threshold .
add investors .
get investors count .
get investors ' fee depend on the current year .
recursively distribute deposit fee between parent .
update node status if children sum amount be enough .
distribute fee between investors .
set token exchange rate .
set eth exchange rate .
allows the current owner to transfer control of the contract to a newowner .
add new child .
set _status for _addr .
set investors contract address .
withdraw _amount for _addr .
withdraw contract balance to _addr .
withdraw correspond amount of eth to _addr and burn _value tokens .
transfer ownership of token contract to _addr .
transfer ownership of data contract to _addr .
transfer token for a specified address .
transfer tokens from one address to another .
function to mint tokens .
function to burn tokens .
public function start here .
called from invest ( ) to confirm if the curret investment do not break our cap rule .
transfer tokens from approve ( ) pool to the buyer .
a token purchase with anti-money launder .
allow burn of tokens only by authorized users .
allows the current owner to transfer control of the contract to a newowner .
for configurations .
private methods .
core methods .
anyone with enough ecom token can create a company .
use 1 super privilege to permanently own a company .
put a permanently own company on sale again .
anyone can call to this method to try to get a super privilege .
anyone who own some company can claim their token .
end core methods .
for owner .
view methods .
"multiplies two number , throw on overflow ."
function to mint tokens .
erc20 function .
"integer division of two number , truncate the quotient ."
"adds two number , throw on overflow ."
total number of tokens in existence .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
"substracts two number , throw on overflow ( i . e ."
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
transfer token for a specified address .
burns a specific amount of tokens .
transfers vest tokens to beneficiary .
allows the owner to revoke the vest .
alias of sell ( ) and withdraw ( ) .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
method to view the current ethereum store in the contract .
return the sell price of 1 individual token .
return the buy price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
internal function to actually purchase the tokens .
calculate token price base on an amount of incoming ethereum .
calculate token sell value .
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
converts all of caller 's dividends to tokens .
override so that mint can not be accidentally terminate .
transfer balance to owner .
"returns true if the contract implement interfaceid and interfaceid be not 0xffffffff , false otherwise ."
query whether an address have be authorize to move any assets on behalf of someone else .
query what address have be particularly authorize to move an asset .
for payment contract to call .
public get .
cell have valid fish or bonus .
"withdraw tokens , send tokens to target withdraw wallet ."
function to set an allowed address .
burn token of an specified address .
frozen account .
function to set new admin address .
function to set mint and burn lock .
function to set transfer lock .
transfer token to a specified address .
transfer token from an address to another specify address use allowance .
mint token to an specify address .
update only if contract be not get traction or get more traction that initially think .
create new 0 gen .
change freeze time for megacandy .
changes the fee on take .
this be a private function and be only be call from trade ( ) .
erc20 methods .
erc827 methods .
token drain .
staking mft for a node address .
"unstake a staked node address , will remove from whitelist and refund stake ."
deposit stake amount .
withdraw fund after unstaking .
function make for airdrop .
blacklist management .
stop the contract .
erc20 function .
"call by the owner , pause ico ."
"call by the owner , resume ico ."
what be the total supply of the ech tokens .
what be the balance of a particular account ? .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
transfer the balance from owner 's account to another account .
transfer the balance from owner 's account to another account .
send token to multiple users in single time .
publish article .
claim a token for an article .
check if an address have read a give article .
send coin .
allow another contract to spend some tokens in your behalf .
"this might fail if the bidder be try some contract bullshit , but they do this at their own risk ."
this will need to be trigger externally every x days .
buy copper with ether .
buy bronze with ether .
buy silver with ether .
buy gold with ether .
buy platinum with ether .
withdraw all ether .
withdraw token .
"kill contract , but before transfer all tokens and ether to owner ."
functions for erc721 below : .
sets a wonder a approve for transfer to another address .
returns the number of wonders own by a specific address .
transfers a wonder to another address .
permit another address the right to transfer a specific wonder via transferfrom ( ) .
"transfer a wonder own by another address , for which the call address have previously be grant transfer approval by the owner ."
list of all wonder ids assign to an address .
modifier to check whether transfer be unlocked or the owner be send .
modifier to allow only founder to transfer .
transfer with check if it 's allow .
transfer with check if it 's allow .
default balanceof function .
default approval function .
get user allowance .
launch and retire the founder .
change transfer lock state .
in practice later than end of tge to let people withdraw .
do n't allow tokens to be send to the contract .
transfer token for a specified address when not pause .
transfer tokens from one address to another when not pause .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
adding whennotpaused .
adding whennotpaused .
change the required number of owner signatures .
gets an owner by 0-indexed position .
gets owners .
check if provide address be an owner address .
tests ownership of the current caller .
revokes a prior confirmation of the give operation .
checks if owner confirm give operation .
reclaims free slot between valid owners in m_owners .
send oraclize query .
called on eth price update by oraclize .
"set the limit of eth in cents , oraclize data great than this be not accept ."
"set the limit of eth in cents , oraclize data small than this be not accept ."
"set the price of eth in cents , call in case we do n't get oraclize data for more than double the update interval ."
"change gas price for oraclize call , should be a compromise between speed and price accord to market ."
change gas limit for oraclize callback note : should be change only in case of emergency .
check that double the update interval have pass since last successful price update .
check that price update be request more than 1 update interval ago .
to be override in test .
check which prevent short address attack .
check that address be valid .
"if you mark a function nonreentrant , you should also mark it external ."
check that owners do n't finish the sale yet .
"check that finish date be not reach yet ( and potentially start date , but not need for presale ) ."
preico participation .
"stop accept ether , transfer remain tokens to the next sale and give new sale permissions to transfer frozen fund and revoke own ones ."
set address of a sale that will be next one after the current sale be finish .
simple single-sig function modifier .
multi-sig function modifier : the operation must have an intrinsic hash in order that later attempt can be realise a the same underlying operation and thus count a confirmations .
replace an owner _from with another _to .
add an owner .
remove an owner .
total supply .
get the token balance for account tokenowner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
cds part .
erc20 part .
only the owner be allow to burn tokens .
overrides parent by store balance instead of issue tokens right away .
"when sale have end , send unsold tokens back to token contract ."
"when sale be n't end , issue tokens to investors pay with fiat currency ."
owner be able to change rate in case of big price fluctuations of ether ( on the market ) .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
"withdraw tokens only after lock-up end , apply the stag lock-up scheme ."
this function be use to transfer adminship to new owner .
this function be use to do bulk transfer token to contributor after successful audit manually .
this function be use to do bulk transfer token to contributor after successful audit .
this function be use refund contribution of a contributor in case soft cap be not reach or audit of an contributor fail .
this function check whether ico be currently active or not .
this function allow the owner to update the gas price limit public onlyowner .
verify that the gas price be low than max gas price .
this function be use to check if an contribution be allow or not .
"send ether to the fund collection wallet , this ideally would be an multisig wallet ."
pre token sale time .
token sale time .
called by owner when preico token cap have be reach .
called by owner when ico token cap have be reach .
this function be use to transfer token to contributor after successful audit .
this function be use to transfer tokens to a particular address .
send _value amount of tokens from address _from to address _to .
"this function allow _spender to withdraw from your account , multiple time , up to the _value amount ."
this function return the amount of tokens approve by the owner that can be transfer to the spender 's account .
this function be use to mint additional tokens only admin can invoke this function .
this function burns a specific amount of tokens .
"this function be use to lock a user 's token , tokens once lock can not be transfer only admin can invoke this function ."
this function be use to unlock a user 's already lock tokens only admin can invoke this function .
get all token ids of address .
eth handler .
referral system .
modifier to allow action only when the contract is pause .
modifier to allow action only when the contract is not pause .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
bets in tokens and eth .
called by token contract after approval .
_numberofcoinsides ( 2 - o obverse 1 reverse ) .
called by oraclize to return generated random number .
refund bet manually if oraclize callback be not receive .
a simple library to allow append to memory array .
library meta .
functions constructor function - init core params on deploy timestampts be uint64s to give u plenty of room for millennia .
boundaries for construct the msg we 'll validate the signature of .
modifier to make a function callable only when the contract be not lock .
modifier to make a function callable only when the contract be lock .
"call by the owner to lock , trigger lock state ."
"call by the owner to unlock , return to unlocked state ."
send preico bonus tokens in bulk to 5000 address .
low level token purchase function .
function to change the start timestamp of the ico can only be call by owner wallet .
"when there 's income , the water mark go up ."
withdrawal the bonus .
"transfer hold from to ( only hold , no bouns ) this will withdrawal the holder bonus of these hold and the to 's fullfilled will go up , since total bonus unchanged , but hold go more ."
"one can buy hold from anyone who set up an price , and u can buy price high than he setup ."
internal method to add a vest in token memory .
transfer token for a specified address .
transfer tokens from one address to another .
"helper method to get token detail , name , symbol and totalsupply in one go ."
transfer ownership for auction winners in case they want to trade the creature before release .
buyer need to confirm the transfer .
"query remain time this should not be use , query endtime once and then calculate it in your frontend it 's helpful when you want to debug in remix ."
calculate the next bid amount to you can have a oneclick buy button .
calculate the bid after the current bid so nifty hackers can skip the queue this be not in our frontend and no one know if it actually work .
command to start the auction .
amount owner can withdraw after auction end that way you can easily compare the contract balance with your amount if there be more in the contract than your balance someone do n't withdraw let them know that : ) .
readjust the target by 5 percent .
reward be cut in half every reward era ( a tokens be mine ) .
returns the rate of tokens per wei at the present time .
public function .
function to mint tokens .
allows the current owner to transfer control of the contract to a newcontract .
convenience is_empty function .
"before call setup , the sender must call approve ( ) on the aoc token ."
approve should be call when allow _spender 0 .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
function that check the original eos token for a balance .
function that return any registered eos address from the original eos crowdsale .
use to claim eos classic from the call address .
use to claim eosclassic for any ethereum address .
check any address to see if it eosclassic have already be claim .
returns the late eos key register .
return the registered eos public key for the passed address .
"eosclassic developer 's note : the registration function be identical to the original eos crowdsale registration function with only the freeze function remove , and 'emit ' add to the logregister event , per update solidity standards ."
throws if call by any account other than the owner .
makes a transfer with specified commission .
specify the commission to be charge from every transfer .
get the account balance for an address .
check if a give address be lock .
check whether an address be a contract address .
transfer the balance from owner 's account to another account .
allow _spender to withdraw from your account up to _amount .
spender of tokens transfer tokens from the owner 's balance .
returns the amount of tokens approve by the owner that can be transfer by spender .
public function .
internal function .
public function .
gets all authorized address .
fills the input order .
cancels the input order .
"fills an order with specified parameters and ecdsa signature , throw if specify amount not fill entirely ."
synchronously execute multiple fill order in a single transaction .
synchronously execute multiple fillorkill order in a single transaction .
synchronously execute multiple fill order in a single transaction until total filltakertokenamount fill .
synchronously cancel multiple order in a single transaction .
verifies that an order signature be valid .
checks if round error 0 . 1 .
calculates partial value give a numerator and denominator .
calculates the sum of value already fill and cancel for a give order .
transfers a token use tokentransferproxy transferfrom function .
checks if any order transfer will fail .
get token balance of an address .
get allowance of token give to tokentransferproxy by an address .
returns the remain amount of the taker token available from this order .
spend eth to acquire tokens .
spend tokens to acquire eth .
only authorized address can invoke function with this modifier .
authorizes an address .
removes authorizion of an address .
"calls into erc20 token contract , invoke transferfrom ."
adds message to the billboard .
returns the current active message .
returns the timestamp of next queue open .
returns guarantee duration of message base on amount of wei send with message .
"owner can change the message span step , in second ."
"owner can change the cost , in wei ."
save message to the blockchain and add event .
create message id for link list .
get message id for current active message .
kill contract .
publish a new extension in structure .
return basic information about the contract .
return information about a module .
onlyowner modifier only allow the contract owner to run the code .
"the first four parameters relate to token order , the last eight relate to dex order ."
the order in this function have be wrap in structs to reduce the local variable count .
"iterates through a list of token order , transfer the sell order to this contract calculate if we have the ether need ."
performs a single trade via the requested exchange handler .
get the amount of this order we be able to fill .
checks whether a give order be valid .
authorizes an address .
removes authorizion of an address .
"calls into erc20 token contract , invoke transferfrom ."
add a new token grant for user _recipient .
terminate token grant transfer all vested tokens to the _recipient and return all non-vested tokens to the colony multisig .
allows a grant recipient to claim their vested tokens .
calculate the vested and unclaimed months and tokens available for _recepient to claim .
return next minimal bid or final bid on auction that already end .
create and fund a new escrow .
change the relayer to a new address .
change the requestcancellationminimumtime .
send erc20 tokens away .
send erc20 tokens away .
send erc20 tokens away .
relay a signed instruction from a party of an escrow .
increase the amount of gas to be charge later on completion of an escrow .
"transfer the value of an escrow , minus the fee , minus the gas cost incur by relay ."
release escrow to the buyer .
prevents the seller from cancel an escrow .
called by the arbitrator to resolve a dispute .
cancels the trade and return the ether to the seller .
returns the ether in escrow to the seller .
request to cancel .
get the sender of the signed instruction .
hashes the value and return the match escrow object and trade hash .
returns an empty escrow struct and 0 _tradehash if not find .
release ether in escrow to the buyer .
disable the seller from cancel ( i . e .
cancel the escrow a a seller .
request to cancel a a seller .
withdraw fee collect by the contract .
set the arbitrator to a new address .
change the owner to a new address .
fix for the erc20 short address attack .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
beneficiary claim tokens hold by time lock .
mint timelocked tokens .
value should be a public key .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
function to check the amount of tokens than an owner allow to a spender .
allows the current owner to transfer control of the contract to a newowner .
function to mint tokens .
function to stop mint new tokens .
function to distribute tokens to the list of address by the provided amount .
low level token purchase function .
transfer tokens from one address to another .
send approve tokens to one address .
send approve tokens to seven address .
use to claim eosclassic for any ethereum address .
validation of an incoming purchase .
modifier to allow action only when the contract is pause .
modifier to allow action only when the contract is not pause .
accepts ether and create new ico tokens .
ends the fund period and send the eth home .
transfer token for a specified address .
returns the rate of tokens per wei at the present time .
source of tokens .
"vault finalization task , call when owner call finalize ( ) ."
"atomically match two order , ensure validity of the match , and execute all associate state transition ."
"must be call by the user which the proxy be for , create a new authenticatedproxy ."
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
converts all of caller 's dividends to tokens .
alias of sell ( ) and withdraw ( ) .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
reverts if in crowdsale time range .
set the early bird duration .
set the cap amount .
time and volume base bonus calculations .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
low level token purchase function .
low level token purchase function .
low level token purchase function .
tokensend functions .
performs a delegatecall and return whatever the delegatecall return ( entire context execution will return ! ) .
executes any transaction .
changes the address to forward all the fund .
creates a number of user wallets .
withdraws all eth from a wallet and send it to the forward address .
withdraws all tokens from a wallet and send it to the forward address .
withdraws all tokens from a list of wallets and send all the fund to the forward address .
get total hearts by id .
used to create new tokens and increase total supply .
reusable code to do sanity check of transfer variables .
used to retrieve total supply .
used to look up balance of a person .
used to look up the allowance of someone .
"used to launch the contract , and enable token mint ."
used to transfer fund .
used to transfer fund on behalf of owner to receiver .
used to approve someone to send fund on your behalf .
used to burn tokens and decrease total supply .
low level function used to create new tokens and increase total supply .
reverts if not in crowdsale time range .
allows to change the daily limit .
allows anyone to execute a confirmed transaction or ether withdraws until daily limit be reach .
allows anyone to execute a confirmed transaction .
100m coin total reward begin at 50 and be cut in half every reward era ( a tokens be mine ) .
transfer token for a specified address .
transfer tokens from one address to another .
"internal transfer , only can be call by this contract ."
destroy tokens .
destroy tokens from other account .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
transfer tokens from the from account to the to account .
override to only allow tranfer after be switch on .
override to only allow tranfer after be switch on .
one-time switch to enable transfer .
"run this before crowdsale begin , so crowdsale contract could transfer tokens ."
"run this before crowdsale begin , so private sale wallet could transfer tokens ."
call by the owner to start the ico .
call by the owner to stop the ico .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
function to mint tokens .
function to stop mint new tokens .
allows the current owner to transfer control of the contract to a newowner .
this function be n't abstract since the compiler emit automatically generate getter function a external .
"release one tranche of the ecosystemsupply allocation to goola ecosystem , 6 . 25 ."
"release one tranche of the teamsupply allocation to goola team , 6 . 25 ."
low level token purchase function .
increase the amount of eth .
call by crowdsalecontroller to transfer reward part of eth collect by successful crowdsale to forecasting contract .
cancel crowdsale .
call by crowdsalecontroller to setup start and end time of crowdfunding process as well a fund address ( where to transfer eth upon successful crowdsale ) .
"must return true if crowdsale be over , but it fail ."
must return true if crowdsale be active ( i . e .
must return true if crowdsale complete successfully .
here go icrowdsaleprocessor methods implementation .
mints token rewards to forecasting contract call by crowdsalecontroller .
update information about collect eth and sell tokens amount .
validates parameters and start crowdsale call by crowdsalecontroller .
finish crowdsale .
find out the amount of reward in eth and tokens .
change token address ( in case you 've use the dafault token address during bridge deployment ) .
owner_withdraw - ether withdraw ( owner only ) .
kill ( owner only ) .
functions with this modifier can only be execute by the owner .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
initializes contract with initial supply tokens to the creator of the contract .
initializes contract with initial supply tokens to the creator of the contract .
math operations with safety check that throw on error .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
"remove all ether from the contract , which be the owner 's cut as well a any ether send directly to the contract address ."
creates and begin a new auction .
"bids on an open auction , complete the auction and transfer ownership of the nft if enough ether be supply ."
allows the current owner to transfer control of the contract to a newowner .
this be a state-modifying function that can be call while the contract be pause .
cancels an auction when the contract be pause .
returns auction info for an nft on auction .
returns the current price of an auction .
creates and begin a new auction .
places a bid for sire .
computes the price and transfer winnings .
updates lastsaleprice if seller be the nft contract .
assigns ownership of a specific zodiac to an address .
an internal method that create a new zodiac and store it .
an internal method that create a new zodiac and store it .
any c-level can fix how many second per block be currently observe .
"given a token id , return a byte array that be suppose to be convert into string ."
set the address of the sibling contract that track metadata .
checks if a give address be the current owner of a particular zodiac .
checks if a give address currently have transferapproval for a particular zodiac .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
returns the number of zodiacs own by a specific address .
transfers a zodiac to another address .
grant another address the right to transfer a specific zodiac via transferfrom ( ) .
"transfer a zodiac own by another address , for which the call address have previously be grant transfer approval by the owner ."
returns the total number of zodiacs currently in existence .
returns the address currently assign ownership of a give zodiac .
returns a list of all zodiac ids assign to an address .
adapted from memcpy ( ) by arachnid ( nick johnson email protect ) .
adapted from tostring ( slice ) by arachnid ( nick johnson email protect ) .
returns a uri point to a metadata package for this token conform to .
"update the address of the genetic contract , can only be call by the ceo ."
checks that a give zodiac be able to breed .
check if a sire have authorize breed with this matron .
"set the cooldownendtime for the give zodiac , base on it current cooldownindex ."
grants approval to another user to sire with one of your zodiacs .
updates the minimum payment require for call givebirthauto ( ) .
checks to see if a give zodiac be pregnant and ( if so ) if the gestation period have pass .
checks that a give zodiac be able to breed ( i . e .
checks whether a zodiac be currently pregnant .
internal check to see if a give sire and matron be a valid mat pair .
internal check to see if a give sire and matron be a valid mat pair for breed via auction ( i . e .
"checks to see if two zodiacs can breed together , include check for ownership and siring approvals ."
"internal utility function to initiate breed , assume that all breed requirements have be check ."
"breed a zodiac you own ( a matron ) with a sire that you own , or for which you have previously be give siring approval ."
have a pregnant zodiac give birth ! .
the auction contract variables be define in zodiacbase to allow u to refer to them in zodiacownership to prevent accidental transfer .
sets the reference to the sire auction .
put a zodiac up for auction .
put a zodiac up for auction to be sire .
completes a sire auction by bid .
transfers the balance of the sale auction contract to the zodiaccore contract .
we can create zodiacs with different generations .
we can create zodiacs with different generations .
"used to mark the smart contract a upgraded , in case there be a serious break bug ."
returns all the relevant information about a specific zodiac .
this be public rather than external so we can call super . unpause .
allows the cfo to capture the balance available to the contract .
get back the bet before claimingphase .
call by admin to get maintenance fee .
"admin can claim unclaimed fund after the claim phase , if any ."
constructor function .
format decimals .
"set the token 's tokenexchangerate , ."
increase the token 's supply .
decrease the token 's supply .
turn on the fund state .
turn off the fund state .
set a new contract for recieve the tokens ( for update contract ) .
set a new owner .
send the tokens to new contract .
withdraw eth from contract to unlimitedip team address .
calculates the amount of ether per token from the balance .
standard erc20 transfer plus state check and token swap logic .
standard erc20 .
standard erc20 .
standard erc20 .
"pays fee to the foundation , the owner , and the dev ."
this get call by constructor and after the swap to restart evertying .
restarts everything after swap .
erc20 standard supply function .
mints new tokens when they be mine .
calculates the tokens mine base on the tier .
this be basically so you do n't have to add 1 to the last complete tier .
ether remain for tier .
total sumbitted for mine .
balance minus oustanding fee .
transfers vest tokens to beneficiary .
self tokken ballance .
set new price .
set new minimum .
"must be call after crowdsale end , to do some extra finalization work ."
send all token ballance to owner .
getters to allow the same blacklist to be use also by other contract .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
deprecate current contract in favour of a new one .
deprecate current contract if favour of a new one .
issue a new amount of tokens these tokens be deposit into the owner address .
redeem tokens .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
return dynamic totalsuply of this token .
returns the contract state .
allows user to buy tokens by ether .
allows user to sell tokens and get ether .
requests oracles rat update ; fund oracles if need .
returns cost of requestrates function .
calculates buy and sell rat after oracles have receive it .
returns contract oracles ' count .
returns token balance of the sender .
returns data for an oracle by it id in the array .
returns ready ( which have data to be use ) oracles count .
returns wait query oracle count .
withdraws balance only to special hardcoded wallet only when contract be lock .
allows to deposit eth to the contract without create order .
returns if give rate be within limit ; internal .
implements transfer method for multiple recipient .
withdraw unsold tokens .
returns lbrs token balance of contract .
sets new token sender address .
kill contract after ico .
modifier that allow only shareholders to vote and create new proposals .
change vote rule .
add proposal .
add proposal in ether .
check if a proposal code match .
log a vote for a proposal .
finish vote .
addition to erc20 token methods .
addition to erc20 token methods .
addition to erc20 token methods .
addition to standardtoken methods .
addition to standardtoken methods .
set new dao contract address .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
returns number of confirmations of a transaction .
returns total number of transactions after filers be apply .
allows the developer to set the crowdsale and token address .
withdraws all eth deposit or tokens purchase by the give user and reward the caller .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
override to check atleast min amount eth be be pay .
override to add 30 bonus nts tokens on each purchase .
override to set max cap + tier per user .
override to set max cap + tier per user .
override to also remove from members .
helper function so that ui can check if ico have start .
helper function so that ui can display amount eth already contribute by user .
helper function so that ui can display amount eth user can still contribute .
transfer tokens from the from account to the to account .
function to mint tokens .
low level token pledge function .
transfer token for a specified address .
transfer tokens from one address to another .
true if the transaction can buy tokens remove view to be overriden .
"must be call after crowdsale end , to do some extra finalization work ."
true if investors can buy at the moment remove view to be overriden .
set cap before the general sale start .
override cappedcrowdsale validpurchase to add an individual cap .
get the current individual cap .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
let the owner set the marketplace address once mint be over .
"same erc20 behavior , but require the token to be unlocked ."
"allow anyone to buy tokens against ether , depend on the buyprice set by the contract owner ."
"same erc20 behavior , but require the token to be unlocked and sell some tokens to refill ether balance up to minbalanceforaccounts ."
"same erc20 behavior , but require the token to be unlocked ."
set allowance for other address and notify .
allows the owner to withdraw ethers from the contract .
allow the owner to withdraw tokens from the contract without take tokens from deposit .
allows anyone to create a vault access .
"closes a vault access , deposit be send back to freelance wallet ."
internal transfer function use to transfer tokens from an address to another without prior authorization .
appoint an agent or a new agent .
set the quantity of tokens necessary for vault access creation .
"allow anyone to sell tokens for ether , depend on the sellprice set by the contract owner ."
buy unlimited access to a freelancer vault .
simple getter to retrieve talent agent .
simple getter to check if user have access to a freelance vault .
allows the owner to withdraw ethers from the contract .
allow the owner to withdraw tokens from the contract .
transfers tokens hold by timelock to beneficiary .
transfers vest tokens to beneficiary .
creates the talao token .
checks if the sender be whitelisted for the presale .
checks if the sender be whitelisted for the crowdsale .
whitelists an array of users for the crowdsale .
removes a user from the crowdsale whitelist .
whitelists a user for the presale with an individual cap ; cap need to be above participation if set again .
removes a user from the presale whitelist .
mints tokens correspond to the transaction value for a whitelisted user during the crowdsale .
mints tokens correspond to the transaction value for a whitelisted user during the presale .
overriding the finalization method to add mint for founder / team / reserve if soft cap be reach .
"checks if the crowdsale purchase be valid : correct time , value and hard cap not reach ."
"checks if the presale purchase be valid : correct time , value and presale hard cap not reach ."
override of the goalreached function in order to add presale weis to crowdsale weis and check if the total amount have reach the soft cap .
check if the user be whitelisted for the crowdsale .
check if the user be whitelisted for the presale .
returns number of confirmations of a transaction .
returns total number of transactions after filers be apply .
"returns array with owner address , which confirm transaction ."
returns list of transaction ids in defined range .
public function .
transfer the balance from owner 's account to another account only escrow can send token ( to send token private sale ) .
transfer tokens .
transfer tokens from other address .
set allowance for other address .
allows to remove an owner .
set allowance for other address and notify .
allow transfer token .
change escrow .
change binary value .
change binary address .
"price in ico : first week : 1 eth 2400 nac second week : 1 eth 23000 nac 3rd week : 1 eth 2200 nac 4th week : 1 eth 2100 nac 5th week : 1 eth 2000 nac 6th week : 1 eth 1900 nac 7th week : 1 eth 1800 nac 8th week : 1 eth 1700 nac time : 1517443200 : thursday , february 1 , 2018 12 : 00 : 00 am 1518048000 : thursday , february 8 , 2018 12 : 00 : 00 am 1518652800 : thursday , february 15 , 2018 12 : 00 : 00 am 1519257600 : thursday , february 22 , 2018 12 : 00 : 00 am 1519862400 : thursday , march 1 , 2018 12 : 00 : 00 am 1520467200 : thursday , march 8 , 2018 12 : 00 : 00 am 1521072000 : thursday , march 15 , 2018 12 : 00 : 00 am 1521676800 : thursday , march 22 , 2018 12 : 00 : 00 am 1522281600 : thursday , march 29 , 2018 12 : 00 : 00 am ."
returns number of tokens own by give address .
administrative function .
internal migrate migration tokens .
migate token function for nami team .
allows to replace an owner with a new owner .
migrate token for investor .
transfer the specified amount of tokens to the namiexchange address .
transfer the specified amount of tokens to the namiexchange address .
set controller address .
remove controller require input address be a controller execute any time in sc state .
change minimum nac to deposit .
min and max for withdraw nac .
"withdraw ether to nami multisignature wallet , only escrow can call ."
"withdraw nac to nami multisignature wallet , only escrow can call ."
controller update balance of netf to smart contract .
controller update balance of netf to smart contract .
buy and sell fci function .
update price fci daily .
before buy users need to place buy order function buy fci only controller can execute in phrase run .
before controller buy fci for user user nead to place sell order .
function sellfci only controller can execute in phare run .
this function update balance of netf revenue fund add nac to fund only executable if round open and round not withdraw yet .
this function update balance of netf funds remove nac from fund only executable if round open and round not withdraw yet .
switch to pause phrase here .
investor can latch fci by themself .
"after all investor latch fci , controller change round state withdrawable now investor can withdraw nac from netfrevenue fund of this round and auto switch to unpause phrase ."
"after latch all investor , unpause here ."
withdraw nac for run by investor .
token fci function .
transfer tokens .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
admin function .
deposit to nlf fund in tokenfallbackexchange .
before send nac to subround controller need active subround .
every week controller deposit to subround to send nac to all user have nlf fci .
every week controller deposit to subround to send nac to all user have nlf fci .
controller close deposit subround phrase and user can withdraw nac from subround .
user withdraw nac from each subround of nlf fund for investor .
controller of nlf add nac to update nlf balance this nac come from 10 trade revenue .
controller get nac from nlf pool to send to trader .
end of round escrow run this to allow user sell fci to receive nac .
end of round user sell fci to receive nac from nlf fund function for investor .
"fall back function call from nami crawsale smart contract deposit nac to nami trade broker , invest to netf and nlf fund ."
end pool function .
allows anyone to execute a confirmed transaction .
returns the confirmation status of a transaction .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
transfer tokens from one address to another .
only be call for maintenance reason .
query functions .
function to mint tokens .
function to mint tokens .
transfer tokens from one address to another .
math operations with safety check that throw on error small gas improvement .
mitigate short address attack https : / / github . com / numerai / contract / blob / c182465f82e50ced8dacb3977ec374a892f5fa8c / contract / safe . sol l30-l34 .
initial_withdrawal release 60 of tokens .
grantvestededexcontract and mainwallet can transfer to allow team allocations .
blacklist bot address use ico whitelisted address .
"bonus scheme during ico , 1 eth 800 edex for 1st 20 days , 1 eth 727 edex for 2nd 20 days , 1 eth 667 edex for 3rd 20 days ."
change ico start date if more time need for preparation .
add liquidity to contract for investor liquidation .
remove liquidity from contract .
disable transfer and allow them once token be tradeable .
function to recover the fund on the contract .
math function use to calculate vest curve .
"calculate the released amount of vest coin it can not be view , because this function relay on 'now ' ."
withdraw all release vest coin to balance .
sum of all vest balance ( regardless of release or not ) each vest be amount - withdraw .
sum of all remain vest balance ( only the release part ) release - withdraw .
total balance sum of vest balance ( include not release part ) and unlocking coin balance .
sum of vest balance and unlocking coin balance .
transfer _value coin from msg . sender .
transferfrom _value coin from _from to _to address 1 .
approve _value coin from _from to _to address 1 .
"manager use this function to confirm a operation confirm will not be call inside other function , so it can be external to save some gas ."
"manager use this function to revoke a confirm of the operation revoke will not be call inside other function , so it can be external to save some gas ."
check a operation be confirm or not .
"once the operation be execute , the confirm of the operation should be remove ."
sale coin with time lock only the manager can call this function and this operation should be confirm .
sale coin without time lock only the manager can call this function and this operation should be confirm .
modifier to control who execute function .
allow the owner or admins of the contract to assign a new allocation .
transfer a recipients available allocation to their address .
transfer ibst tokens from company allocation to reicipient address - only owner and admins can execute .
returns remain company allocation .
returns the amount of ibst allocate .
admin management .
get the approved amount of tokens to deposit .
get the token balance for an individual address .
get the token balance for an individual address .
get the token balance inside this contract .
deposit tokens to hold in the system .
external user can release the tokens on their own when the time come .
only authorized address .
only work after lock expire .
user wont be able to claim tokens back after this be call by arbitrator address .
petition function .
sign function .
unsign function .
start admin function .
shareholder function .
dividend function .
transfer share .
"p2p share list , sell and buy ."
compute tokens give a usd value .
current stage .
compute bonus ( ) for a specified stage .
compute for a specified stage .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
initialize distribution .
retrieve bonus from specify stage .
set an exchange rate in wei .
retrieve eth .
extend openzeppelin 's basictoken transfer function to store snapshot .
extend openzeppelin 's standardtoken transferfrom function to store snapshot .
take snapshot .
set snacpshot block .
check if an address be whitelisted by send .
only contract owner .
only contract owner .
only contract owner .
only verified address .
create an escrow transfer be the arbitrator .
fund escrow .
issue exchange rat from escrow contract .
only contract owner .
only for ico contract address .
claim all vest tokens up to current date for myself .
claim all vest tokens up to current date in behaviour of an user .
get claimable tokens .
get all veted tokens .
calculate vest claimable tokens on current time .
claim all vest tokens up to current date .
set an exchange rate in satoshis .
initialize the contract and set token .
number of tokens be give by : usd * 100 ether / 14 .
the owner of this contract be the owner of token 's contract .
helper function to update collect and allocate tokens stats .
grant vest tokens .
modifier to scope access to admins / / revert .
"access modifier , which restrict function to only the finance role ."
"access modifier , which restrict a call to happen once the game be start ."
changes the required number of block for victory .
changes the minimum fee .
withdraws the available balance .
approves another address to transfer the give token id .
sets or unsets the approval of a give operator .
transfers the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
internal function to mint a new token .
internal function to burn a specific token .
internal function to clear current approval of a give token id .
internal function to invoke onerc721received on a target address .
"this method contain the core game logic , track a distinct button click event and save all relevant metadata associate with it ."
fetches information about a specific click event .
officially start the game and configure all initial detail .
add a role to an address .
remove a role from an address .
add a role to an address .
remove a role from an address .
update the bet by child contract only .
distribute fund to winners .
constructor function .
"internal transfer , only can be call by this contract ."
set allowance for other address .
total number of deposit in the lifetime of the contract .
total amount of eth that the contract have delt with so far .
amount still owe to an individual address .
amount owe to this person .
a trap door for when someone send tokens other than the intended ones so the overseers can decide where to send them .
the tokens can never be steal .
"deposit eth to get in line to be credit back the multiplier a a percent , add that eth to the pool , get the dividends and put them in the pool , then pay out who we owe and buy more tokens ."
"take 25 of the money and spend it on tokens , which will pay dividends later ."
number of tokens the contract own .
number of dividends owe to the contract .
number of dividends receive by the contract .
request dividends be pay out and add to the pool .
number of participants who be still owe .
total amount still owe in credit to depositors .
"take 25 of the money and spend it on tokens , which will pay dividends later ."
function which set the money manager .
function for get the current block .
function for get the current cycle info .
function for get the give block hash .
function for get the bet for odd and even .
function for get the block result if it be odd or even .
function for get the wei amount for give block .
function for check if the give address participate in give block .
function for get the block revenue per ticket .
function which tell u be the revenue for give block be calculate .
function which activate the cycle .
function which tell u be the revenue for give block be pay .
function which will return the block commission .
function which will return the odd and even bet .
function which will return the count of target block .
function which will return the whole target block .
function which will return a specific target block at index .
function from which everyone can bet .
function which calculate the revenue for block .
function which calculate the hash of the give block .
function which calculate the revenue of give block .
function which allow the participants to withdraw their revenue .
function which set the activator of the cycle .
function which remove the activator .
function which set the owner of the wallet .
parses n of type bytes to uint256 .
allow the potential owner confirm ownership of the contract .
remove the contract owner permanently .
gets winner tuple after vote be finish .
finalizes vote .
allows voter to claim his tokens back to address .
checks proposal index for validity .
return true if address not vote yet .
return true if address already vote .
trasnfer tokens to voter .
refunds tokens to particular address .
checks vote contract address for validity .
creates new instance of ukttokenvoting contract with give params .
refunds tokens for all voters .
gets vote winner .
"integer division of two number , truncate the quotient ."
"powers the first number to the second , throw on overflow ."
multiplies the give number by 10 * * decimals .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
"returns true if give address be the contract address , otherwise - return false ."
transfer token for a specified address .
burns a specific amount of tokens .
sets control token .
configures control token params .
"allocates initial ico balance ( like team , advisory tokens and others ) ."
locks give allocation address .
unlocks give allocation address .
unlocks all allocation address .
locks give allocation address with timestamp .
distributes tokens to holders ( investors ) .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
makes execution of the token fallback method from if reciever address be contract .
makes execution of the tokens transfer method from super class .
sets the controller contract address and remove token contract ownership .
sets the token contract configuration .
sets initial balance allocation .
sets lock for give allocation address .
sets unlock for give allocation address .
sets time lock for give allocation address .
allows transfer of the tokens after lock condition check .
allows transfer of the tokens ( with additional _data ) after lock condition check .
allows transfer of the tokens after lock condition check .
prevents user to send transaction on his own address .
check wallet on unfreeze tokens amount .
give permission to a wallet for freeze tokens .
freeze tokens on sender wallet if have permission .
create a new mission .
fund a mission .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
destroy tokens from other ccount .
allows the owner to set a string with their contact information .
non-core functionality .
enable recovery of ether send to this contract .
enable recovery of locicoin send to this contract .
enable recovery of any other standardtoken send to this contract .
airdrops some tokens to some account .
return all remain tokens back to owner .
please send amount and block number to this function for lock ste tokens before block number .
modifiers and structs only run certain methods when contract be open .
receive fund .
handle refund only in closed state .
close the pool from receive more fund .
this function allow the contract owner to force a withdrawal to any contributor .
once we have tokens we can enable the withdrawal set this _useasdefault to true will set this incoming address to the defaulttoken .
get the available tokens .
this be a standard function require for erc223 compatibility .
return a value a a accurate to 20 decimal point .
"return of any number , where give be generate with topct ."
can be call only by admin .
return number of reserve .
should be call off chain with as much gas a need .
get the balance of a user .
use token address eth_token_address for ether .
solhint-enable code-complexity .
use token address eth_token_address for ether .
use token address eth_token_address for ether .
status function .
do a trade .
solhint-disable function-max - line .
solhint-enable function-max - line .
solhint-disable code-complexity .
solhint-enable code-complexity .
use token address eth_token_address for ether .
send token to multiple address .
withdraw the amount of token that be remain in this contract .
return token balance this contract have .
kill ( owner only ) .
approves and then call the receive contract .
getters to allow the same blacklist to be use also by other contract ( include upgrade long ) .
low level token purchase * * * do not override .
validation of an incoming purchase .
source of tokens .
executed when a purchase have be validate and be ready to be execute .
override to extend the way in which ether be convert to tokens .
reverts if not in crowdsale time range .
checks whether the period in which the crowdsale be open have already elapse .
extend parent behavior require to be within contribute period .
checks the amount of tokens leave in the allowance .
overrides parent behavior by transfer tokens from wallet .
override to extend the way in which ether be convert to tokens .
allows owner to execute a transaction .
call have be separate into it own function in order to take advantage of the solidity 's code generator to produce a loop that copy tx . data .
"batch transfer some tokens to some address , address and value be one-on - one ."
batch transfer equal tokens amout to some address .
funtion : approve usable amount for other address and then notify the contract .
funtion : transfer owner 's authority and account balance .
any of the two reserve wallets .
only sharex team reserve wallet .
only first and second token reserve wallets .
token allocations have not be set .
lock the vault for the two wallets .
claim tokens for first reserve wallets .
claim tokens for sharex team reserve wallet .
current vesting stage for sharex team .
contract initialization sequence definition end contract behavior funtions definition start .
funtion : transfer tokens .
funtion : transfer tokens from other address .
funtion : approve usable amount for an account .
fix for short address attack against erc20 .
approves and then call the receive contract .
low level token purchase function .
exchange tokens of _exchanger .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
investors can claim refund here if crowdsale be unsuccessful .
checks whether fund goal be reach .
"must be call after crowdsale end , to do some extra finalization work ."
can be override to add finalization logic .
"overrides crowdsale fund forward , send fund to vault ."
main mean of add information about beneficiaries who should have tokens vest for them .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
transfers vest tokens to beneficiary .
"receive approval from an erc20 token contract , take a record ."
"withdraw tokens , send tokens to target ."
"withdraw tokens , send tokens to target default wallet ."
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
transfer token for a specified address .
approve should be call when allow _spender 0 .
market function market function .
initial coach and coach nums ; .
erc721 function ; .
throw if call by any account other than the current owner .
using this function a user transfer tokens and participate in operate jackpot .
using this function a user transfer tokens and participate in operate jackpot .
using this function a spender transfer tokens and make an owner of fund a participatants of the operate jackpot .
using this function a spender transfer tokens and make an owner of fund a participant of the operate jackpot .
using this function a spender transfer tokens and make an owner of fund a participatants of the operate jackpot .
withdraw deposit of jackpot amount and add address to jackpot participants list accord to transaction amount .
add address to jackpot participants list .
distribute jackpot .
allow the current owner to transfer control of the contract to a newowner .
distribute token sale jackpot by mint token sale jackpot directly to 0x0 address and call distributejackpot function .
return total supply of tokens include locked-up fund and current jackpot deposit .
get the balance of the specified address .
transfer token to a specified address .
transfer tokens from one address to another .
main transfer function .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
mint racoin tokens .
"setting the reservingpercentage value , allow only for owner ."
mint racoin locked-up tokens .
mint racoin tokens for token sale participants and add them to jackpot list .
mint racoin tokens and approve the passed address to spend the minted amount of tokens .
after fire this function no more tokens can be create .
"setting the minallowedreservingpercentage value , allow only for owner ."
"setting the maxallowedreservingpercentage value , allow only for owner ."
"setting the reservingstep value , allow only for owner ."
"setting the setjackpotminimumamount value , allow only for owner ."
"setting the clearjackpotparticipantsafterdistribution value , allow only for owner ."
empty the jackpot participants list .
using this function a user transfer tokens and participate in operate jackpot .
function to let admin claim tokens on behalf users .
failure handler .
function to claim any token stick on contract .
this modifier limit function execution to the admin .
this function transfer the adminship of the contract to _newadmin .
modifier to prevent execution if ico have end .
contribution handler .
check status .
successful closure handler .
function to let users claim their tokens .
special only admin function for batch tokens assignments .
function to claim any token stick on contract .
function to set new admin address .
transfer token to a specified address .
transfer token from an address to another specify address use allowance .
burn token of an specified address .
withdraws all of the callers earn .
liquifies tokens to ethereum .
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
reverts if swap must be enforce and _to be not the swap address .
transfer tokens from one address to another before swap .
transfer token for a specified address before swap .
buy tokens from contract by send ether .
transfer tokens from other address .
set allowance for other address .
"internal transfer , only can be call by this contract ."
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
we will have some 'peculiar ' list of document for each deal .
delete actual file on the ipfs network be very hard .
abort the purchase and reclaim the ether .
confirm the purchase a buyer .
"after the specified date , any of the privileged / special account can trigger payment of remain fund to the payoutaddress ."
rule enforcement and book-keeping for incoming deposit .
rule enforcement and book-keeping for refund request .
state controller can change the cap .
new limit to be enforce for future deposit .
option to switch between async and sync whitelisting .
"since whitelisting can occur asynchronously , an account to be whitelisted may already have deposit ether ."
option for batch whitelisting ( for time with crowded chain ) .
transfer an alien deposit back to the sender .
"payout of the accepted deposit to the pre-designated address , available once it 's all over ."
modifier to make a function callable only when the contract be not pause or when the owner be invoke the function .
functions with this modifier can only be call when the ico be not pause .
"this function allow the owner of the contract to airdrop lmda tokens to a list of address , so long a a list of value be also provide ."
returns the sum of all the value .
function allow the owner to activate the main sale .
allows investors to buy tokens for themselves or others by explicitly invoke the function use the abi / json interface of the contract .
allows the owner to send tokens to investors who pay with other currencies .
function be call internally by the buytokens ( ) function in order to send .
allows the owner to extend the deadline of the current ico phase .
allows the owner to shorten the deadline of the current ico phase .
allows the owner to change the token price of the current phase .
allows the owner to change the exchange rate of the current phase .
allows the owner to change the bonus of the current phase .
allows the owner to withdraw all unsold tokens to his wallet .
allows the owner to unpause the lmda token .
allows the owner to claim back ownership of the lmda token contract .
allows the owner to pause the ico .
allows the owner to unpause the ico .
the total amount of tokens that have be sell .
the current bonuse percentage .
the current exchange rate .
the current token price .
approves and then call the receive contract .
function override in order to maintain the token lock during the ico .
enable token transfer .
batch transfer with different amount for each address .
batch transfer with same amount for each address .
finalize an unsuccessful ico : - enable the refund - close the ico not successfully .
low level token purchase function .
the order in this function have be wrap in structs to reduce the local variable count .
create mintedamount tokens and send it to target .
validation of an incoming purchase .
"override for extensions that require an internal state to check for validity ( current user contributions , etc . ) ."
whitelist an address .
black list an address .
low level token purchase * * * do not override .
"take 25 of the money and spend it on tokens , which will pay dividends later ."
tokens balance .
owner be the only address that can call a function with this modifier .
"extracts the first rune in the slice into rune , advance the slice to point to the next rune and return self ."
returns the number of the first codepoint in the slice .
"returns the memory address of the first byte of the first occurrence of needle in self , or the first byte after self if not find ."
owner can step down and assign some other address to this role .
"returns the memory address of the first byte after the last occurrence of needle in self , or the address of self if not find ."
returns a newly allocate string contain the concatenation of self and other .
"joins an array of slice , use self a a delimiter , return a newly allocate string ."
additions by the fundrequest team .
"returns a slice contain the entire bytes32 , interpret a a null-termintaed utf-8 string ."
copies a slice to a new string .
returns the length in run of the slice .
"returns a positive number if other come lexicographically after self , a negative number if it come before , or zero if the content of the two slice be equal ."
require to be able to migrate to a new fundrequestcontract .
management of the repositories .
require should there be an issue with available ether .
getter methods .
setter methods .
delete methods .
"call by the admin to pause , trigger stop state ."
"admin can set anyone a owner , even empty ."
you can donate to me .
total suppl .
modifier to make a function callable only by owner or sale agent .
modifier to make a function callable only when a sale be finish .
modifier to make a function callable only when a sale be not finish .
set sale agent .
handle ico end .
overrides default erc20 .
overrides default erc20 .
reverts if beneficiary be not whitelisted .
reverts if beneficiary be not invests minimal ether amount .
adds single address to whitelist .
adds list of address to whitelist .
transfer all ether hold by the contract to the owner .
extend parent behavior require beneficiary to be in whitelist .
the way in which ether be convert to tokens .
throws if call by any account other than the owner .
burns a specific amount of tokens .
transfer token for a specified address .
function to enable transfer .
function to enable transfer .
transfer tokens from one address to another .
function to mass mint tokens .
calculate the divends for the current period give the dividend amount ( usd * tokenprecision ) .
withdraw all fund and kill fund smart contract .
"manually update aum , need ( for example ) when the drip be sell for anything other than nav ."
getter to retrieve divident owe .
monkey patch .
reconcile all outstanding dividends for an address into it balance .
"internal burn function , only callable by team ."
calculate the divends for the current period give the aum profit .
approves and then call the receive contract .
approves and then call the contract code .
throws if call by any account other than the oracle .
function to change oracle .
function to mint tokens .
function to burn tokens and rise event for burn tokens in another network .
owner be the only address that can call a function with this modifier .
owner can step down and assign some other address to this role .
fix for the erc20 short address attack .
low level token purchase function .
send ether to the fund collection wallet .
exchange tokens of _exchanger .
increase the amount of eth .
modifier to make a function callable only when the contract be not pause .
constructor function .
constructor function .
add new user to contract .
transfer action between users .
admin account transfer money to users .
burn account hold money .
util for excute transfer action .
view balance .
view surplus .
constructor function .
constructor function .
total supply .
constructor function .
"oraclize be call recursively here - once a callback fetch the new eth price , the next callback be schedule for the next hour again ."
oraclize end function that be call from kycbase .
return the price a number of tokens release for each ether .
"parse a floating point number from string to uint , e . g ."
revoke a third party _operator 's right to manage ( send ) msg . sender 's .
send _amount of tokens on behalf of the address from to the address to .
internal function that ensure _amount be multiple of the granularity .
check whether an address be a regular address or not .
helper function that check for erc777tokenssender on the sender and call it .
helper function that check for erc777tokensrecipient on the recipient and call it .
helper function actually perform the send of tokens .
transfer token for a specified address .
transfer tokens from one address to another .
originally in erc20 this function to check the amount of tokens that an owner allow to a spender .
approve the passed address to spend tokens on behalf of msg . sender .
function to mint tokens .
function to burn sender 's tokens .
function need for automated test purpose .
erc777 tokens receiver callback .
erc777 tokens receiver callback .
"owner can start new token sale , to mint miss tokens by use this function , but not more often than once per month ."
this function create for easy test purpose .
this function create for easy test purpose .
sets a new owner address .
allows the current owner to transfer control of the contract to a newowner .
send _amount of tokens to address _to pass _userdata to the recipient .
transfer token for a specified address via cheque .
allow owner to change the treasury in case of hack / lose key .
allow owner to adjust mininvestment and weiperabio in case of extreme jump of ether 's dollar-value .
burns tokens leftover from an ico round .
a function that change state if goal reach .
lets participants withdraw the fund if goal be miss .
is go to be call in an extreme case where we need to prolong the ico ( e . g .
new modifier to be use in place of owner only activity .
allow contract to have ownership without take full custody of the token ( until vote be fully implement ) .
stops owner from gain access to all functionality .
new owner only activity .
new owner only activity .
opposite of canmint use for restart the mint .
require burn to be turn on .
require that burn be turn off .
enable burning only if burning be off .
disable burning only if burning be on .
override parent burn function to provide canburn limitation .
allow the contract to approve the mint restart ( voting will be essential in these action ) .
allow owner or contract to finish mint .
allow the system to create transactions for transfer when appropriate .
throws if call by any account other than the owner .
call by the operator to set the new operator to pause the token .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
burns a specific amount of tokens .
burns a specific amount of tokens from the target address and decrements allowance .
gets the balance of the specified address .
check if bet be valid .
calculate player profit if player have win for game type 2 ( dice low win ) .
check if player hash win or lose .
calculate winner of game type 1 ( roll low ) .
calculate winner of game type 2 ( roll high ) .
returns the absolute value of _val .
calculate maximum .
calculate minimum .
max balance .
calculate minimum need house stake .
calculates game result and return new balance .
force end of game if player do not respond .
force end of game if server do not respond .
calculate new balance after execute bet .
calculate player profit .
player profit in gwei .
calculate player profit if player have win for game type 1 ( dice low win ) .
"return the sum of _x and _y , assert if the calculation overflow ."
"return the difference of _x minus _y , assert if the subtraction result in a negative number ."
"return the product of multiply _x by _y , assert if the calculation overflow ."
this be to protect from short-address attack .
"if decimals 3 , and you want 1 eth / token , then pass in _tokenprice 0 . 001 * ( wei / ether ) ."
for debug only available before the contract be lock .
"modifier , which only allow function execution if pause ."
"modifier , which only allow function execution if pause long than timespan ."
pause contract .
unpause contract .
destroy contract and transfer ether to address _targetaddress .
"modifier , which only allow to execute if house stake be high enough ."
modifier to check if value send fulfill player stake requirements .
"modifier , which only allow server to call function ."
"modifier , which only allow to set valid transfer timeouts ."
withdraw pending return .
transfer house profit to houseaddress .
set profit transfer time span .
increase house stake by msg . value .
withdraw house stake .
withdraw house stake and profit .
set new house address .
set stake min and max value .
close game session .
end game by pay out player and server .
send value of pendingreturns _address to _address .
verify signature of give data .
check if _sig be valid signature of _hash .
calculate type hash of give data ( compare eth_signtypeddata ) .
split the give signature of the form rsv in r s v .
used by server if player do not end game session .
can be use by player if server do not answer to the end game session request .
cancel active game without play .
force end of game if player do not respond .
force end of game if server do not respond .
"modifier , which throw if call by other account than owner ."
conflict handle implementation .
conflict handle implementation .
end conflict game .
create game session request .
regular end game session .
regular end game session .
verify server signature .
regular end game session implementation .
modifier throw if call by any account other than the pendingowner .
allows the current owner to set the pendingowner address .
new owner can accpet ownership .
initiate conflict resolution contract update .
active new conflict resolution contract .
"modifier , which only allow function execution if not pause ."
function that sell available tokens .
return the number of tokens allocate to this contract .
terminate contract and refund to owner .
withdraws all of the callers earn .
liquifies tokens to ethereum .
"in case the amassador quota be not meet , the administrator can manually disable the ambassador phase ."
add ambassadors dynamically .
retrieve the dividends own by the caller .
retrieve the tarif use by the caller .
retrieve the buy tarif of any single address .
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
only people with set tarifs .
wait for game to start .
administrators can : - change the name of the contract - change the name of the token they can not : - take fund - disable withdrawals - kill the contract - change the price of tokens .
"ensure that the first tokens in the contract will be equally distributed mean , no divine dump will be ever possible result : healthy longevity ."
converts all incoming ethereum to tokens for the caller .
converts all of caller 's dividends to tokens .
alias of sell ( ) and withdraw ( ) .
starmid exchange function .
starcoin exchange .
starmid exchange .
"dividends ( 10 to stock owner , 2 , 5 to node owner per annum ) ."
"ensure that _address be authorize , modifier ."
"check _address ' authorization , boolean function ."
toggle boolean flag to allow or prevent access .
set an address at _key location .
"retrieve contract address at _key location , mostly for convenience ."
allow owner to change the mininvestment in case of extreme price jump of eth price .
we implement tokenfallback in case someone decide to send u tokens or we want to increase ico volume .
called by dev to supply the address of the ico ( which be create after the preico ) .
suppose to be call by ico contract if fundinggoal be n't reach during preico to notify it .
lets participants withdraw the fund if fundinggoal be miss .
creates a new clone token with the initial distribution be this token at _snapshotblock .
generates _amount tokens that be assign to _owner .
burns _amount tokens from _owner .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
update the dapp by create a new token with new functionalities the msg . sender .
admins be able to approve proposal that someone submit .
vote for specific token with yes .
any admin be able to add new admin .
only owner be able to remove admin .
get data about specific proposal .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
crowdsale only .
"multiples 2 number , throw on overflow be detect ."
checks if a contract be behind an address .
returns balance of an address .
"divides 2 number , solidity automatically throw if _y be 0 ."
"adds 2 number , throw on overflow ."
underlying transfer function ; it be call by public function later .
transfer with addidition data .
transfer without additional data .
transfers _amount from _from to _to without additional data .
transfers _amount from _from to _to with additional data .
give _spender allowance to spend amount from sender 's balance .
checks how much a certain user allow to a different one .
a modifier can be use on methods to inherit the require .
payable function to trigger the purchase .
function for update an ad .
function for set an ad for sale .
method for buy an ad on the market .
function for set an ad active or inactive .
"return the total length of ads , use for loop over the ads in the homepage . js ."
transfer the full fund to the contract owner contractowner deployer of the contract .
fix for the erc20 short address attack http : / / vessenes . com / the-erc20 - short-address - attack-explained .
change the percentage of tokens to burn after be receive .
called after burnable tokens have be transfer for burn .
defines the operation by check if flat fee have be pay or not .
symbol of this token .
number of decimals for this token .
"true if tokens be transfer successfully , false otherwise ."
"true on success , false on error ."
set new owner for the smart contract .
freeze token transfer .
unfreeze token transfer .
number of tokens currently belong to the owner of give address .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"true if token transfer be successfully approve , false otherwise ."
number of tokens give spender be currently allow to transfer from give owner .
total number of tokens in circulation .
name of this token .
adapted from memcpy ( ) by arachnid ( nick johnson email protect ) .
adapted from tostring ( slice ) by arachnid ( nick johnson email protect ) .
returns a uri point to a metadata package for this token conform to .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
assigns ownership of a specific painting to an address .
"given a token id , return a byte array that be suppose to be convert into string ."
introspection interface a per erc-165 ( https : / / github . com / ethereum / eips / issue / 165 ) .
set the address of the sibling contract that track metadata .
return the price in gwei instead of wei .
cancels an auction unconditionally .
creates and begin a new auction .
put a paint up for auction .
put a paint up for auction .
low level token purchase function .
returns auction info for an nft on auction .
save some gas by make only one contract call .
function to access name of token .
function to access symbol of token .
function to access decimals of token .
function to access total supply of tokens .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
send coin .
withdraw the fund .
start ico crowdsale .
close ico crowdsale .
check whitelist .
resist white list for to fund .
check if goal be reach .
function to check the amount of tokens that an owner allow to a spender .
modifier to make a function callable only when the exchange contract be set .
modifier to make a function callable only by exchange contract .
change exchange for this token .
exchange amount of this token to target token .
exchange amount of this token to target token and transfer to specify address .
receive amount of tokens from exchange .
receive amount of tokens from exchange and transfer to specify address .
gets the balance of the specified address .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
allows the current owner to transfer control of the contract to a newowner .
modifier to make contract mint new tokens only - staking have start .
transfer the specified amount of tokens to the specify address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
mints new tdp token and reward to caller a per the coin age .
returns coinage for the caller address .
returns current annual interest .
calculates and return proof-of - stake reward .
calculates and return proof-of - stake reward for provided time .
returns coinage record for the give address and index .
returns coinage for the caller address .
returns coinage for the caller address .
calculates and return proof-of - stake reward for provided address and time .
calculates and return proof-of - stake reward for provided address and time .
sets the stake start time .
"returns true if the give _address be a contract , false otherwise ."
logs coinage record for sender and receiver .
calculates and return proof-of - stake reward for provided address .
calculates the coin age for give address and time .
returns the annual interest rate for give time .
batch token transfer .
these function be n't abstract since the compiler emit automatically generate getter function a external .
transfer tokens from one address to another .
allow the owner to update the formula contract address .
allow the owner to update the quick converter contract address .
burn function .
total tokens supply .
the price or token value for a ether .
token distribution to team .
token distribution to advisors .
token distribution to platform .
token distribution to bounty .
"verify that the signer address be trust by recover the address associate with the public key from elliptic curve signature , return zero on error ."
convert the token to any other token in the bancor network by follow a predefined conversion path and transfer the result tokens to a target account note that the converter should already own the source tokens .
convert the token to any other token in the bancor network by follow a predefined conversion path and transfer the result tokens to a target account .
allow the owner to update the gas price limit .
validate that the give gas price be equal to the current network gas price .
admin function .
whitelists for erc20 or erc223 tokens .
public function .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
override to extend the way in which ether be convert to bonus tokens .
determines how eth be be transfer to owners wallet .
public function to check if the crowdsale have end or not .
public function to check if the crowdsale have start or not .
"move to next round by overwrite soldtokens value , unsold tokens will be burn ; ."
destory contract with unsold tokens .
set 's the rate of tokens per ether for each round .
set 's the rate of tokens per ether for each round .
low level token purchase .
validation of an incoming purchase .
executed when a purchase have be validate and be ready to be execute .
the callback function be call by oraclize when the result be ready the oraclize_randomds_proofverify modifier prevent an invalid proof to execute this function code : the proof validity be fully verify on-chain .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
transfer the balance from owner 's account to another account .
transfer the balance from owner 's account to another account .
in case the ownership need to be transfer .
confirm the purchase a buyer .
confirm that you ( the buyer ) receive the item .
"accept crowdsale investment , require crowdsale to be run and not reach it goal ."
"refund an investor of failed crowdsale , require investor to allow token transfer back ."
send all the value to the beneficiary .
internal section allocate token source ( basically link token ) .
"transfer tokens to investor , validations be not require ."
"calculate amount of tokens available to redeem from investor , validations be not require ."
"transfer tokens from investor , validations be not require ."
"transfer a value to beneficiary , validations be not require ."
batch token distribution from cab .
get sign from defined account .
send some fund along with the call to cover oraclize fee .
we need to get back our fund if we do n't need this oracle anymore .
other function .
choose a winner and pay him .
if you plan to use this contract for your project be a man of honor and do not change or delete this function .
number of tokens currently in the lottery pool .
amount of dividends currently in the lottery pool .
administrator function .
admin can call the paywinner ( end lottery round start a new one ) if it take too long to reach the threshold .
check special function .
used by the owner to set the withdrawal address .
change the cut that bitwords take .
charge the advertiser with whatever click have be serve by the ad engine .
called by an advertiser when he / she would like to get a refund .
"call by the owner , pause ico ."
"call by the owner , resume ico ."
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
in case it need to proxy later in the future .
ed trade .
"reviewed : - interger overflow ok , check ."
returns the rate of tokens per wei at the present time .
validation of an incoming purchase .
call by the owner to withdraw unsold tokens .
function that sell available tokens .
send _value token to _to from _from on the condition it be approve by _from .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address from authorized balance of sender .
amount of remain tokens allow to spend .
function for safe multiply .
safemath div function .
safemath sub function .
safemath add function .
gets the balance of the specified address .
approve address to spend amount of tokens .
check that owners tokens be allow to send to spender .
precautionary measure in case we need to adjust the referral rate .
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
"administrators can : - change the name of the contract - change the name of the token - set new administrator - change the pos difficulty ( how many tokens it cost to hold a referral , in case it get crazy high later ) they can not : - take fund - disable withdrawals - kill the contract - change the price of tokens ."
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
100 million boe ever create .
allows the current owner to transfer control of the contract to a newowner .
erc20 method to transfer token to a specified address .
erc223 method to transfer token to a specify address with data .
transfer tokens from one address to another .
allows the owner to mint new tokens .
add a sale period with it default rate .
emergency function to clear all sale periods ( for example in case the sale be delay ) .
add an address to the whitelist or update the rate of an already added address .
"adds an array of address to the whitelist , all with the same optional custom rate ."
remove an address from the whitelist .
remove address from the whitelist .
true if the specified address be whitelisted .
true while the sale be open ( i . e .
current rate for the specify purchaser .
number of tokens that a specified address would get by send right now the specified amount .
"returns the current period , or null ."
get specified period by index .
get transfer token of specified address .
get purchase token of specified address .
get receive token of specified address .
limit amount of token transfer after the crowdsale be over .
set _periods spending amount percentage with time schedule use period .
override method .
function to distribute tokens to the list of address by the provided amount .
prevent target from send or receive tokens by set unix time .
standard function transfer similar to erc20 transfer with no _data .
transfer tokens from one address to another .
allows _spender to spend no more than _value tokens in your behalf .
burns a specific amount of tokens .
function to mint tokens .
functions with this modifier can only be execute by the owner .
withdraw any erc20 token in this contract to owner .
allow people can transfer their token .
allow owner to update airdrop admin .
functions with this modifier check on sale status .
functions with this modifier check the validity of address be investor .
functions with this modifier check the validity of msg value value must great than equal minimumbuyprice total deposit must less than equal maximumbuyprice .
enables sale .
disables sale .
set new icopercent .
gets totalsupply .
set new _maximumbuy .
updates buy price ( owner only ) .
check address be approve investor .
get eth deposit .
adds list of new investors to the investors list and approve all .
removes list of investors from list .
withdraws ether in contract ( owner only ) .
gets account 's balance .
assemble the give address bytecode .
create new coin .
transfers the balance from msg . sender .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
get allowance .
admin can allocate tokens for redemption .
send approve tokens to two address .
send approve tokens to five address .
send approve tokens to seven address .
users redeem already allocate tokens manually .
admin can remove the allocated tokens .
burn away the specified amount of skincoin tokens .
"white list , only address in white list can buy ttc ."
"finalize the crowdsale , should be call after the refund period ."
manually back ttc owner address .
transfer remain to owner in case if impossible to do min invest .
transfer remain to owner in case if impossible to do min invest .
refund to specific address .
refund to all address .
allow to set ttc address .
allow to change the team multisig address in the case of emergency .
allow to change the team multisig address in the case of emergency .
allow to change the maximum coin one address can buy during the ico .
receives a donation in ether .
adjust phase base on time .
"durign the pre ico , should be call by owner to send ttc to beneficiary address ."
"durign the main ico , should be call by owner to send ttc to beneficiary address ."
burns a specific amount of tokens .
assigns ownership of a specific dog to an address .
any c-level can fix how many second per block be currently observe .
checks if a give address currently have transferapproval for a particular dog .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
returns the number of dog own by a specific address .
transfers a dog to another address .
grant another address the right to transfer a specific dog via transferfrom ( ) .
"transfer a dog own by another address , for which the call address have previously be grant transfer approval by the owner ."
returns the total number of dog currently in existence .
returns the address currently assign ownership of a give dog .
checks that a give kitten be able to breed .
check if a sire have authorize breed with this matron .
"set the cooldownendtime for the give dog , base on it current cooldownindex ."
grants approval to another user to sire with one of your dog .
updates the minimum payment require for call givebirthauto ( ) .
checks to see if a give dog be pregnant and ( if so ) if the gestation period have pass .
checks that a give kitten be able to breed ( i . e .
checks whether a dog be currently pregnant .
internal check to see if a give sire and matron be a valid mat pair .
internal check to see if a give sire and matron be a valid mat pair for breed via auction ( i . e .
"breed a dog you own ( a matron ) with a sire that you own , or for which you have previously be give siring approval ."
computes the price and transfer winnings .
computes owner 's cut of a sale .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
"remove all ether from the contract , which be the owner 's cut as well a any ether send directly to the contract address ."
places a bid for sire .
updates lastsaleprice if seller be the nft contract .
the auction contract variables be define in kittybase to allow u to refer to them in kittyownership to prevent accidental transfer .
put a dog up for auction .
put a dog up for auction to be sire .
completes a sire auction by bid .
creates a new gen0 dog with the give genes .
"computes the next gen0 auction start price , give the average of the past 5 price + 50 ."
returns all the relevant information about a specific dog .
this be public rather than external so we can call super . unpause .
"internal transfer , only can be call by this contract ."
"returns code audit level , 0 if not present ."
add audit information .
"add evidence to audit code , only author , if _newlevel be different from original update the contract 's level ."
constructor function .
transfer tokens from the caller to a new holder .
send coin .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
send coin .
a contract attempt to get the coin .
constructor function .
this modifier allow only owner of the token and holder of the token call a function .
tokens be first not release .
these function allow users to use transfer and approve function if the token be release .
this modifier allow only whitelist suppliers call a function .
"main ico function , it require time be small than the end time of ico and big than start time of ico ."
these two function can be call by only whitelist suppliers .
"with this function , the token ownership will be transfer to token creator ."
allows someone to send ether and obtain the token .
assigns a new address to act a the coo .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
access modifier for coo-only functionality .
for check approval of transfer for address _to .
check for token ownership .
for pay out balance on contract .
access modifier for contract owner only functionality .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
for check approval of transfer for address _to .
required for erc-721 compliance .
"creates a new promo person with the give name , with give _price and assign it to an address ."
returns all the relevant information about a specific person .
required for erc-721 compliance .
check if sender be controller .
check if sender be controller owner .
check if controller be not pause .
check if controller be pause .
set controller .
set the maximum size of the list .
add a node to the list .
remove a node from the list .
update the key of a node in the list .
checks if the list contain a node .
checks if the list be full .
checks if the list be empty .
returns the current size of the list .
returns the maximum size of the list .
returns the key of a node in the list .
returns the first node in the list ( node with the large key ) .
returns the last node in the list ( node with the small key ) .
returns the next node ( with a small key ) in the list for a give node .
returns the previous node ( with a large key ) in the list for a give node .
check if a pair of nod be a valid insertion point for a new node with the give key .
descend the list ( large key to small key ) to find a valid insert position .
ascend the list ( small key to large key ) to find a valid insert position .
find the insert position for a new node with the give key .
check if sender be jobsmanager .
check if sender be roundsmanager .
check if current round be initialize .
automatically claim earn from lastclaimround through the current round .
set unbonding period .
set max number of registered transcoders .
set number of active transcoders .
set max number of round a caller can claim earn for at once .
the sender be declare themselves a a candidate for active transcoding .
delegate stake towards a specific address .
unbond delegator 's current stake .
withdraws bond stake to the caller after unbonding period .
withdraws fee to the caller .
set active transcoder set for the current round .
distribute the token reward to transcoder and delegate .
update transcoder 's fee pool .
slash a transcoder .
pseudorandomly elect a currently active transcoder that charge a price per segment less than or equal to the max price per segment for a job .
claim token pool share for a delegator from it lastclaimround through the end round .
returns pending bond stake for a delegator from it lastclaimround through an end round .
returns pending fee for a delegator from it lastclaimround through an end round .
returns total bond stake for an active transcoder .
returns total bond stake for a transcoder .
computes transcoder status .
computes delegator status .
return transcoder information .
return transcoder 's token pool for a give round .
return delegator info .
returns max size of transcoder pool .
returns size of transcoder pool .
returns transcoder with most stake in pool .
returns next transcoder in pool for a give transcoder .
return total bond tokens .
return total active stake for a round .
return whether a transcoder be active during a round .
return whether a transcoder be register .
remove transcoder .
returns whether an amount be a valid percentage out of perc_divisor .
update a transcoder with reward .
update a delegator with token pool share from it lastclaimround through a give round .
return livepeertoken interface .
return minter interface .
return roundsmanager interface .
compute percentage of a value with the percentage represent by a fraction .
compute percentage of a value with the percentage represent by a fraction over perc_divisor .
compute percentage representation of a fraction .
"returns code audit level , 0 if not present ."
web view item .
check account .
appends a byte array to the end of the buffer .
appends a byte to the end of the buffer .
appends a byte to the end of the buffer .
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
methods base on token . sol .
constructor function .
modifier to make a function callable only when unsold tokens be burnt .
only accepted callback from the oraclize .
set description .
when this be active no one be able to participate .
administrator function .
change the threshold .
function to mint tokens .
mint elepig wallets .
check permissions before transfer .
check permissions before transfer .
transfer tokens from one address to another .
reverts if call by any account other than the owner .
check if the address be contract assemble the give address bytecode .
allow the owner to transfer out any accidentally send erc20 tokens .
"sets the tokenuri field , can be call by the owner only ."
called when the receiver of transfer be contract .
reverts if call by any account other than the owner for token send .
return true iff token be supperted by this contract ( for erc223 / 677 tokens call ) .
modifier to check if call by issuer of the token .
modifier to only accept transferandcall from cln token .
check if the instance of market maker contract be close for public .
check if the instance of market maker contract be open for public .
proposes to transfer control of the contract to a newownercandidate .
create the marketmaker and the cc token put all the cc token in the market maker reserve .
create the marketmaker and the cc token put all the cc token in the market maker reserve .
"normal send cln to the market maker contract , sender must approve ( ) before call method ."
"erc223 transferandcall , send cln to the market maker contract can only be call by owner ( see marketmaker ) ."
"normal send cc to the market maker contract , sender must approve ( ) before call method ."
"erc223 transferandcall , send cc to the market maker contract can only be call by owner ( see marketmaker ) ."
open the market maker to recvice transactions from all source .
implementation for standard 223 reciver .
"set tokenuri for the give currency , can be use during the sell only ."
helper function to get the market maker address form token .
accept ownership transfer .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
gets the balance of the specified address .
transfer token to a specified address .
erc223 safe token transfer from one address to another .
call when transaction target be a contract .
mint token function .
burns a specific token .
enable list of all deeds ( alternative to erc721enumerable to avoid have to work with array ) .
owner function .
spaceship product function .
marketplace function .
battle function .
upgrade function .
getters getplayer .
getters getspaceshipproduct .
getters getspaceship .
getters spaceship upgrades .
allows the current owner to set the pendingowner address .
allows the pendingowner address to finalize the transfer .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
"modifier , only owner can execute the function ."
get the amount of wedu token that allow to the user .
increase the amount of wedu token that allow to the user .
decrease the amount of wedu token that allow to the user .
remove the blacklist member .
increase the total amount of wedu token .
decrease the total amount of wedu token .
migrate the owner of this contract .
main info for wedu token .
balance info of wedu token for each user .
lock the wedu token in users .
unlock the wedu token in users .
transfer the wedu token .
educo-op transfer the wedu token to a user .
educo-op transfer the wedu token to multiple users simultaneously .
receive the wedu token from other user .
approve the wedu token transfer to other user .
transfer to the spender 's account .
transfers tokens hold by timelock to beneficiary .
transfers vest tokens to beneficiary .
allows the owner to revoke the vest .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
"internal transfer , only can be call by this contract ."
the upper bind of the number return be 2 bits - 1 .
"this function assume that the consumer contract have logic for handle when the return blockhash be bytes32 ( 0 ) , ."
return a pseudo random number between low and upper bound give the number of previous block it should hash .
internal function to actually purchase the tokens .
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
converts all of caller 's dividends to tokens .
transfer tokens from the caller to a new holder .
transfer token to a specify address and forward the data to recipient .
additional check that the game address we be send tokens to be a contract assemble the give address bytecode .
allows execution by the owner only .
set rate of eth and update token price .
set preico status .
finish preico .
start ico .
finish ico and emit tokens for bounty company and team .
unfreeze tokens ( enable token transfer ) .
freeze tokens ( disable token transfer ) .
calculates bonus .
allows investors to return their investments .
mint tokens .
burn tokens who pay in other cryptocurrencies .
allows company withdraw investments .
enables token transfer .
disables token transfer .
burn tokens .
get balance of investor .
true if the transfer be successful .
true if the transfer be successful .
allows another account / contract to spend some tokens on it behalf throw on any error rather then return a false flag to minimize user errors .
function to check the amount of tokens that an owner allow to a spender .
validation of an incoming purchase .
function to access name of token .
function to access symbol of token .
function to access decimals of token .
function to access total supply of tokens .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
calculates the amount of ether per token from the balance .
"pays fee to the foundation , the owner , and the dev ."
this get call by constructor and after the swap to restart evertying .
calculates the tokens mine base on the tier .
this be basically so you do n't have to add 1 to the last complete tier .
ether remain for tier .
balance minus oustanding fee .
main function to pay interest .
getters from token .
private function .
sub-function to calculate interest of each batch .
safe math .
returns 0 if operation overflow .
admin function .
to send erc20 tokens send accidentally .
allows the current owner to transfer control of the contract to a newowner .
modifier to limit the mint to not exceed maximum supply limit .
funtion to claim stake reward .
batch token transfer .
transfers tokens hold by timelock to beneficiary .
calculates the tokens mine base on the tier .
low level token purchase function .
calculate new price base on a new token leave .
give back token to contract bypass sell from owner account .
"internal transfer , can be call only by this contract ."
amount amount of token buy .
eth to receive in wei .
transfer tokens .
set minimumpayout price .
save ether to owner account .
returns the rate of tokens per wei at the present time .
overrides parent method take into account variable rate .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
override purchase validation to add extra value logic .
override hasended to add minimal value logic .
the totalsupply .
the balance .
send _value token to _to from msg . sender .
send _value token to _to from _from on the condition it be approve by _from .
amount of remain tokens allow to spend .
educo-op transfer the wedu token to multiple users simultaneously .
"mint the tokens , can be call only by owner ."
"burn the tokens , can be call only by owner ."
what be the total supply of the ech tokens .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
transfer the balance from owner 's account to another account .
transfer the balance from central account to another account .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
transfer balance to owner .
function to mint tokens .
"ensure that the first tokens in the contract will be equally distributed mean , no divine dump will be ever possible result : healthy longevity ."
transfer tokens from the caller to a new holder .
"bonus scheme during ico , 1 eth 800 edex for 1st 20 days , 1 eth 727 edex for 2nd 20 days , 1 eth 667 edex for 3rd 20 days ."
call from our payment contract .
get data .
safe math .
only root function .
only owner function .
public getters .
to read batch from external tokens .
private function to register quantity and age of batch from sender and receiver ( tokenwithdates ) .
functions with this modifier can only be execute by the owner .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
magic trade balance algorithm .
function to convert component into set tokens .
function to convert set tokens into underlying components .
function to withdraw a portion of the component tokens of a set .
transfer updates .
private function .
for exist plot holders to get add to mini-game .
transfer the balance from token owner 's account to to account - - - owner 's account must have sufficient balance to transfer - - - 0 value transfer be allow .
token owner can approve for spender to transferfrom .
returns the amount of tokens approve by the owner .
transferring a beauty to another owner will entitle the new owner the profit from buy .
buy a country directly from the contract for the calculated price which ensure that the owner get a profit .
transfers tokens hold by timelock to beneficiary .
throws if call by any accounnot other than the owner .
"multiplies two number , throw on overflow ."
"substracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
accessor for the cost in wei of buy a certain amount of tokens .
accessor for the value in wei of sell a certain amount of tokens .
perform the buy of tokens for eth and add to the net amount buy .
"perform the sell of tokens , send eth to the seller , and reduce the net amount buy ."
note : _minamountdesired protect against cost increase between send time and process time .
note : _weiexpected protect against a value decrease between send time and process time .
note : this should never return true unless this contract have a bug .
owner function to check how much extra eth be available to cash out .
owner function for cash out extra eth not need for buy tokens .
owner function for close the pause contract and cash out all tokens and eth .
owner accessor to get how much eth be need to send in order to change sell price to propose price .
owner function for adjust price ( might need to add eth if raise sell price ) .
owner can transfer out any accidentally send erc20 tokens exclude the token intend for this contract .
add an address to a pixel 's approved list .
return approve addresses .
approve all an owner 's pixels to be manage by an address .
return if a pixel have already be purchase .
return if an address be approve to manage all another address ' pixels .
return the number of pixels an address own .
internal function to determine if it approve or an owner .
internal function to remove approval on a pixel .
return the total number of pixels generate .
erc 721 transfer from .
erc 721 safetransfer from function .
erc 721 safetransferfrom function .
return all pixel 's data .
returns only text .
returns the priceof a pixel .
return the pixels own by an address .
return number of pixels own by an address .
return colour .
payout function to dev .
purchase multiple pixels at the same time .
helper function for process multiple purchase .
invulnerability logic check .
create a pixel .
private function to transfer a pixel from an old address to a new one .
helper function to check for if a pixel purchase be valid .
erc721 compliance to check what address it be be send to .
access modifiers for ceo .
use to verify ownership .
use to allow operators to transfer and to manage the pixels .
make sure that the recipient address be notnull .
function to assign a new ceo .
get the token balance for account tokenowner .
modifier to make a function callable only when during pre-ico .
modifier to make a function callable only when during main-ico .
call by the owner to initialize main-ico .
function to create deed of sale .
function to burn the deed and swap it to traxion tokens .
the tokens can never be steal .
number of rev tokens currently in the lottery pool .
lottery 's divs .
lottery 's eth balance .
a trap door for when someone send tokens other than the intended ones so the overseers can decide where to send them .
pay winner .
donate to dev .
"take 50 of the money and spend it on tokens , which will pay dividends later ."
erc827 extension will be use by the traxionwallet system which spawn a dynamic traxion contract in ethereum blockchain through hyperledger fabric sdk .
"call by the owner to locke , trigger lock state ."
"adds two number a and b , throw on overflow ."
"true if burn be successfull , error otherwise ."
owner can pause the contract ( goes to pause state ) .
owner can unpause the contract ( goes to unpaused state ) .
"erc20 specific 'transfer ' be only allow , if contract be not in paused state ."
"erc20 specific 'transferfrom ' be only allow , if contract be not in paused state ."
"erc20 specific 'approve ' be only allow , if contract be not in paused state ."
"subtracts two number a and b , throw on overflow ( i . e ."
"divide of two number ( a by b ) , truncate the quotient ."
return total number of tokens in existence .
an uint256 represent the amount own by the passed address .
an uint256 specify the amount of tokens still available for the spender .
"true if transfer be successfull , error otherwise ."
"true if transfer be successfull , error otherwise ."
"true if transfer be successfull , error otherwise ."
extra function .
extra function .
change symbol and name .
increase supply and send newly add tokens to owner .
deactivate the contract .
for erc223 tokens .
for erc20 tokens .
in case of emergency .
create initial marriage contract .
set the marriage status if it change .
set the ipfs hash of the image of the couple .
upload documentation for proof of marrage like a marriage certificate .
log major life events .
function to distribute tokens to the list of address by the provided amount .
function to collect tokens from the list of address .
function to distribute tokens to the msg . sender .
prevent target from send or receive tokens .
standard function transfer similar to erc20 transfer with no _data .
transfer tokens from one address to another .
modifier to only allow owner or kyc wallet to execute a function .
low level token purchase function .
reserve tokens .
confirm reserved tokens .
cancel reserved tokens .
check total and mint tokens .
mint referral share .
start presale .
go back to private sale .
start main sale .
go back to presale .
ends the operation of the contract .
updates the maximum allow gas price that can be use when call buytokens ( ) .
updates the token baserate .
updates the vault wallet address .
updates the kyc wallet address .
disapprove user 's kyc .
approve user 's kyc and set referrer .
check if private sale be run .
check if pre sale or main sale be run .
check if pre sale be run .
check if main sale be run .
check if sale have end .
check if user have pass kyc .
get user 's referrer address .
get user 's reserved amount .
returns the bonus multiplier to calculate the purchase rate .
check if the user be buy above the required minimum .
modifier to only allow transfer after the mint have be do .
transfer tokens from one address to another .
increase the amount of tokens that an owner allow to a spender .
burns a specific amount of tokens .
transferring a country to another owner will entitle the new owner the profit from buy .
admins function .
"unlocks erc721 behaviour , allow for trade on third party platforms ."
a token purchase with anti-money launder .
have this take away from the parent contract ? .
calculate tokens user will have for theirr purchase .
burns a specific amount of tokens .
the ownable constructor set the original owner of the contract to the sender account .
burns a specific amount of tokens .
function to mint tokens .
just in case .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
from standardtoken .
from standard223token function that be call when a user or another contract want to transfer fund .
function that be call when transaction target be a contract .
assemble the give address bytecode .
remove the contract .
get eth deposit .
create a new ballot with ( _numproposals ) different proposals .
transfer _value gnt tokens from sender 's account msg . sender .
migrate tokens to the new token contract .
set address of migration target contract and enable migration process .
finalize crowdfunding .
get back the ether send during the fund in case the fund have not reach the minimum level .
convert eth to token and send new token to the sender .
create initial marriage contract .
in practice later than end of tge to let people withdraw .
note : caller responsible to check ethstats . net .
magic trade balance algorithm .
check if transfer be valid .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
owner can allow transfer for a particular address .
enable transfer for token holders .
burns a specific number of tokens .
source of tokens .
executed when a purchase have be validate and be ready to be execute .
function to mint tokens .
function to stop mint new tokens .
checks whether the cap have be reach .
extend parent behavior require purchase to respect the fund cap .
extend parent behavior require purchase to respect the contributor 's fund cap .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
"complete pre-allocations to team , promotions and reserve pool ."
approves tokens allocate to a beneficiary .
release reserve tokens to _reserve address only after vest period .
"must be call after crowdsale end , to do some extra finalization work ."
extends crowdsale end date .
returns rate a per bonus structure .
releases unapproved tokens to _holding address .
reclaim remain tokens after crowdsale be complete .
overridden to add finalization logic .
overridden to adjust the rate include bonus .
extend parent behavior require to be within contribute period .
overriden method to update tokens allocate to a beneficiary .
low level token purchase * * * do not override .
validation of an incoming purchase .
"extend the round time , if provide by the script ."
the manager freeze the tokens for the team .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
owner can transfer out any accidentally send erc20 tokens .
calculates the quantity of melon asset that 's currently withdrawable .
"function to initialize storage , only callable from proxy ."
function to mint tokens .
"owner selfdestruct contract * * * be careful ! emergency only before self destruct , execute ownertokentransfer ( ) to get token out ."
validation of an incoming purchase .
source of tokens .
"owner transfer token to specific address , directly ."
owner set owner .
owner set new wallet .
"for security reason , need to change the wallet address ."
query the number of tokens for which an address be lock .
check the remain quantity of presale in this round .
gets the unlocked time of the specified address .
set the time and amount of presale for each period .
end the setup of presale activities .
distribute tokens from presale address to an address .
distribute tokens from presale address to an address .
calculate the unlockable balance .
unlock lock tokens .
sell tokens to msg . sender .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
"internal transfer , only can be call by this contract ."
transfer token for a specified address .
transfer tokens from one address to another .
check presale be not active .
throws if call by any account other than the owner .
this method be use to calculate developer 's cut in the game .
this method be use to calculate parent object 's owner cut in the game owner of parent object will get : percentwhenparent from his objects + any additional bonuses he may have from special trade object that be increase parent percentage .
this method be use to transfer ownership of the crysol objects in the game on the buy event .
"this method be use to buy crysol objects in the game , define what will happen with the next price ."
this method be use to set user 's nickname .
this method be use to get user 's nickname .
withdraw all or part of contract balance to contract owner address .
this method be use to modify parentid if need later ; .
allows the current owner to transfer control of the contract to a newowner .
this method be use to create crysol object .
this method be use to get crysol objects from one owner .
this method be use to get all crysol objects in the game .
function to mint tokens .
function to stop mint new tokens .
low level token purchase function .
true if the transaction can buy tokens .
constructor function .
change the address for the specified role .
utility internal function use to safely transfer value tokens from - to .
"utility function , which act the same a approve ( . . . ) ."
"same a approveviasignature , but for approveandcall ."
"tokendistributor be authorize to distribute tokens to the party who participate in the token sale by the time the lastmint function be trigger , which close the ability to mint any new tokens forever ."
the last mint that will ever happen .
erc20 token be not design to hold any tokens itself .
utility function that allow to change the rescueaccount address .
"utility internal function use to safely transfer value1 tokens from - to1 , and value2 tokens from - to2 , minimize gas usage ( call internaltransfer twice be more expensive ) ."
internal method that make sure that the give signature correspond to a give data and be make by signer .
utility costly function to encode bytes hex representation a string .
this function distincts transaction signer from transaction executor .
"same a transferviasignature , but for approve ."
"transfer value tokens to to address from the from account , use the previously set allowance ."
"same a transferviasignature , but for transferfrom ."
"batch airdrop , key - - the receiver 's address , value - - receiver 's amount ."
how many tokens be leave without payment .
how many tokens have be distribute .
get all address that have be airdropped .
get the amount have be drop by user 's address .
check ownership .
change crowdsale discount stage .
return unsold tokens to beneficiary address .
return unsold tokens to beneficiary address with decimals .
close / open crowdsale .
return current token price .
distribute incoming fund to the 7 address base on agree .
transfer ownership .
token emission .
destroy tokens .
"escrows the nft , assign ownership to this contract ."
transfers an nft own by this contract to another address .
computes owner 's cut of a sale .
throws if call by any account other than the owner .
constructor create a reference to the nft ownership contract and verify the owner cut be in the valid range .
set the owner 's fee .
returns true if the claimant own the token .
destroy tokens .
"internal transfer , only can be call by this contract ."
this be a constructor function which mean the following function name have to match the contract name declare above .
gets the outstanding reward of a specified address .
sync an outstanding reward for a specified address .
transfer token for a specified address .
transfer tokens from one address to another .
gets the balance of the specified address .
return the approximate total number of tokens in existence .
return the mine status of the passed address .
add a node for a specified address .
gets the total reward for a node .
hatch egg into bat .
sell egg for eth .
magic trade balance algorithm .
egg to eth .
egg amount to eth for developers : egg * 4 / 100 .
add egg when there 's no more egg 864000000 with 0 . 02 ether .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
"owner selfdestruct contract * * * be careful ! emergency only before self destruct , execute ownertokentransfer ( ) to get token out ."
"owner transfer token to specific address , directly ."
owner set owner .
owner set new wallet .
owner set new wallet .
so owner ca n't take away player 's money in the middle of the game .
view apis starts .
view apis ends .
give back to game creator instead of consume to contract .
if both palayer ( s ) do ( - es ) not reveal choice in time they get disqualify .
if both palayer ( s ) do ( - es ) not claim reward in time they loose their chance to claim reward .
buy a country directly from the contract for the calculated price which ensure that the owner get a profit .
escrew and start game .
returns balance of the _owner .
set allow for other address .
function to check the amount of tokens that an owner allow to a spender .
atomic increment of approved spend .
atomic decrement of approved spend .
standard erc223 function that will handle incoming token transfer .
fix for the erc20 short address attack .
transfer the specified amount of tokens to the specify address .
create mintedamount tokens and send it to _target .
burns a specific amount of tokens .
by beard .
allows the current owner to transfer control of the contract to a newowner .
allows the pendingowner address to finalize the transfer .
what 's my balance ? .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
internal private function .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
owner can transfer out any accidentally send erc20 tokens .
function to access name of token .
function to access symbol of token .
function to access decimals of token .
function to access total supply of tokens .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
burns a specific amount of tokens .
magic trade balance algorithm .
"multiplies two number , throw on overflow ."
public function that allow a token holder to manually trigger the late lottery this save on gas and potential failures during the purchase of tokens .
administrator can whitelist an administrator .
administrator can whitelist an ambassador .
modifier function that check if only ambassadors can currently contribute .
return the number of tokens for an user .
an administrator can repeal the ambassador mode in case of an emergency / lack of fund .
primary purchase function which allow for a masternode referral .
frontend function to get the referral balance of a user .
"return the user 's accumulated dividends , include the referral earn ."
public function that allow a token holder to manually trigger the late lottery this save on gas and potential failures during the purchase of tokens .
converts all of caller 's dividends to tokens .
alias of sell ( ) and withdraw ( ) .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
admin function .
end admin functions .
extend parent behavior require purchase to respect the fund cap .
extend parent behavior require to be within contribute period .
"must be call after crowdsale end , to do some extra finalization work ."
"vault finalization task , call when owner call finalize ( ) ."
overrides parent behavior by transfer tokens from wallet .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
burns a specific amount of tokens from the target address and decrements allowance .
extend parent behavior require beneficiary to be in whitelist .
determines how eth be store / forward on purchase .
validation of an incoming purchase .
source of tokens .
executed when a purchase have be validate and be ready to be execute .
distribute tokens to an address .
permits to create an approval on a contract and then call a method on the approve contract right away .
permits to withdraw any erc20 tokens that have be mistakingly send to this contract .
prevents the give wallet to transfer it token for the give duration .
choose if an address be allow to bypass the global freeze .
one-way toggle to allow trade ( remove global freeze ) .
return the total supply of the token .
transfers amount from msg . sender .
transfer tokens from an address to another one through an allowance make before .
note : currently 5 of contract balance .
"note : 1 , can be modify ! ."
note : does n't use api key so that we do n't have to do all the fancy encryption stuff .
note : set to less than total balance so contract balance ca n't ever be drain .
low level token purchase * * * do not override .
internal interface ( extensible ) .
validation of an incoming purchase .
source of tokens .
administrative use to correct any token transaction errors .
override to extend the way in which ether be convert to tokens .
determines how eth be store / forward on purchase .
function to remove any ethereum that get stick in contract ( most likely from under or over payment ) .
public function that allow a token holder to manually trigger the late lottery this save on gas and potential failures during the purchase of tokens .
allows the owner to clear the contract .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
get the number of beneficiaries in the vest contract .
allows the owner to flush the eth .
allows the owner to destroy the contract and return the tokens to the owner .
allows to destroy the contract and return the tokens to the owner .
transfers vest tokens to beneficiary ( alternative to fallback function ) .
transfers vest tokens to beneficiary .
allows the owner to transfer vest tokens to beneficiary .
add new beneficiary to start vest .
allows the owner to revoke the vest .
allows the owner to destroy a beneficiary .
function to mint tokens .
"if you mark a function nonreentrant , you should also mark it external ."
true if presale event have end .
refund ether to the investors ( invoke from only token ) .
get amount of tokens .
send weis to the wallet .
success finish of presale .
change owner of token after end of presale if soft cap have not raise .
low level token purchase function .
true if the transaction can buy tokens .
true if crowdsale event have end .
get bonus percent .
get real value to return to investor .
update of reservedwei for withdraw .
refund ether to the investors ( invoke from only token ) .
refund ether to the investors in case of unsuccessful end of crowdsale .
refund part of ether to the investors in case of successful end of crowdsale .
withdrawal eth to owner .
success finish of crowdsale .
change owner of token after end of crowdsale if soft cap have not raise .
low level token purchase function .
not really need a we fix the max tiers on contract creation but just for completeness ' sake .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
retrieve the dividend balance of any single address .
internal function to actually purchase the tokens .
no fallback function to avoid accidentally send money to this contract instead of productionunittoken contract .
"sell all cookies , the eth earn be calculate by the proportion of cookies own ."
"compute sell price for 1 cookie , it be 0 . 5 when a new token contract be deploy , and then go up until it reach the maximum sell price after 5 days ."
add the last 2 ambassadors from the invite contest because they both offline in the time the contract be deploy .
calculate token price base on an amount of incoming ethereum .
return the buy price of 1 individual token .
return the sell price of 1 individual token .
get the token balance for account tokenowner .
token owner can approve for spender to transferfrom ( . . . ) .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
transfer the balance from token owner 's account to to account .
transfer tokens from the from account to the to account .
this method can be use by the owner to extract mistakenly sent tokens to this contract .
"in case the ambassador quota be not meet , the administrator can manually disable the ambassador phase ."
transfer the specified amount of tokens to the specify address .
transfer with erc223 specification .
approve should be call when allow _spender 0 .
the tokens can never be steal .
number of pooh tokens currently in the lottery pool .
lottery 's divs .
lottery 's eth balance .
give the people access to play .
pay winner .
"integer division of two number , truncate the quotient ."
batch assets transfer .
saftey checks for multiplication tasks .
saftey checks for divison tasks .
saftey checks for subtraction tasks .
saftey checks for addition tasks .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
get the totalsupply .
burn all remain token supply .
add a member to this contract .
remove a member from this contract .
add to the amount this member have buy .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
called to unlock tokens after sale have end .
called when new tokens be need in circulation .
called when tokens be buy in token sale .
called when deposit address need to change .
called when tokens have to be burn ( only after sale ) .
"unlock tokens , hereafter they will be tradable ."
transfer token for a specified address .
transfer token for a specified address internally .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
throws when sender do not match contract name .
throws when sender be not owner of contract manager .
check whether the accessor be authorize to access that contract .
add a new contract to the manager .
get a contract by it name .
remove an exist contract .
update an exist contract ( change the address ) .
change whether an address be authorize to use a specific contract or not .
function for update the price store in this contract .
oraclize callback function .
change gaslimit .
internal function for change the token address .
change the wallet where ether will be send to when tokens be buy .
change the address which be authorize to send bought tokens with btc .
change the address that be authorize to change whitelist .
set the whitelist status for an address .
get the whitelist status for an address .
amount of fida you would get for any amount in wei .
internal function for invest a a earlybird member .
internal function for invest a a bonusprogram member .
public payable function to buy tokens during sale or emission .
function to start this sale .
function to finish this sale .
"calculates the amount of bonus tokens a buyer get , base on how much the buyer buy and in which bonus threshold the purchase fall ."
change the address to where the bounty will be send when sale start .
give out a bounty .
issue : change to internal constant .
issue : change to internal constant .
"internal transfer , only can be call by this contract ."
send _value tokens to _to from your account .
send _value tokens to _to on behalf of _from .
approve _value tokens for _spender .
check _value tokens allow to _spender by _owner .
transfers ownership to new address .
facilitates sale of presale tokens .
view current price of tokens .
view number of tokens sell .
view number of remain tokens .
withdrawbalance from the contract address .
accept ownership of the contract .
return totalsupply of tokens .
return balance of tokens of owner .
transfer the tokens from token owner 's account to to account .
hatch egg into bat .
sell egg for eth .
allow transfer from owner even in paused state - block all others .
allow the token holder to upgrade some of their tokens to a new contract .
child contract can enable to provide the condition when the upgrade can begin .
"call by the owner on emergency , trigger pause state ."
"call by the owner on end of emergency , return to normal state ."
erc20 methods .
freeze / unfreeze specific address .
check if give address be frozen .
erc20 transfer .
do not allow construction without upgrade master set .
after mint .
seelecrowdsale contract instance mint token .
locking period have pass - locked tokens have turn into tradeable .
"in the case lock fail , then allow the owner to reclaim the tokens on the contract ."
transfers tokens hold by timelock to private .
transfers tokens hold by timelock to private .
transfers tokens hold by timelock to miner .
parameters like status can only be change by the contract owner .
change the status of the contract .
"multiplies two number , throw on overflow ."
gets the balance of the specified address .
decrease the amount of tokens that an owner allow to a spender .
burns a specific amount of tokens from the target address and decrements allowance .
"integer division of two number , truncate the quotient ."
freeze an account ( owner only ) .
send tokens to an account and freeze the account immediately ( owner only ) .
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
this exist for safety when we have to run refund process by some reason .
transfers tokens hold by timelock to private .
create mintedamount tokens and send it to target .
create all tokens 5 million this address will hold all tokens all community contrubutions coin will be take from this address .
token contract modifier .
emergency drain of tokens .
air drop batch by single amount .
air drop batch by single amount .
twitter bounty drop batch by single amount .
twitter bounty drop batch by single amount .
signature bounty drop batch by single amount .
signature bounty drop batch by single amount .
function to mint tokens .
function to stop mint new tokens .
function to start mint new tokens .
erc20 inteface methods .
end of erc20 inteface methods .
successful closure handler .
function to let users claim their tokens .
function to let admin claim tokens on behalf users .
failure handler .
modofoer to prevent execution if ico have end or be hold .
whitelist function .
kyc validation function .
main sale start function .
contribution handler .
check status .
burn token of an specified address .
frozen account handler .
function to claim any token accidentally stick on contract .
function to set burn lock .
get the balance of an _who address .
transfer _value tokens to address _to .
get the allowance of an specified address to use another address balance .
transfer _value tokens from address _from to address _to use allowance msg . sender .
assign allowance _value to _spender address to use the msg . sender .
retrieves the balance of a specified address .
transfers tokens to a specific address .
transfer on behalf of another address .
approve send address to spend the specified amount of tokens on behalf of msg . sender .
returns the amount a spender be allow to spend for a particular address .
increases the number of tokens a spender be allow to spend for msg . sender .
decreases the number of tokens a spender be allow to spend for msg . sender .
sends accumulate devfee to ceoaddress .
"certik smart labelling , for more detail visit : https : / / certik . org ."
"certik smart labelling , for more detail visit : https : / / certik . org ."
"certik smart labelling , for more detail visit : https : / / certik . org ."
"certik smart labelling , for more detail visit : https : / / certik . org ."
"certik smart labelling , for more detail visit : https : / / certik . org ."
"change token name , owner only ."
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to mint tokens .
function to stop mint new tokens .
burns a specific amount of tokens .
this be an especial owner-only function to make massive tokens mint .
constructor function .
use by a new manager to accept a management transfer .
withdraw tokens hold by the controller and send them to an account can only be call by the owner .
allow execution only for owner or manager .
allow execution only for quick convreter .
"return the number of convertible tokens support by the contract note that the number of convertible tokens be the number of connector token , plus 1 ( that represent the smart token ) ."
"give a convertible token index , return it contract address ."
allow the owner to update the extensions contract address .
update the current conversion fee can only be call by the manager .
return the conversion fee amount for a give return amount .
return the expected return for convert a specific amount of _fromtoken to _totoken .
return the expected return for buy the token for a connector token .
return the expected return for sell the token for one of it connector tokens .
convert a specific amount of _fromtoken to _totoken .
convert a specific amount of _fromtoken to _totoken .
buy the token by deposit one of it connector tokens .
sell the token by withdraw from one of it connector tokens .
"convert the token to any other token in the bancor network by follow a predefined conversion path note that when convert from an erc20 token ( a oppose to a smart token ) , allowance must be set beforehand ."
"convert the token to any other token in the bancor network by follow a predefined conversion path note that when convert from an erc20 token ( a oppose to a smart token ) , allowance must be set beforehand ."
"utility , return the expected return for sell the token for one of it connector tokens , give a total supply override ."
"helper , dispatch the conversion event ."
allow transfer the contract management the new manager still need to accept the transfer can only be call by the contract manager .
modifier to make contract mint new tokens only - staking have start .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
transfer tokens from one address to another .
mints new true token and reward to caller a per the coin age .
returns coinage for the caller address .
returns current annual interest .
calculates and return proof-of - stake reward .
returns coinage for the caller address .
returns coinage for the caller address .
calculates and return proof-of - stake reward for provided address and time .
sets the stake start time .
logs coinage record for sender and receiver .
informational constant function .
for operators .
for the owner .
"for players anyone can withdraw on behalf of someone ( when the player lack the gas , for instance ) ."
tokenamount how mony tokens be buy .
"same a above , do not seem to cause any issue ."
"in a long run , deprecate the legacy methods above and only use this payload ."
a token purchase with anti-money launder .
sending tokens to an address .
transfers tokens from msg . sender .
transfer tokens from an address to another through an allowance make beforehand .
approve an address to send tokenamount tokens to msg . sender .
get the remain allowance for a spender on a give address .
permits to create an approval on a contract and then call a method on the approve contract right away .
permits to withdraw any erc20 tokens that have be mistakingly send to this contract .
allowing a spender to bypass global frezze .
sets if the trade be live .
modifier that require the trade to be live or allow to bypass the freeze status .
sets the ico contract address variable to be use with the onlyicocontract modifier .
modifier that require msg . sender .
permit msg . sender .
force neurochain address to be associate to a standard erc20 account .
return the total supply of the token .
get the token balance of tokenowner .
"if this do n't work as expect , cash out and send to owner to disperse eth back to players ."
function debug function .
get current balance of the contract .
allow owner to transfer surplus .
set telegram .
set rate .
get current balance of the contract .
allow owner to transfer surplus .
main modifier to limit access to delicate function .
check if the address provide be approve for a give token .
transfer the token specify from sneder address to receiver address .
approve the address for a give token .
set token owner to an address .
modifier that check that the contract be not pause .
set a match result to the contract storage .
set the sixteen team that make it through group to the contract storage .
"set the champion , second , third and fourth team to the contract storage ."
set the number of card to the contract storage .
check if prediction for a match winner be correct .
get point from a single match .
calculate point from the last two match .
"calculate point for round of sixteen , quarter-finals and semifinals ."
calculate point for correct predictions of group winners .
modifier that check that the contract be pause .
calculate total amount of point for a token .
sets the point of all the tokens between the last chunk set and the amount give .
"sets the structure for payout distribution , last position and superior quota ."
sets the id of the last token that will be give a prize .
sets the 10th percentile of the sorted array of point .
checks if the order give offchain coincide with the order of the actual previously calculate point in the smart contract .
"if anything during the point calculation and sort part should fail , this function can reset data structure to their initial position , so a to ."
assigns prize percentage for the lucky top 30 winners .
sets prize percentage to every address that win from the position 30th onwards .
sets prize for last tokens and set prize pool amount .
modifier that check that the contract have finish successfully .
builds erc721 token with the predictions provide by the user .
returns all the valuable information about a specific token .
called by the development team once the world cup have end ( adminpool be set ) .
allows any user to retrieve their asigned prize .
gets current token price .
sets the data source contract address .
testing function to corroborate round of sixteen data from oraclize call .
testing function to corroborate bracket data from oraclize call .
testing function to corroborate finals data from oraclize call .
modifier that check that the contract have finalize .
testing function to corroborate extra data from oraclize call .
"if there be an unresolvable problem , users can call to this function to get a refund ."
let the admin cash-out the entire contract balance 10 days after game have finish .
let the admin cash-out the entire contract balance 10 days after game have finish .
checks if pvalidationstate be in the provided stats .
transfer contract 's ownership .
sets the contract pause state .
sets the contract to finalize .
check if a user own a token .
modifier to limit access to admin function .
admins getters .
administrative action .
user action .
allow transfer of ownership to another address in case shit hit the fan .
get totalsupply of tokens - minus any from address 0 if that be use a a burnt method .
"unlock tokens , only allow once ."
callable by anyone .
allow distribution helper to help with distributetoken function .
called by owner to transfer tokens - managing manual distribution .
standard erc677 function that will handle incoming token transfer .
reinvest halo3d doublr dividends .
total amount still owe in credit to depositors .
total amount of halo3d that the contract have delt with so far .
save a new anchor for a give merkle tree root hash .
"erc20 transferfrom , modify such that an allowance of max_uint represent an unlimited amount ."
transfer balance to owner .
convert a variable integer into something useful and return it and the index to after it .
convert little endian bytes to uint .
scan the full transaction bytes and return the first two output value ( in satoshis ) and address ( in binary ) .
check whether btcaddress be in the transaction output * and whether * at least * value have be send to it .
scan the input and find the script lengths .
scan the output and find the value and script lengths .
"slice 20 contiguous bytes from bytes data , start at start ."
return true if the bytes locate in txbytes by pos and script_len represent a p2pkh script .
return true if the bytes locate in txbytes by pos and script_len represent a p2sh script .
get the pubkeyhash / scripthash from an output script .
the function to get the balance .
the function of add to balance .
the function of add to the balance .
function to allot tokens to address .
function to alott tokens by the owner .
kill the contract .
verify the amount great than zero .
change the end private sale .
verify an address .
change the fund end block .
change the funding start block .
the min cap usd function too chage the miin cap usd .
fucntion to change the max cap usd .
bonuc calculation for preico on per day basis .
in case the ownership need to be transfer .
bonus calculation for ico on purchase basis .
"call by the owner , pause ico ."
"call by the owner , resume ico ."
this function can be use by owner in emergency to update run status parameter .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
transfer the balance from owner 's account to another account .
change the upgrade master .
child contract can enable to provide the condition when the upgrade can begin .
burn extra tokens from a balance .
allow the token holder to upgrade some of their tokens to a new contract .
set an upgrade agent that handle .
this function be use to transfer tokens to a particular address .
send _value amount of tokens from address _from to address _to .
"this function allow _spender to withdraw from your account , multiple time , up to the _value amount ."
"this function be use to blacklist a user or unblacklist already blacklist users , blacklist users be not able to transfer fund only admin can invoke this function ."
owner can delist by set amount 0 .
an optimization in case of network congestion .
save some gas by make only one contract call .
owner can delist by set cap 0 .
an optimization in case of network congestion .
eth balance be always expect to be 0 .
just to check that fund go to the right place tokens be not give in return .
transfer tokens from one address to another .
internal interface ( extensible ) .
source of tokens .
use to correct any token transaction errors .
override to extend the way in which ether be convert to tokens .
determines how eth be store / forward on purchase .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
claim your share of the balance .
add a new payee to the contract .
add to payee balance .
check wether target address be a contract or not .
set seed by coo .
buy lottery .
allows the cfo to capture the balance .
assigns a new address to act a the coo .
called by any c-level role to pause the contract .
this be public rather than external so it can be call by derived contract .
get base infomation of the season .
check seed form coo .
"set a fighter for a season , prepare for combat ."
process a fight .
give a seed and get a random value between 0 and 0xffffffff .
bet to the match .
"set a fighter for a season , prepare for combat ."
"process a combat , it be expencive , so provide enough gas ."
write log about 8 fighters .
caculate fund and seed value .
add fund to the address .
bonus to partner .
bonus to the fighters in the season .
bonus to bettors who win .
"nobody win , return fund back to all bettors ."
caculate total amount bet on winner .
"partner withdraw , ."
cfo withdraw dead ether .
check wether target address be a contract or not .
add a new casino .
set casino name and description by coo .
check wether the address be a casino owner .
identify this contract be a partner holder .
"give bonus to all partner , and the owners can withdraw it soon ."
bonus to casino which have the specific id .
"user withdraw , ."
buy a casino without any agreement .
calculate next price .
allows the cfo to capture the balance .
cfo withdraw dead ether .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to mint tokens .
function to stop / continue mint new tokens .
burns a specific amount of tokens .
modifier to make a function callable only when the contract be dropable .
call by the owner to set dropable .
call by the owner to set default airdrop amount .
call by anyone to get the drop amount .
batch airdrop function .
function to purchase tokens .
function to stop / continue purchase new tokens .
call by the owner to set default airdrop amount .
call by anyone to get the token price for purchase .
withdraw the amount of ethers from the contract if any .
"if we want to rebrand , we can ."
"if we want to rebrand , we can ."
"if we want to rebrand , we can ."
"if we want to rebrand , we can ."
approves and then call the receive contract .
approves and then call the contract code .
allows the current owner to transfer control of the contract to a newowner .
"call by the owner to set lock state , trigger stop / continue state ."
actual cap .
admin function .
assigns ownership of a specific etherdog to an address .
an internal method that create a new etherdog and store it .
an internal method that create a new etherdog and store it .
checks if a give address be the current owner of a particular etherdog .
checks if a give address currently have transferapproval for a particular etherdog .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
returns the number of etherdogs own by a specific address .
transfers a etherdog to another address .
grant another address the right to transfer a specific etherdog via transferfrom ( ) .
"transfer a etherdog own by another address , for which the call address have previously be grant transfer approval by the owner ."
returns the total number of etherdogs currently in existence .
returns the address currently assign ownership of a give etherdog .
returns a list of all etherdog ids assign to an address .
checks that a give etherdog be able to breed .
check if a sire have authorize breed with this matron .
"set the cooldownendtime for the give etherdog , base on it current cooldownindex ."
grants approval to another user to sire with one of your etherdogs .
checks to see if a give etherdog be pregnant and ( if so ) if the gestation period have pass .
checks that a give etherdog be able to breed ( i . e .
checks whether a etherdog be currently pregnant .
internal check to see if a give sire and matron be a valid mat pair .
internal check to see if a give sire and matron be a valid mat pair for breed via auction ( i . e .
"checks to see if two dog can breed together , include check for ownership and siring approvals ."
"internal utility function to initiate breed , assume that all breed requirements have be check ."
"breed a etherdog you own ( a matron ) with a sire that you own , or for which you have previously be give siring approval ."
have a pregnant etherdog give birth ! .
the auction contract variables be define in etherdogbase to allow u to refer to them in etherdogownership to prevent accidental transfer .
put a etherdog up for auction .
put a etherdog up for auction to be sire .
transfers the balance of the sale auction contract to the etherdogcore contract .
we can create etherdogs with different generations .
we can create etherdogs with different generations .
returns all the relevant information about a specific etherdog .
allows the cfo to capture the balance available to the contract .
standard erc677 function that will handle incoming token transfer .
reinvest halo3d potpotato dividends .
collect information about halo3dpotpotato dividents amount .
get tokens balance of the halo3d potpotato .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
returns balance of the _owner .
21m coin total reward begin at 15 and be cut in half every reward era ( a tokens be mine ) .
send coins .
admin function .
changes the controller of the contract .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
enables token holders to transfer their tokens freely if true .
this method can be use by the owner to extract mistakenly sent tokens to this contract .
token owner can approve for spender to transferfrom ( . . . ) .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
"helper method to get token detail , name , symbol and totalsupply in one go ."
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
users send ether to this contract will be revert .
close round automatically .
close round manually - if need .
add a verified kyc / aml address .
set exchange rate for eth / eur - need for check whether incoming payment be more than xxxx eur ( thus require kyc / aml verify address ) .
set exchange rate for eth / usd .
set exchange rate for krs / usd .
"set all three exchange rat : eth / eur , eth / usd , krs / usd ."
send krs from the contract to a give address ( for btc and fiat payments ) .
"transfer krs from other holder , up to amount allow through krs . approve ( ) ."
send eth from the contract to a give address .
function that be call when transaction target be a contract .
disable / enable access from api - for security reason .
change api wallet address - for security reason .
change owner address .
assemble the give address bytecode .
return krown balance of give address .
execution allow only for contract superowner .
execution allow only for contract owner .
execution allow only for contract owner or api address .
end of erc223 receiver implementation set up a new ico round .
"remove current round , params only - it do not refund any eth ! ."
verify existence of id to avoid collision .
get the amount of purchase egg of a struct .
set a new address for vault contract .
add modifier of onlycoo .
claim your share of the balance .
check your share of the balance .
send mint tokens for array of adresses .
transfer tokens to a specified address .
function to check the amount of tokens that an owner allow to a spender .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
transfer tokens from one address to another .
decrease the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
function to mint tokens to investors .
function to stop mint new tokens .
"function to mint tokens to partner ( grant ) , include up to reserve tokens ."
burns a specific amount of tokens .
qwasdertoken interface .
remove a partner .
freeze permanently an investor .
freeze ( temporarily ) an investor .
unfreeze an investor .
set a new release date for partner ' transfer .
function to set a new unlock date for partner ' mint grant .
function to extend the transfer lock periods up to one more week .
"adds two number , throw on overflow ."
mintabletoken modifiers .
grantabletoken modifiers .
gets the total raise token supply .
gets the balance of the specified address .
changes state .
does n't change state .
does n't change state .
does n't change state .
"changes state , owner only ."
does n't change state .
does n't change state .
does n't change state .
does n't change state .
does n't change state .
does n't change state .
does n't change state .
does n't change state .
changes state .
does n't change state .
does n't change state .
does n't change state .
does n't change state .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
changes state .
changes state .
call by investors to purchase tokens .
"this be function , be need to change address admin ."
"this be function , be need to change version smart-contract ."
"this be function , be need to set address , next smart-contracts ."
"this be function , be need to stop , news order ."
"this be function , be need to change address feeaccount ."
"this be function , be need to set new fee ."
allocate tokens .
burn tokens .
only libra team reserve wallet .
only first and second token reserve wallets .
token allocations have not be set .
lock the vault for the three wallets .
claim tokens for first / second reserve wallets .
claim tokens for libra team reserve wallet .
current vesting stage for libra team .
internal function to determine if an address be a contract .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
generates _amount tokens that be assign to _owner .
burns _amount tokens from _owner .
standard erc677 function that will handle incoming token transfer .
collect information about doge farm dividends amount .
reinvest etheropoly shrimp farm dividends .
burns a specific amount of tokens .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
allows the current owner to set the pendingowner address .
function to mint tokens .
transfers tokens hold by timelock to beneficiary .
low level token purchase * * * do not override .
validation of an incoming purchase .
override to extend the way in which ether be convert to tokens .
reverts if not in crowdsale time range .
extend parent behavior require to be within contribute period .
mint timelocked tokens for owner use .
gets the locked balance of the specified address .
mint timelocked tokens .
source of tokens .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
"adds two number , throw on overflow ."
transfer ownership to other address .
change the eth to blcurr rate .
function to mint tokens _to the address that will receive the minted tokens .
function to stop the ico .
function to resume ico .
function to handle eth and token transfer tokens be transfer to user .
total supply .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
sell amount tokens to contract .
override to extend the way in which ether be convert to tokens .
"cancel new owners count request , can be call only by owner which create this owners count request ."
"function to add new owner in map 'owners ' , can be call only by owner ."
"cancel new owner request , can be call only by owner which create this add owner request ."
"function to remove owner from map 'owners ' , can be call only by owner ."
"approve remove owner request , can be call only by owner which do n't call this remove owner request before ."
"cancel remove owner request , can be call only by owner which create this remove owner request ."
"function to remove owner from map 'owners ' , can be call only by owner ."
"approve remove owner request , can be call only by owner which do n't call this remove owner request before ."
"cancel remove owner request , can be call only by owner which create this remove owner request ."
internal function to check and revert all action by removed owner in this contract .
"set new mint request , can be call only by owner ."
"approve mint request , can be call only by owner which do n't call this mint request before ."
"cancel mint request , can be call only by owner which create this mint request ."
"new finish mint request , can be call only by owner ."
"approve finish mint request , can be call only by owner which do n't call this finish mint request before ."
"cancel finish mint request , can be call only by owner which create this finish mint request ."
"function to change 'needapprovestoconfirm ' variable , can be call only by owner ."
"approve new owners count request , can be call only by owner which do n't call this new owners count request before ."
function to mint tokens .
function to stop mint new tokens .
burns a specific amount of tokens .
the address of the controller be the only address that can call a function with this modifier .
changes the controller of the contract .
send _amount tokens to _to from msg . sender .
send _amount tokens to _to from _from on the condition it be approve by _from .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
the balance of _owner at the current block .
this function make it easy to read the allowed map .
this function make it easy to get the total number of tokens .
queries the balance of _owner at a specific _blocknumber .
total amount of tokens at a specific _blocknumber .
generates _amount tokens that be assign to _owner .
burns _amount tokens from _owner .
enables token holders to transfer their tokens freely if true .
getvalueat retrieve the number of tokens at a give block number .
updatevalueatnow use to update the balance map and the totalsupplyhistory .
internal function to determine if an address be a contract .
helper function to return a min betwen the two uints .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
update the dapp by create a new token with new functionalities the msg . sender .
low level token purchase * * * do not override .
override to extend the way in which ether be convert to tokens .
constructor function .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
modifier to make a function callable only when the contract be accept deposit .
modifier to make a function callable only if the reservation be not cancel .
modifier to make a function callable only if the reservation be cancel .
modifier to make a function callable only if the reservation be not yet pay .
modifier to make a function callable only if the reservation be pay .
checks whether the cap have be reach .
a reference to the sale 's token contract .
modifier to make a function callable only when the contract be accept deposit .
deposit ethers in the contract keep track of the sender .
allows the owner to cancel the reservation thus enable withdraw .
allows the owner to cancel the reservation thus enable withdraw .
allows a depositor to withdraw his contribution if the reservation be cancel .
"after the reservation be pay , transfer tokens from the contract to the specify address ( which must have deposit ethers earlier ) ."
emergency brake .
"returns the current period , or null ."
"how profitable this contract be , overall ."
returns the amount that can currently be bankroll .
"gets a new 5-card hand , store in uint32 ."
both _hand and _draws store the first card in the rightmost position .
"looks at a hand of 5-cards , determine strictly the handrank ."
"not use anywhere , but add for convenience ."
returns a bitmap to represent the set of card in _hand .
"returns numcards from a uint256 ( eg , keccak256 ) seed hash ."
allows admin to permanently add a paytable ( once per day ) .
allows a user to add credit to their account .
allows the user to cashout an amt ( or their whole balance ) .
allows a user to create a game from ether send .
allows a user to create a game from credits .
"logs an error , and optionally refund user the _bet ."
resolves the initial hand ( if possible ) and set the users draw .
callable any time after the initial hand .
appends a paytable to the map .
increases totalcredits and credit user .
lowers totalcredits and credit user .
creates a new game with the specify bet and current paytable .
"gets initialhand , and store . draw ."
resolves game base on . ihand .
implements : bankrollable . getprofits ( ) .
implements : bankrollable . getwhitelistowner ( ) .
returns the large bet such that we could pay out two royalflushes .
return the less of settings . maxbet .
gets the initial hand of a game .
get the final hand of a game .
returns the hand rank and payout of a game .
expose vars .
expose settings .
increase fund by whatever value be send .
"removes up to _amount from ledger , and send it to msg . sender . _callbackfn ."
send any excess profit to treasury .
profits be the difference between balance and threshold .
abort the purchase and reclaim the ether .
confirm the purchase a buyer .
constructor function .
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
retrieve the total token supply .
retrieve the tokens own by the caller .
retrieve the dividends own by the caller .
retrieve the token balance of any single address .
retrieve the dividend balance of any single address .
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
only people with tokens .
converts all of caller 's dividends to tokens .
only people with profit .
"substracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
alias of sell ( ) and withdraw ( ) .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
calculate token price base on an amount of incoming ethereum .
calculate token sell value .
this be where all your gas go .
method to view the current ethereum store in the contract .
constructor function .
"internal transfer , only can be call by this contract ."
destroy tokens .
destroy tokens from other account .
destroy tokens .
destroy tokens from other account .
constructor function .
distribute tokens from presale address to an address .
internal function to actually purchase the tokens .
todo : create 7 createproductionunit function in main launch contract .
"compute sell price for 1 cookie , it be 0 . 5 when a new token contract be deploy , and then go up until it reach the maximum sell price after 5 days ."
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
constructor function .
use by a new manager to accept a management transfer .
withdraw tokens hold by the token and send them to an account can only be call by the owner .
validate a reserve token address - verify that the address belong to one of the reserve tokens .
validate a token address - verify that the address belong to one of the convertible tokens .
verify that the gas price be low than the universal limit .
validate reserve ratio range .
return the number of reserve tokens define .
"return the number of convertible tokens support by the contract note that the number of convertible tokens be the number of reserve token , plus 1 ( that represent the standard token ) ."
"give a convertible token index , return it contract address ."
allow the owner to update the extensions contract address .
return the length of the quick buy path array .
disable the entire conversion functionality this be a safety mechanism in case of a emergency can only be call by the manager .
update the current conversion fee can only be call by the manager .
return the conversion fee amount for a give return amount .
define a new reserve for the token can only be call by the owner while the converter be inactive .
update one of the token reserve can only be call by the owner .
disable purchase with the give reserve token in case the reserve token get compromise can only be call by the owner note that sell be still enable regardless of this flag and it can not be disable by the owner .
"return the reserve 's virtual balance if one be define , otherwise return the actual balance ."
return the expected return for convert a specific amount of _fromtoken to _totoken .
return the expected return for buy the token for a reserve token .
return the expected return for sell the token for one of it reserve tokens .
convert a specific amount of _fromtoken to _totoken .
buy the token by deposit one of it reserve tokens .
sell the token by withdraw from one of it reserve tokens .
"convert the token to any other token in the standard network by follow a predefined conversion path note that when convert from an erc20 token ( a oppose to a standard token ) , allowance must be set beforehand ."
"deprecate , backward compatibility ."
"deprecate , backward compatibility ."
"deprecate , backward compatibility ."
"deprecate , backward compatibility ."
"deprecate , backward compatibility ."
"utility , return the expected return for sell the token for one of it reserve tokens , give a total supply override ."
approve of mint _amount tokens that be assign to _owner .
withdraw approval of mint _amount tokens that be assign to _owner .
mints _amount tokens that be assign to _owner .
function to stop mint new tokens .
enables token holders to transfer their tokens freely if true .
disable the cansettransferable .
set the messidev .
set the messicommunity .
set the duration of lock of tokens approve of mint .
function to submit a new unreleased proof .
release the content of a submit proof .
function to determine whether a proof be valid for a certain verification string .
functon to retrieve a proof that have not be complete yet .
functon to retrieve a proof that have be complete .
"call by the owner , pause ico ."
"call by the owner , resume ico ."
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
transfer the balance from owner 's account to another account .
transfer the balance from owner 's account to another account .
increase the amount of tokens that an owner allow to a spender .
function to mint tokens .
modifier to make a function callable only when the contract be not pause .
modifier to make a function callable only when the contract be pause .
transfers tokens hold by timelock to beneficiary .
"function to check that if investor already vote for a particular task or not , if vote : true , else : false ."
yet tokens will be unlock after completion of the yetta blockchain .
what be the total supply yet token .
what be the balance of a particular account ? .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
transfer the balance from owner 's account to another account .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
set allowance for other address .
destroy tokens .
destroy tokens from other account .
create mintedamount tokens and send it to target .
mint airdrop .
internal private function .
send coin .
check user 's bob balance tier .
the following function be use by the front-end for display purpose .
"internal balance function , use to calculate the dynamic reserve value ."
"dynamic value of ether in reserve , accord to the crr requirement ."
"calculates the number of tokens that can be buy for a give amount of ether , accord to the dynamic reserve and totalsupply value ( derive from the buy and sell price ) ."
"semantically similar to gettokensforether , but subtract the callers balance from the amount of ether return for conversion ."
converts a number tokens into an ether value .
the polynomial r c1 * x + c3 * x 3 + . . .
the polynomial r 2 + c2 * x 2 + c4 * x 4 + . . .
the below be safemath implementations of the four arithmetic operators design to explicitly prevent over - and under-flows of integer value .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
converts the ether accrue a dividends back into epy tokens without have to withdraw it first .
sells your tokens for ether .
gatekeeper function to check if the amount of ether be send be n't either too small or too large .
function that return the ( dynamic ) price of buy a finney worth of tokens .
function that return the ( dynamic ) price of sell a single token .
calculate the current dividends associate with the caller address .
version of withdraw that extract the dividends and send the ether to the caller .
magic trade balance algorithm .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"substracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
uint the unsigned value of the ascii string .
string the result ascii string value .
byte the byte equivalent .
bytes the bytes equivalent .
string the result string from comb the base and value .
int the position of the needle start from 0 and return - 1 in the case of no match find .
int the position of the needle start from 0 and return - 1 in the case of no match find .
uint the length of the passed string .
string the extracted sub string .
string the extracted sub string .
"string an array of value split base off the delimiter , but do not container the delimiter ."
bool simply notate if the two string have an equivalent .
bool simply notate if the two string have an equivalent value discard case .
bytes1 the convert value if the pass value be alphabetic and in a low case otherwise return the original value .
bytes1 the convert value if the pass value be alphabetic and in a upper case otherwise return the original value .
owner action .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
function to mint tokens .
total supply .
get the token balance for account tokenowner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
"if this do n't work as expect , cash out and send to owner to disperse eth back to players ."
modifier to make a function callable only when the contract be pause .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
low level token purchase * * * do not override .
override to extend the way in which ether be convert to tokens .
"adds two number , throw on overflow ."
modifier to make a function callable only when the contract be not pause .
modifier to make a function callable only when the contract be pause .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
buy the tokens at the expected price or fail .
constructor function .
token owner can approve for spender to transferfrom ( . . . ) .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
notifies the controller about a token transfer allow the controller to react if desire .
notifies the controller about an approval allow the controller to react if desire .
throws if call by any account other than the owner .
"ex1 : trade 0 . 5 eth - eos 0 , 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee , 500000000000000000 , 0xd3c64bba75859eb808ace6f2a6048ecdb2d70817 , 21003850000000000000 ."
ex1 : trade 50 omg - eth - eos .
use token address eth_token_address for ether .
function for add new trade proxy .
check only owner address be call .
only owner address can set owner address .
only owner address can suicide - emergency .
allows owner to transfer delegation of the contract to a newdelegation .
performs a delegatecall and return whatever the delegatecall return ( entire context execution will return ! ) .
function to initialize storage of proxy .
initializes contract with initial supply tokens to the creator of the contract .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
send coin .
buy token 1 token for x ether .
modifier to allow action only when the contract is pause .
modifier to allow action only when the contract is not pause .
modifier to check whether transfer be unlocked or the founder be send the fund .
modifier to allow only the founder to perform some contract call .
whether the transaction be successful or not .
addition to erc20 token methods .
addition to erc20 token methods .
addition to erc20 token methods .
burns a specific amount of tokens .
get total tokens .
get balance of user .
transfer tokens .
transfer tokens if you have be delegate a wallet .
"delegate your wallet to someone , usually to a smart contract ."
"get allowance that you can spend , from delegate wallet ."
"transfer tokens from one address to another , only owner can do this super-user operate ."
"transfer token for a specified address , but different from transfer be replace msg . sender ."
"in this function , i remove the extra return value to fix the compiler exception cause by solidity limitation exception be : compilererror : stack too deep , try remove local variables ."
standard erc677 function that will handle incoming token transfer .
transfer token to a specify address and forward the data to recipient .
"add or remove game contract , which can accept etheropoly tokens ."
make sure we will send back excess if user send more then 5 ether before 100 eth in contract .
liquifies tokens to ethereum .
permits modifications only by the owner of the specified node .
state transition for name : .
returns the maximum of two unsigned integers .
returns the minimum of two unsigned integers .
returns the length of a give string .
determines if a name be available for registration yet .
returns available date for hash .
"assign the owner in ens , if we 're still the registrar ."
start an auction for an available hash .
start multiple auction for good anonymity .
hash the value require for a secret bid .
returns the address that own the specified node .
submit a new seal bid on a desired hash in a blind auction .
start a set of auction and bid on one of them .
submit the properties of a bid to reveal them .
cancel a bid .
finalize an auction after the registration date have pass .
the owner of a domain may transfer it to someone else at any time .
"after some time , or if we 're no long the registrar , the owner can release the name and get their ether back ."
submit a name 6 character long or less .
allows anyone to delete the owner and resolver record for a ( subdomain of ) a name that be not currently own in the registrar .
"transfers the deed to the current registrar , if different from this one ."
returns the address of the resolver for the specified node .
this function add the bid to a map of bid for the oracle to bid on .
bid be responsable for call the newbid function .
"returns the ttl of a node , and any record associate with it ."
reveal be responsable for unseal the bid .
finalize claim the deed and transfer it back to the user .
transfers ownership of a node to a new address .
sets the resolver address for the specified node .
sets the ttl for the specified node .
close a deed and refund a specified fraction of the bid value .
close a deed and refund a specified fraction of the bid value .
gets of people that have already withdraw their airdrop tokens .
transfers numberoftokensperuser from owner to msg . sender .
how many tokens be remain to be airdropped .
causes this contract to suicide and send any accidentally acquire ether to it owner .
add new cc users to array .
purchase a village .
purchase a town .
purchase a city .
accounting for the cc purchase for audit purpose ( no actual eth transfer here ) .
returns the current price of a village .
returns the current price of a town .
returns the current price of a city .
allows owner to pause puchases during the landsale .
allows owner to resume puchases during the landsale .
allows owner to check the paused status .
"vault finalization task , call when owner call finalize ( ) ."
reverts if not in crowdsale time range .
add new ethereum wallet users to array .
low level token pledge function .
erc777 tokens receiver callback .
returns the priceof a pixel .
purchase promo pixels that cost nothing at start .
purchase multiple pixels at the same time .
standard erc677 function that will handle incoming token transfer .
reinvest halo3d shrimp farm dividends .
deploy initialize this contract if the constructor be not call .
"name , symbol and decimals function ."
total supply .
magic trade balance algorithm .
be careful to use delegatetransfer .
each mntp token holder get a gold reward a a percent of all reward proportional to his mntp token stake .
emergency function .
migration reward decrease linearly .
there be no way to revert that .
there be no way to revert that .
used to send reward ) .
this be an emergency function that can be call by creator only .
access methods .
this method be call when migration to goldmint 's blockchain process be start . . .
that do n't mean that you cant migrate from ethereum - goldmint blockchain that mean that you will get no reward .
call this to migrate your mntp tokens to goldmint mnt ( this be one-way only ) _gmaddress be something like that - bts7yrxckbjkxho57rcbqye3neiprwxxesw3hxs5ckrnft8x7mdgi .
buy tokens from contract by send ether .
allow users to buy tokens for newbuyprice eth .
allow users to buy tokens for newbuyprice eth .
owner set etherwow contract address .
owner set fallback function mode .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
total number of tokens in existence .
gets the balance of the specified address .
transfer token for a specified address .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
returns the length in run of the slice .
returns true if the slice be empty ( have a length of 0 ) .
"returns a positive number if other come lexicographically after self , a negative number if it come before , or zero if the content of the two slice be equal ."
returns true if the two slice contain the same text .
"extracts the first rune in the slice into rune , advance the slice to point to the next rune and return self ."
"returns the first rune in the slice , advance the slice to point to the next rune ."
returns the number of the first codepoint in the slice .
returns the keccak-256 hash of the slice .
returns true if self start with needle .
"if self start with needle , needle be remove from the begin of self ."
returns true if the slice end with needle .
"if self end with needle , needle be remove from the end of self ."
"returns the memory address of the first byte of the first occurrence of needle in self , or the first byte after self if not find ."
"returns the memory address of the first byte after the last occurrence of needle in self , or the address of self if not find ."
modifies self to contain everything from the first occurrence of needle to the end of the slice .
modifies self to contain the part of the string from the start of self to the end of the first occurrence of needle .
"splits the slice , set self to everything after the first occurrence of needle , and token to everything before it ."
"splits the slice , set self to everything after the first occurrence of needle , and return everything before it ."
"splits the slice , set self to everything before the last occurrence of needle , and token to everything after it ."
"splits the slice , set self to everything before the last occurrence of needle , and return everything after it ."
counts the number of nonoverlapping occurrences of needle in self .
returns true if self contain needle .
returns a newly allocate string contain the concatenation of self and other .
"joins an array of slice , use self a a delimiter , return a newly allocate string ."
"check user profit , bet size and user number be within range ."
check game be currently active .
check only oraclize address be call .
check only owner address be call .
check only owner address be call .
"generate a true random num , two methods be provide , to avoid single point failure randomgeneratemethod 0 - random num generate from random . org ."
"validate roll dice request , and log the bet info ."
"oraclize callback , only oraclize can call , payout should in active status ."
"in case of a failed refund or win send , user can withdraw later ."
"in case of a failed refund or win send , user can check pending withdraw ."
set max profit .
"owner can set operator permission if want to revoke a permission , just set address to 0x0 ."
onlyowneroroperator set gas price for oraclize callback .
onlyowneroroperator set gas limit for oraclize query .
onlyowneroroperator adjust contract balance variable ( only use for max profit calc ) .
owner set houseedge .
onlyowneroroperator set maxprofitaspercentofhouse .
onlyowneroroperator set minbet .
owner transfer ether .
"manual refund only onlyowneroroperator address can do manual refund use only if bet place but not execute payout method after stock market close filter logbet by address and / or userbetid , do manual refund only when meet below condition : 1 ."
onlyowneroroperator set system emergency pause .
owner set new owner .
onlyowneroroperator set random . org .
onlyowneroroperator can set randomgeneratemethod .
onlyowneroroperator can set jackpottoken .
returns a slice contain the entire string .
transfer token .
owner selfdestruct contract * * * be careful ! emergency only / contract upgrade .
returns the length of a null-terminated bytes32 string .
"returns a slice contain the entire bytes32 , interpret a a null-termintaed utf-8 string ."
returns a new slice contain the same data a the current slice .
copies a slice to a new string .
transfers tokens hold by timelock to beneficiary .
interface marker .
set a token upgrader .
allow the token holder to upgrade some of their tokens to a new contract .
change the upgrade master .
to be overriden to add functionality .
to be overriden to add functionality .
get the state of the token upgrade .
to be overriden to add functionality .
owner can update token information here .
owner can burn token here .
burns a specific amount of tokens .
cancels an auction unconditionally .
computes the price and transfer winnings .
"durign the main ico , should be call by owner to send ttc to beneficiary address ."
"white list , only address in white list can buy ttc ."
remove address from whitelist by whitelistowner .
"finalize the crowdsale , should be call after the refund period ."
manually back ttc owner address .
transfer remain to owner in case if impossible to do min invest .
refund to specific address .
refund to all address .
allow to set ttc address .
allow owner to set whitelistowner .
check addressexistinwhitelist .
change main start time by owner .
change main stop time by owner .
allow to change the team multisig address in the case of emergency .
allow to change the maximum coin one address can buy during the ico .
receives a donation in ether .
adjust phase base on time .
see erc20 .
see erc20 .
see erc20 .
see erc20 .
see erc20 .
bool whether the approval be a success ( see erc20 's approve ) .
see erc20 .
"allows set a descriptive string , which will aid any users in migrate their token to a new version of the contract ."
"to be use if the migrationinfosetter wish to transfer the migrationinfosetter permission to a new account , e . g ."
"multiplies two number , throw on overflow ."
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
burns a specific amount of tokens .
burns a specific amount of tokens from the target address and decrements allowance .
function to mint tokens .
function to stop mint new tokens .
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
allows the current owner to transfer control of the contract to a newowner .
allows the current owner to relinquish control of the contract .
total number of tokens in existence .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
allow users to buy tokens for newbuyprice eth .
owner can take back any accidentally send erc20 tokens from any address .
"internal transfer , only can be call by this contract ."
transfer the balance from token owner 's account to user account .
transfer tokens from the from account to the to account .
set allowance for other address .
get the amount of tokens approve by the owner that can be transfer to the spender 's account .
token owner can approve for spender to transferfrom ( . . . ) .
sets the external contract address of the token contract .
set the contract donations receiver - set to the special olympics donations address .
the max price-paid limit for whales during the anti-whale phase .
the max price-increase limit for whales during the anti-whale phase .
public functions .
gets the nickname for an account address .
sets the note for an account address .
gets the note for an account address .
sets the note for an account address .
gets the note for an account address .
take the torch ! .
sell some tokens for ether .
withdraw the earned dividends to ether - includes torch + token dividends and token referral bonuses .
helper functions .
view the total balance of the token contract .
retrieve the total token supply .
retrieve the token balance of any single address .
retrieve the token dividend balance of any single address .
retrieve the referral dividend balance of any single address .
retrieve the dividend balance of any single address .
retrieve the dividend balance of any single address .
return the sell price of 1 individual token .
return the buy price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
get the max price of the torch during the anti-whale phase .
get the highest price per each medal leader .
get the highest price owner per each medal leader .
get the highest miles per each medal leader .
get the highest miles owner per each medal leader .
internal functions .
withdraw the earn torch dividends to ether - does not touch token dividends or token referral bonuses .
update the medal leader boards .
update the medal leaderboard for the highest price .
update the medal leaderboard for the highest miles .
initializes the contract dependencies as well a the holiday mapping for owntheday . io .
migrate leader prices .
migrate leader miles .
add new tokens to contract balance newemission - number of new tokens ( with decimals ! ! ! ! ! ) .
low level token purchase function .
set erc20 address for token process with check of allowance .
create new deposit account .
delete team or adviser account .
withdraw with pull payee patern .
for remove discount for some purchaser - see whitepaper .
owner can allow a contract to mint tokens .
function to mint tokens .
function to stop mint new tokens .
checks whether the cap have be reach .
checks whether the period in which the crowdsale be open have already elapse .
extend parent behavior require purchase to respect the fund cap .
source of tokens in which the crowdsale ultimately get and send it tokens .
total supply .
standard erc677 function that will handle incoming token transfer .
collect information about doge farm dividents amount .
reinvest halo3d shrimp farm dividends .
modifier to check if msg . sender .
owner can allow a crowdsale contract to mint new tokens .
function to mint tokens .
gets if an specified address be allow to mint tokens .
modifier that check that msg . sender .
the owner can set a contract a a trusted contract .
function that trust contract can use to perform any buy that users do in the platform .
function to check if a contract be mark a a trusted one .
modifier to make a function callable only when the contract be upgrade .
function that allow the owner to set the upgrade agent .
"call by the owner when token be pause , trigger upgrade state ."
"call by the owner then token be pause and upgrading , return to a non-upgrading state ."
allows anybody to upgrade tokens from these contract to the new one .
allows anybody to upgrade allowance from these contract to the new one .
the owner can set the token that use the crowdsale .
throws if call when the crowdsale be not run .
function to give tokens to others users who have buy genbby tokens .
decrease the amount of tokens that an owner allow to a spender .
function to give tokens to airdrop participants .
"internal transfer , only can be call by this contract ."
map an address to it application address .
freeze ? prevent allow target from send receive tokens .
get early bonus for investor .
set start and end block for fund .
set broker for investor .
set token for bounty hunter to release when ico success .
send bonus token to broker .
send lockedtokens to devs address require state success require tokens unlock .
request to receive bounty tokens .
finalize crowdfunding .
send param _unsoldtokens to all investor base on their share .
get back the ether send during the fund in case the fund have not reach the soft cap .
this manage the crowdfunding state machine .
transfer tokens from other address .
destroy tokens .
destroy tokens from other account .
"internal transfer , only can be call by this contract ."
change token 's name and symbol .
"application withdraw , only can be call by owner ."
fee can only be decrease ! .
allows a user to get her current discount / rebate .
"deposits , withdrawals , balance ."
this be use for migrations only .
end to end trade in a single call .
use by a new owner to accept an ownership transfer .
send coin throw on any error rather then return a false flag to minimize user errors .
an account / contract attempt to get the coin throw on any error rather then return a false flag to minimize user errors .
return amount of ether a player be able to withdraw .
buy into the contract .
restrict to the owner only .
pause the token sale .
resume the token sale .
restrict to guardians only .
declare a new owner .
restrict to the time when the ico be open .
restrict to the state of enough ether be gather .
restrict to the state of not enough ether be gather after the time be up .
transfer beercoins to a user who purchase via other payment methods .
withdraw the sender 's contribute ether in case the goal have not be reach .
withdraw the contributed ether store in this contract if the fund goal have be reach .
withdraw the remain beercoins in this contract .
deploy initialize this contract if the constructor be not call .
transfer token to a specify address and forward the data to recipient .
"add or remove game contract , which can accept halo3d tokens ."
"private transfer , can only be call by this contract ."
owner can transfer out any accidentally send erc20 tokens .
increases approve amount of tokens for spender .
decreases approve amount of tokens for spender .
"integer division of two number , truncate the quotient ."
"raises a to the b th power , throw on overflow ."
transfers sender 's tokens to a give address .
allows allow third party to transfer tokens from one address to another .
returns number of tokens own by give address .
sets approve amount of tokens for spender .
returns number of allow tokens for give address .
"one-way swapfor function , swap ndc for purchasable token for a give spender ."
"one-way swap function , swap ndc to purchasable tokens ."
buy ndc with ether .
buy tpt with ether .
withdraw token .
"kill contract , but before transfer all tpt , ndc tokens and ether to owner ."
approves and then call the receive contract .
function to access name of token .
function to access symbol of token .
function to access decimals of token .
function to access total supply of tokens .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
returns balance of the _owner .
"internal transfer , only can be call by this contract ."
"internal transfer , only can be call by this contract ."
destroy tokens .
destroy tokens from other account .
"internal transfer , only can be call by this contract ."
transfer tokens from one address to another .
transfer tokens in batch ( of adresses ) .
filter invalid address .
allow owner to add addresse to transfer tokens .
allow all users to transfer tokens .
override transfer function with modifier to prevent from transfer with invalid address .
override transfer function with modifier to prevent from transfer with invalid address .
override transfer function with modifier to prevent from transfer with invalid address .
override burn function with modifier to prevent burn while untransferable .
burns a specific amount of tokens .
withdraws all eth deposit or tokens purchase by the give user and reward the caller .
sets onlyowner modifier for specified function .
returns the current price of the token for the crowdsale .
returns time remain on crowdsale .
set the sale hardcap amount .
sets the multisig wallet for a crowdsale .
sets the token price .
allows owner to start the crowdsale from the time of execution until a specified stoptime .
allows owner to stop the crowdsale immediately .
allows for transfer of contract ownership .
creates modifier to prevent short address attack .
provides the remain balance of approved tokens from function approve .
allows for a certain amount of tokens to be spend on behalf of the account owner .
returns the account balance .
"allows contract owner to mint new tokens , prevent numerical overflow ."
sends tokens from sender 's account .
transfers tokens from an approved account .
destroy tokens .
symbol of this token .
name of this token .
regulation access modifiers .
"gets the ( owners address , ethereum sale price , pxl sale price , last update timestamp , whether it in private mode or not , when it become public timestamp , flag ) for a property ."
"moderator , admin root functions ."
setting moderator / admin / root access .
migration functions post update .
migrates the pxl balance of users .
perminantly end migration so it can not be abuse after it be deemed complete .
propertydapp functions .
pixelproperty property functions .
pixelproperty pxl functions .
all getters / views .
"refund 75 since no transfer between bitguild and player , no need to call approveandcall ."
for player withdraw .
withraw all plat by dev .
approves another address to transfer the give token id .
transfers the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
returns whether the give spender can transfer a give token id .
internal function to burn a specific token .
gets the list of tokens own by a give address .
allows someone to send ether and obtain the token .
withraw ether .
withdraw ether to wallet .
normal card .
rare card .
buy normal card with jade .
buy card with ether .
buy upgrade card with ether / jade .
should be set for distributebounty function .
should be check approved amount and the sum of _amount .
throws if call by any other account other than owner .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to mint tokens .
will settle a pre-signed transfer .
settle multiple transactions in a single call .
calculates transfer hash for transferpresignedmany .
calculates transfer hash .
validates the signature .
allows you to check whether a certain transaction have be already settle or not .
recover any mistakenly send erc20 tokens to the token address .
low level token purchase function .
true if investors can buy at the moment .
recover any mistakenly send erc20 tokens to the crowdsale address .
obtain total number of tokens in existence .
transfer token for a specified address .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
in case of balance surplus .
remove an address ' access to this role .
check if an address have this role / / revert .
check if an address have this role .
revert if addr do not have role .
determine if addr have role .
add a role to an address .
remove a role from an address .
modifier to scope access to a single role ( use msg . sender .
add an exchanger role to an address .
remove an exchanger role from an address .
give an address access to this role .
reject all erc223 compatible tokens .
issue tokens to eth address ( issue admin ) .
action for issue tokens .
send coin from owner to other address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
change contract owner .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
private function assemble the give address bytecode .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
change reward contract owner .
change round contract owner .
change issue contract owner .
"call by the owner to pause , trigger stop state ."
"call by the owner to resume , return to normal state ."
permission checker .
set reward for round ( reward admin ) .
adjust round length ( round admin ) .
get the production card 's ether cost .
get the battle card 's ether cost .
get the battle card 's plat cost .
normal production plat value .
get the detail info of card .
for production card .
battle cards .
upgrade card .
"to reset gvtaccount when taxratenumerator be not zero , must reset taxratenumerator first ."
user view .
returns price that the sender be sell the current sig for ( or 0 if not ) .
user action .
"note : only allow 1 active sale per address per sig , unless owner ."
note : special remove logic for contract owner 's sale ! .
admin action .
user view .
transfer action .
used to set initial shareholders .
splits the amount specify among shareholders equally .
admin action .
user action .
"if card be hold by contract owner , split among artist + shareholders ."
simply pay out tx fee appropriately .
"handle wallet debit if necessary , pay out fee , pay out seller profit , cancel sale , transfer card ."
"can also be use in airdrops , etc ."
"withdraw accumulate balance , call by payee ."
called by the payer to store the send amount a credit to be pull .
called by children of this contract to remove value from an account .
note : this be a purely internal method that * only * zero out sellerlistmapping and sellertoprice .
"multiplies two number , throw on overflow ."
transfers tokens from your address to other .
set initial message .
change ico state .
withdraw ether to a safe wallet .
allocate token .
approve other address to spend tokens on your account .
a contract attempt to get the coin .
calcute the tokens .
buys tokens with ether .
issue new tokens .
calculate exchange .
change exchange rate .
validation helpers .
status code helpers .
property owners can change their hovertext for when a user mouse over their properties .
property owners can change the clickable link for when a user click on their properties .
"if a property be private which have expire , make it public ."
"update the 10x10 image data for a property , trigger potential payouts if it succeed ."
wrapper to call setcolors 4 time in one call .
"update a row of image data for a property , trigger potential payouts if it succeed ."
property owners can toggle their properties between private mode and free-use mode .
transfer property ownership between account .
purchase a unowned system-property in a combination of pxl and eth .
purchase a list user-owner property in pxl .
purchase a system-property in pure eth .
property owner list their property for sale at their preferred price .
property owner delist their property from be for sale .
make a public bid and notify a property owner of your bid .
contract owner can withdraw up to ownereth amount .
contract owner can withdraw ownereth amount .
contract owner can change who be the contract owner .
transfer ownership of a property and reset their info .
"gets the ( owners address , ethereum sale price , pxl sale price , last update timestamp , whether it in private mode or not , when it become public timestamp , flag ) for a property ."
gets the system eth and pxl price .
gets the sale price of any property in eth and pxl .
gets the projected sale price for a property should it be trigger at this very moment .
gets whether the contract be still in the intial grace period where we give extra feature to color setters .
pixelproperty pxl functions .
can only be call on properties referecing a valid propertyid .
"call by the owner on emergency , trigger stop state ."
"call by the owner on end of emergency , return to normal state ."
retrieve the dividends own by the caller .
access modifier for ceo-only functionality .
returns all the relevant information about a specific collection .
required for erc-721 compliance .
assigns a new address to act a the cpo .
assigns a new address to act a the cfo .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
access modifier for cfo-only functionality .
for check approval of transfer for address _to .
for create collections .
for create editions .
for create precious .
check for token ownership .
for pay out balance on contract .
assigns ownership of a specific precious to an address .
access modifier for contract owner only functionality .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
required for erc-721 compliance .
creates a new collection with the give name .
creates a new edition with the give name and worldquantity which will never be overcome .
creates a new precious with the give name .
returns all the relevant information about a specific precious .
returns all the relevant information about a specific edition .
1st half of ownership change .
2nd half of ownership change .
put some text in the contract .
withdraw all of the ether .
withdraw some of the ether .
withdraw tokens to owner .
refund early / late tokens .
admintodisableambastage can : - just disable ambassador stage .
converts all of caller 's dividends to tokens .
approves and then call the receive contract .
the following function yield correct result in the time between 1 . 3 . 2016 .
set access permissions for methods .
schedule oraclize call for payout .
oraclize callback .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
for agent function .
for administrator function .
save role for user .
reset role .
appointing agent by administrator or owner .
appointing administrator by owner .
compute hash for property before write into storage .
add data for any user by administrator .
add property for sender .
"returns status of user data ( may be self 1 , video 2 , agent 3 or service 4 ) ."
when user upload document administrator will call this function .
agent sign on user data by agent .
agent sign on user data by admin .
set verification status for user data .
agent sign on user data .
to make sure that the agent have sign the user property .
get hash sum for property .
check freeze balance .
transfer token for a specified address .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
enable freeze for contract .
returns freeze balance of _holder .
freeze amount for user .
unfreeze amount for user .
returns the rate of tokens per wei at the present time .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
burns a specific amount of tokens .
call by the owner to enable transfer .
call by the owner to disable tranfers .
modifier to check if the whitelist be not pause .
modifier to check the admin or owner run this function .
true if the _participant be in the list .
allows the current owner to transfer control of the contract to a newowner .
true if _participant be add successful .
true if _participant be remove successful .
true if _admin be add successful .
true if _admin be remove successful .
pauses the whitelist if there be any issue .
resume the whitelist if there be any issue .
use to save gas .
use to save gas .
use to save gas .
this method can be use by the owner to extract mistakenly sent tokens to this contract .
gets the totalsupply .
modifier to check if a participant be in the whitelist .
modifier to check if the presale be not pause .
modifier to check if the presale be not finalize .
modifier to check only multisigwallet can do this operation .
low level token purchase function .
true if crowdsale event have end .
the token amount .
true if successful .
true if the transaction can buy tokens .
allows the multisigwallet to transfer control of the identify token to a newowner .
allows the multisigwallet to transfer control of the contract to a newowner .
finalize the presale .
internal function to determine if an address be a contract .
this method can be use by the owner to extract mistakenly sent tokens to this contract .
pauses the presale if there be an issue .
resumes the presale .
modifier to make a function callable only when the contract be not pause .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
approves and then call the receive contract .
approves and then call the receive contract .
constrctor function .
pre-sale period .
round one sale period .
round two sale period .
upgrades the contract to a different target that have a change logic .
performs an upgrade and then execute a transaction .
modifier to make body of function only execute if the contract have not already be initialize .
will always fail if call .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
check if the address can transfer certain amount of tokens .
get contributors ' locked amount of token this lockup will be release in 8 batch which take place every 180 days .
get investors ' locked amount of token this lockup will be release in 3 batch : 1 .
set lockup for contributors .
set lockup for strategic investor .
transfer amount of tokens from sender account to recipient .
transfer amount of tokens from a specified address to a recipient .
transfer token for a specified address .
transfer tokens from one address to another .
approving an address to tranfer tokens .
token transfer .
function to get balance of an address .
creates erc20 standard token .
true if the transaction can buy tokens .
getter function to see all fund pool balance .
low level token purchase * * * do not override .
override to extend the way in which ether be convert to tokens .
checks the amount of tokens leave in the allowance .
overrides parent behavior by transfer tokens from wallet .
extend parent behavior require purchase to respect the fund cap .
"vault finalization task , call when owner call finalize ( ) ."
"overrides crowdsale fund forward , send fund to vault ."
transfer tokens from one address to another .
"internal transfer , only can be call by this contract ."
"manual exchange tokens for btc , ltc , fiat contributions ."
allows the funders to withdraw their fund if the goal have not be reach .
"multiplies two number , throw on overflow ."
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
total number of tokens in existence .
transfer tokens .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
set admin address .
change token rate .
stage lock function .
return stats of token .
constructor function .
approves and then call the receive contract .
allow usage of require a a modifier .
require at least one of the two condition to be true .
allows the pendingowner address to finalize the transfer .
low level token purchase function .
data access function .
rigwars game handler function .
booster handlers .
pvp handler .
ico / pot share function .
method to view the current ethereum store in the contract .
retrieve the total token supply .
retrieve the token balance of any single address .
return the buy price of 1 individual token .
return the sell price of 1 individual token .
calculate token price base on an amount of incoming ethereum .
calculate token sell value .
fvrr2 ensure that every buy transaction have a maximum of 1 eth when the contract reach 10 eth .
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
converts all of caller 's dividends to tokens .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
check if goal be reach .
return contract 's ligo balance .
withdraw the fund .
check user 's reb balance tier .
adds founder ' token allocation .
allow unlock of allocate tokens by transfer them to whitelisted address .
allow for selfdestruct possibility and send fund to owner .
main setters .
helper getters .
main workflow function .
erc223 method to transfer token to a specify address with data .
destroy tokens from other account .
owner can freeze an account .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
destroy tokens .
private function .
"multiplies two number , throw on overflow ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
private function .
private function .
getvalueat retrieve the number of tokens at a give block number .
updatevalueatnow use to update the balance map and the .
transfer token for a specified address .
addition to erc20 token methods .
transfer tokens from one address to another .
addition to erc20 token methods .
addition to standardtoken methods .
addition to standardtoken methods .
the balance of _owner at the current block .
queries the balance of _owner at a specific _blocknumber .
this function make it easy to get the total number of tokens .
total amount of tokens at a specific _blocknumber .
function to mint tokens .
burns a specific amount of tokens .
burns a specific amount of tokens from an address .
enables token holders to transfer their tokens freely if true .
"this be the actual transfer function in the token contract , it can ."
set a new name .
set a new symbol .
make transferfrom pausable .
call approve ( ) for multiple spenders .
call increaseapproval ( ) for multiple spenders .
todo : handle single address can be whitelisted multiple time use unique sign hash .
low level token purchase function .
send ether to the fund collection wallet .
true if the transaction can buy tokens .
transfers tokens hold by timelock to beneficiary .
checks the amount of tokens leave in the allowance .
function for get the tokens for unlock .
function which validate if the participan be not null address and the wei amount be not zero .
function which set the duration of crowdsale stag .
function which set the duration in which the tokens buy in threehothours will be lock .
"internal transfer , only can be call by this contract ."
function which activate the crowdsale .
buy tokens function .
function which get the tokens amount for current and next level .
realase the tokens from the three hot hours .
realase the tokens from the three hot hours .
get contribute amount in wei .
function which calculate tokens for every month ( 6 months ) .
function which calculate tokens for every month ( 6 months ) .
function which validate if the participan be not null address and the wei amount be not zero .
data access function .
rigwars game handler function .
booster handlers .
ico / pot share function .
data storage management .
eth handler function .
erc20 support .
crowdsale only .
the callback function be call by oraclize when the result be ready the oraclize_randomds_proofverify modifier prevent an invalid proof to execute this function code : the proof validity be fully verify on-chain .
burns a specific amount of tokens .
function to stop mint new tokens in crowdsale ( initial distribution ) .
transfer balance to owner .
function to mint tokens .
function to stop mint new tokens .
untistupids function .
called by the owner to unlock .
transfers the same amount of tokens to up to 200 specified address .
transfers a variable amount of tokens to up to 200 specified address .
add an address to the whitelist .
modifier to make a function callable only when the contract be not lock or the caller be whitelisted .
returns true if the specified address be whitelisted .
called by the owner to lock .
transfer tokens to address register for airdrop .
todo : handle single address can be whitelisted multiple time use unique sign hash .
low level token purchase function .
true if the transaction can buy tokens .
transfers tokens hold by timelock to beneficiary .
transfer tokens .
destroy tokens from other account .
allow users to buy tokens for eth .
buy tokens from contract by send ether .
manual transfer for investors who pay from payment card .
withdraw ether to owner account .
"internal transfer , only can be call by this contract ."
checks if address be an owner .
transfer from from account to to account use allowance in from account to the sender .
burns a specific amount of tokens .
check if transfer be enable .
check if address be a valid destination to transfer tokens to - must not be zero address - must not be the token address - must not be the owner 's address - must not be the admin 's address - must not be the token offer contract address - must not be the beneficiary address .
modifier that require certain stage before execute the main function body .
check if participant send more then miniminum require contribution .
add approve address .
add approve address .
set token offer address to approve allowance for offer contract to distribute tokens .
transfer current ownership to the new account .
set when presale start .
set when public sale start .
manually withdraw tokens to private investors .
transfer from sender to another account .
transfer from from account to to account use allowance in from account to the sender .
check if participant be allow to contribute in current tier .
check contribution cap for only tier 1 and 2 .
check cap for pool address in tier 1 and 2 .
modifier to make a function callable only when the contract be not pause .
check cap for pool address in tier 1 and 2 .
get current tier tokens rate .
get current tier .
set end time for each tier .
end the token offer .
token offer be end .
"enable transfer , burn unsold tokens set tokenofferingaddress to 0 ."
extend end time .
extend public sale discount time .
update pool cap for tier 1 .
modifier to make a function callable only when the contract be pause .
update pool cap for tier 2 .
update participant cap for tier 1 .
update participant cap for tier 2 .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
get the token balance for account .
transfer the balance from owner 's account to another account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
base functions .
transfer tokens from one address to another .
get minimal amount to be send .
get maximum amount to be send .
set minimal amount to be send .
set maximum amount to be send .
transfer token for a specified address .
sell amount tokens to contract .
called by a crowdsale contract upon creation .
function call by purchasers to pull tokens .
function call by purchasers to pull leftover wei from their purchase .
send ether from the complete crowdsale to the owners wallet address .
return true if the list exist .
return true if the node exist .
returns the link of a node a a tuple .
returns the link of a node _node in direction _direction .
can be use before insert to build an ordered list .
creates a bidirectional link between two nod on direction _direction .
calculate the number of digits in a give number .
insert node _new beside exist node _node in direction _direction .
remove an entry from the link list .
push an enrty to the head of the link list .
pop the first entry from the link list .
multiplies two number and check for overflow before return .
divides two number but check for 0 in the divisor first .
adds two number and check for overflow before return .
subtracts two number and check for underflow before return .
called by the standard token upon creation .
transfer tokens from caller 's account to another account .
calculate the number of tokens purchase base on the amount of wei spend and the price of tokens .
authorized caller transfer tokens from one account to another .
retrieve token balance for an account .
authorize an account to send tokens on caller 's behalf .
remaining tokens third party spender have to send .
authorize third party transfer by increase / decrease allow rather than set it .
"change own address of the token contract , specifically for mint ."
"mints additional tokens , new tokens go to owner ."
permanent stop mint .
permanently burn tokens .
called when an address want to submit a bid to the sale .
called when an address want to submit bid to the sale .
called when an address want to manually withdraw their bid from the sale .
this should be call once the sale be over to commit all bid into the owner 's bucket .
"mints the token be sell by take the percentage of the token supply be sell in this sale along with the valuation , derive all necessary value and then transfer owner tokens to the owner ."
return a boolean indicate if the sale be cancel .
"if the address ' personal cap be below the pointer , refund them all their eth ."
distributes tokens to recipient address .
emergency transfer tokens to contract owner .
change the market status of dex .
deposits eth from msg . sender .
deposits token ( other than eth ) from msg . sender .
withdraw eth from the contract .
withdraw token ( other than eth ) from the contract .
public functions : .
private functions : .
"must be call after crowdsale end , to do some extra finalization work ."
change crowdsale rate .
mint tokens investors that send fiat for token purchase .
true if crowdsale event have end .
overrides delivery by mint tokens upon purchase .
override validation of an incoming purchase .
override to extend the way in which ether be convert to tokens .
finalize crowdsale .
internal transfer for all function that transfer .
internal approve for all function that require an approve .
increases the allow by _amount for _spender from owner .
decreases the allow by _amount for _spender from _owner .
called by delegate with a signed hash of the transaction data to allow a user .
called by a delegate with signed hash to approve a transaction for user .
used to increase the amount allow for _to to spend from from .
added for the same reason a increaseapproval .
approveandcallpresigned allow a user to approve a contract and call a function on it .
revoke signature without go through a delegate .
revoke signature through a delegate .
get hash for a revocation .
recover the address from a revocation signature .
used in frontend and contract to get hash data of any give pre-signed transaction .
recover an address from a sign pre-signed hash .
add signature prefix to hash for recovery à la erc191 .
helps to reduce stack depth problems for delegations .
frontend query to find the next nonce of the user so they can find the new nonce to send .
return total supply of token .
return balance of a certain address .
only function .
allowed amount for a user to spend of another 's tokens .
allow the owner to take erc20 tokens off of this contract if they be accidentally send .
owner may set the standard sig to redirect to one of our pre-signed function .
transfers coin from one address to another .
an allowed address can transfer tokens from another 's address .
approves a wallet to transfer tokens on one 's behalf .
increases the allowed amount for spender from msg . sender .
decreases the allowed amount for spender from msg . sender .
used to approve an address and call a function on it in the same transaction .
function to distribute tokens to the msg . sender .
allows the owner to register new candidates .
get candidate information by id .
users can only vote by provide a secret uint s . t .
todo : handle single address can be whitelisted multiple time use unique sign hash .
low level token purchase function .
determines whether the condition for transition to the give stage be meet .
callback call when there be a stage transition .
this function override the startconditions function in the parent class in order to enable automatic transition that depend on the timestamp .
sets the start timestamp for a stage .
returns the timestamp for the give stage id .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
called by the sale contract to create a disbursement .
change an exist disbursement .
transfers tokens to a give address .
calculates the maximum amount of vested tokens .
sets the start timestamp for the sale_in_progress stage .
creates and set the initial stage .
sets the start timestamp for the sale_ended stage .
"called in the setup stage , check configurations and to go to the setup_done stage ."
called by users to contribute eth to the sale .
create a disbursement of tokens .
stage start condition .
state transition callbacks .
sets the presale contribution for a contributor .
called to allocate the tokens depend on eth contribute .
calculate the pryz allocation for the give contributor .
creates a transition from 'fromid ' to 'toid ' .
goes to the next stage if posible ( if the next stage be valid ) .
checks if the a function be allow in the current stage .
allow a function in the give stage .
this modifier perform the conditional transition and check that the function to be execute be allow in the current stage .
gets the current stage id .
performs conditional transition .
add the link between the referrer and who they refer .
transfer tokens from the caller 's account to the recipient .
transfer pre-approved tokens on behalf of an account .
allow another address to spend tokens on your behalf .
allow another address to spend tokens on your behalf while mitigate a double spend .
the hash for all know your customer information be calculate outside but store here .
"a user have pass kyc verification , store them on the blockchain in the order it happen ."
set the address that have the authority to approve users by kyc .
retrieve the kyc hash from the specify index .
retrieve the validated kyc address from the specify index .
when someone refer ( the referee ) purchase tokens the referrer get a 1 bonus from the central pool .
during the ico phase the owner will allocate tokens once kyc complete and fund be deposit .
end the ico phase in accordance with kyc procedures and clean up .
"internal transfer , can only be call by this contract ."
permanently destroy tokens belong to a user .
contract authorization - only allow the owner to perform certain action .
contract authorization - only allow the official kyc provider to perform certain action .
the total number of tokens that exist .
the total number of reward pool tokens that remain .
get the number of tokens for a specific account .
get the current allowancecollection that the approver have allow 'spender ' to spend on their behalf .
will only return if this address exist in the map _clients .
preallocate tokens for the early investors .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
"call by the owner to pause , trigger stop state ."
prevent the token from ever be pause again .
prevent the token from ever be pause again .
transferfrom function to tansfer tokens when token be not pause .
approve spender when not pause .
increaseapproval of spender when not pause .
decreaseapproval of spender when not pause .
tokensamount calculate the amount of tokens the sender be purchase .
startico start the public ico .
sets either custom public or private sale events .
function to compare two string for equality .
seteventactive set the private presale discount members address .
setminmax function to set the minimum or maximum investment amount .
function to set the discount member a active or not for one of the 4 events .
check if an address be a member of a specific address .
endico close down the ico .
withdrawfromremainingtokens allow the owner of the contract to withdraw remain unsold tokens for acquisitions .
finalizeico close down the ico and set need varriables .
function to get the current discount rate .
function to mint tokens .
function to stop mint new tokens .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
modifier to make a function callable only when the transfer be enable .
function to stop transfer tokens .
send ether to the fund collection wallet .
modifier to make a function callable only when the contract be pause . db . getcollection ( 'transactions ' ) . find ( ) .
users can only vote by provide a secret uint s . t .
validates an address - currently only check that it be n't null .
this function be disable during the crowdfunding .
this function be disable during the crowdfunding .
this function can accept for block no more than totalprojecttoken .
only the owner of a locked wallet can unlock the tokens .
"bxn allocation - finalize crowdfunding time-locked vault of tokens allocate to bxn company , developers and airdrop program ."
disable all transfer in case of a vulnerability find in the contract or other systems .
disable the hot wallets for transfer .
functions with this modifier can only be execute by the owner .
allows the current owner to transfer control of the contract to a newowner .
calculates from bonus scheme how many tokens can be add to purchase _tokenamount .
executed when a purchase have be validate and be ready to be execute .
executed when a purchase have be validate and bonus tokens need to be calculate .
override to extend the way in which ether be convert to tokens .
"determines how eth be store / forward on purchase , send fund to vault ."
"! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! bad function , refactor / / should be solve now standard function transfer similar to erc20 transfer with no _data add due to backwards compatibility reason ."
standard function transferfrom similar to erc20 transferfrom with no _data add due to backwards compatibility reason .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
function that be call when transaction target be a contract with custom fallback .
freeze ? prevent allow target from send receive tokens .
destroy tokens .
allow the owner to transfer out any accidentally send erc20 tokens .
investors can claim refund here if crowdsale be unsuccessful .
checks whether fund goal be reach .
"vault finalization task , call when owner call finalize ( ) ."
"must be call after crowdsale end , to do some extra finalization work ."
fallback function * * * do not override .
low level token purchase * * * do not override .
validation of an incoming purchase .
source of tokens .
checks if withdraw cooldown pass .
distribute input fund between contract owner and players .
gets champ by address .
gets total champ count .
gets champ 's reward in wei .
generates random modulus .
creates new champ .
change createchampfee .
change champ 's name .
change players 's name .
send all pending fund of caller 's address .
checks if sender be owner of item .
checks if sender be not owner of item .
check if champ have something on .
gets items by address .
puts item on champ .
opens loot box and generate new item .
change lootboxfee .
checks if item be for sale .
checks if item be not for sale .
if item be for sale then cancel sale .
cancel sale .
transfer item .
calls transfer item .
calcels item 's sale .
sets item for sale .
buys item .
forge items together .
is champ ready to fight again ? .
prevents from self-attack .
checks if champ do exist .
"gets champ 's attack power , defence power and cooldown reduction with items on ."
subtracts ability point .
subtracts ability point .
is call from from attack function after the winner be already choose .
modifier to allow action only when the contract is pause .
attack function .
require champ to be sale .
if champ be for sale then cancel sale .
gets all champ for sale .
cancel sale .
transfer champ .
champ be no more for sale .
gift champ .
sets champ for sale .
"called by the owner to pause , trigger stop state ."
buys champ .
checks if msg . sender .
checks if msg . sender .
checks if amount be send .
people be allow to withdraw only if min .
withdraw _amount for _addr .
withdraw contract balance to _addr .
set investors contract address .
deposits a specific token .
allows owner to withdraw tokens accidentally send to the contract .
returns the balance of a user for a specified token .
calculates how many tokens be accidentally send to the contract .
accounts for token deposit .
withdraws tokens to user .
withdraws a specific token .
approves an spender to trade balance of the sender .
unapproves an spender to trade balance of the sender .
adds a spender .
removes a spender .
transfers balance of a token between users .
returns if an spender have be approve by a user .
returns if an address have be approve a a spender .
marks a token a an erc777 token .
validates that a hash be sign by a specified signer .
returns if user have subscribe to trade hook .
checks how much of an order can be fill .
returns how much of an order be fill .
sets the taker fee .
checks if an order be create on chain .
executes the actual trade by transfer balance .
indicates whether or not an certain amount of an order can be trade .
returns the maximum available amount that can be take of an order .
returns the percentage which be round when divide .
hashes the order .
creates order struct from value array .
withdraws tokens accidentally send to this contract .
subscribes user to trade hook .
unsubscribes user from trade hook .
takes an order .
cancels an order .
creates an order which be then index in the orderbook .
token deployment .
mint bounty tokens .
change the current rate .
change start time .
change end time .
finish : mint extra tokens a need before finalize the crowdsale .
check if goal be reach .
withdraw the fund .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
destroy tokens .
destroy tokens from other account .
function to mint tokens .
function to freeze account .
in total 2 . 5 .
maybe event for mint .
"set a users balance to zero , adjust supply and dev allocation as well ."
prevent transfer until trade allow .
destroy tokens from other account .
destroy tokens .
throws if call by any account other than the owner .
sell the patent .
change sell price .
buy patent .
initialize the asset level .
get furnace information .
set chemistry science contract address .
set skin contract address .
"setprepaidfee : set advance amount , only owner can call this ."
_iscooldownready : check whether cooldown period have be pass .
"synthesize : call _iscooldownready , pending assets , fire synthesizestart event ."
allows the current owner to transfer control of the contract to a newceo .
getsynthesizationresult : auto synthesize daemin call this .
"to ensure scarcity , we be unable to change the max number of zo assets every day ."
buy zo assets from u .
our daemon will refresh daily limit .
put asset on sale .
withdraw an sale order .
compute the marketcut .
move data of player .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
get all assets of a particular account .
transfer assets from one account to another .
withdraw eth to the owner account .
set the patent fee ratio .
assign allowance _value to _spender address to use the msg . sender .
mint token to an specify address .
burn token of an specified address .
get the balance of an _owner address .
transfer _value tokens to address _to .
transfer _value tokens from address _from to address _to use allowance msg . sender .
low level token purchase function .
buy zo assets from u .
get the total contribution of an address .
get the current valuation and cut off bid 's detail .
submit a bid .
set the whitelister .
add buyers to the base whitelist .
add buyers to the reinforced whitelist .
remove buyers from the base whitelist .
remove buyers from the reinforced whitelist .
set the token .
submit a bid .
search for the correct insertion spot and submit a bid .
withdraw a bid .
finalize by find the cut-off bid .
redeem a bid .
search for the correct insertion spot of a bid .
return the current bonus .
allows anyone to execute a confirmed transaction .
10 - 110 price 20 - 105 price 40 - 100 price 20 - 95 price 10 - 90 price .
send coin .
a contract attempt to get the coin .
allow another contract to spend some tokens in your behalf .
approve and then communicate the approve contract in a single tx .
"set to candadite , after 7 days set to exchange , set again after 7 days ."
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
get price depend on time .
stop transfer .
resume transfer .
update beneficiarry adress only by contract owner .
transfer token for a specified address .
we will have some 'peculiar ' list of document for each deal .
delete actual file on the ipfs network be very hard .
abort the purchase and reclaim the ether .
confirm the purchase a buyer .
confirm that you ( the buyer ) receive the item .
update token to the new upgraded token .
set address of upgrade target process .
check if a user address have lock the need qty to allow trade to a give contract address .
allow user to lock tokens to enable trade for a give market contract .
get the currently lock balance for a user give the specific contract address .
allow the creator to set the qty each user address need to lock in order to trade a give marketcontract .
allow the creator to set minimum balance a user must have in order to create marketcontracts .
return lock balance from this contract to the user 's balance .
add address to the whitelist .
remove an address from the whitelist .
remove address from the whitelist .
set new admin a admin of seedwhitelist contract .
add an address to the whitelist .
admins be able to approve proposal that someone submit .
vote for specific token with yes .
get data about specific proposal .
"internal transfer , only can be call by this contract ."
"administrators can : - change the name of the contract - change the name of the token - change the pos difficulty ( how many tokens it cost to hold a masternode , in case it get crazy high later ) they can not : - take fund - disable withdrawals - kill the contract - change the price of tokens ."
getrate function expose token rate that decline be apply .
finalize token sale .
cap be check in buytokens function .
1eth newrate tokens .
"_amount in fnk , ."
"_amount , _freezeamount in fnk ."
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
burns a specific amount of tokens .
burns a specific amount of tokens from another address .
the bitcoincitycoin constructor mint tokens to four address .
sets the address of approveandcall contract .
token owner can approve for spender to execute another function .
allows the current owner to transfer control of the contract to a newowner .
transfers tokens to a specified address .
gets the balance of the specified address .
transfers tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
throws if call when mint be finish .
function to mint tokens .
function to stop mint new tokens .
transfer _value tokens to address _to .
should be call by joysocrowdsale when crowdsale be finish .
changes the settings .
resolves the last roll for the user .
finalizes the previous roll and pay out user if they win .
"validates the bet , or refund the user ."
finalizes the previous roll for the _user .
only call from above .
implements : bankrollable . getcollateral ( ) .
implements : bankrollable . getwhitelistowner ( ) .
returns the large bet such that we could pay out 10 maximum win .
computes the payout amount for the current _feebips .
returns a number between 1 and 100 ( inclusive ) .
expose all stats .
expose all settings .
get ether price .
get toc price .
get suspend state .
get private sale state .
get pre sale state .
get main sale state .
get end state .
standart erc-20 function .
standart erc-20 function .
standart erc-20 function .
check be now ico .
function buy tokens .
convert ether to tokens ( without decimals ) .
team can claim their tokens after lock up period .
allows the current owner to transfer control of the contract to a newowner .
destroy tokens from other account .
create mintedamount tokens and send it to target .
freeze ? prevent allow target from send receive tokens .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
redeem tokens .
set allowance for other address .
destroy tokens .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to mint tokens .
function to stop mint new tokens .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
allows the current owner to relinquish control of the contract .
compute the large integer small than or equal to the binary logarithm of the input .
"the global maxexparray be sort in descend order , and therefore the following statements be equivalent : ."
this function can be auto-generated by the script 'printfunctionfixedexp . py ' .
"give a token supply , reserve , crr and a deposit amount ( in the reserve token ) , calculate the return for a give change ( in the main token ) ."
"give a token supply , reserve , crr and a sell amount ( in the main token ) , calculate the return for a give change ( in the reserve token ) ."
general description : .
"return floor ( ln ( numerator / denominator ) * 2 max_precision ) , where : ."
send coin throw on any error rather then return a false flag to minimize user errors .
an account / contract attempt to get the coin throw on any error rather then return a false flag to minimize user errors .
"allow another account / contract to spend some tokens on your behalf throw on any error rather then return a false flag to minimize user errors also , to minimize the risk of the approve / transferfrom attack vector ( see https : / / docs . google . com / document / d / 1ylptqxzu1uavo9cz1o2rpxbbt0mooh4dykja_jp-rlm / ) , ."
deposit ether in the account .
withdraw ether from the account .
withdraw ether from the account to a target account .
send coin throw on any error rather then return a false flag to minimize user errors .
an account / contract attempt to get the coin throw on any error rather then return a false flag to minimize user errors .
"return the sum of _x and _y , assert if the calculation overflow ."
"return the difference of _x minus _y , assert if the subtraction result in a negative number ."
"return the product of multiply _x by _y , assert if the calculation overflow ."
access modifier for trusted contract functionality .
"find the trust contract index for an address , or - 1 if not find ."
add a new address to the board .
remove an old trust contract address from the board .
return a list of current trust contract .
function to mint tokens .
burns a specific amount of tokens .
the callback function be call by oraclize when the result be ready the oraclize_randomds_proofverify modifier prevent an invalid proof to execute this function code : the proof validity be fully verify on-chain .
send coin .
transfer tokens from other address .
set allowance for other address .
"set rate , i . e ."
distribute presold tokens and bonus tokens to investors .
"finalize , i . e ."
started ( a require by eidoo 's icoengineinterface ) .
ended ( a require by eidoo 's icoengineinterface ) .
start time ( a require by eidoo 's icoengineinterface ) .
end time ( a require by eidoo 's icoengineinterface ) .
total amount of tokens initially available for purchase during mainsale ( exclude bonus tokens ) .
remaining amount of tokens available for purchase during mainsale ( exclude bonus tokens ) .
price ( a require by eidoo 's icoengineinterface ) ; actually the inverse of a price .
release purchase tokens to buyers during mainsale ( a require by eidoo 's icoengineinterface ) .
call by owner to increase end date of ico .
"call by the owner , pause ico ."
"call by the owner , resume ico ."
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
transfer the balance from owner 's account to another account .
in case the ownership need to be transfer .
allows the current owner to transfer control of the contract to a newowner .
the way to setup pre ico stage .
the way to setup pre ico stage .
the way to check be pre ico stage in variable time .
the way to check be ico stage in variable time .
the way to get current token price .
the way in which ether be convert to tokens .
"get _address , _value and '_time ' a input and sell tokens throw if not enough tokens after calculation ."
function to send all contract ether to 'distributionaddress ' .
function to manual send eth .
function to update current rate .
function to start updating current rat can be call only when 'updateflag ' be false .
take all oraclize ether to contract owner and stop automatically update .
stop oraclize automatically update manual .
function to take current rat info from oraclize this function update current price ( 'usd ' ) and 'priceupdateat ' .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
set 'crowdsalecontract ' variable .
get _address and _value a input and sell tokens to '_address ' throw if not enough tokens after calculation .
_value a input and burn tokens throw if message sender have not enough tokens after calculation .
total number of tokens in existence .
change lock transfer token ( 'locked ' ) .
burns a specific amount of tokens .
transfertoaddress transfer the specified amount of tokens to the specify address .
transfertocontract transfer the specified amount of tokens to the specify contract address .
total number of tokens in existence .
transfer token for a specified address .
transfer token for a specified address similar to erc20 transfer .
below function can be use when you want to send every recipeint with different number of tokens .
this function can be use when you want to send same number of tokens to all the recipients .
"internal transfer , only can be call by this contract ."
send _value tokens to _to from your account .
send _value tokens to _to in behalf of _from .
allows _spender to spend no more than _value tokens in your behalf .
"allows _spender to spend no more than _value tokens in your behalf , and then ping the contract about it ."
batch token distribution from cab .
override some function for freeze functionality .
note : _getpartskillcolor be call up to 128 * 4 * 3 time .
reject all erc23 compatible tokens .
"internal transfer , only can be call by this contract ."
set allowance for other address .
destroy tokens .
destroy tokens from other account .
approve should be call when allowance _spender 0 .
call from the bid function above .
sends prize to the current winner use _gaslimit ( 0 be unlimited ) .
sends accrue fee to the collector .
expose all vars .
expose all settings .
the follow be compute .
buy token 1 token for x ether .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
burns a specific amount of tokens .
transfer tokens .
get _sender and _value a input and sell tokens with bonus throw if not enough tokens after calculation .
"system can mint tokens for users if they send fund to btc , ltc , etc wallets we allow ."
function to mint tokens .
the way in which ether be convert to tokens .
set a rate for ico round .
get total coin sell per current round .
"pause and unpause an ico , only sender allow to ."
change current bonus rate .
get number of current round .
withdraw fund to founder 's wallet .
claims for refund if ico finish and soft cap not reach .
when ico finish we can perform other action .
"_sold in weis , softcap in weis ."
if ispaused true then investments can not be accept .
assigns a new address to act a the banker .
modifier to allow action only when the contract have error .
this be public rather than external so it can be call by derived contract .
this be public rather than external so it can be call by derived contract .
this be public rather than external so it can be call by derived contract .
counts the number of nonoverlapping occurrences of needle in self .
function to mint tokens .
help in fetch the wallet resouce balance .
copies a slice to a new string .
operation modifiers for limit access .
assigns a new address to act a the other manager .
assigns a new address to act a the primary manager .
assigns a new address to act a the secondary manager .
checks if cofounder a be perform the action .
checks if cofounder b be perform the action .
checks if allocator be perform the action .
checks if crowdfund contract be perform the action .
"checks if crowdfund contract , platform , or allocator be perform the action ."
transfers tokens from senders address to another address .
transfers tokens from one address to another address .
issue tokens .
transfer unsold tokens from tde to platform .
transfer unsold tokens from pre-tde to platform .
checks if trickle down bonuses not be release .
checks if all pre-tde contributors have receive their tokens .
checks if there be any pre-tde contributors that have not recieved their tokens .
checks if cofounders be perform the action .
checks if cofounder a be perform the action .
checks if cofounder b be perform the action .
checksto see if the contribution be at least the minimum allow for tde .
make sure max cap be not exceed with added contribution .
make sure max tokens be not exceed with added contribution .
check if the specify beneficiary have send u fund before .
check if pre-tde contributors be not wait for tokens .
checks if tokens can be issue to founder at this time .
checks if tokens be unlocked .
checks if tokens be lock .
checks if cofounders be perform the action .
true if the approval be successful .
modifier to make a function callable only when the address be not in black list .
modifier to make a function callable only when the address be not in black list .
modifier to make a function callable only when the address be in black list .
add an address to the blacklist .
remove address from the blacklist .
modifier to make a function callable only for owner and saleagent when the contract be pause .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
retrieves your currently select dividend rate .
retrieve the total frontend token supply .
retreive the total dividend token supply .
retrieve the frontend tokens own by the caller .
retrieve the dividend tokens own by the caller .
get the sell price at the user 's average dividend rate .
get the buy price at a particular dividend rate .
"when sell tokens , we need to calculate the user 's current dividend rate ."
get 's a user 's average dividend rate - which be just their divtokenbalance / tokenbalance .
"same a buy , but explicitly set your dividend percentage ."
purchase tokens with ether .
how many tokens one get from a certain amount of ethereum .
how much ether we get from sell n tokens .
called from transferfrom .
sells front-end tokens .
transfer tokens from the caller to a new holder .
transfer tokens from the caller to a new holder : the used by smart contracts edition .
who 'd have think we 'd need this thing float around ? .
anyone can start the regular phase 2 weeks after the ico phase start .
fire the start gun and then duck for cover .
fire the . . .
the death of a great man demand the birth of a great son .
calculates if an amount of ether exceed the aggregate daily limit of 15 of contract balance or 5 of the contract balance on it own .
additions for bankroll .
remove a whitelisted contract .
legit sweaty palm when write this .
dev withdraw - split equally among all owners of contract .
receive dividends from zethr and buy back in .
convert an hexadecimal character to their value .
convert an hexadecimal string to raw bytes .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"substracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
allows anyone to execute a confirmed transaction .
low level token purchase function .
sets the daily limit .
uses the requested amount if it within limit .
returns reward and profit .
"returns an estimate of profit to send , and reward ."
"try to start monarchy game , reward upon success ."
return the _reward and _index of the first startable monarchygame .
invoke . refreshgames ( ) .
return a reward for each monarchygame that will end .
called when task be unable to execute .
"sends a capped amount of _reward to the msg . sender , ."
"this cap the reward amount to the minimum of ( reward , balance , dailylimitremaining ) ."
"if necessary , reset the day 's usage ."
returns the current day .
allow admin to edit or add an available game .
this be call by anyone when a new monarchygame should be start .
emits an error with a give message .
"looks at all active define game and : - tell each game to send fee to collector ( u ) - if end : try to pay winner , move to endedgames ."
implements : bankrollable . getcollateral ( ) .
gets total amount of fee that be redeemable if refreshgames ( ) be call .
shorthand access to definedgames .
attempts to transfer _value from _from to _to if _from have sufficient allowance for msg . sender .
credits _account with whatever dividend point they have n't yet be credit .
"for a give account , return how many wei they have n't yet be credit ."
returns how many wei a call to . collectoweddividends ( ) .
transfers balance from _from to _to if _to have sufficient balance .
"credits dividends , then mint more tokens ."
"credits dividends , burn tokens ."
"when set to true , prevent tokens from be transfer ."
"normal erc20 transfer , except before transfer it credit point for both the sender and receiver ."
"normal erc20 transferfrom , except before transfer it credit point for both the sender and receiver ."
"normal erc667 transferandcall , except before transfer it credit point for both the sender and receiver ."
"updates creditedpoints , send all wei to the owner ."
sets parameters of the crowdsale .
starts the vest process for the current balance .
"allows the owner to collect the balance of this contract , include any owed dividends ."
"allows the owner to transfer tokens , such that the balance of tokens can not go below getmintokenbalance ( ) ."
returns the minimum allow tokenbalance .
returns how many tokens have vest .
returns the amount of tokens available to be transfer .
returns the current day .
ends the crowdsale .
"if softcap be not meet , allow users to get full refund ."
callable any time treasury . capitalneeded ( ) .
called when user can not buy tokens .
returns the amount of ether that can be send to . fundcapital ( ) .
returns the total amount of tokens mint at a give _ethamt raise .
"returns how many tokens would be issue for _ethamt send , depend on current totalraised ."
sends profit to token .
anyone can add capital at any time .
"removes from capital , send it to bankrollable target ."
calls . removebankroll ( ) .
increases capitalraisedtarget .
moves capital to profit .
returns the amount of capital need to reach capitalraisedtarget .
returns the total amount of capital allocate .
returns amount of capital allocate to an address .
returns the full capital allocation table .
returns if _addr . gettreasury ( ) .
"creates a request , assign it the next id ."
cancels a request .
executes ( or time out ) a request if it be not already cancel or execute .
"pushes id onto the array , throw if too many ."
"removes id from array , reduce array length by one ."
view that return a request a a valid tuple .
return the lengths of array .
callable once to set the comptroller address .
"allows admin to change minbet , maxbet , and curpaytableid ."
allows a user to create a game from credits .
retrieves the address for the name of _name .
retrieves a associate with an _address .
"retrieves the name of _addr , if any ."
resolves the last roll for the user .
finalizes the previous roll and pay out user if they win .
low level token purchase function .
total supply .
get the token balance for account tokenowner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
allows only contract owner or multisig to proceed .
allows only contract owner or auditor to proceed .
contract owner or multisig can refund contract with eth in case of failed crowdsale .
contract owner or multisig can clawback ether after refund period be finish .
check if contract have enough parsecs to cover hard cap .
start contract ( permanently ) .
finish contract ( permanently ) .
pause contract ( transiently ) .
resume contract ( transiently ) .
declare crowdsale failure ( no more eth be accept from participants ) .
declare crowdsale refund start .
declare crowdsale refund finish .
owner can withdraw parsecs only after contract be finish .
accept participant 's kyc .
decline participant 's kyc .
allow participants to clawback eth in case of crowdsale failure .
register pending contribution .
register accept contribution .
calculate amount of parsecs to grant for eth contribution .
calculate current bonus tier quotient .
"system can mint tokens for users if they send fund to btc , ltc , etc wallets we allow ."
public function .
set the jackpotfactpr .
retrieve the jackpot amount .
retrieve last winner address .
allows applications to sign up users on their behalf iff users sign their permission .
allows users to sign up with their own address .
allows users to delete their account .
allows the hydro api to set minimum hydro balance require for sign up .
returns a bool indicate whether a give username have be claim ( either exactly or a any case-variant ) .
returns user detail ( include case username ) by any cased / uncase user name that map to a particular user .
returns user detail by user address .
checks prefix signatures ( e . g .
common internal logic for all user signups .
requires an address to have a minimum number of hydro .
paymentreminder number of wei remain from payment .
intended when other currencies be receive and owner have to carry out exchange for those payments align to wei .
command for owner to start crowdsale .
command for owner to end crowdsale .
allow crowdsale participant to get refund .
transfer wei send to the contract directly back to the participant .
signal that externally make payments should be return back to the participant .
adds list of address to whitelist .
transfer token for a specified address .
allows this contract to transfer control of token contract to a newowner .
vest notify if there have be any change in amount of locked tokens .
vest notify if there have be any change in amount of locked tokens .
todo public or internal ? master call this when it upload fund in order to differentiate betwen fund from master and 3rd party .
check for change in balance in order to track amount of lock tokens and notify master .
add fund to vest contract .
when vest be revoke it send back remain tokens and update internalbalance .
get furnace information .
"synthesize : call _iscooldownready , pending assets , fire synthesizestart event ."
getsynthesizationresult : auto synthesize daemin call this .
set address of ico smart-contract which control token initial token distribution .
set date for unlock bonus tokens .
gets the balance of bonus tokens the specified address .
assign amount_ of tokens to investor identify by to_ address .
get reserve tokens for specific group .
assign amount_ of privately distribute tokens to someone identify with to_ address .
"call by the owner to locke , trigger lock state ."
"call by the owner to unlock , return to unlocked state ."
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
a token purchase with anti-money launder .
internal transfer function .
allowance to mint .
whether the transfer be successful or not .
whether the approve be successful or not .
whether the transfer be successful or not .
mint tokens .
change freeze .
change mint address .
return amount allow to spend from '_owner ' by '_spender ' .
total amount of token .
amount of token in possession .
sell amount tokens to contract .
"internal transfer , only can be call by this contract ."
enable fee update - must be between 0 and 100 ( ) .
set possible mob in this dungeon .
enter this dungeon .
new combination of mob .
give reward .
get progress .
increment progress .
get enemy combination .
get initial enemy combination .
get play record 's datetime .
get previous game record .
get previous game record .
set cooldown of this dungeon .
set cooldown of heroes enter this dungeon .
set the exp give to the player when clear this dungeon .
set the golds give to the player when clear this dungeon .
set initial enemy combination .
set previous dungeon .
set require progress of previous dungeon .
lock some amount token .
cotnract owner unlock some token for target address despite of time .
user unlock his / her own token .
multisend token to many address .
"internal transfer , only can be call by this contract ."
pay violator 's debt by send coin .
throws if call by any address other than the sender .
change acceptable address .
transfers the ownership of a give token id to another address .
map block number to year index .
minecrystals consist of two basic operations that burn pickaxes and mint crystals .
meltcrystals may have bug .
create exchange .
cancel exchange .
bid exchange .
get index when cumsum i exceed _in first .
change random generator .
number of block per year .
0-based block number index .
what be the balance of a particular account ? .
shows how much tokens _spender can spend from _owner address .
calculates amount of eth need to buy dol .
shows if account be frozen .
buy dol from vault by send eth .
sell dol and receive eth from vault .
transfer amount of tokens from own wallet to someone else .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
check if minimal goal be reach .
check if service be end .
processing each buy .
"internal transfer , can only be call by this contract ."
set current dol price .
set current price rate a .
set current price rate b .
set both price at the same time .
set current commission rate .
set new bank .
'freeze ? prevent allow ' 'account ' from send and receive tokens .
create an amount of dol .
destroy an amount of dol .
transfer the ownership to another account .
transfer ether from smartcontract to admin .
withdraw an amount of ether from vault .
deposit an amount of eth in the vault .
stop run vault .
the function for set of icoprice .
functions with this modifier can only be execute by the owner .
returns a whole amount of dol .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
approves and then call the receive contract .
function to mint tokens .
checks if owner address be call .
function to get the late manifest registration base on registrant address and manifest name .
function to get the late manifest registration base on registrant address .
function to get a list of manifest ids base on registrant address .
function to get a list of manifest ids base on registrant address and manifest name .
"function to get manifest id base on registrant address , manifest name and version ."
checks if the value provide for this manifest be valid .
allows owner to add hashtype .
allows owner to activate / deactivate hashtype .
allows owner to kill the contract .
allows owner to pause the contract .
function to register a manifest .
"function to get a manifest registration base on registrant address , manifest name and version ."
function to get a manifest registration base on manifestid .
transfer token for a specified address with pause and freeze feature for owner .
transfer tokens from one address to another with pause and freeze feature for owner .
set allowance for other address and notify .
owner can freeze the token balance for choose token holder .
owner can unfreeze the token balance for choose token holder .
check the specify token holder whether his / her token balance be frozen .
calls the contract 's finalization function .
true if the transaction can buy tokens .
function to mint tokens .
current token be not transfer .
function to claim any token stick on contract accidentally .
destroy tokens from other ccount .
_freeze internal .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
transfer tokens to multiple address .
set allowance for other address and notify .
destroy tokens .
"adds two number , throw on overflow ."
transfer token for a specified address .
transfer tokens from one address to another .
owner can change the releasestarttime when need .
this owner allocate token for private sale .
this owner allocate token for candy airdrop .
get _user transferable token amount .
get time period for the give '_locktypeindex ' .
the balance of _owner at the current block .
send _value tokens to _to from msg . sender .
this function make it easy to read the allowance map .
required methods .
set hiddenlogic .
set hiddenlogic .
set hiddenlogic .
set cscerc721 contract .
set cscfactoryerc721 contract .
set / modify lightyear distance 3 . 456 ly 3456 .
set / modify mea game attributes .
withdraw remaining resource tokens .
get current cargo hold of assetid ( item names ) .
get assetid trip completed time .
get assetid trip completed time .
get resource address .
get time .
method to fetch process ore detail .
method to fetch process ore detail .
gets star distance in thousandths of ly .
gets total resources already claim by commanders .
gets total seed supply commanders .
for create csc collectible .
safety check on _to address to prevent against an unexpected 0x0 default .
claims and clear cargo - - only internal .
assigns a new address to act a the other manager .
using this function a spender transfer tokens and make an owner of fund a participatants of the operate jackpot .
"setting the reservingpercentage value , allow only for owner ."
using this function a user transfer tokens and participate in operate jackpot .
using this function a user transfer tokens and participate in operate jackpot .
using this function a spender transfer tokens and make an owner of fund a participant of the operate jackpot .
team can claim their tokens after lock up period .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow - if the sender be a locked token storage address then do not allow .
method to withdraw erc20 tokens send to this contract .
throws if call by any account other than the authorized one .
pauses / unpauses the transferability of the token .
sets the address of the owner .
sets the address of the pentacorecrowdsale contract .
sets the address of the pentacorecrowdsale contract .
sets the address of the pentacorecrowdsale contract .
sets the address of the pentacoreredemption contract .
sets the address of the distributedautonomousexchange contract .
sets the token price in us .
sets the token price in us .
calculate the amount of wei for a give token amount .
calculate the amount tokens for a give wei amount and the amount of change in wei .
allows / disallow free transferability of tokens regardless of whitelist .
reverts if beneficiary be not whitelisted and isfreetransferallowed be false .
adds single address to whitelist .
adds list of address to whitelist .
removes single address from whitelist .
removes list of address from whitelist .
function to mint tokens .
function to burn tokens .
transfer token for a specified address .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
transfer tokens from one address to another .
make an offer to sell a specified amount of tokens to a specific buyer at an already agree price .
buy agree amount of tokens from the specific seller at the agreed price .
get _sender and _value a input and sell tokens with bonus throw if not enough tokens after calculation .
"system can mint tokens for users if they send fund to btc , ltc , etc wallets we allow ."
function to mint tokens .
factories core .
workers core .
burns a specific amount of tokens .
"system can mint tokens for users if they send fund to btc , ltc , etc wallets we allow ."
transfer the balance from token owner 's account to to account .
burns a specific amount of tokens .
transfer token in batch .
pay out the players and kill the game .
set the price of the character type .
buy a many character a possible with the transfered value of the give type .
leave the game .
"a knight may attack a dragon , but not choose which one ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
"internal transfer , only can be call by this contract ."
"internal transfer , only can be call by this contract ."
destroy tokens .
checks whether the cap have be reach .
extend parent behavior require purchase to respect the mint cap .
extend parent behavior update the number of token sell .
extend parent behavior require the sale not to be pause .
descend rate .
overrides timedcrowdsale hasclosed method to end sale permaturely if token cap have be reach .
change whitelister address to another one if provide by owner .
modifier for address whith whitelisting right .
overrides addtowhitelist from whitelistedcrowdsale to use a dedicated address instead of owner .
overrides addtowhitelist from whitelistedcrowdsale to use a dedicated address instead of owner .
overrides addtowhitelist from whitelistedcrowdsale to use a dedicated address instead of owner .
the following function be use by the front-end for display purpose .
"dynamic value of ether in reserve , accord to the crr requirement ."
"calculates the number of tokens that can be buy for a give amount of ether , accord to the dynamic reserve and totalsupply value ( derive from the buy and sell price ) ."
"semantically similar to gettokensforether , but subtract the callers balance from the amount of ether return for conversion ."
converts a number tokens into an ether value .
the polynomial r c1 * x + c3 * x 3 + . . .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
sells your tokens for ether .
the slam-the - button escape hatch .
"when you do n't pick a color , the contract will need a default ."
function that return the ( dynamic ) price of a single token .
calculate the current dividends associate with the caller address .
"internal balance function , use to calculate the dynamic reserve value ."
sell function that take tokens and convert them into ether .
converts the ether accrue a dividends back into staking tokens without have to withdraw it first .
modifier that throw if trade have not start yet .
allows the owner to enable the trade .
allows the owner to disable the trade .
allows anyone to transfer the able tokens once trade have start .
allows anyone to transfer the able tokens once trade have start .
allows the current owner to transfer control of the contract to a newowner .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
function to mint tokens .
returns the total amount that still to be release by the end of the duration .
overridden the burnabletoken burn ( ) function to also correct maxsupply .
transfers schedulable tokens to beneficiary .
"calculates the amount of tokens by right , until that moment ."
cast a vote for an account .
public function .
public variables internal variables events public function .
public function .
"validate roll dice request , and log the bet info ."
"oraclize callback , only oraclize can call , payout should in active status ."
"if the user send 0 ether , he receive 100 tokens ."
peterson 's law protection .
initializes the contract and allocate all initial tokens to the owner .
create the token to be sell .
low level token purchase function .
"finish crowdsale , stop mint forever ."
set new date for main-sale ( emergency case ) .
set new rate .
transfer token ownership after token sale be complete .
true if main sale event have end .
send ether to the fund collection wallet .
function to extract fund a require before finalize .
public methods .
set ether price in usd with 5 digits after the decimal point ex .
calculates the amount that have already vest .
set new conversion rate .
send 400 millions of tokens to teampool at the token sale end ( 200m for distribution + 200m for company ) .
method which will be call each day after 5 years to get unfrozen tokens .
destroy tokens from other account .
buy tokens from contract by send ether .
manual transfer for investors who pay from payment card .
throws if call by any account other than the burnable account .
transfer token for a specified address .
transfer tokens from one address to another .
set burn address .
reserve fund .
get lock contract address .
reserve for team .
send tokens which will be freeze for specified time .
unlock frozen tokens .
burn a specific amount of tokens .
send tokens from contract .
transfers tokens hold by timelock to beneficiary .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
buy tokens from contract by send ether .
overriden template method from finalizablecrowdsale .
pre-ico finalization .
function to mint tokens .
throws if transfersenabledflag be false and not owner .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
approve should be call when allow _spender 0 .
function to mint tokens .
executed when a purchase have be validate and bonus tokens need to be calculate .
function use by currency contract to create a request in the core .
function use by currency contract to create a request in the core from bytes .
function use by currency contract to accept a request in the core .
function use by currency contract to cancel a request in the core .
function use to update the balance .
function update the expectedamount add additional or subtract .
internal : init payees for a request ( need to avoid 'stack too deep ' in createrequest ( ) ) .
get address of a payee .
get payer of a request .
get amount expect of a payee .
get number of subpayees for a request .
get currencycontract of a request .
get balance of a payee .
get balance total of a request .
check if all the payees balance be null .
get total expectedamount of a request .
get state of a request .
get address of a payee .
getter of a request .
extract a string from a bytes .
generate a new unique requestid .
extract an address from a bytes at a give position .
extract a bytes32 from a bytes .
transfer to owner any tokens send by mistake on this contract .
send fee to the request burn address .
compute the fee .
set the fee rate .
set the maximum fee in wei .
set the request burner address .
modifier to check if msg . sender .
modifier to check if msg . sender .
function to create a request a payee .
internal function to extract and store bitcoin address from bytes .
function to broadcast and accept an offchain sign request ( the broadcaster can also pay and make additionals ) .
"internal function to create , accept and add additionals to a request a payer ."
internal function to accept and add additionals to a request a payer .
check the validity of a sign request the expiration date .
function internal to calculate keccak-256 hash of a request with specified parameters .
verifies that a hash signature be valid .
extract an address in a bytes .
modify 20 bytes in a bytes .
add a trusted currencycontract .
remove a trusted currencycontract .
get the status of a trusted currencycontract .
check if a currencycontract be trust .
restricts call to owner .
utility to help seek fo specyfied document .
utility to help seek fo specyfied document .
utility to help seek fo specyfied document .
utility to help seek fo specyfied document .
utility to help seek fo specyfied document .
to update document : 1 - add new version a ordinary document 2 - call this function to link old version with update .
"restricts call only when this version be up to date upgradedversion be not set to a new address or in other word , equal to 0 ."
enables to transfer ownership .
adds new document - only owner and if not retire .
gets total count of document .
retire if new version will be available .
gets document with id .
gets document updatedversionid with id 0 - no update for document .
gets base url so everyone will know where to seek for file storage / gui .
set base url even on retirement .
allows anyone to execute a confirmed transaction or ether withdraws until daily limit be reach .
un regulator può abilitare un address di un altro regulator ? - - per noi no .
un regulator può disabilitare un address di un altro regulator ? .
total supply .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
max_cars_to_gift amout of cars be dedicate for gift .
fill unique random cars into _randomcars start from _startfrom a some slot may be already fill .
generate a car id from the give serial number ( 0 - 255 ) .
check if the give value be already in the list .
raffle v1 .
raffle v2 .
raffle v3 .
access modifier for any clevel functionality .
modifier to allow action only when the contract is pause .
pause the smart contract .
unpauses the smart contract .
buy a car .
crowdsale only .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
allows anyone to execute a confirmed transaction or ether withdraws until daily limit be reach .
allows anyone to execute a confirmed transaction .
function to convert component into set tokens .
function to convert set tokens into underlying components .
function to withdraw a portion of the component tokens of a set .
function to withdraw tokens that have previously be exclude when call the redeemexcluded method .
private function .
float fix point operations .
only allow access from the late version of a contract in the taboo u networks ( tun ) after deployment .
initialize all delete methods .
initialize all getter methods .
initialize all setter methods .
buy tokens from contract by send ether .
save a new anchor for a give merkle tree root hash .
allow token holders to withdar their dragons after timelock expire .
total supply .
function to check whether the send amount be within contribution range or not .
function through which owner can transfer the tokens to any address use this which to properly display the tokens that have be sell via ether or other payments .
function to add a single address to whitelist .
function to add multiple address to whitelist .
function to remove an address from whitelist .
function to remove multiple address from whitelist .
function to check if an address be whitelisted .
low level token purchase function .
let the owner close the contract if there be no player fund on it or if nobody have be use it for at least 30 days .
update the price per 1000 gas in edg .
return the gas cost of the call function .
accept deposit for an arbitrary address .
"if the user want / need to withdraw his fund himself , he need to request the withdrawal first ."
in case the user request a withdrawal and change his mind .
withdraw an amount from the user balance if the wait time pass since the request .
let the owner withdraw from the bankroll numtokens the number of tokens to withdraw ( 0 decimals ) .
withdraw the gas payback to the owner .
return the current bankroll in tokens with 0 decimals .
update the maximum deposit .
in case close have be call accidentally .
update the maximum withdrawal .
set the time the player have to wait for his fund to be unlocked before withdrawal ( if not withdraw with help of the casino server ) .
transfer an amount from the contract balance to the owner 's wallet .
transfer the player 's tokens directly to the new casino contract after an update .
receive a player balance from the predecessor contract .
let the owner close the contract if there be no player fund on it or if nobody have be use it for at least 30 days .
update several state channel at once .
update a state channel .
internal method to perform the actual state update .
determine if the msg . sender .
make sure the contract be not in process of be close .
compute the difference of the win balance relative to the last known state and add it to the player 's balance .
"log some seed and game result for players wish to have their game history log by the contract clientseeds array contain the client seed result array contain the result v , r , s the signature of the non-sending party ( to make sure the correct result be log ) ."
determine if the msg . sender .
delay the time of close .
authorize a address to call game function and set configs .
deauthorize a address to call game function and set configs .
allow authorize wallets to withdraw fund from the bonkroll to this address .
disallow authorize wallets to withdraw fund from the bonkroll to this address .
change the owner of the contract .
set the amount of gas consume by methods with the give sigantures .
presale participation .
constructor function .
this function be call by the owner to remove an address from the whitelist .
this function be call by the owner to modify the contribution cap of a whitelisted address .
this function be call by the owner to modify the cap for a contribution level .
"this function change every level cap at once , with an optional delay ."
this function can be call during stag one or two to modify the maximum balance of the contract .
this internal function return the cap amount of a whitelisted address .
this internal function check if an address be whitelisted in the whitelist contract .
"this callable function return the total pool cap , current balance and remain balance to be fill ."
"this callable function return the balance , contribution cap , and remain available balance of any contributor ."
"this function close further contributions to the contract , advance it to stage two ."
"this function reopen the contract to contributions and further whitelisting , return it to stage one ."
this function set the receive address that the contract will send the pooled eth to .
"this function send the pooled eth to the receive address , calculate the of unused eth to be return , and advance the contract to stage three ."
this function open the contract up for token withdrawals .
internal function for handle eth deposit during contract stage one .
internal function for handle eth refund during stage three .
this function be call to withdraw eth or tokens from the contract .
this function allow the contract owner to force a withdrawal to any contributor .
"this function can only be execute by the owner , it add an address to the whitelist ."
method to calculate bonus for the user a per currently run phase and contribution by the user .
return the currently run tier index a per time .
get fund info of user / address .
allow owner to withdraw fund to his wallet anytime in between the sale process .
for emergency stop of the sale .
to restart the sale after emergency stop .
true if all the tiers have be end .
can be call only once .
"must be call to end the sale , to do some extra finalization work ."
low level token purchase function .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
returns amount of created canvas .
returns true if the canvas have be already finish .
returns the author of give pixel .
returns number of pixels set by give address .
ensures that canvas 's saved state be state_owned .
places bid for canvas that be in the state state_initial_bidding .
returns last bid for canvas .
returns current canvas state .
returns all canvas ' id for a give state .
returns reward for paint pixels in wei .
withdraws reward for contribute in canvas .
calculates commission that have be charge for sell the canvas .
returns number of canvas own by the give address .
only for the owner of the contract .
slices array from start ( inclusive ) to end ( exclusive ) .
buy artwork .
offer canvas for sale for a minimal price .
offer canvas for sale to a give address .
cancels previously make sell offer .
returns current time .
places buy offer for the canvas .
cancels previously make buy offer .
accepts buy offer for the canvas .
returns current buy offer for the canvas .
returns current sell offer for the canvas .
returns array of canvas 's ids .
returns array of all the owners of all of pixels .
returns amount of wei that give address be able to withdraw .
add pending withdrawal for an address .
withdraws all pending withdrawals .
sets pixel .
returns full bitmap for give canvas .
returns how many pixels have be already set .
buy tokens .
withdraw all ether in this contract back to the wallet .
collect all the remain token which be unsold after the sell period and make this token can be tranferred .
transfer tokens .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
destroy tokens from other account .
get the rate of exchange accord to the purchase date .
approves and then call the receive contract .
exchange specific function .
admin function .
blacklist erc20 or erc223 tokens .
public function .
overrides erc20 transfer function with modifier that prevent the ability to transfer tokens until after transfer have be enable .
overrides the burn function so that it can not be call until after transfer have be enable .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
token owner can approve for spender to transferfrom ( . . . ) .
check if transfer be allow .
check if token offer address be set or not .
check if address be a valid destination to transfer tokens to - must not be zero address - must not be the token address - must not be the owner 's address - must not be the admin 's address - must not be the token offer contract address .
set token offer to approve allowance for offer contract to distribute tokens .
enable transfer .
transfer from sender to another account .
transfer from from account to to account use allowance in from account to the sender .
"burn token , only owner be allow to do this ."
send fee to the request burn address .
compute the fee .
set the fee rate .
set the maximum fee in wei .
set the request burner address .
base function for request creation .
function to accept a request .
function to cancel a request .
function to declare additionals .
function to declare subtract .
function to create a request a payee .
function to broadcast and accept an offchain sign request ( the broadcaster can also pay and make additionals ) .
"internal function to create , accept , add additionals and pay a request a payer ."
"internal function to accept , add additionals and pay a request a payer ."
function to pay a request in erc20 token .
function to pay back in erc20 token a request to the payees .
function internal to manage payment declaration .
function internal to manage refund declaration .
function internal to manage fund mouvement .
check the validity of a sign request the expiration date .
function internal to calculate keccak-256 hash of a request with specified parameters .
verifies that a hash signature be valid .
"multiplies two number , revert ( ) s on overflow ."
revert ( ) s if call by any account other than the owner .
modifier to allow action only when the contract is pause .
modifier to allow action only when the contract is not pause .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
beneficiary claim tokens hold by time lock .
burns a specific amount of tokens .
"integer division of two number , truncate the quotient ."
"subtracts two number , revert ( ) s on overflow ( i . e ."
"adds two number , revert ( ) s on overflow ."
fix for the erc20 short address attack .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
make an exchangement .
"manual exchange tokens for btc , ltc , fiat contributions ."
looks up the current token price .
modifier to make a function callable only when the contract be not locked .
decrease the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
token deployment .
change the current rate .
set minimum contribution .
extend crowdsale .
set goal .
convenience function .
constructor function .
low level token purchase function .
returns you how much tokens do you get for the wei pass .
retrieve lock tokens ( for when this contract be not need anymore ) .
transfer tokens from one address to another .
function to mint tokens .
function to stop mint new tokens .
true if the transaction can buy tokens .
"if crowdsale be unsuccessful , investors can claim refund here ."
"must be call after crowdsale end , to do some extra finalization work ."
transfer token for a specified address .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
freeze ? prevent allow target from send receive tokens .
"allow address to pay newbuyprice eth when buy and receive newsellprice eth when sell , foreach token buy / sell ."
deposits ether to the contract .
buy tokens from contract by send ether .
sell amount tokens to the contract .
send _value tokens to _to in behalf of _from .
allows _spender to spend a maximum of _value tokens in your behalf .
"internal transfer , only can be call by this contract ."
overrides basic transfer function due to comision value .
overrides basic transferfrom function due to comision value .
"internal , update the balance of tokens available ."
"internal , update the balance of ether available in order to cover potential sales ."
"internal , update the profit value ."
make transfer possible if tokens be unfrozen or if the caller be a sale account .
standard transfer ( ) but with check of frozen status .
standard transferfrom but incorporate frozen tokens logic .
boolean that indicate if the operation be successful .
sets sale status of an account .
"same a setsale , but must be call from the current active sale and do n't need multisigning ( it 's do in the finishsale call anyway ) ."
make transfer of tokens available to everyone .
boolean that indicate if the operation be successful .
"disables far use of privileged function : setsale , thaw ."
approves spend tokens and immediately trigger token recipient logic .
must be call by owners only out of stage .
need to seal crowdsale when it be finish completely .
get balance of _who for freezed moment freezethemoment ( ) .
set access permissions for methods .
create new policy .
getter and setter for accesscontrol .
getter and setter for ledger .
getter and setter for policies .
getter and setter for risk .
getter and setter for oraclizecallbacks .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
store address of one contract in map .
the address of the contract .
bool success .
bool success .
"after deploy all contract , this function be call and call setcontracts ( ) for every register contract ."
destruct one contract .
destruct all contract .
allows to destroy the contract and return the tokens to the owner .
transfers tokens hold by timelock to beneficiary .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
layout of message : : bytes : offset 0 : 32 bytes : : uint256 - message length offset 32 : 20 bytes : : address - recipient address offset 52 : 32 bytes : : uint256 - value offset 84 : 32 bytes : : bytes32 - transaction hash offset 116 : 32 bytes : : uint256 - home gas price bytes 1 to 32 be 0 because message length be store a little endian .
should be use a sync tool .
get message .
mint token to tagret parametred .
modifier to scope access to admins / / revert .
add a role to an address .
remove a role from an address .
set new start date for crowdsale .
set new wallet address .
set new rate for crowdsale .
"call by the admin to pause , trigger stop state ."
"call by the admin to unpause , return to normal state ."
close the crowdsale .
validation of an incoming purchase .
source of tokens .
override to extend the way in which ether be convert to tokens .
this modifier will be use to disable all erc20 functionalities during the mint process .
transfer token for a specified address .
transfer tokens from one address to another .
modifier that throw if spender address be not allow to transfer and the trade be not enable .
only the owner of the token smart contract can add allow token to be transfer before the trade have start .
allows the owner to enable the trade .
allows anyone to transfer the tokens once trade have start .
allows anyone to transfer the tokens once trade have start or if the spender be part of the map .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
adding whennotpaused .
adding whennotpaused .
"populate the whitelist , only execute by whitelistingadmin whitelistingadmin ."
low level token purchase function override to create custom buy .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
"create the token on the fly , owner be the contract , not the contract owner yet ."
calculates the amount of coin the buyer get .
"override the claimrefund , so only user that have burn their token can claim for a refund ."
transfer the token owner ship to the crowdsale contract token . transferownership ( currentico ) ; .
low level token purchase function .
true if investors can buy at the moment .
true if crowdsale event have end .
admin function only execute by owner : .
admin function only execute by owner : .
admin function only call by owner : .
admin function only call by owner : .
first function to be call .
prepare the events - set the max_supply - set the wallet for the remain amount - move to phase 1 .
allow mint during the pre sale ico phase .
simplify creation for bitex team .
setup a new ico event .
setup a new ico event .
"token function can be call only during the prepare phase , because the owner change after this to be own by the crowdsale , so nobody can do anything on the token at all from the controller perpective once round be start ."
admin function only execute by owner : .
admin function only execute by owner : .
admin function only call by owner : .
admin function only execute by pendingowner .
only by the whitelist admin .
in case the whitelisting admin need to be change .
admin function only execute by pendingowner .
extinguish this certificate .
check if token id be valid .
query if an address be an authorized operator for another address .
count wars track by this contract .
do the real transfer with out any condition check .
actually perform the safetransferfrom .
equipment creation .
one specific attribute of the equipment modify .
equiment attribute modify ( max 4 stats modify ) .
equipment destruction .
safe transfer by trust contract .
get fashion attrs by tokenid .
get tokenids and flag by owner .
gas 210019 .
gas 198125 .
search for token quantity address .
find the owner of an war .
transfers the ownership of an war from one address to another address .
transfers the ownership of an war from one address to another address .
"transfer ownership of an war , '_to ' must be a vaild address , or the war will lose ."
set or reaffirm the approved address for an war .
enable or disable approval for a third party ( operator ) to manage all your asset .
get the approved address for a single war .
calculates the amount that have already vest .
close the token sale .
burns a specific amount of tokens .
throws if call by any account other than the owner .
allow the owner of the address aconsumer . address ( ) .
allow the owner of address aproducer . address ( ) .
cease allow the owner of address aproducer . address ( ) .
offer ( aenergy / 1 . 0e6 ) . tofixed ( 6 ) .
buy ( aenergy / 1 . 0e6 ) . tofixed ( 6 ) .
buy ( aenergy / 1 . 0e6 ) . tofixed ( 6 ) .
format decimals .
transfers the balance from msg . sender .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
low level token purchase function .
true if the transaction can buy tokens .
disable if enable .
enable if diabled .
retruns true if sale be currently active .
create the token to be sell .
"multiplies two number , throw on overflow ."
creates a new covfefe with the give term .
returns all the relevant information about a specific covfefe .
required for erc-721 compliance .
required for erc-721 compliance .
add meaning .
buy token .
assigns a new address to act a the covman .
assigns a new address to act a the covmanager .
required for erc-721 compliance .
allow pre-approved user to take ownership of a token .
"integer division of two number , truncate the quotient ."
add value to covfefe .
this method must never be call by smart contract code .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
safety check on _to address to prevent against an unexpected 0x0 default .
for check approval of transfer for address _to .
covfefe creation .
check for token ownership .
for pay out balance on contract .
"subtracts two number , throw on overflow ( i . e ."
transfer event a define in current draft of erc721 .
covfefe duel system .
"adds two number , throw on overflow ."
access modifier for covman-only functionality .
access modifier for covmanager-only functionality .
access modifier for contract owner only functionality .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
required for erc-721 compliance .
"creates a new promo covfefe with the give term , with give _price and assign it to an address ."
set the fee rate .
set the maximum fee in wei .
transfers tokens hold by timelock to owner .
owner can transfer out any accidentally send erc20 tokens .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
calculates the amount that have already vest .
simplify creation for bitex team .
this be a private function and be only be call from trade ( ) .
calculate fee include special promotions .
"bool : true if the trade would be successful , false otherwise ."
uint : amount of volume available for the give order in term of amountget / tokenget .
uint : amount of the give order that have already be fill in term of amountget / tokenget .
changes the fee on take .
add special promotion fee .
chnage special promotion fee .
remove special promotion fee .
return total count promotion fee .
check balance : constant .
total supply : constant .
get freeze status : constant .
owner can transfer out any accidentally send erc20 tokens .
approve others to spend on your behalf .
"approve and call : if approve return true , it call receiveapproval method of contract ."
transferred approve amount from other 's account .
burn ( destroy tokens ) .
transfer ownership .
freeze account - onlyowner .
emerygency freeze - onlyowner .
check allowance : constant .
"after vest period , this function transfer all available tokens from it 's account to _recipient address ."
from : https : / / github . com / ethereum / eips / issue / 223 .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
in case of a failed / abort ico every investor can get back their money .
"after the ico have run it course , the withdraw account can drain fund bit-by - bite a need ."
if this contract get a balance in some other erc20 contract - or even iself - then we can rescue it .
timestamp function base on https : / / github . com / pipermerriam / ethereum-datetime / blob / master / contract / datetime . sol .
ico contract configuration function new_eth_nzd be the new rate of eth in nzd ( from which to derive tokens per eth ) newtimestamp be the number of second since 1970-01 - 01 00 : 00 : 00 gmt at which the ico must stop .
emergency pause for the ico .
in case we want to completely abort .
transfer token for a specified address with pause and freeze feature for owner .
transfer tokens from one address to another with pause and freeze feature for owner .
transfer tokens from ico address to another address .
function to distribute tokens to the msg . sender .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
mitigate short address attack thank to https : / / github . com / numerai / contract / blob / c182465f82e50ced8dacb3977ec374a892f5fa8c / contract / safe . sol l30-l34 .
todo : update test to expect throw .
todo : update test to expect throw .
"to change the approve amount you first have to reduce the address ' allowance to zero by call 'approve ( _spender , 0 ) ' if it be not already 0 to mitigate the race condition describe here : https : / / github . com / ethereum / eips / issue / 20 issuecomment-263524729 ."
add distribution smart contract address .
modifier to make a function callable only when the contract be not pause .
limit token transfer if _sender be frozen .
returns the number of tokens in circulation .
returns the token balance of user .
returns amount of tokens _spender be allow to transfer or burn .
users can trade old mybit tokens for new mybit tokens here .
alias for swap ( ) .
transfer _amount tokens to address _to .
transfer _amount of tokens if _from have allow msg . sender .
token owner can approve for spender to transferfrom ( . . . ) .
token holder can notify a contract that it have be approve to spend _amount of tokens .
removes senders tokens from supply .
an approved sender can burn _amount tokens of user _from .
function to distribute tokens to the list of address by the provided amount .
total number of deposit in the lifetime of the contract .
total amount of eth that the contract have delt with so far .
amount owe to this person .
a trap door for when someone send tokens other than the intended ones so the overseers can decide where to send them .
the tokens can never be steal .
"deposit eth to get in line to be credit back the multiplier a a percent , add that eth to the pool , get the dividends and put them in the pool , then pay out who we owe and buy more tokens ."
"take 50 of the money and spend it on tokens , which will pay dividends later ."
number of tokens the contract own .
number of dividends owe to the contract .
number of dividends receive by the contract .
request dividends be pay out and add to the pool .
number of participants who be still owe .
total amount still owe in credit to depositors .
erc223 transfer to a contract or externally-owned account .
erc223 transfer to contract and invoke tokenfallback ( ) method .
erc223 fetch contract size ( must be nonzero to be a contract ) .
recommended fix for know attack on any erc20 .
ethereum token .
ethereum token .
ethereum token .
erc223 transfer and invoke specify callback .
this be the main function .
user can call this function to generate new kingdoms ( within the limit of available land ) .
send transaction to compensate the previous owner .
this function may be useful to force withdraw if user never come back to get his money .
"after time expiration , owner can call this function to activate the next round of the game ."
allows the current owner to transfer control of the contract to a newowner .
_value tokens will be send to _to .
from _from will be send _value tokens to _to .
give to target address ability for self token manipulation without send .
reset count of tokens approve for give address .
take allow tokens .
a trap door for when someone send tokens other than the intended ones so the overseers can decide where to send them .
the tokens can never be steal .
"take 50 of the money and spend it on tokens , which will pay dividends later ."
number of tokens the contract own .
number of dividends owe to the contract .
request dividends be pay out and add to the pool .
"adds two addends together , return the sum ."
determines whether a value be equal to or less than another .
determines whether a value be great than another .
determines whether a value be equal to or great than another .
throws if call by any account other than the owner or manager .
allows the current owner to transfer control of the contract to a newowner .
allows the owner or manager to replace the current manager .
"subtracts the minuend from the subtrahend , return the difference ."
"multiplies two factor , return the product ."
"multiplies two factor , return the product ."
"divides the dividend by divisor , return the truncated quotient ."
"divides the dividend by divisor , return the truncated quotient ."
"divides the dividend by divisor , return the quotient and remainder ."
returns the less of two value .
returns the great of two value .
determines whether a value be less than another .
this be pretty standard ownership change routine .
max bet amount for a specific game .
helper routine to process the payment .
helper routines to alter the respective max bet limit .
betting logic .
"settlement transaction - can be issue by anyone , but be design to be handle by the dice2 . win ."
refund transaction - return the bet amount of a roll that be not process in due timeframe ( 100 ethereum block ) .
helper routines .
this method can be use to extract tokens mistakenly send to this contract .
check that crowd sale be live .
activate end of crowdsale state .
check if end date of crowdsale be pass .
check if crowdsale target be reach .
total number of tokens in existence .
transfer token for a specified address .
transfer tokens from one address to another .
gets the balance of the specified address .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to mint tokens .
"the large purchase than can be make at present , not include any discount ."
get the number of tokens that would be give if the sender be to spend _value now .
any applicable bonus to _value .
true if the sale be ongoing .
true if all buyins have finalise .
returns true if the sender of this transaction be a basic account .
ensure the sale have not begin .
ensure the sale be end .
ensure we 're not halt .
buyin function .
ensure sender be admin .
"ensure that the signature be valid , who be a certified , basic account , the gas price be sufficiently low and the value be sufficiently high ."
ensure sender be not a contract .
like buyin except no payment require and bonus automatically give .
mint tokens for a particular participant .
prviate utilities : .
admin interaction : .
emergency function to drain the contract of any fund .
the current price for a single indivisible part of a token .
returns the total indivisible token part available for purchase right now .
"deposit eth to get in line to be credit back the multiplier a a percent , add that eth to the pool , get the dividends and put them in the pool , then pay out who we owe and buy more tokens ."
muda o dono do contrato .
get infor do cofre beneficiado .
get infor do cofre beneficiado .
send fund to safe wallet if minimum be reach .
determines how eth be store / forward on purchase .
low level token purchase * * * do not override .
method for manage bonus phase .
method for allocate tokens to beneficiary account .
claim back token ownership .
ends the fund period and send the eth home .
validation of an incoming purchase .
override to extend the way in which ether be convert to tokens .
function to mint tokens .
total supply .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
recover signer address from a message by use his signature .
send tokens to another account from a specified account .
set the maximum amount allow for the account .
mitigate short address attack thank to https : / / github . com / numerai / contract / blob / c182465f82e50ced8dacb3977ec374a892f5fa8c / contract / safe . sol l30-l34 .
"to change the approve amount you first have to reduce the address ' allowance to zero by call 'approve ( _spender , 0 ) ' if it be not already 0 to mitigate the race condition describe here : https : / / github . com / ethereum / eips / issue / 20 issuecomment-263524729 ."
allow an exist user to claim one or more previously unclaimed tile by pay ether .
this function fortify multiple previously claim tile in a single transaction .
"a new user attack a tile claim by someone else , try to make it theirs through battle ."
"an exist user attack a tile claim by someone else , try to make it theirs through battle ."
move army block value from one block to an adjacent block .
allow users to withdraw battle value in ether .
only use by owner for raffle .
"the owner can transfer ownership of own tile to other users , a prize in competitions ."
this function claim multiple previously unclaimed tile in a single transaction .
return a pseudo random number between low and upper bound give the number of previous block it should hash .
a user try to claim a tile that 's already own by another user .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
calculate virtual balance of the owner of give address take into account materialize flag and total number of real tokens already in circulation .
materialize virtual balance of the owner of give address if this will help to transfer give number of tokens from it .
"setting crowdsale , crowdsale address can be 0x0 ."
get virtual balance of the owner of give address .
get name of this token .
get symbol of this token .
get number of decimals for this token .
internal function for set sale bonus .
override transfer function to set sale bonus .
override transfer function to set sale bonus .
notify owners about their virtual balance .
kill this smart contract .
this method can be use to extract mistakenly sent tokens to this contract .
number of tokens currently belong to the owner of give address .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"true if token transfer be successfully approve , false otherwise ."
number of tokens give spender be currently allow to transfer from give owner .
total number of tokens in circulation .
number of tokens currently belong to the owner of give address .
below function can be use when you want to send every recipeint with different number of tokens .
"once the ico have end , owner can send all the unsold tokens to treasury address ."
low level token purchase function .
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
check if hard cap reach before mintting new tokens .
transfer the priviledge of create new tmx global tokens to anothe ethereum account .
check if account be the authorized minter .
retrieve number of all tmx global tokens in existence .
check tmx global tokens balance of an ethereum account .
check how many tmx global tokens a spender be allow to spend from an owner .
a helper to notify if overflow occur .
transfer an amount of tmx global tokens to an ethereum address .
spend tmx global tokens from another ethereum account that approve you a spender .
allow another ethereum account to spend tmx global tokens from your account .
mechanism for tmx global tokens creation only minter can create new tmx global tokens check if tmx global token hard cap be reach before proceedig - revert if true .
return a pseudo random number between low and upper bound give the number of previous block it should hash .
a user try to claim a tile that 's already own by another user .
allow u to transfer out airdropped tokens if we ever receive any .
this function claim multiple previously unclaimed tile in a single transaction .
function to burn a specific amount of tokens from another account that msg . sender .
assemble the give address bytecode .
function that be call when a user or another contract want to transfer fund to smart-contract .
function to mint tokens .
function to stop mint new tokens .
function that be call when a user or another contract want to transfer fund .
function to burn a specific amount of tokens .
"the owner can transfer ownership of own tile to other users , a prize in competitions ."
function to mint tokens .
fix for short address attack .
allows the current owner to transfer control of the contract to a newowner .
transfers tokens from one address to another .
approves the passed address to spend the specified amount of tokens on behalf of msg . sender .
increases the amount of tokens that an owner allow to a spender .
decreases the amount of tokens that an owner allow to a spender .
gets total number of tokens in existence .
gets the balance of the specified address .
checks the amount of tokens that an owner allow to a spender .
protection against short address attack .
transfer with short address attack protection .
transferfrom with short address attack protection .
allowance with short address attack protection .
approve and then communicate the approve contract in a single transaction .
transfers token to the specify address .
lock 's down the proxy and prevent the call of exec by owneraddress and recoveryaddress .
unlock 's the proxy .
set new owner of proxy contract and remove the old one .
change the client address .
function to mint tokens .
transfer all ether hold by the contract to the owner .
sets current bonus ( ) .
returns token amount for wei investment .
"performs the final stage of the token sale , mint additional 40 of token fund , transfer mint tokens to an external fund ( 20 game fund , 10 team , 5 advisory board , 3 bounty , 2 founder ) ."
centralminter functions .
remove tokens from circulation to control token prcie .
node function .
erc20 token functions .
erc20 standard : get the account balance of another account with address tokenowner .
erc20 standard : returns the amount which spender be still allow to withdraw from tokenowner .
erc20 standard : send tokens amount of tokens to address to .
"erc20 standard : allow spender to withdraw from your account , multiple time , up to the tokens amount ."
erc20 standard : send tokens from address from to address to .
team owner .
transferring a country to another owner will entitle the new owner the profit from buy .
all team property content .
"integer division of two number , truncate the quotient ."
"buying , very importent part ; ."
account service cost .
buy item .
team total number .
wizz panda control .
assigns ownership of a specific panda to an address .
an internal method that create a new panda and store it .
"given a token id , return a byte array that be suppose to be convert into string ."
checks if a give address be the current owner of a particular panda .
checks if a give address currently have transferapproval for a particular panda .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
returns the number of pandas own by a specific address .
transfers a panda to another address .
grant another address the right to transfer a specific panda via transferfrom ( ) .
"transfer a panda own by another address , for which the call address have previously be grant transfer approval by the owner ."
returns the total number of pandas currently in existence .
returns the address currently assign ownership of a give panda .
returns a list of all panda ids assign to an address .
checks that a give kitten be able to breed .
check if a sire have authorize breed with this matron .
"set the cooldownendtime for the give panda , base on it current cooldownindex ."
grants approval to another user to sire with one of your pandas .
checks to see if a give panda be pregnant and ( if so ) if the gestation period have pass .
checks that a give kitten be able to breed ( i . e .
checks whether a panda be currently pregnant .
internal check to see if a give sire and matron be a valid mat pair .
internal check to see if a give sire and matron be a valid mat pair for breed via auction ( i . e .
"checks to see if two cat can breed together , include check for ownership and siring approvals ."
"internal utility function to initiate breed , assume that all breed requirements have be check ."
"breed a panda you own ( a matron ) with a sire that you own , or for which you have previously be give siring approval ."
have a pregnant panda give birth ! .
adds an auction to the list of open auction .
"remove all ether from the contract , which be the owner 's cut as well a any ether send directly to the contract address ."
creates and begin a new auction .
creates and begin a new auction .
updates lastsaleprice if seller be the nft contract .
creates and begin a new auction .
adds an auction to the list of open auction .
updates lastsaleprice if seller be the nft contract .
computes the price and transfer winnings .
the auction contract variables be define in pandabase to allow u to refer to them in pandaownership to prevent accidental transfer .
put a panda up for auction .
put a panda up for auction .
completes a sire auction by bid .
transfers the balance of the sale auction contract to the pandacore contract .
"we can create promo kitten , up to a limit ."
create pandawithgenes .
"computes the next gen0 auction start price , give the average of the past 5 price + 50 ."
init contract .
returns all the relevant information about a specific panda .
allows the cfo to capture the balance available to the contract .
transfer the balance from token owner 's account to to account - - - owner 's account must have sufficient balance to transfer - - - 0 value transfer be allow .
transfer tokens from the from account to the to account - - - the call account must already have sufficient tokens approve ( . . . ) - d .
returns the amount of tokens approve by the owner that can be - - - transfer to the spender 's account .
token owner can approve for spender to transferfrom ( . . . ) .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
transfer token for a specified address .
"unlock , only can be call by owner ."
force to transfer only by tokensalecontract during sale period .
lock transfer during presale period .
setup sale contract .
function to mint tokens reference from https : / / github . com / openzeppelin / zeppelin-solidity / blob / master / contract / token / erc20 / cappedtoken . sol .
update the end of ico time .
approves another address to transfer the give token id .
safely transfer the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
returns whether the give spender can transfer a give token id .
internal function to invoke onerc721received on a target address .
function to create a token and associate it with graffiti .
use this to create more than 1 token at a time .
use this function to add graffiti to tokens that the address own .
get commission .
calculate token sell value .
a user try to claim a tile that 's already own by another user .
total supply .
send contracts ethereum to address owner .
query ethereum of contract .
return a pseudo random number between low and upper bound give the number of previous block it should hash .
"used to mark the smart contract a upgraded , in case there be a serious break bug ."
this be public rather than external so we can call super . unpause .
allows the cfo to capture the balance available to the contract .
only people with tokens .
"in case the amassador quota be not meet , the administrator can manually disable the ambassador phase ."
"in case one of u die , we need to replace ourselves ."
precautionary measure in case we need to adjust the masternode rate .
"if we want to rebrand , we can ."
"if we want to rebrand , we can ."
method to view the current ethereum store in the contract .
retrieve the total token supply .
retrieve the tokens own by the caller .
retrieve the dividends own by the caller .
retrieve the token balance of any single address .
only people with profit .
retrieve the dividend balance of any single address .
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
calculate token price base on an amount of incoming ethereum .
calculate token sell value .
"this be where all your gas go , sorry ."
"multiplies two number , throw on overflow ."
"administrators can : - change the name of the contract - change the name of the token - change the pos difficulty ( how many tokens it cost to hold a masternode , in case it get crazy high later ) they can not : - take fund - disable withdrawals - kill the contract - change the price of tokens ."
"integer division of two number , truncate the quotient ."
"substracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
"ensure that the first tokens in the contract will be equally distributed mean , no divine dump will be ever possible result : healthy longevity ."
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
converts all of caller 's dividends to tokens .
alias of sell ( ) and withdraw ( ) .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
function to distribute tokens to the list of address by the provided amount .
burns a specific amount of tokens .
send some fund along with the call to cover oraclize fee .
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
approve should be call when allow _spender 0 .
token directory function .
general token function .
function to recover the fund on the contract .
"multiplies two number , throw on overflow ."
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
addition to erc20 token methods .
addition to erc20 token methods .
addition to erc20 token methods .
addition to standardtoken methods .
addition to standardtoken methods .
burns a specific amount of tokens .
"integer division of two number , truncate the quotient ."
function to mint tokens .
function to stop mint new tokens .
function to mint tokens .
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
total number of tokens in existence .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
"award prize to winner , and developer already take 10 from individual transactions ."
low level token purchase * * * do not override .
determines how eth be store / forward on purchase .
adds single address to whitelist .
adds list of address to whitelist .
removes single address from whitelist .
"modifier , revert if not within limit ."
check txs value be within limit : .
set limit logic : .
extend parent behavior require to be within contribute period .
"drain function , in case of failure ."
drain tokens to wallet .
check gas price .
send _value tokens to _to from your account .
send _value tokens to _to in behalf of _from .
remove _value tokens from the system irreversibly .
buy a country directly from the contract for the calculated price which ensure that the owner get a profit .
transfer the specified amount of tokens to the specify address .
throws if call by any account other than the owner .
burns a specific amount of tokens .
revert ( ) s if call by any account other than the owner .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens than an owner allow to a spender .
allows the owner to burn the token .
transfer teu token from one wallet to multiple wallets .
returns number of instantiations by creator .
registers contract in factory registry .
allows a token holder to burn tokens .
allows the owner to reclaim tokens that be assign to the token contract itself .
allows the owner to permanently disable token transfer .
map ( uint address ) public wikitoowner ; map ( address uint ) ownerwikicount ; .
internal function to add a token id to the list of a give address .
internal function to remove a token id from the list of a give address .
checks msg . sender .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
a new 'block ' to be mine .
the number of zero the digest of the pow solution require .
"help debug mine software ( even though challenge_digest be n't use , this function be constant and help troubleshoot mine issue ) ."
help debug mine software .
total supply .
prevent transfer until trade allow .
"internal transfer , only can be call by this contract ."
transfer tokens .
true if the approval be successful .
allows the current owner to transfer control of the contract to a newowner .
add an contract admin .
function check how much you can remove the token .
modifier to only allow transfer after the token sale have finish .
modifier to not allow transfer to 0x0 and to this contract .
modifier to only allow kycmanager wallet to execute a function .
low level token purchase function .
ends the operation of the contract .
updates the maximum allowed transaction cost that can be receive on the buytokens ( ) function .
flag an user a know .
flag an user a unknown / disapprove .
changes the kyc manager to a new address .
returns true if any of the token sale stag be currently run .
returns true if the presale sale be currently run .
returns true if the public sale be currently run .
returns true if the public sale have end .
returns true if the pre sale have end .
returns if an user have kyc approval or not .
returns the weispent of a user .
"returns the rate the user will be pay at , base on the amount of wei send to the contract , and the current time ."
"true if the transaction can buy tokens , otherwise false ."
prepopulates the specified wallet .
ends the migration process by give the token contract back to the owner .
modifier to allow action only when the contract is pause .
modifier to allow action only when the contract is not pause .
function to mint tokens .
function to stop mint new tokens .
gets totalsupply .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
allows the current owner to relinquish control of the contract .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
return true if the list exist .
pop the first entry from the link list .
return true if the node exist .
returns the number of elements in the list .
returns the link of a node a a tuple .
returns the link of a node _node in direction _direction .
can be use before insert to build an ordered list .
creates a bidirectional link between two nod on direction _direction .
insert node _new beside exist node _node in direction _direction .
remove an entry from the link list .
push an enrty to the head of the link list .
grants editor right to the pass address .
revokes editor right of the passed address .
adds a document to the blockchain .
edits a document that be already present of the blockchain .
generic function that add a document to the blockchain or modify a document that already exist on the blockchain .
markes the document with the passed id a invisible .
markes the document with the passed id a visible .
returns the total number of document on the blockchain .
returns the total number of document on the blockchain write by the pass user .
returns the document id of the x-th document write by the pass user .
just in case fallback .
allows the current owner to transfer control of the contract to a newowner .
erc 20 token function .
"internal transfer , only can be call by this contract ."
sell amount tokens to contract .
destroy tokens .
destroy tokens from other account .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
in case some investor pay by wire or credit card we will transfer him the tokens manually .
set the number of onas sell per eth .
"minimum goal be base on usd , not on eth ."
this be a hack to add the lost token during final full sale .
transfer token for a specified address .
transfer tokens from one address to another .
flag for platform change process .
this function check the state of the flag .
add struct accountsinfo .
withdraws all of the callers earn .
sale methods .
stock methods .
exchange methods .
transfer the same amount of tokens to up to 100 specified address .
erc 20 standard token interface transfer function .
change founder address ( where ico eth be be forward ) .
erc 20 standard token interface transfer function .
only owner can kill .
constructor function .
buy tokens from contract by send ether .
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
method to view the current ethereum store in the contract .
retrieve the total token supply .
retrieve the tokens own by the caller .
retrieve the dividends own by the caller .
retrieve the token balance of any single address .
retrieve the dividend balance of any single address .
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
only non-founders .
calculate token price base on an amount of incoming ethereum .
calculate token sell value .
ensure that the contract be only open to the public when the founder be ready for it to be .
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
converts all of caller 's dividends to tokens .
alias of sell ( ) and withdraw ( ) .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
transfer tokens from the caller to a new holder .
string the result ascii string value .
provides access to a determined transaction .
invalidates a deployed certificate .
revokes access to a determined transaction .
check if user have access to a determined transaction .
access modifier .
drains all eth .
drains any erc20 token accidentally send to contract .
called by any c-level role to pause the contract .
unpauses the smart contract .
burns a specific amount of tokens .
set the ico token contract .
low level token purchase function .
true if crowdsale event have end or cap be reach .
true if crowdsale event have start .
low level token purchase function .
note : this function return a boolean value indicate whether the transfer be successful .
transfers the ownership of the contract .
"returns the loan metadata , this field can be set by the creator of the loan with his own criteria ."
"returns the loan metadata , hash with keccak256 ."
"creates a loan request , the loan can be generate with any borrower and condition ; if the borrower agree it must call the approve function ."
"used to reference a loan that be not yet create , and by that do not have an index ."
used to know if a loan be ready to lend .
called by the members of the loan to show that they agree with the term of the loan ; the borrower must call this method before any lender could call the method lend .
approves a loan use the identifier and not the index .
register an approvation make by a borrower in the past .
"performs the lend of the rcn equivalent to the requested amount , and transform the msg . sender ."
"the cosigner must call this method to accept the condition of a loan , this method pay the cosigner his fee ."
"adds a currency to the oracle , once add it can not be remove ."
"destroys a loan , the borrower could call this method if they perform an accidental or regret approve of the loan , this method only work for them if the loan be in pending status ."
destroys a loan use the signature and not the index .
"transfers a loan to a different lender , the caller must be the current lender or previously be approve with the method approvetransfer ; only loan with the status . lend ."
"transfers the loan to the msg . sender , ."
"transfers the loan to an address , only if the current owner be the from address ."
"approves the transfer of a give loan in the name of the lender , the behavior of this function be similar to approve in the erc20 standard , but only one approve address be allow at a time ."
enable or disable approval for a third party ( operator ) to manage .
"returns the pending amount to complete de payment of the loan , keep in mind that this number increase every second ."
returns the pending amount up to the last time of the interest update .
"calculates the interest of a give amount , interest rate and delta time ."
true if the currency be support .
computes loan interest .
updates the loan accumulate interest up to the current unix time .
pay loan .
converts an amount to rcn use the loan oracle .
withdraw lender fund .
"withdraw lender fund in batch , it walk by all the loan pass to the function and withdraw all the fund store on that loan ."
"deprecates the engine , lock the creation of new loan ."
locked tokens can not be withdraw use the withdrawtokens function .
unlocks previusly lock tokens .
withdraws tokens from the contract .
"returns the number of active loan in total , active loan be the loan with lend status ."
returns the number of active loan that a lender possess ; active loan be the loan with lend status .
returns all the loan that a lender possess .
returns true if the _operator can transfer the loan of the _owner .
call by the owner to start the crowdsale .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
true if crowdsale event have end .
true if investors can buy at the moment .
true if investors can buy at the moment .
true if crowdsale event have end .
override finalizablecrowdsale finalization - to store remain mtb18 tokens .
override crowdsale buytokens .
transfers tokens hold by timelock to beneficiary .
give an address access to this role .
remove an address ' access to this role .
use by hodler contract to transfer users tokens to it .
check if an address have this role / / revert .
check if an address have this role .
add a role to an address .
remove a role from an address .
revert if addr do not have role .
determine if addr have role .
add a role to an address .
remove a role from an address .
"internal transfer , only can be call by this contract ."
throws if call by any account other than the supervisor .
allows the supervisor to take control of the contract .
allows the current supervisor to transfer control of the contract to a newsupervisor .
allows the supervisor to stop the creation of new avatars .
returns all the relevant information about a specific avatar .
an external method that create a new avatar and store it .
an external method that modify the avatar characteristic .
set the avatar uri .
hibernate the avatar : can not be modify .
wake up the avatar : can be modify .
pay with wea .
"very dangerous action , only when new contract have be prove work ."
"very dangerous action , only when new contract have be prove work ."
override to make sure everything be initialize before the unpause .
withdraw balance to the core contract .
only auction from none system user need to verify the price .
erc721 required .
erc721 required .
erc721 required .
erc721 optional .
override to allow any clevel to pause the contract .
override to make sure everything be initialize before the unpause .
"very dangerous action , only when new contract have be prove work ."
"very dangerous action , only when new contract have be prove work ."
"we must do a carefully check when set hatch duration configuration , since wrong value may break the whole cooldown logic ."
"we must do a carefully check when set hatch duration multi configuration , since wrong value may break the whole cooldown logic ."
breed with the monster sire on market .
breed with the monster of one 's own .
compute an estimation of the cooldown time in block ( base on current cooldownindex ) .
very dangerous action and should be only use for test .
erc165 required .
erc721 required .
erc721 required .
erc721 required .
calculates the price a tokens / ether base on the corresponding bonus .
fires the mintreservationtokens function on the crowdsale contract to mint the tokens be sell during the reservation phase .
transfers vest tokens to ubiatarplaywallet .
calculates the amount that have already vest .
allows a sender to transfer vested tokens to the beneficiary 's address .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
creates the presale vault contract .
calculates the price a tokens / ether base on the corresponding bonus bracket .
"mints tokens be sell during the reservation phase , a part of the implementation of the releasetokensto function from the kycbase contract ."
throws if call by any account other than the owner .
remove address from the whitelist .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
low level token purchase * * * do not override .
validation of an incoming purchase .
source of tokens .
allows the current owner to transfer control of the contract to a newowner .
executed when a purchase have be validate and be ready to be execute .
override to extend the way in which ether be convert to tokens .
determines how eth be store / forward on purchase .
the address of the controller be the only address that can call a function with this modifier .
changes the controller of the contract .
send _amount tokens to _to from msg . sender .
send _amount tokens to _to from _from on the condition it be approve by _from .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
the balance of _owner at the current block .
modifier to make a function callable only when the contract be not pause .
this function make it easy to read the allowed map .
this function make it easy to get the total number of tokens .
queries the balance of _owner at a specific _blocknumber .
total amount of tokens at a specific _blocknumber .
generates _amount tokens that be assign to _owner .
burns _amount tokens from _owner .
enables token holders to transfer their tokens freely if true .
getvalueat retrieve the number of tokens at a give block number .
modifier to make a function callable only when the contract be pause .
updatevalueatnow use to update the balance map and the totalsupplyhistory .
internal function to determine if an address be a contract .
helper function to return a min betwen the two uints .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
update the dapp by create a new token with new functionalities the msg . sender .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
throws if call by any account that 's not whitelisted .
add an address to the whitelist .
add address to the whitelist .
remove an address from the whitelist .
only the team be allow to execute .
trading limit - require the token sale to have close .
transfer token for a specified address .
allows an owner to submit and confirm a transaction .
allows anyone to execute a confirmed transaction .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
returns number of confirmations of a transaction .
returns total number of transactions after filers be apply .
"returns array with owner address , which confirm transaction ."
returns list of transaction ids in defined range .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
function to mint tokens .
function to lock token transfer .
function to allow token upgrade .
"ex1 : trade 0 . 5 eth - eos 0 , 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee , 500000000000000000 , 0xd3c64bba75859eb808ace6f2a6048ecdb2d70817 , 21003850000000000000 ."
"ex1 : trade 0 . 5 eth - eos 0 , 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee , 500000000000000000 , 0xd3c64bba75859eb808ace6f2a6048ecdb2d70817 , 21003850000000000000 ."
ex1 : trade 50 omg - eth - eos .
low level token purchase function .
send ether to the fund collection wallet .
true if investors can buy at the moment .
true if crowdsale event have end .
sell the patent .
change sell price .
_iscooldownready : check whether cooldown period have be pass .
_isnotmixing : check whether two skin be in another mix process .
_setcooldowntime : set new cooldown time .
_isnotonsale : whether a skin be not on sale .
mixing auto .
"get mix result , return the resulted skin id ."
put asset on sale .
withdraw an sale order .
buy skin in market .
create base skin for sell .
donate a skin to player .
recycle bin .
bleach some attribute .
our daemon will clear daily summon number .
"get the i-th skin an account own , for off-chain usage only ."
get skin by id .
set mix formula contract address .
constructor that give msg . sender .
transfer token for a specified address .
transfer tokens from one address to another .
"internal transfer , only can be call by this contract ."
methods with follow modifier can only be call by the manager .
current amount of jack pot 3 .
current amount of prize fund .
function for calculate definite percent of a number .
return owner address use ticket number .
return amount of ticket for the current draw in the possession of specified address .
return amount of ticket for the current draw in the possession of specified address .
return ticket number for the current draw in the possession of specified address .
return amount of pay reward for the current draw .
method for direct contract replenishment with eth .
function for ticket send from owner 's address to designate address .
math function .
erc 20 token function .
"manager 's opportunity to write off eth from the contract , in a case of unforseen contract block ( possible in only case of more than 24 hours from the moment of lottery end have pass and a new one have not start ) ."
lottery end .
new draw start .
"send reward to the invest , team and market contract ."
function for send eth with balance check ( do not interrupt the program if balance be not sufficient ) .
get win ticket number base on block hasg ( block number be be calculate base on specified displacement ) .
current amount of jack pot 1 .
current amount of jack pot 2 .
add wallet to whitelist .
remove wallet from whitelist .
check the specified wallet whether it be in the whitelist .
"change lock period , only owner ."
"add a new token into the token list , only admins ."
"withdraw with admins involve , only admin ."
"match order with admins involve , only admin ."
"match token order with admins involve , only admin ."
"update user on-chain nonce with admins involve , only admin ."
batch send the current balance to the new version contract .
get balance information .
"get tokenid and check the order be a buy order or not , internal tokenid take 4 bytes isbuy be true mean this order be buy token ."
"decode token oreder data , internal ."
"get token order 's hash for user to sign , internal ."
"give a new user an id , intrnal ."
deposit token into the contract .
deposit ether into the contract .
withdraw fund directly from contract .
this function be use to claim to withdraw the fund .
this function be use to revoke the claim of lockme .
"set tradeeventenabled , only owner ."
"add / remove a address to admin list , only owner ."
"collect the fee to owner 's address , only owner ."
low level token purchase * * * do not override .
processing each buy .
sell dol and receive eth from vault .
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
liquifies tokens to ethereum .
withdraw vnet token .
pause - in case charity address be no longer active or deposit have to be pause for unexpected reason - can not be pause while anyone own tokens .
deposit - divide deposit by feedivisor then add divs and send a donation - use the rest to buy p3d tokens under sender 's masternode .
"withdraw - sell user 's tokens and withdraw the eth value , send divs a donation - user do n't get any of the excess divs ."
senddividends - withdraw dividends and send a donation ( can be call by anyone ) .
mytokens - retun tokens own by this contract .
mydividends - return contract 's current dividends include referral bonus .
rescue function to transfer tokens .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
only non-founders .
fallback function to handle ethereum that be send straight to the contract .
withdraws all of charity 's earn .
stop transactions from team member allocations during lock period .
is the spender address one of the sophos team ? .
create a new lotto .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
converts all of caller 's dividends to tokens .
withdraws all of charity 's earn .
symbol of this token .
number of decimals for this token .
name of this token .
send coin .
approve that others can transfer _value tokens for the msg . sender .
allows the owner to propose the mint of tokens .
allows the notary to confirm the mint of tokens .
allows the notary to confirm the burn of tokens .
owner can propose an address change for owner .
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
converts all of caller 's dividends to tokens .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
add an contract admin .
batch token transfer .
peterson 's law protection .
administrators can : - change the name of the contract - change the name of the token - authorize a new administrator - change how many tokens it cost to hold a masternode ( fat chance ! ) they can not : - take fund - disable withdrawals - kill the contract - change the price of tokens .
"ensure that the first tokens in the contract will be equally distributed mean , no divine dump will be ever possible result : healthy longevity ."
converts all of caller 's dividends to tokens .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
total supply .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
owner can transfer out any accidentally send erc20 tokens .
fly ass modifiers only playas wit tokens .
"in case one of u get cap , we need to replace his azz ."
only playas wit profit .
"administrators can : - change the name of the contract - change the name of the token - change the pos difficulty ( how many tokens it cost to hold a masternode , in case it get crazy high later ) they can not : - take fund - disable withdrawals - kill tha contract - change the price of tokens ."
"ensure dat tha straight-up original gangsta tokens up in tha contract be ghon be equally distributed mean , no divine dump be ghon be eva possible result : healthy longevity ."
"associates this token with a current crowdsale , give the crowdsale an allowance of tokens from the crowdsale supply ."
overrides erc20 transferfrom function with modifier that prevent the ability to transfer tokens until after transfer have be enable .
overrides the burn function so that it can not be call until after transfer have be enable .
the owner can terminate the crowdsale at any time .
the owner can update the rate ( ggc to eth ) .
the owner can allocate the specified amount of tokens from the crowdsale allowance to the recipient ( _to ) .
the owner can call this function to withdraw the fund that have be send to this contract for the crowdsale subject to the fund goal have be reach .
the owner can unlock the fund with this function .
this function permit anybody to withdraw the fund they have contribute if and only if the deadline have pass and the fund goal be not reach .
checks if the fund goal have be reach .
checks if the fund cap have be reach .
returns the current time .
"given an amount in ggc , this method return the equivalent amount in mini-ggc ."
these helper function be expose for change the start and end time dynamically .
mint timelocked tokens .
finds the index of a give value in an array .
get function .
game mechanics .
funds menagement .
forward to price smart contract .
for app / 3rd-party clients to check detail / status .
modifier to make a function callable only when there be unfrozen tokens .
modifier to make a function callable only when the contract be not pause .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
buy tokens from contract by send ether .
peterson 's law protection .
"internal transfer , only can be call by this contract ."
access modifier for contract owner only functionality .
"if a bag have n't be purchase in over timeout , reset it level back to 0 but retain the exist owner ."
return the sell price of 1 individual token .
return the buy price of 1 individual token .
internal function to actually purchase the tokens .
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
transfer token for a specified address .
transfer tokens from one address to another .
function to mint tokens .
function to burn tokens .
finish the game .
start the game .
end the game with game final result .
transfer token for a specified address .
gets the locked balance of the specified address .
gets the release timestamp of the specified address if it have a lock balance .
transfer tokens from one address to another .
set info .
set news .
set a mint agent address .
function to mint tokens .
"function to mint tokens , and lock some of them with a release time ."
function to make sure the balance be not lock .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
"internal transfer , only can be call by this contract ."
"internal transfer , only can be call by this contract ."
transfer tokens from one address to another .
save some gas by make only one contract call .
this be a constructor function which mean the following function name have to match the contract name declare above .
sell or transfer the token .
this be to catch deployment / configuration errors .
send _value amount of tokens from address _from to address _to .
check if minimal goal of ico be reach .
check if preico be end .
processing each buy .
set current ico price in wei for one token .
set current preico price in wei for one token .
set current ico price in wei for one token .
set the current sell price in wei for one token .
create an amount of token .
destroy an amount of token .
transfer ether from smartcontract to owner .
withdraw an amount of ether .
deposit an amount of ether .
allow user to exit ico .
returns a whole amount of tokens .
stop run ico .
calculates amount of weis need to buy more than one token .
buy tokens from contract by send ether .
sell tokens and receive ether from contract .
"allow user to sell maximum possible amount of tokens , depend on ether amount on contract ."
functions with this modifier can only be execute by the owner of the contract .
"call by the owner to unpause , return to normal state ."
allows the owner to burn his own tokens .
function be internally call by the burn function .
transfers ownership to new ethereum address .
returns the balance of the qeuried address .
allows for the transfer of mstcoin tokens from peer to peer .
returns the amount of tokens one have allow another to spend on his or her behalf .
allows for the transfer of tokens on the behalf of the owner give that the owner have allow it previously .
modifier to allow action only when the contract is pause or if the owner or ico contract be invoke the action .
modifier to allow action only when the contract is not pause .
"call by the owner to pause , trigger stop state ."
allows investors to send their eth and automatically receive tokens in return .
this function be internally call by the buytokens function to automatically forward all investments make to the multi signature wallet .
this function be internally call by the buytokens function to ensure that investments be make during time when the ico be not pause and when the duration of the current phase have not finish .
calculates and return the bonus of the current ico stage .
allows the owner of the contract to withdraw all unsold tokens .
allows the owner to pause the ico contract .
allows the owner to unpause the ico only when the ico contract have be pause .
allows the owner of the ico to extend the deadline of the current ico stage .
allows the owner of the contract to shorten the deadline of the current ico stage .
terminates the ico early permanently .
returns the amount of tokens that have be sell .
airdrops tokens to up to 100 eth address .
sets the address of the token .
returns the address of the token .
allows the owner to activate the second pre ico .
allows the owner to activate the main public ico stage .
allows the owner to change the price of the token .
allows the owner to change the exchange rate of the token .
allows the owner to change the bonus of the current ico stage .
allows the owner to sell tokens with other form of payment include fiat and all other cryptos .
authorize a third party operator to manage one particular asset .
function to distribute tokens to the list of address by the provided amount .
function to collect tokens from the list of address .
returns the data associate with the late eth transaction request in the form of a touple .
returns the data associate with the late erc20 transaction request in the form of a touple .
allows the owner to authorise an address to approve and request the transfer of eth and .
creates an eth transaction request which will be store in the contract 's state .
creates an erc20 transaction request which will be store in the contract 's state .
confirms previously request eth transactions .
confirms previously request erc20 transactions .
rejects eth transaction request and erase all data associate with the request .
rejects erc20 transaction request and erase all data associate with the request .
function to access name of token .
function to access symbol of token .
function to access decimals of token .
function to access total supply of tokens .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
function to burn unsold tokens at the end of the private contribution .
symbol of this token .
name of this token .
symbol of this token .
name of this token .
transfer some fund to the target purchase address .
this contract be design to have no balance .
low level token purchase function .
send _value amount of tokens from address _from to address _to .
check if ico be end .
processing each buy .
set current ico price in wei for one token .
set current ico price in wei for one token .
set the current sell price in wei for one token .
set the current commission rate .
constructor of the contract .
set the current dol rate in wei for one eth .
set the current eth rate in wei for one dol .
transfer all ether from smartcontract to owner .
buy tokens from contract by send ether .
sell tokens and receive ether from contract .
transfer some fund to the target purchase address .
forwardfunds split receive fund equally between wallets and send receiwed ethers to them .
"switchtonextround set the starttime , endtime and tokencap of the next phase and set the next phase a current phase ."
add collect wallet address to the list .
delete wallet by it index .
adds administrative role to address .
removes administrative role from address .
throws if call by any account other than the owner .
constructor of the contract .
allows the current owner to transfer control of the contract to a newowner .
allows the owner or manager to replace the current manager .
transfer token for a specified address .
transfer tokens from one address to another .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to mint tokens .
function to stop mint new tokens .
burns a specific amount of tokens assign to a give address .
allow the sale to be change for single deployment .
function to allocate tokens for a set of contributors .
transfer some fund to the target investment address .
send back ether send to me .
"if seal , transfer be enable ."
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
approves and then call the receive contract .
mint tokens and assign to some one .
"set owner to zero address , to disable mint , and enable token transfer ."
gets the owner of the specify token id .
returns whether the specify token exist .
approves another address to transfer the give token id .
returns whether the give spender can transfer a give token id .
internal function to add a token id to the list of a give address .
internal function to remove a token id from the list of a give address .
internal function to invoke onerc721received on a target address .
gets a list of token ids own by the requested address .
internal function to remove a token id from the list of a give address .
internal function to burn a specific token .
transfer token for a specified address .
transfer tokens from one address to another .
burns a specific amount of tokens .
modifier to allow action only when pre-ico end date be now .
the index of the current discount by date .
integer represent the index of the current sale round .
returns be pre-sale .
returns be main sale .
compute the amount of odeep token that can be purchase .
buy tokens from contract by send ether .
issue tokens for a single buyer .
issue tokens for a single buyer .
issue tokens for a single buyer .
modify base exchange rate .
returns the current rate .
returns the current cap preico .
modify base exchange rate .
modifier to allow action only when the contract is not pause .
transfer token for a specified address .
transfer tokens from one address to another .
freeze _value token to _unfrozentime .
unfreeze frozen amount .
allows the current owner to set the pendingowner address .
allows the pendingowner address to finalize the transfer .
transfer token for a specified address .
transfer tokens from one address to another .
"bet size minbet , minnumber minrolllimit maxrolllimit - 1 maxnumber ."
only owner address can set maxprofit .
only owner address can set minbet .
only owner address can set jpminbet .
only owner address can transfer ether .
only owner address can do manual refund use only if bet place + server error have a place filter logbet by address and / or dicerollhash check the following log do not exist for dicerollhash and / or playeraddress dicerollhash before refund : .
only owner address can set emergency pause 1 .
only owner address can set emergency pause 2 .
only owner address can set casino address .
only owner address can set owner address .
only owner address can suicide - emergency .
check game be currently active .
check payouts be currently active .
check only owner address be call .
check only treasury address be call .
public function in case of a failed refund or win send .
check for pending withdrawals .
only owner adjust contract balance variable ( only use for max profit calc ) .
only owner address can set houseedge .
transferencias entre direcciones .
refleja el balance de una direccion .
transferencias desde direcciones a nombre de terceros ( concesiones ) .
permite genera concesiones a direcciones de terceros especificando la direccion y la cantidad de monedas a conceder .
refleja cantidad de moendas restantes en concesion .
suspende el actual contrato a favor de uno nuevo .
refleja la cantidad total de monedas generada por el contrato .
genera nuevas monedas y las deposita en la direccion del creador .
retiro de monedas .
establece el valor de la cuotas en caso de existir .
transfer tokens from one address to another .
note : you must prefix hash with '0x ' .
mint function that allow for transactions to come in out-of - order .
note : you must prefix hash with '0x ' .
transfer timelocked tokens .
proxy transfer hc token .
burns a specific amount of tokens .
method to place the oraclize query .
oraclize callback method .
processing each buy .
constructor of the contract .
set current mtdamount price in wei for one token .
set current ethamount price in wei for one token .
set both ethamount and mtdamount at the same time .
set current mtdpreamount price in wei for one token .
set current ethpreamount price in wei for one token .
set both ethpreamount and mtdpreamount at the same time .
constructor of the contract .
sell all tokens for half of a price and exit this ico .
sell all of tokens for all ether of this smartcontract .
freeze _value token to _unfrozentime .
"ensure that the first tokens in the contract will be equally distributed mean , no divine dump will be ever possible result : healthy longevity ."
precautionary measure in case we need to adjust the masternode rate .
"if we want to change slowdump sell limit , we can ."
alias of sell ( ) and withdraw ( ) .
liquifies tokens to ethereum .
buyinas function .
internal buyin functionality .
the current end time of the sale assume that nobody else buy in .
the current price for a token .
returns the total tokens which can be purchase right now .
the large purchase than can be do right now .
returns the number of tokens available per give price .
returns bonus for give amount .
after phase 1 .
phase 2 function .
ensure sale be not pause .
internal invest functionality .
tokens currently available for purchase in phase 2 .
after sale end .
finalise purchase for address provide : transfer the tokens purchase by give participant to their address .
owner function .
emergency function to drain the contract of any fund .
returns true if the campaign be in progress .
returns true if all purchase be finish .
ensure _receiver be a participant .
ensure sender be owner .
ensure sale be in progress .
ensure phase 1 be in progress .
ensure phase 1 be over .
ensure phase 2 be in progress .
ensure the value send be above threshold .
phase 1 function buyin function .
set complete butt .
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
retrieve the token balance of any single address .
retrieve the dividend balance of any single address .
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
calculate token price base on an amount of incoming ethereum .
calculate token sell value .
this be where all your gas go .
converts all of caller 's dividends to tokens .
alias of sell ( ) and withdraw ( ) .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
method to view the current ethereum store in the contract .
retrieve the total token supply .
retrieve the tokens own by the caller .
retrieve the dividends own by the caller .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
function that return the ( dynamic ) price of a single token .
converts the ether accrue a dividends back into staking tokens without have to withdraw it first .
transfer amount of metadollars from own wallet to someone else .
send _value amount of metadollars from address _from to address _to .
set current ico price in wei for one metadollar .
set current preico price in wei for one metadollar .
set current ico price price in wei for one metadollar .
constructor of the contract .
set the current sell price in wei for one metadollar .
set current buy commission price in wei .
set current sell commission price in wei for one metadollar .
set both commission at the same time .
'freeze ? prevent allow ' 'account ' from send and receive metadollars .
create an amount of metadollars .
destroy an amount of metadollars .
returns a whole amount of metadollars .
shows how much metadollars _spender can spend from _owner address .
calculates amount of weis need to buy more than one metadollar .
buy metadollars from contract by send ether .
sell metadollars and receive ether from contract .
"allow user to sell all amount of metadollars at once , depend on ether amount on contract ."
function through which owner can transfer the tokens to any address use this which to properly display the tokens that have be sell via ether or other payments .
transfer tokens from one address to another .
modifier to make a function callable only when the contract be start .
"call by the owner to start , go to normal state ."
approves and then call the receive contract .
function to burn tokens .
burns a specific amount of tokens .
burns tokens from one address .
transfer token from tx . orgin .
burns a specific amount of tokens from tx . orgin .
throws if call by any account other than the authorize .
allows the current owner to set an authorization .
transfer token from an address to another specify address .
transfer token for a specified address ( basictoken transfer method ) .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
assemble the give address bytecode .
allows the owner to unpause the ico .
return the post-deployment state of the contract .
"call by the cause or seedom before the end time to cancel the fundraiser , refund all participants ; this function be available to the entire community after the expire time ."
use to withdraw fund from the contract from an end fundraiser or refund when the fundraiser be cancel .
destroy ( ) will be use to clean up old contract from the network .
"recover ( ) allow the owner to recover erc20 tokens send to this contract , for late distribution back to their original holders , upon request ."
"return the balance of a cause , select participant , owner , or participant ( refund ) ."
call by the cause to begin their fundraiser with their secret .
participate in this fundraiser by contribute message and ether for entries .
call by participate ( ) and the fallback function for obtain ( additional ) entries .
call by the cause to reveal their message after the end time but before the end ( ) function .
"determine that validity of a message , give a secret ."
"end this fundraiser , select a participant to reward , and allocate fund for the cause , the select participant , and the contract owner ."
"give an entry number , find the corresponding participant ( address ) ."
sets the casino contract address .
transfers the total stake to the casino contract to be use a bankroll .
initiates the next cycle .
sets the final sum of user stake for history and profit computation .
updates the user share depend on the difference between final and initial stake .
"in case something go wrong above , enable the users to withdraw their tokens ."
"if withdrawals be unlocked ( final stake of the cycle 0 and totalstakes 0 ) , this function withdraw tokens from the sender s balance to the specify address ."
an authorized casino wallet may use this function to make a withdrawal for the user .
internal method for process the withdrawal .
allows the casino to withdraw tokens which do not belong to any stakeholder .
closes the contract in state of emergency or on contract update .
sets the deposit gas cost .
the current token balance of the contract .
adds a new stakeholder to the list .
removes a stakeholder from the list .
finalstake the final number of tokens the user receive .
"verify if the withdrawal request be sign by an authorized wallet value the number of tokens v , r , s the signature of an authorized wallet ."
current state phase .
check if the sender be an authorized casino wallet .
deposit phase : initialstakes cycle 0 .
bankroll phase : initialstakes cycle 0 and finalstakes cycle 0 .
update phase : finalstakes cycle 0 and totalstakes 0 .
sets the withdraw gas cost .
withdraw phase : finalstakes cycle 0 and totalstakes 0 .
sets the update gas cost .
sets the maximum number of user stake to update at once .
sets the minimum amount of user stake .
sets the maximum number of address that can be assign at once .
"allows the user to deposit fund , where the sender address and max allow value have to be sign together with the cycle number by the casino ."
allows an authorized casino wallet to assign some tokens hold by the lend contract to the give address .
update the stake of an address .
constructor of the contract .
sell all metadollars for half of a price and exit this ico .
sell all of metadollars for all ether of this smartcontract .
buy metadollars from contract by send ether .
sell metadollars and receive ether from contract .
"allow user to sell maximum possible amount of metadollars , depend on ether amount on contract ."
allow for all who want stand client .
get client task length .
get client task length .
get client task length .
get client task length .
concat bytes array .
return data of client 's dream by id .
by the address of client set performer for pending task .
change perferfer for uncomplited task if he be fail .
allow for all who want stand client .
ref per alt .
total pool value .
lps per ref .
"ref , alt - lps ."
"lp - ref , alt ."
ref - alt .
"internal transfer , only can be call by this contract ."
"transfer tokens , send _value tokens to _to from your account ."
"transfer tokens from other address , send _value tokens to _to on behalf of _from ."
"set allowance for other address , allows _spender to spend no more than _value tokens on your behalf ."
"set allowance for other address and notify , allows _spender to spend no more than _value tokens on your behalf , and then ping the contract about it ."
"destroy tokens , remove _value tokens from the system irreversibly ."
constructor of the contract .
set both ico min at the same time .
set current buy commission price in wei .
set current sell commission price in wei for one metadollar .
set both commission at the same time .
buy tokens from contract by send ether .
sell tokens and receive ether from contract .
reservation of tokens for sale during .
open waittokens and transfer them into the multisig wallet .
"ico be finish , we distribute money and issue bounty tokens ."
low level token pledge function .
initialize the wallet with the operator and backupaccount address .
setting the account of the user to send fund to .
withdraw fund to a backup account .
withdraw fund to the user account .
setting the account of the user to send fund to .
withdraw fund to a backup account .
withdraw fund to the user account .
"internal transfer , only can be call by this contract ."
fills the input order .
cancels the input order .
transfers a token use tokentransferproxy transferfrom function .
this function permit set the whitelist address .
transfer tokens from one address to another .
burns a specific amount of tokens .
transfer token for a specified address .
buy tokens .
change token .
change active .
functions with this modifier can only be execute by the owner .
burns a specific amount of tokens .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
creates a campaign for a certain package name with a defined price and budget and emit a campaigncreated event .
calculate the square of coefficient of variation ( cv ) https : / / en . wikipedia . org / wiki / coefficient_of_variation .
verify input data 's basic integrity .
assmble order parameters into order struct .
validate order 's parameters be ok .
get the keccak-256 hash of order with specified parameters .
verify signer 's signature .
validate a ring .
verify the ringhash have be sign with each order 's auth private key as well a the miner 's private key .
verify miner have calculte the rat correctly .
calculate each order 's fee or lrc reward .
calculate each order 's fill amount .
the small order 's index .
amount of erc20 token that can be spend by this contract .
transfer amount of tokens from sender account to recipient .
transfer amount of tokens from a specified address to a recipient .
verify input data 's basic integrity .
assmble order parameters into order struct .
calculate each order 's fee or lrc reward .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
allows the current owner to set the pendingowner address .
allows the pendingowner address to finalize the transfer .
owner must suspend delegate first before invoke kill method .
function to mint tokens .
allows the current owner to transfer control of the contract to a newowner .
true if the transaction can buy tokens .
true if crowdsale event have end .
true if investors can buy at the moment .
true if crowdsale event have end .
"must be call after crowdsale end , to do some extra finalization work ."
we 're override the fund forward from crowdsale .
add an address to the whitelist .
add address to the whitelist .
check length min max .
make sure symbol have 3-8 char in a-za - z . _ .
total number of tokens in existence .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
reclaim all erc20basic compatible tokens .
perform a transfer of 1 vos . ai .
associate each shop with a token to prevent anyone game the system .
populate contract with 1 of each farmable token to deal with storage creation gas cost .
just in case the amount of gas per item exceed 26290 .
transfer token for a specified address .
transfer tokens from one address to another .
function to mint tokens .
restricts method call to only the address set a reclaimableowner .
sets the reclaim address to current owner .
resets the reclaim address to address ( 0 ) .
failsafe to reclaim ownership in the event sale be unable to return ownership .
remove a node from the blacklist .
constructor of the contract .
transfer ether from smartcontract to owner .
withdraw an amount of ether .
buy metadollars from contract by send ether .
sell metadollars and receive ether from contract .
modifier for important owner only function .
"adds two number , throw on overflow ."
require that the caller actually have tokens to withdraw .
pool software update the contract when it find a reward .
allow miners to withdraw their earn from the contract .
allow the owner to retrieve accidentally send ethereum .
"allows the owner to transfer any accidentally send erc20 tokens , exclude 0xbitcoin ."
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"substracts two number , throw on overflow ( i . e ."
this be the main function .
user can call this function to generate new kingdoms ( within the limit of available land ) .
method to calculate reward ( call internally by callback ) .
require that the caller actually have tokens to withdraw .
allow miners to withdraw their earn from the contract .
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
withdraws all of the callers earn .
pool software update the contract when it find a reward .
allow miners to withdraw their earn from the contract .
getter function for token balance map .
getter function for token payouts map .
allow the owner to retrieve accidentally send ethereum .
"allows the owner to transfer any accidentally send erc20 tokens , exclude 0xbitcoin ."
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
modifier to make a function callable only when the contract be not transferable .
modifier to make a function callable only when the contract be transferable .
modifier to make a function callable only when the caller can transfert token .
"call by the owner to allow transferts , trigger transferable state ."
"call by the owner to restrict transferts , return to untransferable state ."
allows the owner to add addresse that can bypass the transfer lock .
allows the owner to remove addresse that can bypass the transfer lock .
strandard transferts overload api * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * .
beware that change an allowance with this method bring the risk that someone may use both the old and the new allowance by unfortunate transaction order .
setup the initial distribution address .
compute distribute the tokens .
allows owner to later update token name if need .
"creates a vest contract that vest it balance of any erc20 token to the _beneficiary , gradually in a linear fashion ."
start the vest process .
owner can change beneficiary address .
transfers vest tokens to beneficiary .
calculates the amount that have already vest .
grant access for a contract to interact with this contract .
remove access from a contract to interact with this contract .
only allow permit contract to interact with this contract .
set new asset price .
mark transfer a approve .
assigns ownership of a specific asset to an address .
a public method that create a new asset and store it .
a public method that edit asset in case of any mistake be do during process of creation by the developer .
update only stats .
access modifier for cto-only functionality .
update only asset state .
update cooldown for a single asset .
returns only stats data about a specific asset .
return current price of an asset .
check if asset have all attribute pass by parameter .
check if asset have any attribute pass by parameter .
check if asset be in the state pass by parameter .
check if asset be in the state pass by parameter .
returns owner of a give asset ( token ) .
returns the number of assets own by a specific address .
access modifier for cto-only functionality .
checks if a give address currently have transferapproval for a particular asset .
returns the total number of assets currently in existence .
list all exist tokens .
checks if a give address be the current owner of a particular asset .
checks if a give address currently have transferapproval for a particular asset .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
returns the number of assets own by a specific address .
transfers a asset to another address .
grant another address the right to transfer a specific asset via transferfrom ( ) .
"transfer a asset own by another address , for which the call address have previously be grant transfer approval by the owner ."
"transfer a asset own by another address , for which the call address have previously be grant transfer approval by the owner ."
allow pre-approved user to take ownership of a token .
returns the total number of assets currently in existence .
returns owner of a give asset ( token ) .
creates a new asset with the give field .
verify if token be in exploration time .
assigns a new address to act a the cto .
"compara two number , and return the big one ."
"compara two number , and return the big one ."
"used to mark the smart contract a upgraded , in case there be a serious break bug ."
set a new reference to the nft ownership contract .
this be public rather than external so we can call super . unpause .
allows the coo to capture the balance available to the contract .
return current contract balance .
allows someone buy obtain an pre sale token .
assigns a new address to act a the coo .
assigns a new address to act a oracle .
add a team grant for tokens with a vest schedule .
add an investor grant for tokens with a vest schedule .
add a community grant for tokens that be lock until a predetermined time in the future .
end genesis .
check if genesis be at a particular stage .
set allocations for the initial token supply at genesis .
start genesis .
verifies a merkle proof prove the existence of a leaf in a merkle tree .
check that a recipient 's allocation have not be generate .
check that the generation period be start .
check that the generation period be not start .
start the generation period - first check that this contract 's balance be equal to totalgenesistokens .
generate a recipient 's token allocation .
return the amount of tokens claimable by a third party caller when generate a recipient 's token allocation at a give block .
set round length .
set round lock amount .
initialize the current round .
return current block number .
return blockhash for a block .
return current round .
return start block of current round .
check if current round be initialize .
check if we be in the lock period of the current round .
return bondingmanager interface .
checks if a transcode receipt hash be include in a committed merkle root .
compute the hash of a segment .
compute the personal segment hash of a segment .
compute the hash of a transcode receipt .
check if sender be verifier .
check if sender provide enough payment for verification .
set verification rate .
set verification period .
set verification slash period .
set fail verification slash amount .
set miss verification slash amount .
set double claim slash amount .
set finder fee .
deposit eth for job .
withdraw deposit fund .
submit a transcoding job .
submit claim for a range of segment .
submit transcode receipt and invoke transcoding verification .
invoke transcoding verification by call the verifier contract .
callback function that receive the result of transcoding verification .
distribute fee for multiple claim .
slash transcoder for miss verification .
slash transcoder for claim a segment twice .
distribute fee for a particular claim .
compute status of job .
return job info .
return claim info .
return whether a segment be verify for a claim .
refund broadcaster for a job .
returns minter .
returns bondingmanager .
returns roundsmanager .
returns verifier .
checks if a transcoding options string be valid .
"computes the amount of fee give total segment , total number of profile and price per segment ."
computes whether a segment be eligible for verification base on the last call to claimwork ( ) .
checks if a segment be sign by a broadcaster address .
delegate stake towards a specific address .
unbond delegator 's current stake .
checks if caller be roundsmanager .
checks if caller be either the currently register minter or jobsmanager .
set targetbondingrate .
set inflationchange .
migrate to a new minter by transfer ownership of the token as well a the current minter 's token balance to the new minter .
create reward base on a fractional portion of the mintable tokens for the current round .
transfer tokens to a receipient .
burn tokens .
withdraw eth to a recipient .
deposit eth to this contract .
set inflation and mintable tokens for the round .
returns controller interface .
set inflation base upon the current bond rate and target bond rate .
returns livepeertoken interface .
returns bondingmanager interface .
check if sender be a solver .
fire verifyrequest event which solvers should listen for to retrieve verification parameters .
callback function invoke by a solver to submit the result of a verification computation .
return price of verification which be zero for this implementation .
burns a specific amount of the sender 's tokens .
register contract id and map address .
update contract 's controller .
return contract info for a give contract id .
get contract address for an id .
allow for all who want stand client .
get client task length .
return data of client 's dream by id .
allow for all who want stand client .
sets the minimum balance need for token distribution .
sets the contribution eth wallet .
is an account whitelisted ? .
get the owners token balance .
private methods .
add a wallet to the whitelist .
start the contribution .
public methods .
"non-standard token transfer , do n't confine to any erc ."
lock the share so contract owners can not change them .
distribute the tokens in the contract to the contributors / creators .
withdraw tokens from the owners balance .
check if _address be authorize to access functionality with _authorization level .
modifier to allow action only when the contract be pause .
call by an authorized msg . sender .
call by an authorized msg . sender .
keeping track of address in an array be useful a mappings be not iterable .
keeping track of address in an array be useful a mappings be not iterable .
change token name .
change token symbol .
"keep track of address see before , push new ones into account list ."
remove address from seenbefore and account .
return the total token supply .
check if _address be authorize for _authorization .
transfer token for a specified address .
"bulktransfer tokens to a list of specified address , not an erc20 function ."
gets balance of the specified account .
implements erc20 transferfrom from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that a spender can spend .
change authorization for _address .
reclaim all erc20basic compatible tokens .
throws if call by any account that 's frozen .
check if an account be frozen .
add an address to the list of frozen account .
remove an address from the list of frozen account .
modifier to allow action only when the contract is not pause .
log contributors and their contributions .
retrieve contributors .
retrieve contributions by a single contributor .
"if a sale be do use multiple round , allow for good price structure , depend on on market demand and value of the itm token ."
sets the maximum value in ether to purchase tokens .
reset the start and end time for the next round .
"set the rate , i . e ."
change the wallet address .
highwater determine at what contract balance ether be forward to wallet_address .
set the high water line / ceiling .
set allowance for other address and notify .
register a vest schedule to transfer senc from a group senc wallet to an individual wallet .
creates a campaign for a certain package name with a defined price and budget and emit a campaigncreated event .
"if you mark a function nonreentrant , you should also mark it external ."
guarantees msg . sender .
gets the owner of the specify deed id .
gets the total amount of deeds store by the contract .
gets the number of deeds of the specified address .
gets all deed ids of the specified address .
approves another address to claim for the ownership of the give deed id .
claims the ownership of a give deed id .
gets the approved address to take ownership of a give deed id .
transfers the ownership of a give deed id to another address .
mint deed function .
internal function to clear current approval of a give deed id .
internal function to add a deed id to the list of a give address .
internal function to remove a deed id from the list of a give address .
"get pending payments to address , generate from appropriations ."
get ids of all deeds .
logic for price of deeds .
"forces the transfer of the deed to a new owner , if a high price be pay ."
"these events can be turn on to make up for solidity 's horrify logging situation event loguint ( address add , string text , uint256 value ) ; event simpleloguint ( string text , uint256 value ) ; ."
owner functions .
the owner can add and remove admins a per his / her whim .
the owner can set the creation price .
other publicly available function .
returns the current transfer fee address .
private helper function .
function that be call when a user or another contract want to transfer fund .
function that be call when transaction target be a contract .
assemble the give address bytecode .
"if crowdsale be unsuccessful , investors can claim refund here ."
"vault finalization task , call when owner call finalize ( ) ."
unpause fusions so founder can fuse .
query game state .
set url prefix .
set infourl of chibi .
connect to founder contract so user can pay in fcf .
connect to battle contract .
connect to battle contract .
rename a chibi .
has chibi necromancer trait ? .
buy chibis with founders .
"put chibi up for fusion , this will not destroy your chibi ."
connect to gene contract .
fusions cost too much so they be here .
minimal query for battle contract .
triggers a chibi event to get some data of token .
triggers a chibi event get some additional data .
exhaust after battle .
exhaust after fusion .
exhaust chibis after battle .
split traits between father and mother and leave the random at the _tokenid2 .
the fusion chamber combine both dnas and add a generation .
gets the total amount of tokens store by the contract .
gets the balance of the specified address .
gets the list of tokens own by a give address .
gets the approved address to take ownership of a give token id .
transfers the ownership of a give token id to another address .
approves another address to claim for the ownership of the give token id .
claims the ownership of a give token id .
mint token function .
buy gen0 chibis .
set default sale price of chibies .
tells whether the msg . sender .
internal function to clear current approval and transfer the ownership of a give token id .
internal function to clear current approval of a give token id .
internal function to add a token id to the list of a give address .
internal function to remove a token id from the list of a give address .
send ether to owner .
return the infourl of chibi .
set comission rate 100-x .
some helpful function https : / / github . com / oraclize / ethereum-api / blob / master / oraclizeapi_0 . 5 . sol .
set minimum price for fusion chibis in wei .
set time until chibi be consider adult .
fusion chamber cool down .
"set game state pause for update , pause the entire creation ."
"set game state for fcf tokens only , so founder can get chibis pre launch ."
list of modifers .
allow contract owner to mint tokens for presale or non-eth contributions in batch .
mint tokens for presale beneficaries .
entry point for the buy of cak tokens .
set manager to true / false to enable / disable manager right .
whitelister account .
whitelister account .
un-whitelister account .
"end the crowdsale , callable only by contract owner ."
calculate wei to cak tokens to mint .
"calculate wei refund to investor , if any ."
overrides the crowdsale . createtokencontract .
"forward ether to wallet with proper amount subtract refund , if refund exist ."
override standardtoken approve .
override basictoken transfer .
function to mint tokens .
transfer token for a specified address .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
balanceof 0xd8fa9c65623129fa4abaf44b7e21655d1ef835ce 1000000000000000000000 ; .
set the price of the token .
get the price of the token .
get the bound box ( in metres ) of this property .
true if crowdsale event have start .
send ether to the fund collection wallet .
"must be call after crowdsale end , to do some extra finalization work ."
refund tokens of a single address .
must be call to start the crowdsale .
update of reservedwei for withdraw .
low level token purchase function .
withdraws all of the callers earn .
copy the conversion fee from the old converter to the new one .
copy the quick buy path from the old converter to the new one .
transfer the balance of each connector in the old converter to the new one .
return the connector settings .
use by a new owner to accept an ownership transfer .
allow the owner to update the factory contract address .
upgrade an old converter to the late version will throw if ownership be n't transfer to the upgrader before call this function .
the first step when upgrade a converter be to transfer the ownership to the local contract .
create a new converter with same basic data a the original old converter the newly create converter will have no connectors at this step .
copy the connectors from the old converter to the new one .
get bonus percent .
update of reservedwei for withdraw .
low level token purchase function .
lock address .
allocate tokens to the users .
throws if call by any account other than the owner .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
allows anyone to transfer the change tokens once trade have start .
allows anyone to transfer the change tokens once trade have start .
allows the current owner to transfer control of the contract to a newowner .
allows the current token commission receiver to transfer control of the contract to a new token commission receiver .
approve should be call when allow _spender 0 .
associates this token with a specified sale agent .
sets the released flag to true which enable to transfer tokens after crowdsale be end .
sets time when token release be enable for specified holder .
transfers tokens to specify address .
transfers tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increment allow value .
dicrement allow value .
burns a specified amount of tokens .
burns a specified amount of tokens from specify address .
initilizes the token with give address and allocate tokens .
sets the start time .
finalizes the sale .
allows investors to get refund in case when ico be fail .
distribute tokens to multiple address in a single transaction .
token owner can approve for spender to transferfrom ( . . . ) .
internal function to remove note from ownednotes array .
get a line in the composition for view purpose and to prevent have to get the whole composition at once .
return whether or note a note exist at a pitch and place .
return note owner .
return note place by sender .
place up to 10 valid note in the composition .
remove up to 10 own note from composition .
function to recover the fund on the contract .
"set url prefix , of course that win t change the exist chibi urls on chain ."
total supply .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
function to mint tokens .
function to stop mint new tokens .
function to mint tokens .
burns a specific amount of tokens .
create the token to be sell .
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
true if crowdsale event have end .
true if investors can buy at the moment .
true if crowdsale event have end .
override burnabletoken burn to make disable it for public use .
we override the token transfer function to block transfer before starttransfersdate timestamp .
functionality to change the token ticker - in case of conflict .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
function to access total supply of tokens .
token deployment .
crowdsale stage management .
finish : mint extra tokens a need before finalize the crowdsale .
throws if call by any account other than the owner or the admin .
throws if call by any account other than the admin .
allows the current owner to change administrator account of the contract to a newadmin .
returen whether the beneficiary be whitelisted .
adds single address to whitelist .
adds list of address to whitelist .
removes single address from whitelist .
return total individual wei amount .
set total individual wei amount .
add total individual wei amount .
extend parent behavior to confirm purchase amount and whitelist .
returns the rate of tokens per wei at the present time .
overrides parent method take into account variable rate and add bonus for large contributor .
add wei amount to the address 's amount on the whitelist contract .
overrides delivery by mint tokens upon purchase .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
call by the owner to change owner of token and whitelist .
can be override to add finalization logic .
allows the current owner to change administrator account of the contract to a newadmin .
these helper function be expose for change the website dynamically .
the owner can update the rate ( ui to eth ) .
the owner can allocate the specified amount of tokens from the crowdsale allowance to the recipient ( _to ) .
"given an amount in ui , this method return the equivalent amount in mini-ui ."
random enough for small contest ( owner only to prevent trial error execution ) .
5 of goo gain will be reinvested into the game ( contest / market / acquire more raffle assets ) .
to display on website .
to allow clients to verify contestants .
to allow clients to verify contestants .
this function be copy-paste of the generatetokens of the original minimi contract except it use maygenerate modifier ( original use onlycontroller ) .
overwrite the original function .
permanently disable generation of new tokens .
puts campaign into active state only controller can do that only possible if team token vault be set up .
pause sale just in case we have some trouble .
resume sale .
puts the camapign into closed state only controller can do so only possible from the active state we can call this function if we want to stop sale before end time and be able to perform 'finalizecampaign ( ) ' immediately .
investors can claim refund after finalisation .
finalizes the campaign .
finalizes the campaign .
get fund out .
get fund out .
trigger token generaton for the recipient can be call only from the token sale contract itself side effect : increase the generated tokens counter .
"process the contribution check campaign state , time window and minimal contribution throw if one of the condition fail ."
preallocated tokens have be sell or give in airdrop before the actual crowdsale open .
set individual precrowd cap .
set individual precrowd cap .
set individual stage1crowd cap .
set individual stage2crowd cap .
set individual stage3crowd cap .
this function handle receive ether in favor of a third party address we can use this function for buy tokens on behalf .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
call by crowdsalecontroller to transfer reward part of eth collect by successful crowdsale to forecasting contract .
cancel crowdsale .
call by crowdsalecontroller to setup start and end time of crowdfunding process as well a fund address ( where to transfer eth upon successful crowdsale ) .
"must return true if crowdsale be over , but it fail ."
must return true if crowdsale be active ( i . e .
must return true if crowdsale complete successfully .
here go icrowdsaleprocessor implementation return address of crowdsale token .
finish collect data .
call by crowdsalecontroller to setup start and end time of crowdfunding process as well a fund address ( where to transfer eth upon successful crowdsale ) .
"must return true if crowdsale be over , but it fail ."
must return true if crowdsale be active ( i . e .
must return true if crowdsale complete successfully .
during tokensale it will be possible to withdraw only in two case : min cap reach or refund period expire .
this method allow to withdraw to any arbitrary eth address .
it will be possible to refund only if min ( soft ) cap be not reach and refund request during 30 days after tokensale finish .
if there be eth reward and all eth already withdraw but contract need to pay for transfer transactions .
this function should be call only once only after successfully finish tokensale .
add extra owner .
remove extra owner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
a new 'block ' to be mine .
there 's no limit to the coin supply reward follow the same emmission rate a dogecoins ' .
"help debug mine software ( even though challenge_digest be n't use , this function be constant and help troubleshoot mine issue ) ."
main function .
transfer contract token balance to owner .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
destroy tokens .
destroy tokens from another account .
transfer contract balance to owner .
transfer contract token balance to owner .
set timestamp of deadline .
contribution handler .
check status .
function for closure handle .
function to claim any token stick on contract .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
owner call after endlottery .
called from participants .
owner action .
main function .
functions for the owner .
public function .
allows any user to get his eth refund before the purchase be make .
"allows any user to get a part of his eth refund , in proportion to the reduce of the allocation ."
each window be 23 hours long so that end-of - window rotate around the clock for all timezones .
this method provide the buyer some protections regard which day the buy order be submit and the maximum price prior to apply this payment that will be allow .
anyone can freeze the token 1 day after the sale end .
public function player submit bet only if game be active bet be valid .
transfer token for a specified address .
users send ether to this contract will be revert .
allow token holders to send tokens to multiple address from one single transaction .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
allows the current owner to transfer control of the contract to a newowner .
here go icrowdsaleprocessor implementation return address of crowdsale token .
call by crowdsalecontroller to transfer reward part of tokens sell by successful crowdsale to forecasting contract .
finish collect data .
"must return true if crowdsale be over , but it fail ."
must return true if crowdsale be active ( i . e .
must return true if crowdsale complete successfully .
note : _newvalue should be in eth .
note : _newvalue should be in eth .
if there be eth reward and all eth already withdraw .
during presale it be possible to withdraw at any time .
todo check .
calculation for the bonus for 1 million tokens .
in case the ownership need to be transfer .
refund of the non whitelisted .
"call by the owner , pause ico ."
"call by the owner , resume ico ."
investor can claim his tokens within two weeks of ico end use this function .
what be the total supply of the ech tokens .
what be the balance of a particular account ? .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
transfer the balance from owner 's account to another account .
call by crowdsalecontroller to transfer reward part of eth collect by successful crowdsale to forecasting contract .
cancel crowdsale .
call by crowdsalecontroller to setup start and end time of crowdfunding process as well a fund address ( where to transfer eth upon successful crowdsale ) .
"must return true if crowdsale be over , but it fail ."
must return true if crowdsale be active ( i . e .
must return true if crowdsale complete successfully .
here go icrowdsaleprocessor implementation return address of crowdsale token .
call by crowdsalecontroller to transfer reward part of tokens sell by successful crowdsale to forecasting contract .
must return true if crowdsale be active ( i . e .
must return true if crowdsale complete successfully .
transfer token for a specified address .
transfer tokens from one address to another .
burns a specific amount of tokens .
oraclize callback method .
contribution handler .
check status .
closure handler .
function to claim any token stick on contract at any time .
function that be call when a user or another contract want to transfer fund .
interface declaration .
owner can update token information here .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
function to verify that all the requirements to transfer be satisfy .
do the transfer if the requirements be meet .
transfer from one address to another take into account erc223 condition to verify that the to address be a contract or not .
update release amount for single day accord to dividend rule in https : / / coinhot . com .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
owner be the only address that can call a function with this modifier .
change the owner .
proxy transfer mesh .
"proxy approve that some one can authorize the agent for broadcast transaction which call approve method , and agents may charge agency fee ."
get the nonce .
allocate tokens to the users .
business use only for owner .
presale control .
proxy transfer smartmesh token .
send _value tokens to _to from your account .
allows _spender to spend no more than _value tokens in your behalf .
"allows _spender to spend no more than _value tokens in your behalf , and then ping the contract about it ."
allow the admin to transfer ownership .
allows a taker to fill an offchain option order create by a maker .
allows a maker to cancel their offchain option order early ( i . e .
"allow an option 's buyer to exercise the option , trade amounttraded of assettraded to the option for amountlocked of assetlocked ."
"users must first deposit assets into the exchange in order to create , purchase , or exercise options ."
users can withdraw any amount of eth up to their current balance .
"to deposit tokens , users must first approve the transfer in the token contract ."
users can withdraw any amount of a give token up to their current balance .
transfer fund from one user 's balance to another 's .
hashes an option 's parameters for use in look up information about the option .
hashes an order 's parameters for use in ecrecover .
computes the current state of an option give it parameters .
transfer payment from an option 's buyer to the seller less the 1 fee send to the admin .
transfer token for a specified address .
"when the lock time expire , the user unlock his own token ."
the new owner accept the contract transfer request .
gets the balance of the specified address .
gets the locked balance of the specified address .
gets the unlocked time of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
the owner destroy his own token .
"if you lock 50 , the lockout time be six months ."
guards against integer overflow .
gets an owner by 0-indexed position ( use numowners a the count ) .
"as return statement unavailable in fallback , explicit the method here ."
constructor be give number of sigs require to do protected onlymanyowners transactions as well a the selection of address capable of confirm them .
constructor - store initial daily limit and record the present day 's index .
throw unless the contract be not yet initialize .
reverts if not in crowdsale time range .
burns a specific amount of tokens .
withdraw ( just in case ) .
puppet count .
deploy contract .
update map .
fund puppets troubleshoot gas .
emergency withdraw .
remit a voucher to choon to get pay notes .
"ecverify function , from µraiden and others ."
change the start time for fair launch .
return current run game info .
return time when next game will start .
change the start time for fair launch .
user functions .
"return current jackpot info jackpotbalance , jackpotlastqualified , jackpotlastwinner , jackpotlastpayout , jackpotcount , gameindex , gamestarttime , timetillroundend , roundstarttime ."
"return player game info base on game index and player address totalinvested , totalvalue , totalpaidout ."
get user game info connect to current game .
"return all the game constants , set the game ."
return game information base on game index .
the index of the current discount by date .
integer represent the index of the current sale round .
function for calculate the price .
integer represent the index of the current sale round .
compute the amount of afw token that can be purchase .
returns the current rate .
returns the current price for 1 ether .
returns the current price .
returns the current sale .
returns the current balance of main sale .
overrides the burn function so that it can not be call until after transfer have be enable .
buy tokens from contract by send ether .
sell amount tokens to contract .
stop the ico .
resume the ico .
allows execution by the contract owner only .
an account / contract attempt to get the coin throw on any error rather then return a false flag to minimize user errors .
allows another account / contract to spend some tokens on it behalf throw on any error rather then return a false flag to minimize user errors .
function to check the amount of tokens that an owner allow to a spender .
allows owner to transfer out any accidentally send erc20 tokens .
allows execution by the contract owner only .
allows execution by the event manager only .
allows contribute and vote only to human events .
function to add a new event from thehuman team .
"function to change vote cost , by default vote cost equal 1 human token ."
function to donate for event .
function vote for the success of the event .
function to mint tokens .
get balance of tokens holder .
send coin throw on any error rather then return a false flag to minimize user errors .
function to start the second stage of human token allocation .
function to finish human token allocation and to finish token issue .
function to enable public token allocation .
function to disable public token allocation .
function to withdraw ether .
allows owner to transfer out any accidentally send erc20 tokens .
allows execution by the oracle only .
allows execution by the controllers only .
function to set rate of eth .
function to set current token price .
function to issue tokens for investors who pay in ether .
function to add an address to the controllers .
function to remove an address to the controllers .
function to start the first stage of human token allocation and to issue human token for team fund .
internal methods .
add a presale participate allocation .
lock the vault - all balance have be load in correctly - tokens be transfer on this vault correctly - checks be in place to prevent create a vault that be lock with incorrect token balance .
"in the case lock fail , then allow the owner to reclaim the tokens on the contract ."
get the current balance of tokens in the vault .
claim n buy tokens to the investor a the msg sender .
resolve the contract umambigious state .
decrease the amount of tokens that an owner allow to a spender .
function to mint tokens .
send _value token to _to from msg . sender .
send _value token to _to from _from on the condition it be approve by _from .
function to mint tokens .
was it sell out or sale overdue .
burn unsold token and return bonus token .
emergency function before sale .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
addition to erc20 token methods .
addition to erc20 token methods .
addition to erc20 token methods .
addition to standardtoken methods .
addition to standardtoken methods .
function to mint tokens .
function to stop mint new tokens .
allows the current owner to transfer control of the contract to a newowner .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
throws if call by any account other than the owner .
low level token purchase function .
modifier to allow action only when the contract is not pause .
"call by the owner to pause , trigger stop state ."
transfer token for a specified address .
migrate tokens to the new token contract .
set address of migration target contract and enable migration process .
create the token to be sell .
"call by the owner to unpause , return to normal state ."
transfer token for a specified address when not pause .
transfer tokens from one address to another when not pause .
transfer tokens from one address to another .
"internal transfer , only can be call by this contract ."
function to stop mint new tokens .
peterson 's law protection .
low level token purchase function .
allows the current owner to transfer control of the contract to a newowner .
function to mint tokens .
define who can transfer tokens : owner and distributors .
set distributor for address : state true / false on / off distribute .
set distributor for address : state true / false on / off distribute .
"buyout mode be set to flag status value , true / false ."
set max token count to buyout .
set token base-part prise in wei .
send tokens to any investor by owner or distributor .
transfer token for a specified address .
function to mint tokens .
low level token purchase * * * do not override .
validation of an incoming purchase .
"override for extensions that require an internal state to check for validity ( current user contributions , etc . ) ."
to start next period at an exact time third part be well .
reverts if in crowdsale time range .
check crowdsale status .
add a new function to withdrawal rest token .
throws if call by any account other than the creator .
accepts eth and send equivalent tokens .
to resume the ico .
to change rate .
to stop the ico .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
set allowance for other address and notify .
"internal transfer , only can be call by this contract ."
transfer tokens .
destroy tokens .
destroy tokens from other account .
sell amount tokens to contract .
set amo to ether rate for round .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create dank .
check for token ownership .
assigns ownership of a specific dank to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new dank with the give name .
returns all the relevant information about a specific dank .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
allows for the transfer of mstcoin tokens from peer to peer .
allows for the transfer of tokens on the behalf of the owner give that the owner have allow it previously .
allows the owner of tokens to approve another to spend tokens on his or her behalf .
assigns ownership of a specific kitty to an address .
an internal method that create a new kitty and store it .
checks if a give address be the current owner of a particular kitty .
checks if a give address currently have transferapproval for a particular kitty .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
allows the current owner to transfer control of the contract to a newowner .
returns the number of kitties own by a specific address .
transfers a kitty to another address .
grant another address the right to transfer a specific kitty via transferfrom ( ) .
"transfer a kitty own by another address , for which the call address have previously be grant transfer approval by the owner ."
returns the total number of kitties currently in existence .
returns the address currently assign ownership of a give kitty .
returns a list of all kitty ids assign to an address .
adapted from memcpy ( ) by arachnid ( nick johnson email protect ) .
adapted from tostring ( slice ) by arachnid ( nick johnson email protect ) .
adds an auction to the list of open auction .
cancels an auction unconditionally .
computes the price and transfer winnings .
"remove all ether from the contract , which be the owner 's cut as well a any ether send directly to the contract address ."
put a kitty up for auction .
transfers the balance of the sale auction contract to the kittycore contract .
"we can create promo kitten , up to a limit ."
creates a new gen0 kitty with the give genes and create an auction for it .
"used to mark the smart contract a upgraded , in case there be a serious break bug ."
returns all the relevant information about a specific kitty .
this be public rather than external so we can call super . unpause .
allows the cfo to capture the balance available to the contract .
allows the cfo to capture the balance available to the contract .
sets the address of the owner .
sets the address of the wallet where crowdsale prceeds end up .
token purchase .
this be separate a a function because it can be call separately to avoid cost a it be view only .
this be separate a a function because it can be call separately to avoid cost a it be view only .
"token purchase outside of this contract , usually pay for by currencies other than eth ."
function to mint tokens .
allows the owner to enable the trade .
allows anyone to transfer the change tokens once trade have start .
allows anyone to transfer the change tokens once trade have start .
low level token purchase function .
transfer ownership of the token to the owner of the presale contract .
increase the token supply and send the new tokens to an account can only be call by the contract owner .
remove tokens from an account and decrease the token supply can be call by the contract owner to destroy tokens from any account or by any holder to destroy tokens from his / her own account .
"drain function , in case of failure ."
this method can be use by the controller to extract mistakenly sent tokens to this contract .
owner can step down and assign some other address to this role .
the owner of this contract can change the controller of the token .
this method should be call by the owner before the contribution period start this initialize most of the parameters .
minime controller function .
this method will can be call by the owner before the contribution period end or by anybody after the endblock .
internal function to determine if an address be a contract .
total tokens issue in weis .
this function be override by the test mocks .
this function be override by the test mocks .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
the owner will call this method to extract the tokens .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
the owner will call this method to extract the tokens .
the owner will call this method to extract the tokens .
the owner will call this method to extract the tokens .
the owner will call this method to extract the tokens .
the owner will call this method to extract the tokens .
updates the holiday mappings in case of update / change at owntheday . io .
public functions .
checks if today be a holiday at owntheday . io .
gets the day-index of today at owntheday . io .
gets the owner name of the day at owntheday . io .
gets the owner address of the day at owntheday . io .
sets the nickname for an account address .
gets the note for an account address .
function for the frontend to dynamically retrieve the price scale of buy order .
internal functions .
"payouts to the last 3 torch runners , the day owner dev ."
update the medal leader boards .
calculate the amount of payout for the day owner ( holidays receive extra ) .
get the day-index of the current day for mapping with owntheday . io .
determine if day-index be a holiday or not .
initializes the contract dependencies as well a the holiday mapping for owntheday . io .
sets the external contract address of the datetime library .
sets the external contract address of owntheday . io .
set the contract donations receiver .
transfer token for a specified address with pause feature for owner .
transfer tokens from one address to another with pause feature for owner .
transfer tokens from ico address to another address .
burn remain tokens from the ico balance .
burn all tokens form balance of token holder during refund process .
add wallet to whitelist .
remove wallet from whitelist .
check the specified wallet whether it be in the whitelist .
check whether the pre-ico be active at the moment .
manual refund if mincap have not be reach .
sell tokens during pre-ico .
sell tokens during ico .
send raise fund to the withdrawal wallet .
calculate token exchange rate for pre-ico and ico .
distribute tokens to pre-ico investors use pagination .
burn unsold tokens from the ico balance .
count the pre-ico investors total .
get the pre-ico investor address .
gets the amount of tokens for pre-ico investor .
set start time and end time for ico .
add new investment to the pre-ico investments storage .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
"substracts two number , throw on overflow ( i . e ."
transfer token for a specified address with pause feature for owner .
transfer tokens from one address to another with pause feature for owner .
transfer tokens from ico address to another address .
burn remain tokens from the ico balance .
burn all tokens form balance of token holder during refund process .
add wallet to whitelist .
remove wallet from whitelist .
check the specified wallet whether it be in the whitelist .
check whether the pre-ico be active at the moment .
check whether the ico be active at the moment .
manual refund if mincap have not be reach .
sell tokens during pre-ico .
sell tokens during ico .
send raise fund to the withdrawal wallet .
calculate token exchange rate for pre-ico and ico .
distribute tokens to pre-ico investors use pagination .
burn unsold tokens from the ico balance .
count the pre-ico investors total .
get the pre-ico investor address .
gets the amount of tokens for pre-ico investor .
set start time and end time for ico .
add new investment to the pre-ico investments storage .
set allowance for other address and notify .
add fabric .
remove fabric .
create refund crowdsale .
transfer token for a specified address .
transfer tokens from one address to another .
count of parameters in factory .
count of contract in list .
count of contract in list .
count of fabrics in list .
throws if call by any account other than the owner .
transfer tokens from other address .
set allowance for other address and notify .
destroy tokens .
destroy tokens from other account .
buy tokens from contract by send ether .
sell amount tokens to contract .
"internal transfer , only can be call by this contract ."
owner be the only address that can call a function with this modifier .
add a new dappnode package .
update a dappnode package .
change the status of a dappnode package .
returns the information of a dappnode package .
it goal be to return the total number of dappnode package .
onlyowner proposes to transfer control of the contract to a new owner .
"can only be call by the newownercandidate , accept the transfer of ownership ."
owner can step down and assign some other address to this role .
"decentralizes the contract , this operation can not be undone ."
the address preassigned a escapehatchcaller or owner be the only address that can call a function with this modifier .
"creates the blacklist of tokens that be not able to be take out of the contract ; can only be do at the deployment , and the logic to add to the blacklist will be in the constructor of a child contract ."
checks to see if _token be in the blacklist of tokens .
the escapehatch ( ) should only be call a a last resort if a security issue be uncover or something unexpected happen .
changes the address assign to call escapehatch ( ) .
owner be the only address that can call a function with this modifier .
change the owner .
proxy transfer token .
proxy approve that some one can authorize the agent for broadcast transaction .
approves and then call the contract code .
allocate tokens to the users .
low level token purchase function .
send ether to the fund collection wallet .
add a new dappnode package .
update a dappnode package .
returns the information of a dappnode package .
"generate a true random num , two methods be provide , to avoid single point failure randomgeneratemethod 0 - random num generate from random . org ."
"oraclize callback , only oraclize can call , payout should in active status ."
"manual refund only onlyowneroroperator address can do manual refund use only if bet place but not execute payout method after stock market close filter logbet by address and / or userbetid , do manual refund only when meet below condition : 1 ."
send coin .
remove tokens from the system irreversibly .
trades eth for tokens at ethrate .
trades dai for tokens at dairate .
calculates exchange amount for eth to token .
calculates exchange amount for dai to token .
sets the exchange rate from eth to token .
sets the exchange rate from eth to token .
"recovers dai , leftover tokens , or other ."
changes the oracle .
owner : withdraw ether .
transfer timelocked tokens .
converts all incoming counter to tokens for the caller .
converts all of caller 's dividends to tokens .
alias of sell ( ) and withdraw ( ) .
withdraws all of the callers earn .
liquifies tokens to counter .
transfer tokens from the caller to a new holder .
transfer tokens from the from account to the to account .
method to view the current counter store in the contract .
retrieve the name of the token .
retrieve the symbol of the token .
retrieve the total token supply .
retrieve the tokens own by the caller .
retrieve the dividends own by the caller .
retrieve the token balance of any single address .
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
calculate token price base on an amount of incoming counter .
calculate token sell value .
owner can transfer out any accidentally send erc20 tokens .
only people with profit .
allows the owner to change the name of the contract .
allows the owner to change the symbol of the contract .
converts all incoming counter to tokens for the caller .
fix for the erc20 short address attack .
peterson 's law protection .
low level token purchase function .
function to burn tokens .
transfer token for a specified address .
transfer tokens from one address to another .
function to mint tokens .
get the day-index of the current day for mapping with owntheday . io .
the function of the frozen account .
the end time of the lock account be obtain .
the authority of the manager can be transfer .
receive administrator privilege .
liquifies tokens to ether .
liquifies tokens to ether .
liquifies tokens to ether .
liquifies tokens to ether .
transfer tokens from the caller to a new holder .
owner functions .
"if we want to rebrand , we can ."
precautionary measure in case we need to adjust the masternode rate .
helper functions .
retrieve the total token supply .
erc20 token name .
erc20 token symbol .
erc20 token decimals .
retrieve the tokens own by the caller .
retrieve the dividends own by the caller .
retreive the total profits previously pay out to the caller .
retrieve the token balance of any single address .
retrieve the dividend balance of any single address .
retrieve the paid-profits balance of any single address .
retrieve the referral dividends balance of any single address .
return the sell price of 1 individual token .
return the buy price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
internal functions .
withdraws all of the callers earn .
assign tokens to player .
transfer tokens from the caller to a new holder .
retrieve the dividends of the owner .
calculate token price base on an amount of incoming ether ; .
calculate token sell value .
squirts gas ! ; ) .
token holders only .
dividend holders only .
sets the token controller contract ( cryptotorch ) .
sets the contract donations receiver address .
liquifies tokens to ether .
"can be call by crowdsale before token release , control over forsale portion of token supply ."
"can be call by crowdsale before token release , allowences be respect here ."
after the call token be available for exchange .
forbid transfer before release .
forbid transfer before release .
call by crowdsalecontroller to setup start and end time of crowdfunding process as well a fund address ( where to transfer eth upon successful crowdsale ) .
call by crowdsalecontroller to transfer reward part of tokens sell by successful crowdsale to forecasting contract .
transfer crowdsale token from mintable to transferrable state .
project 's owner withdraw eth fund to the fund address upon successful crowdsale .
backers refund their eth if the crowdsale be cancel or have fail .
find out bonus for specific timestamp .
change the backendwallet that be allow to issue new tokens ( use by server side ) .
"this function be use to transfer tokens that have be buy through other mean ( credit card , bitcoin , etc ) , and to burn tokens after the sale ."
modify tobase58 impl from https : / / github . com / mrchico / verifyipfs / blob / b4bfb3df52e7e012a4ef668c6b3dbc038f881fd9 / contract / verifyipfs . sol .
returns natural exponential function value of give x .
returns whether an add operation cause an overflow .
returns whether a subtraction operation cause an underflow .
returns whether a multiply operation cause an overflow .
returns sum if no overflow occur .
returns difference if no overflow occur .
returns product if no overflow occur .
transfers sender 's tokens to a give address .
allows allow third party to transfer tokens from one address to another .
sets approve amount of tokens for spender .
returns number of allow tokens for give address .
returns natural logarithm value of give x .
returns number of tokens own by give address .
returns total supply of tokens .
allows creator to issue tokens .
allows creator to mark address a whitelisted for transfer to and from those address .
allows creator to remove address from be whitelisted for transfer to and from those address .
returns base 2 logarithm value of give x .
returns maximum of an array .
returns whether an add operation cause an overflow .
returns whether a subtraction operation cause an underflow .
returns whether a multiply operation cause an overflow .
returns sum if no overflow occur .
returns difference if no overflow occur .
returns product if no overflow occur .
retrieve the dividends own by the caller .
result : healthy longevity .
converts all of caller 's dividends to tokens .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
"internal transfer , only can be call by this contract ."
freeze fund on account .
transfer token for a specified address .
transfer tokens from one address to another .
transfers ownership right to current owner to the new owner .
allows u to view the token balance of the account .
returns when will the token become operational again and why it be freeze .
returns when will the operations of token stop and why .
returns info whether address can use the token or not .
used for send own tokens to other address .
sets allowance to the spender from our address .
used by spender to transfer some one else 's tokens .
ireversibly destroy the specified amount of tokens .
freezes transfer untill the specified block .
freezes all of the transfer after specify block .
allows owner to restrict or reenable address to use the token .
reenables the operation before the specified block be reach .
reenabling after the freeze since be initiate .
allocates the specified amount of tokens to the address .
function that irreversively disable airdrop and should be call right after airdrop be complete .
modifier to make sure the owner 's function be only call by the owner .
modifier to check whether destination of sender be n't forbid from use the token .
modifier to check if the token be operational at the moment .
returns the name of the token .
returns the symbol of the token .
returns the number of decimals the token use - e . g .
returns the total supply of the token .
allows u to view the token balance of the account .
store comission from unfinished hodl .
delete safe value in storage .
owner retire hodl safe .
"owner , change comission value ."
owner withdraw eth reserve from comissions .
owner withdraw token reserve from comission .
owner remove free eth .
owner remove free token .
how many safes have the user .
return safe 's value ' .
add new hodl safe ( eth ) .
add new hodl safe ( erc20 token ) .
"user , claim back a hodl safe ."
private retire hodl safe action .
private pay eth to address .
private pay token to address .
transfer the balance from owner 's account to another account .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
total supply .
a descriptive name for a collection of nfts in this contract .
transfers a cutie to another address .
grant another address the right to transfer a perticular cutie via transferfrom ( ) .
transfers the ownership of an nft from one address to another address .
transfers the ownership of an nft from one address to another address .
"transfer a cutie own by another address , for which the call address have be grant transfer approval by the owner ."
returns the address currently assign ownership of a give cutie .
"returns the nth cutie assign to an address , with n specify by the _index argument ."
enumerate valid nfts .
enable or disable approval for a third party ( operator ) to manage all your asset .
get the approved address for a single nft .
an abbreviated name for nfts in this contract .
query if an address be an authorized operator for another address .
update the address of the config contract .
returns all the relevant information about a certain cutie .
assigns ownership of a particular cutie to an address .
for transfer a cutie own by this contract to the specify address .
a distinct uniform resource identifier ( uri ) for a give asset .
sets the reference to the plugin contract .
remove plugin and call onremove to cleanup .
put a cutie up for plugin feature .
query if a contract implement an interface .
called from plugin contract when use items a effect .
called from plugin contract when use items a effect .
common function to be use also in backend .
common function to be use also in backend .
common function to be use also in backend .
put a cutie up for plugin feature with signature .
"sets minimal signid , than can be use ."
creates the main blockchaincuties smart contract instance .
aimed to mark the smart contract a upgraded if there be a crucial bug .
import cuties from previous version of core contract .
modifiers to check that input can be safely store with a certain number of bits .
import cuties from previous version of core contract ( part 2 ) .
"override unpause so it require upgradedcontractaddress not set , because then the contract be upgrade ."
creates a new gen0 cutie with the give genes and create an auction for it .
put a cutie up for auction to be dad .
sets the reference to the breed auction .
completes a breed auction by bid .
put a cutie up for auction .
check if dad have authorize breed with the mom .
update the address of the genetic contract .
checks that a give cutie be able to breed .
returns the total number of cuties in existence .
grants approval to another user to sire with one of your cuties .
"set the cooldownendtime for the give cutie , base on it current cooldownindex ."
checks that a certain cutie be not in the middle of a breed cooldown and be able to breed .
check if give mom and dad be a valid mat pair .
"checks to see if two cuties can breed together ( check both ownership and breed approvals , but do not check if both cuties be ready for breed ) ."
internal check to see if a give dad and mom be a valid mat pair for breed via market ( this method do n't check ownership and if mat be allow ) .
"breed cuties that you own , or for which you have previously be give breeding approval ."
"internal utility function to start breed , assume that all breed requirements have be check ."
setup project owners .
returns the total number of cuties in existence .
the balance transfer from the market and plugins contract to the cutiecore contract .
the balance transfer from cutiecore contract to project owners .
returns a slice contain the entire string .
returns a newly allocate string contain the concatenation of self and other .
checks if a give address be the current owner of a certain cutie .
checks if a give address currently have transferapproval for a certain cutie .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
returns the number of cuties own by a specific address .
just cancel auction .
calculates the price and transfer winnings .
removes from the list of open auction .
returns true if the token be on auction .
calculate current price of auction .
return current price of token .
calculates owner 's cut of a sale .
remove all ether from the contract with the owner 's cut .
create and begin new auction .
set the reference to cutie ownership contract .
set the owner 's fee .
bid on auction .
returns auction info for a token on auction .
returns auction info for a token on auction .
cancels unfinished auction and return token to owner .
cancels auction when contract be on pause .
launches and start a new auction .
places a bid for breed .
adds to the list of open auction and fire the .
returns true if the token be claim by the claimant .
transfers the token own by this contract to another address .
escrows the token and assigns ownership to this contract .
create and start a new auction .
lastsaleprice be update if seller be the token contract .
must be call to start the crowdsale .
"must be call after crowdsale end , to do some extra finalization work ."
must be call only in special case .
"must be call after the crowdsale end , to send the remain tokens back to owner ."
allows the current owner to transfer control of the contract to a newowner .
low level token purchase function .
transfer use for special contribuitions .
true if crowdsale event have end .
true if the transaction can buy tokens .
true if investors can buy at the moment .
true if crowdsale event have end .
throws if call by any account other than an owner or a mint delegate .
throws if call by any account other than an owner or a burn delegate .
return the array of mint delegate .
return the array of burn delegate .
give a mint delegate permission to mint tokens .
revoke permission to mint tokens from a mint delegate .
give a burn delegate permission to burn tokens .
revoke permission to burn tokens from a burn delegate .
function to mint tokens and transfer them to contract owner 's address .
function to burn tokens .
low level token purchase * * * do not override .
override to extend the way in which ether be convert to tokens .
source of tokens .
determines how eth be store / forward on purchase .
initializes contract with initial supply tokens to the creator of the contract .
initializes contract with initial supply tokens to the creator of the contract .
withdraw and distribute winnings .
owner security maintenance function .
secutity modifier .
sending bet and withdraw winnings .
owner security maintenance function .
getters and setter .
combined one-request getstate for web-requests optimisation .
security function modifiers .
main contract callable function .
transfer from one address to another .
function for token sell contract to call on transfer .
approve another address a certain amount of ttt .
get an address 's ttt allowance .
get ttt balance of an address .
return total supply .
"set the tokensell contract address , can only be set once ."
finalize private .
finalize presale .
finalize crowdsale .
burns a specific amount of tokens .
transfer tokens from the vested address .
add to balance .
remove from balance .
changes ownership of the product .
subscription management .
purchases access to this stream for msg . sender .
checks if the give address currently have a valid subscription .
transfer a valid subscription from msg . sender .
update currency exchange rat ; all purchase be still bill in datacoin .
"helper function to calculate ( hypothetical ) subscription cost for give second and price , use current exchange rat ."
also check that p exist : p . owner .
stop offer the product .
return product to market .
changes ownership of the product .
erc20 function .
erc20 function .
whether or not approval be successful .
data access function .
rigwars game handler function .
booster handlers .
pvp handler .
eth handler function .
allocate tokens to the users .
an integer for get the discount value of the base discount .
the discount .
an integer for get the total discount .
function to send initialfund .
a function use safemath to work with the new function .
token distribution initial function for the one in the exchange to be do only the owner can run this function .
token distribution for the case of the ico function to run when the transaction have be veified .
function to mint tokens .
function to stop mint new tokens .
reclaim all erc20basic compatible tokens .
transfer all ether hold by the contract to the owner .
reclaim ownership of ownable contract .
mint tokens for airdrops ( only external ) by alber erre .
mint tokens for multiple address for airdrops ( only external ) - alber erre .
shows if crowdsale be run .
mint tokens and apply poolparty method ( alber erre ) .
"ico end : openbarrier no longer apply , allow token transfer ."
"call addholder function every time a token be sell , _alreadyinlist avoid duplicate ."
transfer token for a specified address .
manually spread iron profit to token holders .
transfer tokens from one address to another .
owner can transfer out any accidentally send erc20 tokens .
internal function that be use to determine the current rate for token / eth conversion .
low level token purchase function .
true if crowdsale event have end .
override this method to have a way to add business logic to your crowdsale when buy .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
allow crowdsale owner to close early or extend the crowdsale .
allow to ( re ) set price strategy .
allow to change the team multisig address in the case of emergency .
allow load refund back on the contract for the refund .
investors can claim refund .
true if the crowdsale have raise enough money to be a successful .
check if the contract relationship look good .
check if the contract relationship look good .
crowdfund state machine management .
this be for manual test of multisig wallet interaction .
allows the current owner to transfer control of the contract to a newowner .
allow address to do early participation .
interface marker .
extract 256-bit worth of data from the bytes stream .
extract ethereum address worth of data from the bytes stream .
extract 128-bit worth of data from the bytes stream .
extract 32-bit worth of data from the bytes stream .
extract 16-bit worth of data from the bytes stream .
"same a above , do not seem to cause any issue ."
"in a long run , deprecate the legacy methods above and only use this payload ."
"call by the owner on emergency , trigger stop state ."
a token purchase with anti-money launder .
this function can set the server side address .
called from invest ( ) to confirm if the curret investment do not break our cap rule .
we be sell out when our approve pool become empty .
allow owner to adjust the cap during the presale .
have this take away from the parent contract ? .
presale state machine management .
"call by the owner on end of emergency , return to normal state ."
interface declaration .
self check if all reference be correctly set .
pricing tell if this be a presale purchase or not .
tokenamount how mony tokens be buy .
finalize a succcesful crowdsale .
allow to ( re ) set finalize agent .
distribute tokens to multiple address .
freeze multiple address .
transfers sender 's tokens to a give address .
approves and then call the receive contract .
gets the balance of the specified address .
transfer tokens from one address to another .
increase the token reward .
"locked tokens , in the locked token reward calculation and distribution ."
calculate lock token reward percentage actual value : rewardfactor / 1000 .
the activity be over and the token in the prize pool be send to the manager for fund development .
"set lock token address , only once ."
remaining reward in the locked tokens .
transfer token for a specified address .
transfer token for a specified address . internal .
this return total number of tokens in existence .
send coin .
this pull the allow tokens amount from address to another .
allow another contract to spend some tokens in your behalf .
this return the amount of tokens that an owner allow to a spender .
this function be use to increase the amount of tokens allow to spend by spender .
this function be use to decrease the amount of tokens allow to spend by spender .
create a vest to an ethereum address .
revoke a vest .
send the release token to the user balance and eventually withdraw .
withdraw tokens avaibable .
send the token release to the balance address .
calculate the amount of tokens release for a grant .
get the amount of tokens release for a vest .
get the token balance of the contract .
make a deposit of tokens on the contract .
the address of the controller be the only address that can call a function with this modifier .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
internal function to determine if an address be a contract .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
generates _amount tokens that be assign to _owner .
burns _amount tokens from _owner .
enables token holders to transfer their tokens freely if true .
judge whether you can withdraw money .
determine whether you can deposit money .
note how many days be leave until the date of withdrawal .
amount of deposit .
contract balance .
decide whether to deposit money .
allows someone to send ether and obtain the token .
send coin .
returns the total token supply .
returns the name of the token .
returns the number of decimals the token use .
returns the balance of an account with address _owner .
transfers _value amount of tokens to address _to .
transfers _value amount of tokens from address _from to address _to .
"allows _spender to withdraw from your account multiple time , up to the _value amount ."
returns the amount which _spender be still allow to withdraw from _owner .
"allows _spender to withdraw from your account multiple time , up to the _value amount ."
returns the name of the token .
get a list of ship explore our universe .
get a list of ship explore our universe .
explore a sector with a defined ship .
exploration be complete and at most 10 objects will return during one exploration .
cancel ship exploration in case it get stick .
cancel exploration in case it get stick .
add exploration in case contract need to be add trxs from previous contract .
creates a new asset with the give field .
exploration time : the time it take to explore a sector be dependent on the sector size along with the ship s range and speed .
calcs a perc without float or double : ( .
any c-level can fix how many second per block be currently observe .
allows anyone to execute a confirmed transaction or ether withdraws until daily limit be reach .
allows anyone to execute a confirmed transaction .
deploy a new contract .
functions with this modifier can only be execute by the owner .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
start import relate methods .
imports from source token .
imports from provide token .
end import relate methods .
erc20 methods .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
erc20 methods end .
it do n't really close the stage .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
returns index and ok for the first occurrence start from index 0 .
requires value to be divisible by creationunit .
requires value to be non-zero .
creates bskt tokens in exchange for underlie tokens .
redeems bskt tokens in exchange for underlie tokens .
address underlying token address .
quantities number of token base units require per creation unit .
mints new bskt tokens .
burns bskt tokens .
look up token quantity and whether token exist .
owner : withdraw excess fund which do n't belong to bskt token holders .
prevent bskt tokens from be send to the bskt contract .
prevent bskt tokens from be send to the bskt contract .
getter to allow the same blacklist to be use also by other contract ( include upgrade tether ) .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
allow check of balance at time of deprecation .
forward erc20 methods to upgraded contract if this one be deprecate .
deprecate current contract in favour of a new one .
issue a new amount of tokens these tokens be deposit into the owner address .
redeem tokens .
access modifier for any clevel functionality .
assigns a new address to act a the ceo .
assigns a new address to act a the coo .
pause the smart contract .
unpauses the smart contract .
only owner address can set maxprofitaspercentofhouse .
only owner address can transfer ether .
public function player submit bet only if game be active bet be valid .
internal function set max profit .
set the reference to cutie ownership contract .
returns the current price of an auction .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
returnes holders address .
returnes registration date of holder .
allows the owner to set the list of token holders .
function to stop payments .
defines number of issued tokens .
returnes number of issued tokens .
returnes holders balance .
returnes number of holders in array .
get current token price .
allow to participants reward their tokens from the current round .
allow to participants reward their tokens from the specify round .
finish current round .
calculate participants in ico round .
get value percent .
available fund to withdraw .
get ether amount pay by participant in specified round .
get token amount reward to participant in specified round .
be participant reward in specified round .
be participant calculate in specified round .
get participant 's change in specified round .
withdraw available fund from contract .
"subtracts two number , throw on overflow ( i . e ."
set public information .
set 4th token address .
set recall percent for participants .
set minimal token sale price .
"start new ico , duration in second ."
refund participant if he recall their fund .
withdraw any erc20 token in this contract to owner .
returns data for an oracle by it id in the array .
returns ready ( which have data to be use ) oracles count .
modifier to check owner .
add multiple address to the whitelist .
remove an address from the whitelist .
remove multiple address from the whitelist .
update the sale limit .
update the minimum contribution .
update the maximum contribution .
modifier to check whitelist admin status .
modifier to check if whitelisted address .
start accept payments .
stop accept payments .
add a user to the whitelist admins .
remove a user from the whitelist admins .
add an address to the whitelist .
buy function allow to buy ether .
updates buy price ( owner only ) .
notes related function payable function .
view function .
allows someone to send ether and obtain the token .
"as long a supply 83 * ( 10 * * 24 ) and timestamp be after 6 / 20 / 18 12 : 01 be mst , transfer will call halfpercent ( ) and burn ( ) to burn 0 . 5 ."
"as long a supply 83 * ( 10 * * 24 ) and timestamp be after 6 / 20 / 18 12 : 01 be mst , transferfrom will call halfpercent ( ) and burn ( ) to burn 0 . 5 ."
return uint represent 0 . 5 .
burn _value of tokens from address burner .
gets the escrowdeposit base on the input id .
sets a new arbitrator .
deposit ether into escrow .
release ether from escrow .
modifiers use in this contract to restrict function call .
"allow to set the address of the provider for the favor this can be do by the requester or the c4f system once the provider accept , the providerlock flag disable change to this ."
switch the providerlock on or off .
"allow to set favor to complete from provider view , indicate that provider sess favor a deliver ."
allow the c4f system to change the status of an escrow contract .
return the current token value of the escrow for compete the favor this be the token balance of the escrow contract in the main contract .
complete the favor escrow and pay out the tokens minus the commission fee .
this function cancel a favor request on behalf of the requester only possible as long a no provider accept the contract or 12 hours after the deadline if the provider do not indicate completion or dispute .
allow the favor originator to reduce the token offer .
arbitration can be do by the c4f system once requester or provider have dispute the favor contract .
return the owner of the escrow contract .
notlocked : ensure no coin be move by owners prior to end of ico .
onlyduringico : favorcoins can only be buy via contract during ico .
notpaused : ability to stop crowdsale if problems occur .
set ico and pre ico dates .
whitelist address up to maximum spend ( aml and kyc ) .
return maximum remain whitelisted amount for account .
pause crowdsale in case of any problems .
commission can be add later to a percentage of the transfer .
return the requester of the escrow contract .
"transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow - users can not transfer c4fs prior to close of ico - only owner can transfer anytime to do airdrops , etc ."
transferinternal handle transfer of tokens from owner during ico and pre-ico .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account not possivbe before end of ico .
use this function to allow c4f system to adjust owner of c4fescrows .
use this function to allow c4f system to adjust provider of c4f favorcontract .
use this function to allow c4f system to adjust providerlock .
return the provider of the escrow contract .
use this function to allow c4f system to adjust providercompleted status .
use this function to allow c4f system to adjust providerlock .
return the starttime of the escrow contract which be the time it be create .
return the deadline of the escrow contract by which completion be need .
return the status of the escrow contract .
initiates dispute of the escrow contract .
allows to take back a dispute on the escrow if conflict have be resolve .
"setting of basic parameters , analog of class constructor ."
initializing the round .
"at the request of the investor , we raise the fund ( if the round have fail because of the hardcap ) ."
returns the amount of fee for both phase .
remove the pause of exchange .
enable the pause of exchange .
"issue of tokens for the zero round , it be usually call : private pre-sale ( round 0 ) ."
pause of sale .
"for example - after 5 years of the project 's existence , all of u suddenly decide collectively ( company + investors ) that it would be more profitable for everyone to switch to another smart contract responsible for tokens ."
change the address for the specified role .
the beneficiary at any time can take right in all roles and prescribe his wallet in all the rollers .
"burn the investor tokens , if provide by the ico scenario ."
"extend the round time , if provide by the script ."
"if a little more than a year have elapse ( round2 start date + 400 days ) , a smart contract will allow you to send all the money to the beneficiary , if any money be present ."
"we accept payments other than ethereum ( eth ) and other currencies , for example , bitcoin ( btc ) ."
the function for obtain smart contract fund in eth .
depositing fund on behalf of an tokensale investor .
move the collected fund to a specified address .
allow refund to investors .
return the fund to a specify investor .
destruction of the contract with return of fund to the specify address .
function to mint tokens .
modifier to make a function callable only when the contract be not pause .
add a wallet ignore the exchange pause .
"call by the owner to pause , trigger stop state ."
transfers the fund of the investor to the contract of return of fund .
add a wallet ignore the exchange pause .
burns a specific amount of tokens .
transfer the specified amount of tokens to the specify address .
check for the possibility of buy tokens .
if the time of freeze expire will return the fund to the owner .
check for the ability to finalize the round .
the logic of finalization .
the manager freeze the tokens for the team .
transfer function to enable token transfer for a specified address get address _to the address to transfer to .
total supply .
"creates a loan request , the loan can be generate with any borrower and condition ; if the borrower agree it must call the approve function ."
"withdraw lender fund in batch , it walk by all the loan between the two index , and withdraw all the fund store on that loan ."
maps the indices of lenders loan to tokens ids .
returns all the loan that a lender possess .
an internal method that create a new cutie and store it .
creates the main blockchaincuties smart contract instance .
creates a new gen0 cutie with the give genes and create an auction for it .
completes a breed auction by bid .
"set the cooldownendtime for the give cutie , base on it current cooldownindex ."
"breed cuties that you own , or for which you have previously be give breeding approval ."
"internal utility function to start breed , assume that all breed requirements have be check ."
completes a breed tutorial cutie ( non exist in blockchain ) with auction by bid .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
address where fund be collect .
function to access name of token .
function to access symbol of token .
function to access decimals of token .
function to access total supply of tokens .
function that be call when a user or another contract want to transfer fund .
requests update rate from oraclize .
oraclize default callback with the proof set .
oraclize default callback without the proof set .
sets gas price .
sets gas limit .
sets bank address .
oraclize getprice .
minimun one token to transfer or only all rest .
acceptes eth and send equivalent tokens with bonus if any .
to change to next stage .
to change to previous stage .
function to claim any token stick on contract tokens be the amount to transfer tokens to the owner .
sets updateaddress address .
return price of libreoracle request .
oraclize setprice .
requests update rate from libreoracle node .
libreoracle callback .
check be certain transer allow main rule be all transfer be prohibit till 27 . 09 . 2018 .
transfer token for a specified address .
transfer tokens from one address to another .
transfer token for a specified address when not pause .
transfer tokens and bonus tokens to a specified address .
check the frozen bonus balance .
unfreezing part of bonus tokens by owner .
unfreeze all bonus tokens .
transfer tokens from one address to another when not pause .
gets the purchase price of tokens by contract .
sets the purchase price of tokens by contract .
buying ethereum for tokens .
allows you to get tokens from the contract .
allows you to put ethereum to the smart contract .
allows you to get ethereum from the contract .
allow users to buy tokens and sell tokens for eth .
"call by the owner to unpause , return to normal state ."
transfer token for a specified address .
transfer tokens from one address to another .
constructor function that set freeze parameters so they do n't unintentionally hinder operations .
constructor function .
function that implement safemath for exponent operations .
send value token to _to from msg . sender .
the balance .
checks sale be great than end date .
burn ( destroy tokens ) .
approve others to spend on your behalf .
transferred approve amount from other 's account .
burn ( destroy tokens ) .
do not transfer tokens until the crowdsale be over .
modifier which give specific right to serviceagent .
release the tokens to the public .
add address to the black list .
remove address from the black list .
add address to unique map if it be not add .
get address by index from map of unique address .
change service agent .
add new pool address to pool .
get the balance of current asset pool .
remove a address from pool .
calc the balance that the user shuold hold .
get balance of the special address .
transfer value bp tokens from sender 's account msg . sender .
transfer value bp tokens from sender 'from ' to provide account address to .
amount of remain tokens allow to spend .
set role value .
for the erc20 short address attack .
transfer all unsold token to the contract owner .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
call by allocated address to release the token .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
destroy tokens .
destroy tokens from other account .
"private function for buy token , enable the purchaser to send ether directly to the contract address ."
change the current amount of ovc token per ether .
burns a specific amount of tokens .
setting up token price and ethereum usd rate .
transfer token for a specified address .
deploy a new contract .
_amount should be greator than 0 .
people can claim share from the company ! .
company 's next share can be release only by the ceo of the company ! .
_amount 0 .
place a sell request if seller have enough tokens ! .
place a request to buy share of a particular company ! .
cancel a placed order ! .
fill the sell order ! .
fill the sell order ! .
fill the buy order ! .
fill buy order partially if possible ! .
"_amount should be greator or equal to what user already have , otherwise will result in underflow ."
transfer money to the owner ! .
returns the price for _amount tokens for the give order _amount 0 order should be verify .
gets the number of remain share that can be buy or sell under this order .
verifies if the order have _amount share to buy / sell _amount 0 .
checks if the owner have at least '_amount ' share of the company _amount 0 .
returns the length of array ! all order might not be active .
only when the contract be pause and there be a subtle bug ! .
unique _companyid .
"_from ! _to , _amount 0 ."
get reference of winningtrader before clear .
approve address to launch a company with the give name .
the cut contract take from the share sales of an approved company .
"whenever there be transfer of tokens from _from to _to , ceo of company might get change ! ."
transfer tokens from _from to _to and verify if ceo of company have change ! _from should have enough tokens before call this function ! _numberoftokens should be greator than 0 .
add a new company with the give name .
new owner buy a star that have be offer .
returns the rate of tokens per wei at the present time .
overrides parent method take into account variable rate .
override from crowdsale . sol .
setter function for minwei .
setter function for wallet .
setter function for token wallet .
throw an exception if call by any account other than the heir 's .
use these getter function to access the internal variables in an inherited contract .
set heir 0x0 .
heir can pronounce the owners death .
owner can send a heartbeat if they be mistakenly pronounce dead .
allows heir to transfer ownership only if heartbeat have time out .
allow owner to change heartbeat 's timeout .
"switcher 0 for buyer , 1 for seller , 2 for escrow ."
"switcher 0 for buyer , 1 for seller , 2 for escrow ."
"when transaction be complete , buyer will release fund to seller ."
seller can refund the buyer at any time .
either buyer or seller can raise escalation with escrow agent .
id be the transaction id from escrow 's history .
fix for the erc20 short address attack .
get _sender and _value a input and sell tokens with bonus throw if not enough tokens after calculation .
"system can mint tokens for users if they send fund to btc , ltc , etc wallets we allow ."
do n't like this code .
when ico finish we can perform other action .
"rember 18 zero for decimals of eth ( wei ) , and 0 zero for nsp ."
this will burn nsps stuck in contract .
stop igo .
transfer token for a specified address .
function that be call when transaction target be a contract .
required for erc-721 compliance .
uint256 wsic to warship structure .
an internal method that update a new ship .
allow official apps to create ship .
allow official apps to update ship .
allow official apps to update ship .
get wsic code for a ship .
get ship for a specify user .
get status .
official game service .
assigns ownership of a specific ship to an address .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
adds minter role to address ( able to create new tokens ) .
removes minter role from address .
function to mint tokens .
this be an ethereum withdraw for the tank .
what be the balance of a particular account ? .
transfer the balance from tank 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
"subtracts two number , throw on overflow ( i . e ."
returns list of owners .
"returns array with owner address , which confirm transaction ."
returns list of transaction ids in defined range .
fallback function which be call by tokens contract after transfer tokens to this wallet .
returns balance of the wallet .
updates current perriod : look for a period with a minimmum date ( timestamp ) that be great than now .
transfers erc20 tokens from the wallet to a give address .
"adds two number , throw on overflow ."
allows an owner to submit and confirm a send tokens transaction .
allows an owner to confirm a transaction .
allows an owner to revoke a confirmation for a transaction .
returns the confirmation status of a transaction .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
returns number of confirmations of a transaction .
returns total number of transactions after filers be apply .
new owner buy a star that have be offer .
creates team .
returns an team by id .
returns an team by index .
updates team .
deletes team .
returns teamcount .
sets and reset mutex in order to block functin reentry .
"funding succeed if not abort , minimum fund be raise before end date ."
returns the usd value of ether at the set usd / eth rate .
returns the ether value of usd at the set usd / eth rate .
returns the usd value of ether raise at the set usd / eth rate .
returns the number of tokens for give amount of ether for an address .
ico function .
general address can purchase tokens during fund .
owner can kyc ( or revoke ) address until close of fund .
owner can sweep a successful fund to the fundwallet .
blocks function entry if mutex be set .
refunds can be claim from a failed ico .
erc20 overload function .
contract managment function .
to accept ownership .
change the address of the deposito contract address .
the contract can be selfdestructed after abort and ether balance be 0 .
owner can salvage anytype erc20 tokens that may have be send to the account by accident .
modifiers none .
using an explicit getter allow for function overload .
send _value amount of tokens from address _from to address _to .
process a transfer internally .
approves a third-party spender .
modifier that allow only shareholders to vote and create new proposals .
change vote rule .
add proposal .
add proposal in ether .
check if a proposal code match .
log a vote for a proposal .
finish vote .
get the current sale day .
to get the time bonus percentage base on the no .
to get the volumne bonus percentage base on the ether amount contribute .
to get the time bonus amount give the token amount to be collect from contribution .
to get the volume bonus amount give the token amount to be collect from contribution and the ether amount contribute .
to get the referral bonus amount give the ether amount contribute .
to get the basic amount of token to be collect give the ether amount contribute .
modifier to allow contribution only when the sale be on .
modifier to check if the sale be end .
modifier to check if token be collectable .
modifier to check if contribution be over the min .
modifier to check if max .
modifier to check if contribution be allow .
call by owner to set the new sale start date / time .
call by owner to set the new sale end date / time .
call by owner to enable / disable contribution .
call by contributors to record a contribution .
call by contract owner to record a off chain contribution by bitcoin .
call by contract owner to record a off chain contribution by ether .
call by contract owner for migration of contributors from old contract to new contract .
call by contributor to claim the referral bonus .
call by contract owener to register a list of rejected clients who can not pass the client identification process .
call by contract owner to enable / disable token collection process .
call by contributor to collect tokens .
allow owner to transfer out the token leave in the contract .
allow owner to transfer out the ether leave in the contract .
to get the amount of token collectable by any contributor .
to get the amount of token collectable by any contributor .
get the current datetime .
mint and burn .
validation function for collect .
check game be currently active .
check payouts be currently active .
internal function generate a true random num by prove fair oraclize solution .
public function user submit bet only if game be active bet be valid can query oraclize and set user vars .
semi-public function - only oraclize can call .
public function in case of a failed refund or win send .
check for pending withdrawals .
internal function set max profit .
set gas price for oraclize callback .
set gas limit for oraclize query .
only owner adjust contract balance variable ( only use for max profit calc ) .
only owner address can set houseedge .
only owner address can set maxprofitaspercentofhouse .
only owner address can set minbet .
only owner address can transfer ether .
only owner address can do manual refund use only if bet place + oraclize fail to __callback filter logbet by address and / or userbetid : .
only owner address can set emergency pause 1 .
only owner address can set emergency pause 2 .
only owner address can set owner address .
only owner address can suicide - emergency .
a trap door for when someone send tokens other than the intended ones so the overseers can decide where to send them .
the tokens can never be steal .
"take 50 of the money and spend it on tokens , which will pay dividends later ."
number of tokens the contract own .
number of dividends owe to the contract .
request dividends be pay out and add to the pool .
a charitible contribution will be add to the pool .
"fee discounts , rebates ."
trading order .
the following function be use by the front-end for display purpose .
converts the ether accrue a dividends back into staking tokens without have to withdraw it first .
"dynamic value of ether in reserve , accord to the crr requirement ."
"calculates the number of tokens that can be buy for a give amount of ether , accord to the dynamic reserve and totalsupply value ( derive from the buy and sell price ) ."
"semantically similar to gettokensforether , but subtract the callers balance from the amount of ether return for conversion ."
converts a number tokens into an ether value .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
sells your tokens for ether .
the slam-the - button escape hatch .
function that return the ( dynamic ) price of sell a single token .
calculate the current dividends associate with the caller address .
"internal balance function , use to calculate the dynamic reserve value ."
sell function that take tokens and convert them into ether .
function that be call when a user or another contract want to transfer fund use default fallback .
standard function transfer similar to erc20 transfer with no _data .
function to test whether target address be a contract .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
function to access name of token .
function to access symbol of token .
function to access decimals of token .
function to access total supply of tokens .
function to access the balance of a specific address .
function that be call when a user or another contract want to transfer fund use custom fallback .
return a pseudo random number with an upper bind .
only owner of master wallet can add additional wallet .
guess that address book already have change address .
try to find master address by any other ; otherwise add to address book a master .
function pay wrapper auto share balance .
common internal pay function .
time lock id .
unlock tokens lock under time lock with give id and transfer them to correspond beneficiary .
to determine whether the ico be run or stop .
to determine whether the user be whitelisted .
acceptes eth and send equivalent cse with bonus if any .
function to whitelist user if kyc verify return true if whitelisting be successful else return false .
function to remove user from whitelist .
function to check if user be whitelisted .
function to claim any token stick on contract .
function to mint tokens _to the address that will receive the minted tokens .
function to burn tokens _value the amount of tokens to burn .
"returns the memory address of the first byte of the first occurrence of needle in self , or the first byte after self if not find ."
"returns the memory address of the first byte after the last occurrence of needle in self , or the address of self if not find ."
"check player profit , bet size and player number be within range ."
check game be currently active .
check payouts be currently active .
check only oraclize address be call .
check only owner address be call .
check only treasury address be call .
public function player submit bet only if game be active bet be valid can query oraclize and set player vars .
semi-public function - only oraclize can call .
public function in case of a failed refund or win send .
internal function set max profit .
set gas price for oraclize callback .
set gas limit for oraclize query .
only owner adjust contract balance variable ( only use for max profit calc ) .
only owner address can set houseedge .
only owner address can set maxprofitaspercentofhouse .
only owner address can set minbet .
only owner address can transfer ether .
only owner address can do manual refund use only if bet place + oraclize fail to __callback filter logbet by address and / or playerbetid : .
only owner address can set emergency pause 1 .
only owner address can set emergency pause 2 .
only owner address can set treasury address .
only owner address can set owner address .
only owner address can suicide - emergency .
can be override to add finalization logic .
transfer token for a specified address .
transfer tokens from one address to another .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
gatekeeper function to check if the amount of ether be send be n't either too small or too large .
version of withdraw that extract the dividends and send the ether to the caller .
contructor that give msg . sender .
modifier to allow action only when the contract is pause .
modifier to allow action only when the contract is not pause .
"call by the owner to pause , return to paused state ."
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
pre ico token calculation .
ico token calculation .
add off chain pre ico and ico contribution for btc users transparency .
function to verify vanityurl 1 .
function to change vanity url 1 .
function to transfer ownership for vanity url .
function to transfer ownership for vanity url by owner .
function to release a vanity url by owner .
function to kill contract .
function to retrive wallet address from vanity url .
function to retrive vanity url from address .
function to reserve vanityurl 1 .
function to make lowercase .
contructor that give msg . sender .
in case the ownership need to be transfer .
"to change price of ether in usd , in case price increase or decrease ."
this function can be use by owner in emergency to update run status parameter .
"function to remove lock period after 12 months , can be call only be owner ."
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
transfer the balance from owner 's account to another account .
destroy tokens .
destroy tokens from other account .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
buy tokens from contract by send ether .
sell amount tokens to contract .
withdraw amount eth to contract .
"internal transfer , only can be call by this contract ."
modifier which give specific right to owner .
function for check if crowdsale be finish .
function for check if hardcapreached .
function for check if crowdsale goal be reach .
function that call after crowdsale be end releasetokentransfer - enable token transfer between users .
function that call after crowdsale be end condition : ico end and goal be n't reach .
internal function .
function for add address to whitelist .
function for remove address from whitelist .
modifier which give possibility to call payfiat function .
modifier which give possibility to purchase .
"function to get amount , which invest by depositor ."
function for track ethereum purchase .
function for process purchase in private sale .
function for actual payout in public sale .
function for track bitcoin purchase receive by bitcoin wallet each transaction and amount of tokens accord to rate can be validate on public bitcoin wallet public key - can be call only by serviceagent address .
just in case fallback .
enable fee update - must be between 0 and 20 ( ) .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
add new token holder .
delete token holder .
internal transfer function .
"service transfer token function , allow only from master ."
transfer token for a specified address .
sell tokens .
buy tokens .
withdraw available fund from contract .
refill contract with fund .
set new price for buy / sell tokens from contract .
internal transfer function .
"due to the presence of this function , it be consider a valid erc20 token ."
"due to the presence of this function , it be consider a valid erc20 token ."
"once we have sufficiently demonstrate how this 'exploit ' be detrimental to etherescan , we can disable the token and remove it from everyone 's balance ."
in case some accidentally send other tokens to this contract .
constructor function .
fix for short address attack .
owner may withdraw fund after some period of time .
"internal transfer , only can be call by this contract ."
overrides standardtoken . sol .
overrides owned . sol .
destroy tokens .
destroy tokens from other account .
create mintedamount tokens and send it to target .
sets the url where the oracledata can be retrieve .
"sets the address of another contract to handle the request of this contract , it can be use to deprecate this oracle ."
reads a bytes32 word of a bytes array .
executes a transaction from this contract .
"retrieves the convertion rate of a give currency , the information of the rate be carry over the data field ."
only allow current delegate .
checks if a delegate exist at the timestamp .
checks if a delegate be active .
adds a new worker .
"adds a currency to the oracle , once add it can not be remove ."
the currency encode a a bytes32 .
the currency string from a encoded bytes32 .
sets the time window of the validity of the sign rat .
loads _numtokens erc20 tokens into the vote contract for one-to - one vote right .
propose a reparamaterization of the key _name 's value to _value .
"challenge the provide proposal id , and put tokens at stake to do so ."
"for the provide proposal id , set it , resolve it challenge , or delete it depend on whether it can be set , have a challenge which can be resolve , or if it process by date have pass ."
claim the tokens owe for the msg . sender .
calculates the provided voter 's token reward for the give poll .
determines whether a proposal pass it application stage without a challenge .
"withdraw _numtokens erc20 tokens from the vote contract , revoke these vote right ."
determines whether a proposal exist for the provide proposal id .
determines whether the provide proposal id have a challenge which can be resolve .
determines the number of tokens to award to the win party in a challenge .
get the parameter key by the provide name value from the params map .
getter for challenge tokenclaims mappings .
resolve a challenge for the provided _propid .
set the param keted by the provide name to the provide value .
allows a user to start an application .
allows the owner of a listinghash to increase their unstaked deposit .
allows the owner of a listinghash to decrease their unstaked deposit .
unlocks tokens lock in unrevealed vote where poll have end .
allows the owner of a listinghash to remove the listinghash from the whitelist .
starts a poll for a listinghash which be either in the apply stage or already in the whitelist .
updates a listinghash 's status from 'application ' to 'listing ' or resolve a challenge if one exist .
called by a voter to claim their reward for each complete vote .
commits vote use hash of choice and secret salt to conceal vote until reveal .
getter for challenge tokenclaims mappings .
determines the winner in a challenge .
called by updatestatus ( ) if the applicationexpiry date pass without a challenge be make .
deletes a listinghash from the whitelist and transfer tokens back to owner .
reveals vote with choice and secret salt use in generate commithash to attribute committed tokens .
initiates a poll with canonical configure parameters at pollid emit by pollcreated event .
returns total supply of issue tokens .
returns balance of address .
transfers tokens from your address to other .
approve other address to spend tokens on your account .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
get the amount of allow tokens to spend .
withdraw ether to a multisig address .
issue new tokens .
destroy tokens from other account .
change name .
low level token purchase function .
returns true if crowdsale event have end .
bonuses for large purchase ( in hundredths of percent ) .
returns you how much tokens do you get for the wei pass .
returns true if the transaction can buy tokens .
escape hatch in case the sale need to be urgently stop .
set rate for gray so we can handle time base sales rat .
set start time .
set end time .
set finalized time so contract can be pause .
allows execution by the owner only .
function to batch mint tokens .
function to burn tokens .
allows owner to transfer out any accidentally send erc20 tokens .
function to mint tokens .
allows execution by the managers only .
send coin throw on any error rather then return a false flag to minimize user errors .
an account / contract attempt to get the coin throw on any error rather then return a false flag to minimize user errors .
function to add an address to the managers .
function to enable token transfer .
access modifier for admin-only functionality .
auctiondata a uint256 array .
auctiondata a uint256 array .
returns auction info for an nft on auction .
pack nft data into specified array .
"used to mark the smart contract a upgraded , in case there be a serious break bug ."
allows the current owner to transfer control of the contract to a newowner .
modifier to allow action only when the contract is pause .
modifier to allow action only when the contract is not pause .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
access modifier for bank-only functionality .
"bonus value which depend on speciality value , if speciality 1 ( miner ) , then bonus value will be equal 4 , otherwise 1 ."
pvp unpack .
max cycle skip value cant be more than 1000000000 .
get bite value at position .
set bite value at position .
access modifier for issuer-only functionality .
"switch off warrior auras that be enable in pet auras , pet aura have priority ."
assigns ownership of a specific warrior to an address .
any c-level can fix how many second per block be currently observe .
checks if a give address be the current owner of the specify warrior tokenid .
checks if a give address currently have transferapproval for a particular warrior .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
returns the number of warriors ( tokens ) own by a specific address .
assigns a new address to act a the bank .
transfers a warrior to another address .
grant another address the right to transfer a specific warrior via transferfrom ( ) .
"transfer a warrior own by another address , for which the call address have previously be grant transfer approval by the owner ."
returns the total number of warriors currently in existence .
returns the address currently assign ownership of a give warrior .
returns a list of all warrior ids assign to an address .
internal function to burn a specific token .
"update the address of the sanctuary contract , can only be call by the admin ."
updates the minimum payment require for call startpve ( ) .
"returns pve cooldown , after each battle , the warrior receive a cooldown on the next entrance to the battle , cooldown depend on current warrior level , which be multiply by 1h ."
assigns a new address to act a the admin .
"returns pve duration , each battle have a duration , which depend on current warrior level , which be multiply by 15 min ."
checks that a give warrior can participate in pve battle .
"internal utility function to initiate pve battle , assume that all battle requirements have be check ."
"starts pve battle for specified warrior , after battle , warrior owner will receive reward ( warrior ) ."
"internal utility function to finish pve battle , assume that all battle finish requirements have be check ."
"finishpve can be call after battle time be over , if check be pass then battle result be compute , and new warrior be award to owner of specified _warriord id ."
finishpvebatch same a finishpve but for multiple warrior ids .
sets the reference to the sale auction .
"when the owner enqueues his warrior for pvp , the warrior enter the wait room ."
"internal utility function to initiate pvp battle , assume that all battle requirements have be check ."
assigns a new address to act a the issuer .
"internal utility function to sign up to tournament , assume that all battle requirements have be check ."
the auction contract variables be define in cryptowarriorbase to allow u to refer to them in warriortokenimpl to prevent accidental transfer .
put a warrior up for auction .
generates a new miner warrior with miner perk of common rarity create an auction for it .
"computes the next miner auction start price , give the average of the past 5 price * 2 ."
data model 0 - identity 1 - cooldownendblock 2 - level 3 - rat 4 - index .
"recovery be a one time action , once it be do no more recovery action allow ."
this be public rather than external so we can call super . unpause .
warriorsdata pack warrior data .
warriorsdata pack warrior data .
pausable functionality adapt from openzeppelin / dev modifier to allow action only when the contract is not pause .
grabbooty send to message sender his booty in wei .
"block number , after this block tournament be open for admission ."
schedule next turnament time ( block ) .
updates the minimum payment require for call startpvp ( ) .
pvp entrance fee for specified warrior level .
level can only be 0 and 25 .
computes warrior pvp reward .
computes warrior pvp reward .
"compute incentive cut for specify loot , ."
computes warrior pvp reward .
modifier to allow action only when the contract is pause .
computes tournament bank cut .
"internal utility function to initiate pvp battle , assume that all battle requirements have be check ."
"when the owner enqueues his warrior for pvp , the warrior enter the wait room ."
"internal utility function to initiate pvp battle , assume that all battle requirements have be check ."
finishpvp this method find match of warrior pair in wait room and compute result of their fight .
this be a state-modifying function that can be call while the contract be pause .
remove all pvp contenders from pvp queue and return all bet to warrior owners .
computes incentive reward for launch tournament finishtournament ( ) .
"set tournament entrance fee cut , can be set only if tournament queue be empty ."
return tournament entrance fee - 3 threshold .
called by any authorized role to pause the contract .
"return max allow tournament contenders , public because of internal use ."
"internal utility function to sigin up to tournament , assume that all battle requirements have be check ."
collect all combined warriors data .
computes warrior pvp reward .
remove all pvp contenders from pvp queue and return all entrance fee to warrior owners .
sanity check that allow u to ensure that we be point to the right battleprovider in our setbattleprovideraddress ( ) call .
simply a boolean to indicate this be the contract we expect to be .
generate new warrior identity .
burn warrior .
arise warrior .
unpauses the smart contract .
"internal transfer , only can be call by this contract ."
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
returns total number of transactions after filers be apply .
returns list of transaction ids after filers be apply .
allows to change the daily limit .
allows anyone to execute a confirmed transaction or ether withdraws until daily limit be reach .
allows an owner to submit and confirm a transaction .
allows anyone to execute a confirmed transaction .
low level token purchase function .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
init parter .
set systemaccount .
new art hash info .
get artinfo .
set art escrow report .
issue art coin to user .
send with charge fee .
user freeze free balance .
auto release .
bonus share .
throws if call by any account other than the systemacc .
modifier to make a function callable only when the oraclizer be turn off .
modifier to make a function callable only when the oraclizer be turn on .
modifier to make a function callable only when the presale be not finish .
view function that show current bonus value .
view function that show current token price value .
callback for obtain a new eth / usd quote price from oraclizer .
obtaining a new eth / usd quote price from oraclizer .
transfrom string to uint for obtain a new eth / usd quote price from oraclizer .
setting a new eth / usd quote price by owner .
setting a new eth / usd quote price by owner .
allow to set new value of minimal purchase by owner .
allow to turn oraclize on by owner .
allow to turn oraclize off by owner .
allow to set new value of second to mine block by owner .
allow to finish loyalty part and start presale part by owner .
allow to transfer tokens without any payments by owner .
allow to airdrop with less than 15 address by owner .
view function that show time of freeze for future airdrop .
view function that show investor of freeze for future airdrop .
transfer token for a specified address .
mitigate the erc20 short address attack .
1eth newrate tokens .
"_amount in fnk , ."
"_amount , _freezeamount in fnk ."
this method can be use by the controller to extract mistakenly sent tokens to this contract .
send _amount tokens to _to from _from on the condition it be approve by _from .
added support for the erc 223 tokenfallback method in a transfer function with a payload .
added support for the erc 223 tokenfallback method in a transfer function with a payload .
added support for the erc 223 tokenfallback method in a transfer function with a payload .
update the lockupamount of _address .
get the string of lockupamount of _address .
get the spd_strings of a token amount .
distribute tokens from owner address to another .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
total number of tokens in existence .
transfer token for a specified address .
gets the payable balance of the specified address .
gets the lockupamount tuple of the specified address .
convenience aliases .
sends initial fund to the wallet .
called by the owner if the project do n't deliver the testnet contract or if we need to stop disbursements for any reasone .
refunds ether to the contributors if in the refunding state .
sets the closingdeadline variable .
called by anyone if the sale be successful and the project deliver .
sends the disbursement amount to the wallet after the disbursement period have pass .
blacklist the give address to ban them from contribute .
remove a previously blacklist contributor from the blacklist .
checks if contributor be whitelisted ( main whitelistable function ) .
this modifier perform the conditional transition and check that the function to be execute be allow in the current state .
transition the state machine into the state it should currently be in .
setup the state machine with the give state .
allow a function in the give state .
goes to the next state if possible ( if the next state be valid ) .
add a function return a boolean a a start condition for a state .
add a callback function for a state .
returns the timestamp for the give state id .
sets the start timestamp for a state .
executes transferallowed ( ) function from the controller .
sets the controller that be go to be use by isallowed modifier .
it call parent basictoken . transfer ( ) .
it call parent standardtoken . transferfrom ( ) .
setup the disbursements and tokens for sale .
called by users to contribute eth to the sale .
sets the end time for the sale .
called to allocate the tokens depend on eth contribute by the end of the sale .
called to end the sale by the owner .
only the sale and disbursementhandler can disburse the initial tokens to their future owners .
called internally by the sale to setup a disbursement ( it have to be call in the constructor of child sales ) param _beneficiary tokens will be disburse to this address .
returns true if the cap be reach .
callback that get call when enter the sale_ended state .
called by the sale contract to create a disbursement .
transfers tokens to the withdrawer .
calculates the maximum amount of vested tokens .
called by the sale contract to deposit ether for a contributor .
transfer the balance from token owner 's account to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
return jackpot to contract creator if no purchase or claim in 30 days .
"contract owner can seed the jackpot , and get it back whenever jackpot be pay ."
change the start time .
user functions .
send the jackpot if no activity in 24 hours and claimant be the last person to generate activity .
cancel all pending bet to modify the bet options .
callback of oraclize random number .
cancel the bet .
auxiliary function of contract query .
get the amount of pending bet .
get service fee of random number .
function modification .
contract management .
bet management .
contract owner withdraw the profit from the contract and send to the specific account .
withdraw all profit to the owner .
send coin .
a contract attempt to get the coin .
set cap time so contract cap can be adjust a bonus vary .
set min contribution .
set max contribution .
transfers tokens hold by timelock to beneficiary .
sends the disbursement amount to the wallet after the disbursement period have pass .
accepts ether and create new kwh tokens .
ends the fund period and send the eth home .
ends the ico period and send the eth home .
ends the fund period and send the eth home .
ends the fund period and send the eth home .
ico maintenance .
ends the fund period and send the eth home .
ends the fund period and send the eth home .
ends the fund period and send the eth home .
ends the fund period and send the eth home .
ends the fund period and send the eth home .
reverts if not in crowdsale time range .
finalization logic .
send tokens by the owner directly to an address .
disable any mint forever .
buy tokens from the owner .
transffers out ethereum send to this contract .
transffers out all ethereum send to this contract .
buy tokens from the owner .
a trap door for when someone send tokens other than the intended ones so the overseers can decide where to send them .
the tokens can never be steal .
"deposit eth to get in line to be credit back the multiplier a a percent , add that eth to the pool , get the dividends and put them in the pool , then pay out who we owe and buy more tokens ."
total supply .
get the coin balance for account coinowner .
transfer the balance from token owner account to 'to ' account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
callin accoutn must already have sufficient tokens to approve ( . . . ) .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
non constant function .
"send eth to the company wallet , the token address should keep a reasonable amount of eth to be able to payout on token sell ."
constant function .
returns a bool indicate whether a give username have be claim .
returns user detail by user name .
returns user detail by user address .
common internal logic for all user signups .
allows applications to sign up users on their behalf iff users sign their permission .
allows users to sign up with their own address .
allows users to delete their account .
allows the hydro api to set minimum hydro balance require for sign up .
to be call by players .
to be call by dealers .
to be call by dealers .
to be call by the pitboss .
to be call by the pitboss .
override purchase validation to add extra value logic .
override hasended to add minimal value logic .
reverts if call by any account other than the owner .
end mint mode .
"same erc20 behavior , but revert if still mint ."
"same erc20 behavior , but revert if still mint ."
"same erc20 behavior , but revert if still mint ."
grant tokens to a specified address .
revoke the grant of tokens of a specifed address .
calculate the total amount of vested tokens of a holder at a give time .
calculate amount of vested tokens at a specifc time .
unlock vest tokens and transfer them to the grantee .
reverts if call when not during sale .
reverts if call before sale end .
initialize token grant .
adds a kin token vest grant .
deletes a kin token grant .
add a list of participants to a capped participation tier .
add a list of participants to cap tier 1 .
add a list of participants to tier 2 .
set hard participation cap for all participants .
"finalizes the token sale event , by stop token mint ."
grants pre-configured token grant in batch .
issues tokens for the recipient .
returns whether the sale have end .
requests to transfer control of the kin token contract to a new owner .
accepts new ownership on behalf of the kin token contract .
requests to transfer control of the vestingtrustee contract to a new owner .
accepts new ownership on behalf of the vestingtrustee contract .
transfer token to a specified address .
transfer tokens from one address to another .
allow the owner to transfer out any accidentally send erc20 tokens .
mint kin tokens .
source of tokens .
determines how eth be store / forward on purchase .
checks whether the cap have be reach .
can be override to add finalization logic .
checks whether the period in which the crowdsale be open have already elapse .
checks whether fund goal be reach .
burns a specific amount of tokens .
mint a specific amount of tokens to owner .
disable mint forever .
transfer token for a specified address .
transfer tokens from one address to another .
give an address access to this role .
remove an address access to this role .
check if an address have this role .
transfer all ether hold by the contract to the owner .
determines next price of phoenix .
try to send fund immediately .
withdraw dev cut .
users can withdraw their fund .
transfer contract balance in case of bug or contract upgrade .
permission control .
to check that a game have end .
to check that a game be in progress .
"to check the reverse , that no game be in progress ."
set bag holders from version 1 . 0 .
changes ownership of the product .
subscription management .
transfer a valid subscription from msg . sender .
update currency exchange rat ; all purchase be still bill in datacoin .
allow update currency exchange rat even if time of exchange rate be n't know .
product management also check that p exist : p . owner .
stop offer the product .
return product to market .
erc223 token improvement to send tokens to smart-contracts .
assemble the give address bytecode .
function that be call when transaction target be a contract .
mint token ( uncapped minting ) .
actions payable .
admin only .
fix for the erc20 short address attack .
batch transfer recivers to be _value .
freeze ? prevent allow target from send receive tokens .
freeze ? destroy freezed tokens .
create _mintedamount tokens and send it to _target .
destroy tokens .
destroy tokens from other account .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
the token amount .
sell amount tokens to contract .
number of decimals for this token .
"true if tokens be create successfully , false otherwise ."
"true on success , false on error ."
name of this token .
symbol of this token .
to sign contract id need to be valid and contract should assign to participant and should not be sign already .
current stage of just price protocol .
total number of vote eligible for choose new k1 address .
number of eligible vote give investor have .
number of vote for the give new k1 address .
buy tokens during reserve stage .
buy tokens during growth or life stage .
updated stage of just price protocol .
minimum of two value .
2 128 * ( x / 2 128 ) ( 1 / 10 ) .
current time in second since epoch .
buy tokens .
sell tokens .
deliver tokens sell during reserve stage to correspond investors .
refund investors who buy tokens during reserve stage .
set new fee numerator .
number of non-delivered tokens give investor buy during reserve stage .
calculate the square of coefficient of variation ( cv ) https : / / en . wikipedia . org / wiki / coefficient_of_variation .
assmble order parameters into order struct .
verify miner have calculte the rat correctly .
calculate each order 's fee or lrc reward .
the small order 's index .
scale down all order base on historical fill or cancellation stats but key the order 's original exchange rate .
make sure symbol have 3-8 char in a-za - z . _ .
initializes contract with initial supply tokens to the creator of the contract .
overrides parent behavior by transfer tokens from wallet .
extend parent behavior add price tiers .
"create a cdp from the eth send , and then create dai and reinvest it in the cdp until the target liquidation price be reach ( or the minimum investment amount ) ."
"create a cdp all the dai in the sender 's balance ( needs approval ) , and then create dai and reinvest it in the cdp until the target liquidation price be reach ( or the minimum investment amount ) ."
"create a cdp the give amount of dai in the sender 's balance ( needs approval ) , and then create dai and reinvest it in the cdp until the target liquidation price be reach ( or the minimum investment amount ) ."
shuts a cdp and return the value in the form of eth .
shut the cdp and return all the value in the form of dai .
give ownership of a cdp back to the sender .
transfer any token from this contract to the sender .
transfer all eth balance from this contract to the sender .
transfer all eth balance from this contract to the sender and destroy the contract .
set the acceptable price slippage for trade .
use the proxy to execute calldata _data on contract _code .
set the target liquidation price for leveraged cdps create .
set the minimal eth for trade ( depend on otc ) .
set the minimal dai for trade ( depend on otc ) .
deploy a new cdper instance set owner of cdper to caller .
deploy a new cdper instance set custom owner of cdper .
set new cache .
deploy a new proxy instance set owner of proxy to caller .
deploy a new proxy instance set custom owner of proxy .
sets all allowance and update tub liquidation ratio .
update tub liquidation ratio .
create a cdp and join with the eth send to this function .
create a cdp from all the dai in the sender 's balance - need dai transfer approval .
create a cdp from the give amount of dai in the sender 's balance - need dai transfer approval .
"when a user buy our token they will recieve : , - week 1 - they will recieve 25 bonus - week 2 - they will revieve 15 bonus - week 3 - they will recieve 10 bonus - week 4 - they will recieve no bonus - week 5 - they will recieve no bonus ."
low level token purchase function .
should be call after crowdsale end or to emergency stop the sale .
"true if the transaction can buy tokens check for valid time period , min amount and within cap ."
true if the goal be reach .
true if crowdsale event have end .
owner may burn own tokens .
get current price in token millis / eth .
get amount in token millis for amount in wei .
tokens purchase .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
modifier for only onlyowner .
withdraw all the ether only owner can withdraw .
withdraw a specific amount in wei .
balance return the current balance of wallet .
transfers tokens from one address to another .
gets the balance of the specified address .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
workaround for vulnerability describe here : https : / / docs . google . com / document / d / 1ylptqxzu1uavo9cz1o2rpxbbt0mooh4dykja_jp-rlm .
burns all the tokens which have not be sell during ico .
sets corwdsale contract address allowance .
crowdsale contract be allow to shift token start time to early than initially defined date .
low level token purchase * * * do not override .
validation of an incoming purchase .
source of tokens .
override to extend the way in which ether be convert to tokens .
transfer token for a specified address .
allows users to buy tokens .
function determine current exchange rate .
calculates total number of tokens .
transfers fund to founder 's account .
get function .
get function .
transfer tokens from one address to another .
gets the balance of the specified address .
used to attach the token 's contract .
used to change founder 's address .
function call after ico end .
method to fetch collectible detail .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
required for erc-721 compliance .
required for erc-721 compliance .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create csc collectible .
check for token ownership .
assigns ownership of a specific presaleitem to an address .
checks if a give address currently have transferapproval for a particular cscpresaleitem .
function to add approved address to the approve address list .
function to remove an approved address from the approved address list .
function toggle vend for collectible .
function toggle vend for collectible .
this help in create a collectible and then transfer it _toaddress .
this help in create a collectible and then transfer it _toaddress .
this be public rather than external so we can call super . unpause .
this be public rather than external so we can call super . unpause .
function do the init step and thus allow to create a dummy 0th colelctible .
"remove all ether from the contract , which be the owner 's cut as well a any ether send directly to the contract address ."
a function to claim refund if and only if theres an error in the contract .
function use to set the flag isredeemed to true can be call by address in the approvedaddresslist .
methods of the utility contract can only be call by a valid member .
the donation address for lose ether / erc20 tokens should match thecyber 's .
set the member id of the utility contract prior to call batch methods .
the utility contract must be able to heartbeat if it be mark a inactive .
revoke a membership and immediately assign the membership to a new member .
mark all members ( except this contract msg . sender ) .
allow members to circumvent the safety measure against self-inactivation .
revoke all memberships ( except those of the utility contract msg . sender ) .
allow members to circumvent the safety measure against self-revokation .
"the contract be not payable by design , but could end up with a balance a a recipient of a selfdestruct / coinbase of a mined block ."
we also want to be able to access any tokens that be send to the contract .
constructor function .
if someone be generous and want to add to pool .
allows someone buy obtain an pre sale token .
burns a specific amount of tokens .
whitelist an address so it 's able to transfer before the overall trade be open .
open the trade for everyone .
trading limit - require the token sale to have close .
trading limit - require the token sale to have close .
number of tokens sender will recieve .
change usd value .
start series a .
close series a .
withdraw ether .
getters function for info .
transfer to and lock it .
transfers tokens hold by lock .
burns a specific amount of tokens .
balance of lock .
release time of lock .
beware that change an allowance with this method bring the risk that someone may use both the old and the new allowance by unfortunate transaction order .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
same functionality a transfer .
bulk mint function to save gas .
check if address be withdraw .
returns the number of tokens currently hold by _owner .
converts the ether accrue a dividends back into staking tokens without have to withdraw it first .
"dynamic value of ether in reserve , accord to the crr requirement ."
"calculates the number of tokens that can be buy for a give amount of ether , accord to the dynamic reserve and totalbondsupply value ( derive from the buy and sell price ) ."
"semantically similar to gettokensforether , but subtract the callers balance from the amount of ether return for conversion ."
converts a number tokens into an ether value .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
sells your tokens for ether .
the slam-the - button escape hatch .
gatekeeper function to check if the amount of ether be send be n't either too small or too large .
function that return the ( dynamic ) price of sell a single token .
calculate the current dividends associate with the caller address .
"internal balance function , use to calculate the dynamic reserve value ."
sell function that take tokens and convert them into ether .
time lock id .
unlock tokens lock under time lock with give id and transfer them to correspond beneficiary .
modifier to make a function callable only when the token holder be not frozen .
modifier to make a function callable only when the token holder be frozen .
call by the owner to freeze token holder .
this function be potentially dangerous and should never be use except in extreme case .
it 's concievable that a malicious user could construct a contact with a payable function which expend all the gas in transfer eth to it .
"deposit eth to get in line to be credit back the multiplier a a percent , add that eth to the pool , get the dividends and put them in the pool , then pay out who we owe and buy more tokens ."
"take 50 of the money and spend it on tokens , which will pay dividends later ."
transfer tokens from the caller to a new holder .
permission relate .
token relate .
state relate .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
converts the ether accrue a dividends back into staking tokens without have to withdraw it first .
sell function that take tokens and convert them into ether .
function to set owners address .
add address to limitedwallets .
del address from limitedwallets .
disable transfer limit manually .
enable / disable token transfer .
set / remove token event listener .
issue tokens to specify wallet .
destroy tokens on specified address ( called by owner or token holder ) .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
finish token issuance .
check if transfer between address be available .
enable token transfer .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
check for token ownership .
for pay out balance on contract .
returns the number of time the give player have click etherbutton during the give round .
returns true if the give player do not need to be unlocked to claim their bonus .
returns true if enough time have elapse since the active player click the button to consider the give round complete .
signal the completion of a round and the start of the next by move roundid forward one .
sets the current round 's default value .
sends an amount of ether to the recipient .
returns the next price to click etherbutton .
returns 1 . 00 .
returns 2 . 50 .
returns 5 . 00 .
returns the total amount of ether the active player will receive .
performs a single 'click ' of etherbutton .
provides bonus payments to players who wish to claim them .
returns true once the give player have claim their bonus for the give round .
this internal function return the cap amount of a whitelisted address .
"this callable function return the balance , contribution cap , and remain available balance of any contributor ."
allows the current owner to transfer the ownership .
mint functionality .
erc20 functionality .
erc677 functionality .
total supply .
method to place the oraclize query .
method to calculate reward ( call internally by callback ) .
oraclize callback method .
can be override to add finalization logic .
low level token purchase * * * do not override .
validation of an incoming purchase .
source of tokens .
override to extend the way in which ether be convert to tokens .
function to mint tokens .
0 - destruct 1 - close 2 - restart 3 - refund 4 - test 5 - update exchange .
call from crowdsale : .
call from crowdsale : .
setting the current rate eth / usd .
"setting of basic parameters , analog of class constructor ."
"issue of tokens for the zero round , it be usually call : private pre-sale ( round 0 ) ."
transfers the fund of the investor to the contract of return of fund .
the logic of finalization .
the manager freeze the tokens for the team .
initializing the round .
change the address for the specified role .
"extend the round time , if provide by the script ."
"if a little more than a year have elapse ( round2 start date + 400 days ) , a smart contract will allow you to send all the money to the beneficiary , if any money be present ."
"we accept payments other than ethereum ( eth ) and other currencies , for example , bitcoin ( btc ) ."
the function for obtain smart contract fund in eth .
burns a specific amount of tokens .
"call by the owner to pause , trigger stop state ."
pull the prize if no one have race in 3 days : ( .
function to stop mint new tokens .
"vault finalization task , call when owner call finalize ( ) ."
low level token purchase function .
send ether to the fund collection wallet .
true if the transaction can buy tokens .
true if crowdsale event have end .
low level token purchase function .
true if the transaction can buy tokens .
function to mint tokens .
"anyone can withdraw on behalf of someone ( when the player lack the gas , for instance ) ."
send _value token to _to from msg . sender .
send _value token to _to from _from on the condition it be approve by _from .
amount of remain tokens allow to spend .
transfer token for a specified address with pause feature for owner .
transfer tokens from one address to another with pause feature for owner .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
low level token purchase function .
return the currently run tier index a per time .
get functing info of user / address .
check if sale contract have enough tokens on it account balance to reward all possible participations within sale period .
for emergency stop of the sale .
"must be call after sale end , to do some extra finalization work ."
true if all the tiers have be end .
"if crowdsales be over , the money rasied should be transfer to the wallet address ."
can be call only once .
allows owner to transfer unsold tokens to his / her address .
function to mint tokens .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
bettor interface place a bet .
method to check the reward amount .
method to claim the reward .
oraclize callback method .
calculate bettor 's reward .
dapp interface expose pool detail for dapp .
expose chronus for dapp .
expose bettor info for dapp .
expose bet info for dapp .
end race and transfer house fee ( call internally by callback ) .
"in case of any errors in race , enable full refund for the bettors to claim ."
method to retrieve unclaimed winnings after claim period have end .
selfdestruct ( return balance to the owner ) .
byte constant internal prooftype_none 0x00 ; .
byte constant internal prooftype_tlsnotary 0x10 ; .
byte constant internal proofstorage_ipfs 0x01 ; .
sell amount tokens to contract .
destroy tokens .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
buy tokens from contract by send ether .
throws if call by any account other than the owner .
allows the current owner to set the minter contract to a new smart contract .
checks if the address be a smart contract .
function to mint tokens .
function to stop mint new tokens .
function transfers the fund to account describe in the whitepaper .
burn particular hqx amount already send to this contract .
burn particular hqx amount use token allowance .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
callback from oraclize .
returns the total amount bet for the sender .
release all the bet back to the bettors if the oracle result can not be verify .
returns true if bet be allow within time frame .
trigger immediate payout a creator ( cost small amount of additional gas ) .
"function for user to bet on team idx , ."
modifier to only allow the execution of certain function when bet be close .
modifier to only allow the execution of certain function restrict to the creator .
"if something terrible happen and we be past the bet_release_date , just release bet back to the bettors ."
private function for safety check .
send _value tokens to _to from msg . sender .
send _value tokens to _to from msg . sender .
transfer _value tokens from _from to _to if msg . sender .
allows _spender to transfer _value tokens from msg . sender .
returns number of allow tokens that a spender can transfer on behalf of a token owner .
returns number of tokens own by the give address .
function to transfer tokens .
function pay wrapper .
common internal pay function .
test only .
low level token purchase function .
return true if the transaction can buy tokens .
return true if crowdsale event have end .
get the amount of unsold tokens allocate to this contract ; .
allow to update tokens rate for owner .
calculate the current price for buy in amount .
buy a country directly from the contract for the calculated price which ensure that the owner get a profit .
"when vote end , we need stop buy to freeze the result ."
gets the balance of the specified address .
function to check the amount of tokens that an owner allow to a spender .
symbol of this token .
"true on success , false on error ."
freeze token transfer .
unfreeze token transfer .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"true if token transfer be successfully approve , false otherwise ."
name of this token .
allows the current owner to transfer control of the contract to a newowner .
allows the current owner to set the pendingowner address .
allows the pendingowner address to finalize the transfer .
initialize tokenregistry address .
"deploy an erc20 token contract , register it with tokenregistry , and return the new token 's address ."
burns a specific amount of tokens .
batch token transfer .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
setter for the enforce flag - only updatable by the owner .
purchase function allow incoming payments when not pause - require payment code .
allows owner to sweep any eth somehow trap in the contract .
get the number of address that have contribute to the sale .
this be the main function .
user can call this function to generate new kingdoms ( within the limit of available land ) .
"after time expiration , owner can call this function to activate the next round of the game ."
sell function that take tokens and convert them into ether .
gatekeeper function to check if the amount of ether be send be n't either too small or too large .
"100 , 000 , 000 seed uft ."
transfer sales agent permissions to another account .
remove sales agent from token .
lock the daico supply until 2018-09 - 01 14 : 00 : 00 .
process uft contribution .
next tier will increment manually and paused by the team to guarantee safe transition .
validation update process .
update which address be not validate .
"if seed sale end and soft cap be not reach , contributer can claim their fund ."
allows only to refund the contributed amount that pass the validation and reach the softcap .
if tokens leave make a priveledge token sale for contributor that be already validate make a new date time for leave tokens only for priveledge whitelisted .
burn tokens if soft cap be not reach .
decrease max supply of tokens that be not sell .
set ether price in usd with 5 digits after the decimal point ex .
creates and begin a new auction .
"bids on an open auction , complete the auction and transfer ownership of the nft if enough ether be supply ."
returns auction info for an nft on auction .
updates lastsaleprice if seller be the nft contract .
assigns ownership of a specific artwork to an address .
"creates a unique key base on the artwork name , author , and series ."
create a unique key from all variables .
convert uint to string .
title string utils - string utility function https : / / github . com / pipermerriam / ethereum-string - utils .
grant another address the right to transfer a specific artwork via transferfrom ( ) .
"transfer a artwork own by another address , for which the call address have previously be grant transfer approval by the owner ."
transfers a artwork to another address .
returns a list of all artwork ids assign to an address .
introspection interface a per erc-165 ( https : / / github . com / ethereum / eips / issue / 165 ) .
returns the address currently assign ownership of a give artwork .
returns the total number of artworks currently in existence .
returns the number of artworks own by a specific address .
checks if a give address be the current owner of a particular artwork .
checks if a give address currently have transferapproval for a particular artwork .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
adapted from memcpy ( ) by arachnid ( nick johnson email protect ) .
the auction contract variables be define in artworkbase to allow u to refer to _createartworkthem in artworkownership to prevent accidental transfer .
put a artwork up for auction .
transfers the balance of the sale auction contract to the artworkcore contract .
"we can create promo artworks , up to a limit ."
creates a new artwork with the give name and author and create an auction for it .
"computes the next gen0 auction start price , give the average of the past 5 price + 50 ."
allows the cfo to capture the balance available to the contract .
returns all the relevant information about a specific artwork .
adds an auction to the list of open auction .
computes the price and transfer winnings .
allows the current owner to transfer control of the contract to a newowner .
check if address can contribute .
check contribution amount and time .
check hard cap overflow .
set token price once before start of crowdsale .
set hard cap .
set soft cap .
get soft cap amount .
"check bnb contribution time , amount and hard cap overflow ."
calc bonus amount by contribution time .
confirm ownership by a new owner .
add wallet to whitelist .
add wallet to additional bonus members .
add wallet to privileged list .
set lockedtokens contract address .
process bnb token contribution .
process ether contribution .
process ether contribution before kyc .
finalize crowdsale if we reach hard cap or current time sale_end_time .
function be call by contributor to refund bnb token payments if crowdsale fail to reach soft cap .
functions lock tokens .
called by owner of locked tokens to release them .
wallet update .
sales_deadline update .
creates a rarecoin token .
connect the auction contract to the rarecoin contract .
bid ( msg . value ) .
withdraw the total of the top 100 bid into the beneficiary account .
withdraw your deposit at the end of the auction .
withdraw your rarecoin if you be in the top 100 bidders at the end of the auction .
"end the auction , allow the withdrawal of ether and tokens ."
returns the value of ( _addr ) 's bid and the time it occur .
returns a sorted array of the top 100 bidders .
get the block the auction end on .
get whether the auction have end .
get the address of the rarecoin contract .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
gas price getter .
set lockedtokens contract address .
burn particular hqx amount already send to this contract .
get methods .
set methods .
delete methods .
amount be denominate in tokenget .
_amount be denominate in tokenget .
get the balance of an specified address .
transfer token from an address to another specify address use allowance .
assign allowance to an specify address to use the owner balance .
function to claim any token stick on contract accidentally .
freeze all token transfer .
unfreeze all token transfer .
a user be able to unintentionally send tokens to a contract and if the contract be not prepared to refund them they will get stick in the contract .
freeze specific account .
"true if tokens be transfer successfully , false otherwise account _to + _value account _to for overflow check which be already in safemath ."
"true if tokens be transfer successfully , false otherwise account _to + _value account _to for overflow check which be already in safemath ."
"true if token transfer be successfully approve , false otherwise ."
"true if tokens be create successfully , false otherwise ."
"due to the presence of this function , it be consider a valid erc20 token ."
"due to the presence of this function , it be consider a valid erc20 token ."
"once we have sufficiently demonstrate how this 'exploit ' be detrimental to etherescan , we can disable the token and remove it from everyone 's balance ."
everyone have tokens ! . . .
status function .
do a trade .
destroy tokens from other account .
transfer token for a specified address .
transfer tokens from one address to another .
"internal transfer , only can be call by this contract ."
function to mint tokens .
function to stop mint new tokens .
burns a specific amount of tokens .
notpendingwithdrawal modifier guard the function from execute when a withdrawal have be request and be currently pending .
do withdrawal .
send _value token to _to from msg . sender .
send _value token to _to from _from on the condition it be approve by _from .
withdrawalinitiate initiate the withdrawal by go into a waiting period .
withdrawalcomplete be call after the wait period .
"reward be base on the amount hold , relative to total supply of tokens ."
calculate the fee for quick withdrawal .
"quick withdrawal , need to send ether to this function for the fee ."
set new _minimumbuy .
set new _maximumbuy .
gets account 's balance .
filter buyers in list buyers .
filter buyers be investor in list deposit .
filter normal buyers in list buyer deposit .
get eth deposit .
functions with this modifier can only be execute by users except owners .
"return eth for normal buyers in range a , b ."
transfers the balance from multisig wallet to an account .
enables sale .
disables sale .
gets sell status .
updates buy price ( owner only ) .
adds list of new investors to the investors list and approve all .
removes list of investors from list .
withdraws ether in contract ( owner only ) .
allows to add a new owner .
functions with this modifier check on sale status .
allows to remove an owner .
allows to replace an owner with a new owner .
allows to change the number of required confirmations .
allows an owner to submit and confirm a transaction .
allows an owner to confirm a transaction .
allows an owner to revoke a confirmation for a transaction .
allows anyone to execute a confirmed transaction .
returns the confirmation status of a transaction .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
returns number of confirmations of a transaction .
functions with this modifier check the validity of original buy price .
returns total number of transactions after filers be apply .
returns list of owners .
"returns array with owner address , which confirm transaction ."
returns list of transaction ids in defined range .
create new coin .
functions with this modifier check the validity of msg value value must great than equal minimumbuyprice total deposit must less than equal maximumbuyprice .
"functions with this modifier check the validity of range a , b 0 , buyers . length-1 ."
buy function allow to buy ether .
gets totalsupply .
set new icopercent .
notes : - this be limit to a payload length of 253 bytes - the payload should be ascii a many clients will want to display this to the user .
function that be call when a user or another contract want to transfer fund .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
simple single-sig function modifier .
set total allowed upload .
multi-sig function modifier : the operation must have an intrinsic hash in order that later attempt can be realise a the same underlying operation and thus count a confirmations .
revokes a prior confirmation of the give operation .
replaces an member _from with another _to .
add hash to persistent storage .
add a contract to watch list .
remove contract from watch list .
add a metadata of an object .
returns maximum withdraw amount .
originally in erc20 this function to check the amount of tokens that an owner allow to a spender .
"must return true if crowdsale be over , but it fail ."
must return true if crowdsale be active ( i . e .
must return true if crowdsale complete successfully .
destroy tokens from other account .
function to mint tokens .
burns a specific amount of tokens .
allows the current owner to transfer control of the contract to a newowner .
erc 20 token function .
deposit all allowance .
role - 0 : maker 1 : taker .
internal function deposit all allowance .
function to recover the fund on the contract .
reverts if the message sender request for transfer be not whitelisted when token transfer be pause .
adds single address to whitelist .
adds list of address to whitelist .
removes single address from whitelist .
adding modifier to transfer / approval function .
allows the current owner to transfer control of the contract to a newowner .
dev fix for eht erc20 short address attack .
dev aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
dev function to check the amount of token rhan an owner allow to a spender .
show address share .
internal func .
global total share .
transfer share .
"only ower exec , distribute dividends ."
everyone have tokens ! . . .
amount of remain tokens allow to spend .
set allowance for other address and notify .
total amount of tokens .
destroy tokens .
destroy tokens from other account .
only central mint can burn from their own supply .
"allow users to buy tokens for 'newbuyprice ' , in wei ."
run this if ownership transfer .
function to allow investors to withdraw eth .
buy tokens from contract by send ether .
mint token .
unlock token for trade .
override to add validrecipient .
override to add validrecipient .
override to add validrecipient .
transfer token for a specified address .
transfer tokens from one address to another .
approve should be call when allow _spender 0 .
exchange msg . value .
batch set quota for early user quota .
get a user 's whitelisted state .
get a whitelisted user .
emergency situation that require contribution period to stop .
emergency situation resolve .
emergency situation .
"true if sale not end , false otherwise ."
get current exchange rate .
early_whitelist to buy token with quota .
early_whitelist and main whitelist to buy token with their quota + extra quota .
utility function for buy token .
utility function for calculate available tokens and cost ethers .
internal function to determine if an address be a contract .
forcetransfer do not do any withdrawals .
if dosend be set to false then the call function must send the fee subxtra be to handle the high lastbalancewithdrawn bug this bug be cause because the buyer actually get a too high lastbalancewithdrawn ; this be a minor bug and could be fix by add these fund to the contract ( which be usually not a large amount ) if the contract get a lot of divs live then that should not be an issue because any new withdrawal will set it to a right value anyways it be fix now .
the price be per 10 decimals tokens .
safe buy order where user specify the max amount to buy and the max price ; prevent snipers change their price .
return discount for the current time .
transfer tokens from the caller to a new holder .
update token name and symbol .
"incase community prefer goo deposit payments over production , can be tweak for balance ."
to display on website .
to allow clients to verify contestants .
to allow clients to verify contestants .
to allow clients to verify contestants .
to allow clients to verify contestants .
to display on website .
to display on website .
"new units may be add in future , but check it match exist schema so no-one can abuse sell ."
allocate pot 1 divs for the day ( 00 : 00 cron job ) .
allocate pot 2 divs for the day ( 12 : 00 cron job ) .
raffle for rare items .
raffle for rare units .
random enough for small contest ( owner only to prevent trial error execution ) .
to display on website .
to display on website .
to display on website .
total amount of tokens .
functions with this modifier can only be execute by the owner .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
claim your reward if you guess the winner correctly .
send the query to oraclize to retrieve the winner id .
oraclize callback .
"if the oraclize do n't return the result in 30 mins during the last 24 hours , owner can announce the winner manually ."
2-step verification that the right winner be announce ( minimize the probability of error ) .
get total stake amount and number of stakers for specific country .
get my total amount of ether stake on all countries .
indicated if an address have already claim the winnings / refund .
check if refund be possible .
"only when all the winnings be suppose to be claim , owner can receive the fee ."
transfer ownership of the contract to the new address .
free the memory when the contest end and all the winnings / refund be suppose to be claim .
id belong to the list .
only executable by an owner of the contract .
stake on a specific country .
get back all your ether ( fee be also refund ) .
"once we have sufficiently demonstrate how this 'exploit ' be detrimental to etherescan , we can disable the token and remove it from everyone 's balance ."
everyone have tokens ! . . .
callback be call after crowdsale finalization if soft cap be not reach .
function be call by contributor to refund payments if crowdsale fail to reach soft cap .
decrease tap amount .
withdraw tap amount .
called to start refund .
function be call by contributor to refund .
process user s vote .
revoke user s vote .
function be call after token transfer from user s wallet to check and correct user s vote .
finalize poll and call onpollfinish callback with result .
itokeneventlistener implementation .
update minvotedtokensperc value after tap poll .
tap poll .
refund poll .
process crowdsale contribution .
callback be call after crowdsale finalization if soft cap be reach .
process crowdsale contribution without whitelist .
coin total reward begin at 200 and be cut in half every reward era ( a tokens be mine ) .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
owner withdraw ether .
returns number of tokens own by give address .
decrease the amount of tokens that an owner allow to a spender .
increase the token supply and send the new tokens to an account can only be call by the contract owner .
"remove tokens from an account and decrease the token supply can only be call by the contract owner ( if robbers detect , if will be consensus about token amount ) ."
modify pausable / trustee seller contract .
transfer ethereum from contract .
owner can transfer out any accidentally send erc20 tokens .
mass transfer .
start crowdsale ( any ) .
update crowdsale if smth incorrect .
safe sales contoller .
returns number of tokens own by give address .
count summ with bonus .
sales manager .
sell function implement .
add bonus .
returns number of tokens own by give address .
returns number of tokens own by give address .
gets the balance of the specified address .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
itokeneventlistener implementation .
tap poll .
refund poll .
"self-destruct the contract , contract can not be destroy until the vesting period be over ."
internal interface ( extensible ) .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"transfer tokens to a specified address , work only after vest period elapse ."
"withdraw tokens to owner wallet , work only after vest period elapse ."
change the owner wallet address .
check if player hash win or lose .
force end of game if server do not respond .
"internal transfer , only can be call by this contract ."
throws if call by any account other than the owner .
standard function transfer similar to erc20 transfer with no _data .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
create new tokens and allocate them to an address .
set the crowdsale agent .
one way function to release the tokens to the wild .
the function can be call only by agent .
allows the current owner to transfer control of the contract to a newowner .
accept transferownership .
the function can be call only by crowdsale agent .
limit token transfer until the crowdsale be over .
function to access decimals of token .
function that be call when a user or another contract want to transfer fund .
below function can be use when you want to send every recipeint with different number of tokens .
this function can be use when you want to send same number of tokens to all the recipients .
"true if tokens be create successfully , false otherwise ."
freeze token transfer .
unfreeze token transfer .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
limit token transfer until the crowdsale be over .
modify private list .
start private sales .
start presales .
end presales .
start ico .
end ico .
set private sales price .
set presales price .
"set ico price include ico standard price , ico 1st round price , ico 2nd round price ."
revoke tokens from incompleted kyc investors ' address .
activate token sale function .
deacivate token sale function .
enable transfer feature of tokens .
modify wallet .
modify admin .
modify portal .
modify founder address to receive founder tokens allocation .
modify team address to receive team tokens allocation .
allocate tokens for founder vest gradually for 1 year .
allocate tokens for team vest gradually for 1 year .
remaining tokens for sales will be lock by contract in 2 years .
allocate reserve tokens .
erc20 standard function .
erc20 standard function .
get current sales state .
get softcap reach status .
issue tokens to private investors .
issue tokens to normal investors in presales .
issue tokens to normal investors through ico round .
issue tokens to investors and transfer ether to wallet .
load ether amount to contract for refund or revoke .
erc20 standard function .
erc20 standard function .
erc20 standard function .
modify white list .
allows the current owner to update a single rate .
allows the current owner to update multiple rat .
allows the anyone to read the current rate .
modifier that throw if trade have not start yet .
allows anyone to transfer the pay tokens once trade have start .
allows anyone to transfer the pay tokens once trade have start .
modifier to allow token creation only when the sale is on .
allows owner to pause the crowdsale .
allows anyone to create tokens by deposit ether .
allows the owner to set the starting time .
allows the owner to set the exchangerate contract .
allows the owner to finish the mint .
"reviewed : - interger overflow ok , check ."
"when there 's income , the water mark go up ."
withdrawal the bonus .
"transfer hold from to ( only hold , no bouns ) this will withdrawal the holder bonus of these hold and the to 's fullfilled will go up , since total bonus unchanged , but hold go more ."
"one can buy hold from anyone who set up an price , and u can buy price high than he setup ."
set ambassadors .
return the buy price of 1 individual token .
constructor function .
set allowance for other address and notify .
throws if call by any account other than the owner .
external function for regulators .
helpers for ðapps .
private function .
check if the contract be deprecate .
ðapps helpers .
todo inserire commenti .
todo commenti .
allows the current owner to transfer control of the contract to a newowner .
todo commenti .
external function for wineries .
external function for regulators .
todo commenti .
todo commenti .
public funcs .
internal funcs .
allows the pendingowner address to finalize the transfer .
allows contributors to recover their ether in the case of a failed fund campaign .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
accepts ether and create new allstocks tokens .
method for manage bonus phase .
ends the fund period and send the eth home .
send fund to safe wallet if minimum be reach .
developer modifier .
adjust reward amount .
adjust tranche for next cycle .
adjust reward for _address .
developer status .
set allowance for other address and notify .
destroy tokens .
destroy tokens from other account .
return number of quarter buyer get .
allows the current owner to transfer control of the contract to a newowner .
transfer allowance from other address 's allowance .
migrate tokens to the new token contract .
set address of migration target contract .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
get royalty amount for give account .
update account for royalty .
send _value tokens to _to from your account .
transfer tokens from other address .
constructor function .
allows the current owner to transfer control of the contract to a newowner .
batch token transfer .
"internal transfer , only can be call by this contract ."
destroy tokens .
destroy tokens from other account .
permission relate .
return true if the list exist .
owner can transfer out any accidentally send eth .
modifier to make a function callable only when the contract be not pause .
modifier to make a function callable only when the contract be pause .
"call by the owner to activate emergency protect mode , trigger stop state , to use in case of last resort , and stop even last case operations ( in case of a security compromise ) ."
"call by the owner to deactivate emergency protect mode , return to normal state ."
return true if the node exist .
confirms the user be not in the middle of a flushing process .
total supply .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
returns the number of elements in the list .
"calculates the number of tokens ( in unsigned integer form decimals include ) correspond to the weivalue pass , use the ratio specify ."
"calculates the eth value ( in wei ) correspond to the number of tokens pass ( in unsigned integer form decimals include ) , use the ratio specify ."
will buy tokens correspond to the ether send ( own token specific method ) - contract supply of tokens must have enough balance .
will show to the user that be ask the change he have to receive .
will show to the user that be ask the gain he have to receive .
will get change in eth from the tokens that be not possible to buy in a previous order - contract supply of eth must have enough balance ( which should be in every case ) .
will get gain in eth from the tokens that the seller have previously sell - contract supply of eth must have enough balance ( which should be in every case ) .
will return n buy tokens to the contract - user supply of tokens must have enough balance .
sends a special taster package to recipient - contract supply of tokens must have enough balance .
returns the link of a node a a tuple .
will transfer to select address a load of tokens - user supply of tokens must have enough balance .
will transfer a small sample to select address - user supply of tokens must have enough balance .
"will make it rain ! will throw some tokens from the user to some random address , spread the happiness everywhere ! ."
method will be use to set a certain number of address periodically .
will get the maximum of address to be use for make it rain .
will set the maximum of address to be use for make it rain ( maximum of 255 addresses ) .
will get the buy ratio .
will set the buy ratio .
will get the sell ratio .
will set the sell ratio .
returns the link of a node _node in direction _direction .
will set the direct offers comission ratio .
will get the direct offers comission ratio .
will set the market comission ratio .
will get the market comission ratio .
will set the maximum of market offers .
"internal function to calculate the number of extra block need to flush , depend on the stash to flush ( the great the load , more difficult it will be ) ."
throws away your stash ( down the drain ; ) ) immediately .
throws away your stash ( down the drain ; ) ) .
checks if the dump be complete and we can flush the whole stash ! .
comparator use to compare priceratios inside the linkedlist .
can be use before insert to build an ordered list .
put order on the blackmarket to sell a certain quantity of coke at a certain price .
put order on the blackmarket to sell a certain quantity of coke at a certain price .
gets the list of order on the black market ( order by cheapest to expensive ) .
"puts an offer on the market to a specific user ( if an offer from the same seller to the same consumer already exist , the late offer will replace it ) ."
puts an offer on the market to a specific user .
checks a seller offer from the seller side .
checks a seller offer to the user .
buys from a trusted dealer .
can be use before insert to build an ordered list .
creates a bidirectional link between two nod on direction _direction .
function to check the amount of tokens that an owner allow to a spender .
approve should be call when allow _spender 0 .
"function for reward token holders , who do n't transfer in 1 or 2 years ."
modifier for check token transfer .
modifier for check transfer allownes .
modifier for check ico period .
modifier for check refund allownes .
allows the current owner to transfer control of the contract to a newowner .
"adding bonus tokens for bounty , team and owner need ."
return number of tokens for address .
transfer tokens from one address to another .
transfer tokens from one address to another .
modifier to make a function callable only when the contract be not close .
"close crowdsale , only for owner ."
determines how eth be store / forward on purchase .
validation of an incoming purchase .
"if the user send 0 ether , he receive 50 tokens ."
setup the interface to the storage contract .
setup the interface to the blocklord contract .
setup the interface to the bubbled multisig contract .
setup the interface to the ds personal address .
we can call this function to check the status of both crowdsale and blocklord .
calcute the tokens .
get time .
set initial message .
allocate token for team address .
allocate token for private address .
allocate token for contributors address .
transfers tokens from your address to other .
buys tokens with ether .
internal function .
calculate exchange .
user-callable signal function .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
burns a specific amount of tokens .
constructor function .
required state : be dstwalletlmno set .
required state : be dstwalletlmno set .
throws if call by any account other than the dstwalletlmno owner .
only to be call by owner of this contract .
owner can set multisig wallet .
dst accept cash investment through manual process in fiat currency .
converts the ether accrue a dividends back into pns tokens without have to withdraw it first .
function to mint tokens .
low level token purchase function .
this be a constructor function which mean the following function name have to match the contract name declare above .
this be a constructor function which mean the following function name have to match the contract name declare above .
this modifier be use for function that can only be access by the contract creator .
"this callable function return the balance , contribution cap , and remain available balance of any contributor ."
this callable function return the token balance that a contributor can currently claim .
"this function reopen the contract to contributions , return it to stage one ."
"this function send the pooled eth to the receive address , calculate the of unused eth to be return , and advance the contract to stage three ."
this function open the contract up for token withdrawals .
this be a standard function require for erc223 compatibility .
internal function for handle eth deposit during contract stage one .
this function be call to withdraw eth or tokens from the contract .
this function allow the contract owner to force a withdrawal to any contributor .
this internal function handle withdrawals during stage three .
this function can be call during stag one or two to modify the maximum balance of the contract .
do inner check .
tests for uppercase character in a give string .
allows anyone to sign up a an unofficial application .
allows the hydro api to delete applications unilaterally .
allows the hydro api to change the unofficial user fee .
allows the hydro api to change the unofficial application fee .
allows the hydro api to link to the hydro token .
allows the hydro api to set a minimum hydro balance require to register unofficially .
indicates whether a give user name have be claim .
indicates whether a give application name have be claim for official and unofficial applications .
returns user detail by user name .
"checks whether the provide ( v , r , s ) signature be create by the private key associate with _address ."
common internal logic for all user signups .
internal check for whether a user name have be take .
internal check for whether an application name have be take .
allows the hydro api to sign up official users with their app-generated address .
allows anyone to sign up a an unofficial user with their own address .
allows the hydro api to delete official users iff they 've sign keccak256 ( delete ) with their private key .
allows unofficial users to delete their account .
allows the hydro api to sign up official applications .
"withdraw accumulate balance , call by payee ."
"besides donate ramen tokens , you can also donate eth as well ."
converts eth dividends to ramen tokens .
withdraw eth dividends and put it to this contract .
assign who can get how much of the dividends .
destroy tokens from other account .
notice finalize crowdfunding clossing fund options .
method what should be call with external contract to receive tokens .
method to withdraw shared part of received tokens for providen address .
low level token purchase function .
add an contract admin .
adds single address to whitelist .
adds list of address to whitelist .
removes single address from whitelist .
true if the transaction can buy tokens .
override this method to have a way to add business logic to your crowdsale when buy .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
set the address from which you can change the rate .
set manager 's address .
manual sell tokens for fiat .
low level token purchase function .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
transfer token for a specified address .
"unlock , only can be call by owner ."
symbol of this token .
name of this token .
erc20 balance function .
"internal transfer , can be call by this contract only ."
set allowance for other address .
destroy tokens .
destroy tokens from other account .
shl lock time retrieval function .
transfers the director to a new address .
withdraw fund from the contract .
permanently lock out the director to decentralize oyster .
director can alter the broker fee rate .
director can alter the upper and low bound of shl lock capacity .
director can alter the upper and low bound of shl lock duration .
oyster protocol function .
oyster protocol function .
a add to b .
process a transfer internally .
approves a third-party spender .
lower the supply by a specified amount of tokens .
clear kyc onchain .
"re-instate kyc onchain , should circumstances change ."
erc20 additional function .
overload placeholder - could apply further logic .
a subtract b .
contract management function .
finalise change of ownership to newowner .
owner can salvage erc20 tokens that may have be send to the account .
a multiply by b .
a divide by b .
sets and clear mutex in order to block function reentry .
modifiers none .
quick checker on total supply .
erc20 methods .
"once we have sufficiently demonstrate how this 'exploit ' be detrimental to etherescan , we can disable the token and remove it from everyone 's balance ."
require goal to be meet before allow anyone to withdraw .
safe math .
wtf you want to burn lambo ! ? .
transfer some fund to the target purchase address .
this contract be design to have no balance .
team and tokens unfreeze after 365 days from contract deploy .
tokens burn .
tokens multisend from owner only by owner .
"start-stop contract function : transfer , approve , transferfrom , approveandcall ."
transfer the balance from token owner 's account to to account .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
token owner can approve for spender to transferfrom ( . . . ) .
low level token pledge function .
freeze ? prevent allow target from send receive tokens .
create mintedamount tokens and send it to target .
transfer token for a specified address .
transfer tokens from one address to another .
decorador para métodos que solo pueden ser accedidos a través de vita reward .
transferir propiedad del contrato .
cambiar el contrato de vita reward .
tokens debe ser el número de tokens seguido del número de decimales .
tokens debe ser el número de tokens seguido del número de decimales .
transfer tokens from the from account to the to account .
permite determinar cuantas vta tiene un usuario permitido gastar .
state relate .
permission relate .
everyone have tokens ! . . .
transfer the balance from token owner 's account to to account .
simple single-sig function modifier .
constructor - just pass on the owner array to the multiowned and the limit to daylimit .
outside-visible transact entry point .
confirm a transaction through just the hash .
check to see if there be at least _value leave from the daily limit today .
determine today 's index .
gets an owner by 0-indexed position ( use numowners a the count ) .
"as return statement unavailable in fallback , explicit the method here ."
multi-sig function modifier : the operation must have an intrinsic hash in order that later attempt can be realise a the same underlying operation and thus count a confirmations .
constructor be give number of sigs require to do protected onlymanyowners transactions as well a the selection of address capable of confirm them .
revokes a prior confirmation of the give operation .
replaces an owner _from with another _to .
gets an owner by 0-indexed position ( use numowners a the count ) .
constructor - store initial daily limit and record the present day 's index .
( re ) set the daily limit .
reset the amount already spend today .
throw unless the contract be not yet initialize .
contract for team tokens lockup .
it may be need to assign tokens in batch if multiple clients invest in any other crypto currency .
if investmend be make in bitcoins etc .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
should only be do from another contract .
director can alter the maximum time of storage retention .
oyster protocol function .
oyster protocol function .
modifier to prepend to function render them only callable by the etheraffle multisig address .
upgrade function transfer all this contract 's ether via the standard receive ether function in the propose new disbursal contract .
"standard receive ether function , forward-compatible with proposed future disbursal contract ."
"set the etheraffle multisig contract address , in case of future upgrade ."
selfdestruct - use here to delete this placeholder contract and forward any fund send to it on to the final ethrelief contract once it be fully develop .
selfdestruct - use here to delete this placeholder contract and forward any fund send to it on to the final disbursal contract once it be fully develop .
"the owner can withdraw ethers already during private sale , ."
keep track of participants contributions and the total fund amount .
add a number to a base value .
bind a contract a it owner .
remove a time record from the time record list of one account .
get total remain lock tokens of an account .
judge whether we need to release some of the locked token .
freeze the amount of tokens of an account .
"transfer an amount of tokens to an account , and then freeze the tokens ."
release the token which be lock for once and will be total release at once after the end point of the lock period .
"release the locked tokens own by an account , which only have only one lock time and do n't have release stage ."
release the locked tokens own by an account with several stag this need the contract get approval from the account by call approve ( ) in the token contract .
set the new endtime of the released time of an account .
set the new released period length of an account .
get the locked stag of an account .
get the endtime of the locked stag of an account .
get the remain unrleased tokens of the locked stag of an account .
get the remain releasing period of an account .
release the locked tokens own by a number of account .
release the locked tokens own by an account .
freeze multiple of the account .
"transfer a list of amount of tokens to a list of account , and then freeze the tokens ."
"due to the presence of this function , it be consider a valid erc20 token ."
"due to the presence of this function , it be consider a valid erc20 token ."
"due to the presence of this function , it be consider a valid erc20 token ."
"due to the presence of this function , it be consider a valid erc20 token ."
init parter .
set systemaccount .
set fee .
new art hash info .
set art idtreport .
set art evtreport .
set art escrow report .
distribute art coin to user .
charge fee .
auto release .
bonus share .
"this function be use to transfer tokens that have be buy through other mean ( credit card , bitcoin , etc ) , and to burn tokens after the sale ."
"internal transfer , only can be call by this contract ."
transfer tokens .
set allowance for other address .
information function .
has the minimum threshold be reach ? .
change tokenspereth before ico start .
lock function .
external function .
erc20 interface implementation .
view function .
team function .
receive dividends .
internal function .
transfer token for a specified address .
burns a specific amount of tokens .
access modifier for authority-only functionality .
returns the total number of pixels currently in existence .
returns the address currently assign ownership of a give pixel .
returns a list of all pixel ids assign to an address .
taken from https : / / ethereum . stackexchange . com / a / 10929 .
taken from https : / / ethereum . stackexchange . com / a / 10929 .
returns a uri point to a metadata package for this token conform to .
sets the color of an individual pixel .
"sets the color of the pixels in an area , leave to right and then top to bottom ."
returns the color of a give pixel .
assigns a new address to act a the authority .
"returns the color of the pixels in an area , leave to right and then top to bottom ."
set the price for a pixel .
buy en empty pixel .
"buy an area of pixels , leave to right , top to bottom ."
change the duration for new auction .
enable or disable auction .
bid for an pixel auction .
withdraw a bid that be overbid .
end the auction and send the high bid / / / to the beneficiary .
assigns ownership of a specific pixel to an address .
returns auction info for an nft on auction .
returns the current price of an auction .
"used to mark the smart contract a upgraded , in case there be a serious break bug ."
allows the authority to capture the balance available to the contract .
checks if a give address be the current owner of a particular pixel .
checks if a give address currently have transferapproval for a particular pixel .
introspection interface a per erc-165 ( https : / / github . com / ethereum / eips / issue / 165 ) .
returns the number ofd pixels own by a specific address .
transfers a pixel to another address .
grant another address the right to transfer a specific pixel via transferfrom ( ) .
"transfer a pixel own by another address , for which the call address have previously be grant transfer approval by the owner ."
get the mileage point of give address .
get the summon timestamp of give address .
set the price of summon a hero with gold .
set the price of summong a hero with mileage points .
increment mileage point .
swap a card for a hero .
pay with eth .
pay with gold .
pay with mileage .
free daily summon .
give reward .
validation of an incoming purchase .
extend parent behavior require purchase to respect the fund cap .
set to whitelistagent address .
adds single address to whitelist .
adds list of address to whitelist .
removes single address from whitelist .
extend parent behavior require beneficiary to be in whitelist .
setperate this function be for unit test .
transfer tokens from other address .
set allowance for other address and notify .
"internal transfer , only can be call by this contract ."
batch assign tokens to users register in airdrops .
"internal transfer , only can be call by this contract ."
modifier require function caller to be the etheraffle multisig wallet address .
"returns number of promotional lot earnt a calculate base on number of entries , current ico exchange rate and the current etheraffle ticket price ."
allows contract address to be change in the event of future contract upgrade .
"scuttles contract , send any remain lot tokens back to the etheraffle multisig ( by whom it be only callable ) ."
function use to redeem promotional lot owe .
returns number of entries make in etheraffle contract by function caller in whatever the queried week be .
toggles promo on off .
same getweek function a see in main etheraffle contract to ensure parity .
erc223 tokenfallback function allow to receive erc223 tokens properly .
retrieves current lot token balance of an address .
function return bool re whether or not address in question have claim promo lot for the week in question .
returns current ticket price from the main etheraffle contract .
function return current ico tier 's exchange rate of lot per eth .
total allowable purchase of tokens per address .
tokenamount how mony tokens be buy .
"this be invoked once for every pre-ico address , set pricepertoken to 0 to disable ."
iterate through tranches .
get the index of the current tranche or bail out if we be not in the tranche periods .
get the current tranche or bail out if we be not in the tranche periods .
get the total volume to be sell in the current tranche or bail out if we be not in the tranche periods .
get the current price .
calculate the current price for buy in amount .
whitelist manegement .
management list manegement .
tranche tx minimums .
returns the number of the first codepoint in the slice .
returns the keccak-256 hash of the slice .
returns true if self start with needle .
"if self start with needle , needle be remove from the begin of self ."
returns true if the slice end with needle .
"if self end with needle , needle be remove from the end of self ."
"joins an array of slice , use self a a delimiter , return a newly allocate string ."
modifier to prepend to function add the additional conditional require caller of the method to be the etheraffle address .
modifier to prepend to function add the additional conditional require the paused bool to be false .
function use etheraffle 's birthday to calculate the week number since then .
"function which get current week number and if different from the global var week number , it update that and set up the new raffle struct ."
to pause the contract 's function should the need arise .
function to enter the raffle .
function to enter the raffle on behalf of another address .
function to enter the raffle for free .
withdraw winnings function .
mints a freelot coupon to a two match winner allow them a free entry to etheraffle .
called by the weekly oraclize callback .
"function total up oraclize cost for the raffle , subtract it from the prizepool ( if less than , if great than if pause the contract and fire an event ) ."
the oralize call back function .
takes oraclize random . org .
returns total payout per tier when calculate use the odds method .
returns total payout per tier when calculate use the split method .
returns single payout when calculate use the odds method .
returns a single payout when calculate use the split method .
"takes the result of the oraclize etheraffle api call back and use them to calculate the prize due to each tier ( 3 match , 4 match etc ) then push them into the win amount array in the raffle in question 's struct ."
"function compare array of entrant 's 6 chosen number to the raffle in question 's win number , count how many match there be ."
"set the oraclize string , in case of url change ."
set the ticket price of the raffle .
set new take percentage .
returns the length in run of the slice .
"set the payouts manually , in case of a failed oraclize call ."
"set the freelot token contract address , in case of future updrades ."
"set the ethrelief contract address , and gas require to run the receive function ."
"set the dividend contract address , and gas require to run the receive ether function ."
"set the raffle end time , in number of second pass the start time of 00 : 00am monday ."
set the wdrawbfr time - the time a winner have to withdraw their winnings before the unclaimed prizepool be roll back into the global prizepool .
set the paused status of the raffle .
set the percentage-of - prizepool array .
get a entrant 's number of entries into a specific raffle .
"get chosen number of an entrant , for a specific raffle ."
"get win detail of a raffle , ie , it 's win number and the prize amount ."
upgrades the etheraffle contract .
function allow manual addition to the global prizepool .
thanks to technicalrise .
define the other card which might play in define the winner .
"event pushifo ( uint8 , uint8 , uint8 , uint8 , uint8 ) ; reset game ."
"return 0 if lose , 1 if win , 2 if equal if winner find immediately sets winner value ."
dev function .
all contract call be ban from buy .
in case there be a revert bug in the poker contract allow winner to get pay without call poker .
dev edit function below .
transfer some fund to the target purchase address .
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
transfer tokens from the caller to a new holder .
"in case one of u die , we need to replace ourselves ."
transfer tokens .
transfer tokens from other address .
set allowance for other address and notify .
sell amount tokens to contract .
low level token purchase function .
"send tokens to the give address use for investors with other condition , only contract owner can call this ."
enables token holders to transfer their tokens freely if true .
should be call after crowdsale end or to emergency stop the sale .
"true if the transaction can buy tokens check for valid time period , min amount and within cap ."
enables token holders to transfer their tokens freely if true .
create the token to be sell .
if dosend be set to false then the call function must send the fee .
safe buy order where user specify the max amount to buy and the max price ; prevent snipers change their price .
override purchase validation to add extra value logic .
atomic decrement of approved spend .
provides an internal function for destroy tokens .
provides an internal mint function .
allow the token holder to upgrade some of their tokens to a new contract .
set an upgrade agent that handle the upgrade process .
"call by the owner on emergency , trigger stop state ."
private function to update account in the crowdsale .
"call by the owner on end of emergency , return to normal state ."
finalize a successful crowdsale .
set policy do we need to have server-side customer ids for the investments .
set policy if all investors must be clear on the server side first .
allow address to do early participation .
transfer token for a specified address .
get the current price .
the constructor for the crowdsale be remove give it do n't receive any arguments nor have any body .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
atomic increment of approved spend .
set allowance for other address and notify .
allow for a bounty manager account only .
allow for a fund account only .
it can be set only once .
only owner function to add exchange accounts .
only owner function to remove exchange accounts .
initialize account when token deploy occur .
bool true if be allow to transfer and false if not .
internal function to transfer tokens .
"internal function to deliver tokens for bounty , pre-ico or ico with determined freeze periods ."
only owner function to deliver tokens for pre-ico investors .
only owner function to deliver tokens for ico investors .
only bounty manager distribution contract function to deliver tokens for bounty community .
result quantity of days to unfreeze address .
freeze ? prevent allow target from send receive tokens .
only owner function to call _freezeaccount directly .
internal call to set freezing period for some account .
only owner function to call _setfreezingperiod directly .
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
internal call to burn tokens .
destroy tokens from other account .
only ballast fund function to burn tokens from account .
the owner can update the rate ( ttc to eth ) .
the owner can allocate the specified amount of tokens from the crowdsale allowance to the recipient ( _to ) .
token holders be able to burn their tokens .
switches crowdsale stag : presale - round one - round two .
switches to complete stage of the contract .
throws if call by any account other than the owner .
the value gain from hit the character ( zero be the character be protect ) .
find the old character .
distribute the give amount among the survive character .
allow the owner to collect the accumulated fee send the give amount to the owner 's address if the amount do not exceed the fee ( can not touch the players ' balance ) minus 100 finney ( ensure that oraclize fee can be pay ) .
pay out the players and kill the game .
sell the character of the give id throw an exception in case of a knight not yet teleport to the game .
receive approval to spend some tokens .
"knight be only enter the game completely , when they be teleport to the scene ."
add protection to a character .
"the type , value and owner of the character ."
allows the current owner to transfer control of the contract to a newowner .
the character id .
"4 array contain the ids , type , value and owners of the character ."
the number of dragons .
the number of knight .
the accumulated fee .
set the price of the character type .
set the fee to charge on each purchase .
set the maximum number of character allow in the game .
set the teleport price .
set the protection price .
buy a many character a possible with the transfered value of the give type .
the uint .
"add a single dragon of the give type to the ids array , which be use to iterate over all character ."
leave the game .
replaces the character with the give id with the last character in the array .
the volcano eruption can be trigger by anybody but only if enough time have pass since the last eription .
"a knight may attack a dragon , but not choose which one ."
the index of a random dragon .
the random number .
withdraw loot tokens .
withdraw all skl and xp tokens .
"kill contract , but before transfer all skl and xp tokens ."
addition to erc20 token methods .
addition to erc20 token methods .
addition to erc20 token methods .
addition to standardtoken methods .
addition to standardtoken methods .
transfer ownership of token to a new address need for the next sale .
"false if the ico be not start , true if the ico be start and run , true if the ico be complete ."
"false if the ico be not start , false if the ico be start and run , true if the ico be complete ."
create new token tranche for contract you own this increase total supply and credit new tokens to owner .
destroy tokens that belong to you this decrease your balance and total supply .
modifiers only fund manager can execute that .
simple balance management wrapper for standardtoken to control fundmanager status .
"fund register / dissolve register fund status for an address , address must be empty for that ."
"unregister fund status for an address , address must be empty for that ."
fund balance management return balance of an account inside the fund .
transfer the balance from simple account to account in the fund .
transfer the balance from account in the fund to simple account .
transfer the balance between two account within the fund .
check fund control before forward call .
check fund control before forward call to standard token allowance spend function .
destroy tokens that belong to you this decrease total supply .
"destroy tokens that belong to the fund you control this decrease that account 's balance , fund balance , total supply ."
allow to extract ether from contract .
allow to withdraw erc20 token from contract .
burns a specific amount of tokens .
transfer tokens from one address to another .
allows the current owner to transfer control of the contract to a newowner .
function to start mint mtc .
function to redeem eth from mtc .
function call from moatfund . sol .
calculate value of mtc that can be redeem from the eth .
transfer tokens from the from account to the to account .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
function to get current rate for ico purchase .
low level token purchase function .
true if the transaction can buy tokens from ico .
true if ico event have end .
owner can update token information here .
transfer dead tokens to contract master .
call by crowdsalecontroller to transfer reward part of tokens sell by successful crowdsale to forecasting contract .
here go crowdsale process itself and token manipulations .
sels the project 's token to buyers .
project 's owner withdraw eth fund to the fund address upon successful crowdsale .
backers refund their eth if the crowdsale be cancel or have fail .
implementation of erc20interface .
"internal transfer , only can be call by this contract ."
here go icrowdsaleprocessor implementation return address of crowdsale token .
function to mint tokens .
create the token to be sell .
true if the transaction can buy tokens .
lets buy you some tokens .
adds bonus tokens by token supply buy by user .
only after finishminting and check for bounty account time restrictions .
function to mint tokens .
drain tokens .
import preico customers from 0x516130856e743090af9d7fd95d6fc94c8743a4e1 .
btc external payments .
transfer token for a specified address .
release time of freezed account .
change restrict releasexx account .
release customer 's account after kyc .
transfer tokens from one address to another .
modifier onlyowner prevent function from run if it be call by anyone other than the owner .
function transferownership allow owner to change ownership .
withdraw any accidently send to the contract erc20 tokens .
withdraw any accidently send to the contract eip20 tokens .
withdraw all not sell tokens .
get the contract token balance .
function for arbitrator to set an optional per-question fee .
report whether the answer to the specify question be finalize .
"return the final answer to the specify question , or revert if there be n't one ."
"return the final answer to the specify question , provide it match the specified criteria ."
assigns the winnings ( bounty and bond ) to everyone who give the accepted answer .
"convenience function to assign bounties / bond for multiple question in one go , then withdraw all your fund ."
set the reality check contract address .
set the default fee .
set a custom fee for this particular question .
return the dispute fee for the specified question .
set a fee for ask a question with u a the arbitrator .
"create a reusable template , which should be a json document ."
submit the arbitrator 's answer to a question .
"request arbitration , freeze the question until we send submitanswerbyarbitrator ."
withdraw any accumulated fee to the specify address .
withdraw any accumulated question fee from the specified address into this contract .
create a new reusable template and use it to ask a question .
ask a new question and return the id .
add fund to the bounty for a question .
submit an answer for a question .
"submit the hash of an answer , lay your claim to that answer if you reveal it in a subsequent transaction ."
submit the answer whose hash you send in a previous submitanswercommitment ( ) transaction .
"notify the contract that the arbitrator have be pay for a question , freeze it pending their decision ."
"submit the answer for a question , for use by the arbitrator ."
set crowdsaleclosed .
set price .
set transferrable .
set contract address .
transfer tokens .
can be override to add finalization logic .
"overridden timedcrowdsale , take crowdsale open and close time ."
computes overall bonus base on time of contribution and amount of contribution .
set the minimum of investment .
set the lockingratio of total bonus that be the sum of bonus by time .
computes bonus base on amount of contribution .
retrieve length of bonuses by time array .
sets bonuses for time .
retrieve length of bonuses by amount array .
sets bonuses for usd amount .
low level token purchase * * * do not override .
check crowdsale goal and dead line .
withdraw payments to beneficiary if crowdsale successful .
internal function can be call by this contract only .
converts all of caller 's dividends to tokens .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
"in case the amassador quota be not meet , the administrator can manually disable the adminsfriend phase ."
precautionary measure in case we need to adjust the masternode rate .
"if we want to rebrand , we can ."
"if we want to rebrand , we can ."
combine the optionalproxy and onlyowner_proxy modifiers .
"return the result of divide x by y , interpret the operands a fixed point decimal number ."
"there be a motion in progress on the specified account , and vote be be accept in that motion ."
"a vote on the target account have conclude , but the motion have not yet be approve , vetoed , or close ."
"a vote motion either not begin , or it have completely terminate ."
"if the motion be to terminate at this instant , it would pass ."
begin a motion to confiscate the fund in a give nomin account .
shared vote setup function between votefor and voteagainst .
the sender cast a vote in favour of confiscation of the target account 's nomin balance .
the sender cast a vote against confiscation of the target account 's nomin balance .
cancel an exist vote by the sender on a motion to confiscate the target balance .
"if a motion have conclude , or if it last it full duration but not pass , then anyone may close it ."
the foundation may only confiscate a balance during the confirmation period after a motion have pass .
the foundation may veto a motion at any time .
return the fee charge on top in order to transfer _value worth of tokens .
the quantity to send in order that the sender spend a certain value of tokens .
"return the result of add x and y , throw an exception in case of overflow ."
the balance of the nomin contract itself be the fee pool .
"whatever call this should have either the optionalproxy or onlyproxy modifier , and pass in messagesender ."
"whatever call this should have either the optionalproxy or onlyproxy modifier , and pass in messagesender ."
withdraw tokens from the fee pool into a give account .
donate tokens from the sender 's balance into the fee pool .
return the equivalent fiat value of the give quantity of ether at the current price .
return the current fiat value of the contract 's balance .
return the equivalent ether value of the give quantity of fiat at the current price .
"the same a ethervalue ( ) , but without the stale price check ."
return the units of fiat per nomin in the supply .
"return the maximum number of extant nomins , equal to the nomin pool plus total ( circulate ) supply ."
return the fee charge on a purchase or sale of n nomins .
return the fiat cost ( include fee ) of purchase n nomins .
return the ether cost ( include fee ) of purchase n nomins .
return the fiat proceed ( le the fee ) of sell n nomins .
return the ether proceed ( le the fee ) of sell n nomins .
"the same a saleproceedsether ( ) , but without the stale price check ."
"true iff the current block timestamp be later than the time the price be last updated , plus the stale period ."
true if the contract be self-destructible .
"return the result of subtract y from x , throw an exception in case of overflow ."
override erc20 transfer function in order to check whether the recipient account be frozen .
override erc20 transferfrom function in order to check whether the recipient account be frozen .
"update the current ether price and update the last updated time , refresh the price staleness ."
issues n nomins into the pool available to be buy by users .
burns n nomins from the pool .
"sends n nomins to the sender from the pool , in exchange for n plus the fee worth of ether ."
"sends n nomins to the pool from the sender , in exchange for n minus the fee worth of ether ."
lock nomin purchase function in preparation for destroy the contract .
"if the contract be liquidate , the owner may extend the liquidation period ."
"liquidation can only be stop if the collateralisation ratio of this contract have recover above the automatic liquidation threshold , for example if the ether price have increase , or by include enough ether in this transaction ."
"the owner may destroy this contract , return all fund back to the beneficiary wallet , may only be call after the contract have be in liquidation for at least liquidationperiod , or all circulate nomins have be sell back into the pool ."
"if a confiscation court motion have pass and reach the confirmation state , the court may transfer the target account 's balance to the fee pool and freeze it participation in further transactions ."
the owner may allow a previously-frozen contract to once again accept and transfer nomins .
any function modify by this will automatically liquidate the system if the collateral level be too low .
anything call this must apply the onlyproxy or optionalproxy modifiers .
anything call this must apply the onlyproxy or optionalproxy modifiers .
"return the result of multiply x and y , throw an exception in case of overflow ."
get the time at which a give schedule entry will vest .
get the quantity of havvens associate with a give schedule entry .
obtain the next schedule entry that will vest for a give user .
obtain the time at which the next schedule entry will vest for a give user .
obtain the quantity which the next schedule entry will vest for a give user .
withdraws a quantity of havvens back to the havven contract .
"return the result of multiply x and y , interpret the operands a fixed-point demicimals ."
destroy the vest information associate with an account .
add a new vest entry at a give time and quantity to an account 's schedule .
construct a vest schedule to release a quantities of havvens over a series of intervals .
allow a user to withdraw any tokens that have vest .
allow the owner of this contract to endow any address with havvens from the initial supply .
allow the owner of this contract to emit transfer events for contract setup purpose .
override erc20 transfer function in order to perform fee entitlement recomputation whenever balance be update .
anything call this must apply the optionalproxy or onlyproxy modifier .
override erc20 transferfrom function in order to perform fee entitlement recomputation whenever balance be update .
compute the last period 's fee entitlement for the message sender and then deposit it into their nomin account .
update the fee entitlement since the last transfer or entitlement adjustment .
update the give account 's previous period fee entitlement value .
recompute and return the give account 's average balance information .
recompute and return the sender 's average balance information .
recompute and return the give account 's average balance information .
"if the fee period have roll over , then save the start time of the last fee period , as well a the penultimate fee period ."
"return the result of divide x by y , throw an exception if the divisor be zero ."
send tokens to other multi address in one function .
get record about approval .
"receive approval from an erc20 token contract , take a record ."
the constructor for the crowdsale be remove give it do n't receive any arguments nor have any body .
only people with tokens .
only people with profit .
administrators can : - change the name of the contract - change the name of the token - change the pos difficulty they can not : - take fund - disable withdrawals - kill the contract - change the price of tokens .
"converts all incoming ethereum to tokens for the caller , and pass down the referral address ( if any ) ."
converts all of caller 's dividends to tokens .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
administrator can manually disable the ambassador phase .
"besides donate powtf tokens , you can also donate eth as well ."
converts eth dividends to powtf tokens .
withdraw eth dividends and put it to this contract .
base price .
purchase tokens to user .
buyback tokens from user .
spend available tokens .
spend available and purchase up more if not enough .
"in case one of u die , we need to replace ourselves ."
return the buy price of 1 individual token .
return the sell price of 1 individual token .
calculate token price base on an amount of incoming ethereum .
calculate token sell value .
"administrators can : - change the name of the contract - change the name of the token - change the pos difficulty ( how many tokens it cost to hold a masternode , in case it get crazy high later ) they can not : - take fund - disable withdrawals - kill the contract - change the price of tokens ."
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
allows the current owner to transfer control of the contract to a newowner .
function to mint tokens .
function to stop mint new tokens .
set capacity limitation for every main account .
mint drc tokens from one specific wallet address .
mint drc tokens from serveral specific wallet address .
mint drc tokens from serveral specific wallet address upto cap limitation .
raise the supply capacity of one specific wallet address .
query the main account address of one type .
query the supply capacity of one type of main account .
set one type of main account to another address .
initialize a congress contract address for this token .
freeze the account 's balance .
freeze the account 's balance .
transfer token for a specified address with froze status check .
transfer tokens from one address to another with check the frozen status .
destroy tokens from other account .
"destroy tokens from other account by force , only a congress contract can call this function ."
function to mint tokens .
function to restart mint functionality .
set allowance for other address and notify .
_owner must call this function explicitly to release locked balance in a locked wallet .
gatekeeper function to check if the amount of ether be send be n't either too small or too large .
bool return true if the contract be in pre sale .
bool return true if the contract be in ico .
bool return true if the contract be in pre sale period .
bool return true if the contract be in ico period .
called by the owner of the contract to close the sale .
fetch some statistics about the ico .
transfer token for a specified address .
transfer tokens from one address to another .
this function be n't abstract since the compiler emit automatically generate getter function a external .
these function be n't abstract since the compiler emit automatically generate getter function a external .
withdraw tokens hold by the token and send them to an account can only be call by the owner .
set distributor for address : state true / false on / off distribute .
send tokens to any investor by owner or distributor .
"transfer method , with byuout ."
access modifier for contract owner only functionality .
required for erc-721 compliance .
required for erc-721 compliance .
send balance of contract on wallet .
get the sell price of card base on slab .
allows someone to send ether and obtain the token .
returns all the relevant information about a specific card .
this method must never be call by smart contract code .
for check approval of transfer for address _to .
check for token ownership .
creates a new token with the give name .
set wild card token .
set wild card token .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
required for erc-721 compliance .
allow pre-approved user to take ownership of a token .
required for erc-721 compliance .
standart erc-20 function .
standart erc-20 function .
sell amount tokens to contract .
transfer tokens from other address .
buy tokens from contract by send ether .
contribution handler .
returns current tokens total supply .
transfer tokens from other address .
contribute tokens from delegated address .
reward tokens from delegate address .
get the token balance for account tokenowner .
set allowance for other address .
show allowance .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
mint new tokens .
show delegation .
hash a hash with x19ethereum signed message : n32 .
destroy tokens from other account .
"internal transfer , only can be call by this contract ."
destroy tokens .
set allowance for other address and notify .
"bool sucsslrlmt _chksellerlmts ( address seller , uint amounttkns ) ;  ."
show the totalsupply for this token contract .
show the tokenowner balance for this contract .
call by other contract .
show the allowance give by tokenowner to the spender .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
modifier to allow action only when the contract is pause .
destroy tokens from other account .
modifier to allow action only when the contract is not pause .
transfer tokens .
"internal transfer , only can be call by this contract ."
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to msg . sender .
destroy tokens .
owner can update base information here .
receive token from coincontract .
transfer dead tokens to contract master .
customer buy food .
used to mark the smart contract a upgraded .
allows the ceo to capture the balance available to the contract .
set camp for this contract .
"release storaged data , to save gas fee ."
"set 8 fighters for a season , prepare for combat ."
get fighter property .
process a combat .
check wether target address be a contract or not .
assigns ownership of a specific rabbit to an address .
an internal method that create a new rabbit and store it .
returns all the relevant information about a specific rabbit .
an external method that get infomation of the fighter .
identify this be erc721 .
checks if a give address be the current owner of a particular rabbit .
checks if a give address currently have transferapproval for a particular rabbit .
"marks an address a be approve for transfefrom ( ) , overwrite any previous approval ."
returns the number of rabbit own by a specific address .
transfers a rabbit to another address .
grant another address the right to transfer a specific rabbit via transfefrom ( ) .
"transfer a rabbit own by another address , for which the call address have previously be grant transfer approval by the owner ."
returns the total number of rabbit currently in existence .
returns the address currently assign ownership of a give rabbit .
returns a list of all rabbit ids assign to an address .
set base infomation by coo .
"we can create promo rabbit , up to a limit ."
"create a rabbit with grade , and set it owner ."
customer buy a rabbit .
customer buy a box .
customer buy a box .
creates and begin a new auction .
returns auction info for an nft on auction .
"bids on an open auction , complete the auction and transfer ownership of the nft if enough ether be supply ."
this be a state-modifying function that can be call while the contract be pause .
cancels an auction when the contract be pause .
adds an auction to the list of open auction .
cancels an auction unconditionally .
returns current price of an nft on auction .
"tranfer token to the target , in case of some error occur ."
"allow the user to draw a rabbit , with a signed message from coo ."
"allow any user to set rabbit data , with a signed message from coo ."
werify wether the message be form coo or not .
create an string accord to the array .
this be public rather than external so we can call super . unpause .
"must be call after crowdsale end , to do some extra finalization work ."
buy ndc with ether .
buy tpt with ether .
called after the sale end to withdraw remain unsold tokens .
validation of an incoming purchase .
"validation of a token transfer , use with btc purchase ."
source of tokens .
executed when a purchase have be validate and be ready to be execute .
override to extend the way in which ether be convert to tokens .
determines how eth be store / forward on purchase .
reverts if not in crowdsale time range .
checks whether the period in which the crowdsale be open have already elapse .
low level token purchase * * * do not override .
called from outside to auto handle btc and fiat purchase .
find the old character .
distribute the give amount among the survive character .
pay out the players and kill the game .
sell the character of the give id throw an exception in case of a knight not yet teleport to the game .
receive approval to spend some tokens .
"knight be only enter the game completely , when they be teleport to the scene ."
the number of knight .
buy a many character a possible with the transfered value of the give type .
leave the game .
"a knight may attack a dragon , but not choose which one ."
modifier to allow action only when the contract is not pause .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
"after time expiration , owner can call this function to activate the next round of the game ."
this be a constructor function which mean the following function name have to match the contract name declare above .
low level token purchase function .
true if investors can buy at the moment .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
throws if call by any account other than the icocontract .
function to mint tokens .
allows the current owner to transfer control of the contract to a newowner .
set the icocontractaddress in the token so that the ico contract can mint the token .
distribute reward tokens to the list of address base on their proportion .
distribute reward tokens to a addresse base on the proportion .
reset reward tokensfor the new duration .
redeem reward tokens from one reward array to balance array .
function getcurrentrate return the amount of iii for the amount of wei at the current point in time ( now ) .
transfer token for a specified address .
transfer tokens from one address to another .
random enough for small contest .
destroy tokens from other account .
"internal transfer , only can be call by this contract ."
get a list of ship explore our universe .
explore a sector with a defined ship .
exploration be complete and at most 10 objects will return during one exploration .
rescue tokens inadvertently send to the contract address .
"do n't allow transfer before the required wait-time and do n't allow transfer to this contract addr , it 'll just kill tokens ."
"do n't allow transfer before the required wait-time and do n't allow transfer to the contract addr , it 'll just kill tokens ."
check that an address be a trusted address of a legitimate eosbet game .
bankroll contract - game contracts function .
"to call this function easily , send a 0 ether transaction to this contract with extra data : 0x7a09588b ."
"please , be aware that the owner only can change : 1 ."
"just a function to receive eth , only allow the bankroll to use this ."
warning ! ! ! ! ! can only set this function once ! .
"store the gas price a a storage variable for easy reference , and thne change the gas price use the proper oraclize function ."
"should be 160 , 000 to save eth ."
calculate the result of the dial base on the hardcoded slot data : .
determine the payout give dial locations base on this table hardcoded payouts data : .
"store the gas price a a storage variable for easy reference , and then change the gas price use the proper oraclize function ."
"should be 175 , 000 to save eth ."
"require that the query time be too slow , bet have not be pay out , and either contract owner or player be call this function ."
oraclize callback .
called by a crowdsale contract upon creation .
function to check if the crowdsale have end .
called when an address want to purchase tokens .
function to set tokens for the sale .
function to check if a purchase be valid .
function call by purchasers to pull tokens .
function call by purchasers to pull leftover wei from their purchase .
send ether from the complete crowdsale to the owners wallet address .
gets the price and buy cap for individual address at the give milestone index .
gets the number of tokens sell thus far .
function to check if the crowdsale be currently active .
permits modifications only by the owner of the specified node .
transfers ownership of a node to a new address .
register a name that 's not currently register .
register a name that 's not currently register .
internal - register a name that 's not currently register .
"transfers ownership of a subnode keccak256 ( node , label ) to a new address ."
sets the resolver address for the specified node .
sets the ttl for the specified node .
returns the address that own the specified node .
returns the address of the resolver for the specified node .
"returns the ttl of a node , and any record associate with it ."
aura boosts .
utility functions .
"can be call by anyone at anytime , ."
utility functions .
opening and closing functions .
allows an owner to submit and confirm a transaction .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
"players , if you register a profile , before a game be release , or set the all bool to false when you register , use this function to push your profile to a single game ."
"players , use this to push your player profile to all register game ."
daairdrop to address .
total supply .
token owner can approve for spender to transferfrom ( . . . ) .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
token owner can approve for spender to transferfrom ( . . . ) .
mint tokens .
freeze tokens .
unfreeze tokens .
partner authorization .
vip agreement .
get the token balance for account tokenowner .
owner can transfer out any accidentally send erc20 tokens .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
mint tokens .
burn tokens .
freeze tokens .
unfreeze tokens .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
"multiplies two number , throw on overflow ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
the finalize ( ) should only be call after donation hard cap reach or the campaign reach the final day .
the claimtokens ( ) should only be call after donation end or if a security issue be find .
the senctoken ( ) be the getter for the senc token .
the getsencbalance ( ) retrieve the senc balance of the contract in wei .
the gettotaldonations ( ) retrieve the ether balance collect so far in wei .
the setenddate ( ) change unit timestamp on wich de donations end .
the converttoether ( ) convert value of senc tokens to ether base on pegged rate .
assigns ownership of a specific gem to an address .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
set up the tokenbankroll stuff .
execute spin .
"finish the current spin of a player , if they have one ."
"pay winners , update contract balance , send reward where applicable ."
returns a random number use a specified block number .
random helper .
sets max profit ( internal ) .
gets max profit .
subtracts from the contract balance track var .
adds to the contract balance track var .
an external update of tokens should be handle here .
require a function to be call from a * token * bankroll .
"set the new max profit a percent of house - can be as high a 20 ( 1 , 000 , 000 100 ) ."
only owner can set minbet .
only owner can set zlotsjackpot address .
"if , for any reason , bet need to be pause ( very unlikely ) , this will freeze all bet ."
"the converse of the above , resume bet if a freeze have be put in place ."
administrative function to change the owner of the contract .
"administrative function to change the zethr bankroll contract , should the need arise ."
is the address that the token have come from actually zth ? .
request a payment in tokens to a user from the appropriate tokenbankroll .
dump eth balance to main bankroll .
dump divs and dump eth into bankroll .
requires the game to be currently active .
require msg . sender .
requires msg . sender .
requires msg . sender .
function to recover the fund on the contract .
main function .
require msg . sender .
admin function to pull all tokens if we need to - like upgrade this contract .
admin function to change zlots address if we need to .
view function - return the jackpot amount .
transfer the specified amount of tokens to the specify address .
adapt from https : / / medium . com / promentol / lottery-smart - contract-can - we-generate - random-numbers - in-solidity - 4f586a152b27 .
current difficulty of the game .
current bet amount for the game .
for the ui to properly display the winner 's pot .
a trap door for when someone send tokens other than the intended ones so the overseers can decide where to send them .
let the public play .
adjust the bet amount .
adjust the difficulty .
wager your bet .
method to determine winners and losers .
for those that just want to donate to the whale .
payout eth to winner .
payout eth to whale .
payout eth to whale when player lose .
create a new sp entry for further modification .
"change registrant , must be exist registrant or rivetz ."
"change admin , must be exist registrant or rivetz ."
"change pubkey , must be exist registrant or rivetz ."
"change info hash , must be admin , registrant or rivetz ."
"mark a approve , must be do by rivetz ."
renew subscription - - can be do by anyone that pay .
set subscription end date - - can only be do by rivetz .
"permanently deactivate spid , must be registrant - - expire subscription , invalidate ."
"disable spid , zero out everything - - must be rivetz ."
set new registration and annual fee - - must be rivetz .
"rvt be upgradeable , make sure we can update registrar to use upgraded rvt ."
change payment address - - must be rivetz .
permission check - admin or great .
permission check - registrant or great .
calculates the number of second feeamount would add to expiration date .
register a new spid .
"register a new spid , sender must be rivetz ."
wager your bet .
execute spin .
total number of tokens in existence .
transfers _value amount of tokens to address _to .
transfers _value amount of tokens from address _from to address _to .
whether the approval be successful or not .
returns the amount which _spender be still allow to withdraw from _owner .
execute spin .
"pay winners , update contract balance , send reward where applicable ."
function to mint tokens .
function to stop mint new tokens .
return all current round info need for front end - functionhash - 0x747dff42 .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
callable only by zlots .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"adds two number , throw on overflow ."
standard uint256 function .
uint128 function .
uint64 function .
freeze ? prevent allow target from send receive ubs precondition .
"constructor , this address will be : 0x . . ."
execute spin .
"pay winners , update contract balance , send reward where applicable ."
"set the new max profit a percent of house - can be as high a 20 ( 1 , 000 , 000 100 ) ."
create mintedamount tokens and send it to target .
execute spin .
"finish the current spin of a player , if they have one ."
transfers vest tokens to beneficiary .
allows the owner to revoke the vest .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
public view functions .
check claim entitlement of any wallet .
standard erc677 function that will handle incoming token transfer .
reinvest elyxr shrimp farm dividends .
standard uint256 function .
division by zero be ignore and return zero .
uint128 function ( h be for half ) .
int256 function .
return true if the role have be define for the contract .
check that freetransfer be true or that the owner be involve or both sender and recipient be in the same whitelist .
create a removewhitelist would be too onerous .
transfer the specified amount of tokens to the specify address .
logic run whenever a buy order be execute .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
this be the core logic for any buy / reload that happen while a round be live .
"calculate unmasked earn ( just calculate , do not update mask ) ."
end the round .
"distribute eth base on fee to com , aff , and p3d ."
"upon contract deploy , it will be deactivate ."
transfer the specified amount of tokens to the specify address .
solidity hat stack limit .
return all current round info need for front end - functionhash - 0x747dff42 .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
"calculate unmasked earn ( just calculate , do not update mask ) ."
receive name / player info from name contract .
prevent contract from interact with goalbonanzaplus .
receive entire player name list .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
return the price buyer will pay for next 1 individual key .
return time leave .
oraclize callback ( trigger by oraclize ) .
returns price - should throw if not valid .
set a manual price .
determine whether manual price be use or not .
returns address of oracle currency ( 0x0 for eth ) .
returns symbol of oracle currency ( 0x0 for eth ) .
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
burns a specific amount of tokens .
"true if function execute successfully , false otherwise ."
"makes sure that player profit ca n't exceed a maximum amount , that the bet size be valid , and the playernumber be in range ."
only owner adjust contract balance variable ( only use for max profit calc ) .
only owner address can set maxprofitaspercentofhouse .
only owner address can set minbet .
only owner address can transfer zth .
only owner address can set emergency pause 1 .
only owner address can set owner address .
only owner address can selfdestruct - emergency .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
requires game to be currently active .
requires msg . sender .
returns a random number use a specified block number .
random helper .
calculate the maximum potential profit .
"finished the current bet of a player , if they have one ."
token fallback to bet or deposit from bankroll .
sets max profit .
"first , we check to see if the tokens be zth tokens ."
"in the event of a game restart , subtract the tokens which be be play for from the balance , transfer them to the winner ( if the number of tokens be great than zero : sly edge case ) ."
how many tokens be in the contract overall ? .
"administrative function for add a new token-time pair , should there be demand ."
"administrative function to remove a token-time pair , should one fall out of use ."
function to pull out the house cut to the bankroll if require ( i . e .
"if , for any reason , bet need to be pause ( very unlikely ) , this will freeze all bet ."
"the converse of the above , resume bet if a freeze have be put in place ."
administrative function to change the owner of the contract .
"administrative function to change the zethr bankroll contract , should the need arise ."
fire the . . .
the death of a great man demand the birth of a great son .
retrieves your currently select dividend rate .
retrieve the total frontend token supply .
retreive the total dividend token supply .
retrieve the frontend tokens own by the caller .
retrieve the dividend tokens own by the caller .
get the sell price at the user 's average dividend rate .
get the buy price at a particular dividend rate .
"same a buy , but explicitly set your dividend percentage ."
"when sell tokens , we need to calculate the user 's current dividend rate ."
get 's a user 's average dividend rate - which be just their divtokenbalance / tokenbalance .
purchase tokens with ether .
how many tokens one get from a certain amount of ethereum .
how much ether we get from sell n tokens .
called from transferfrom .
all buy except for the above one require regular phase .
sells front-end tokens .
transfer tokens from the caller to a new holder .
transfer tokens from the caller to a new holder : the used by smart contracts edition .
who 'd have think we 'd need this thing float around ? .
anyone can start the regular phase 2 weeks after the ico phase start .
fire the start gun and then duck for cover .
modifier to prevent contract from interact with the flip card .
allows someone to send ether and obtain a card .
required for erc-721 compliance .
allow pre-approved user to take ownership of a dividend card .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
safety check on _to address to prevent against an unexpected 0x0 default .
for check approval of transfer for address _to .
for create a dividend card .
check for token ownership .
modifier to prevent purchase before we open them up to everyone .
assigns ownership of a specific card to an address .
"substracts two number , throw on overflow ( i . e ."
"this function will return false if invoke during the constructor of a contract , a the code be not actually create until after the constructor finish ."
administrative update of the bankroll contract address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
required for erc-721 compliance .
creates a div card with bankroll a the owner .
opens the dividend card up for sale .
returns all the relevant information about a specific div card .
required for erc-721 compliance .
required for erc-721 compliance .
additions for bankroll .
remove a whitelisted contract .
alters the amount of tokens allocate to a game contract on a daily basis .
function to be run by an owner ( ideally on a cron job ) which perform daily token collection and dispersal for all whitelisted contract .
"in the event that we want to manually take tokens back from a whitelisted contract , we can do so ."
"dispenses daily amount of zth to whitelisted contract , or retrieve the excess ."
dev withdrawal of tokens - split equally among all owners of contract .
change the dividend card address .
receive ether ( from zethr itself or any other source ) and purchase tokens at the 33 dividend rate .
use all available balance to buy in .
function to buy tokens with contract eth balance .
calculates if an amount of tokens exceed the aggregate daily limit of 15 of contract balance or 5 of the contract balance on it own .
allows u to set the daily token limit .
allows to remove an owner .
add an address that can administer the token even when pause .
remove an administrator .
determine if address be an administrator .
transfer token for a specified address with pause feature for administrator .
transfer tokens from one address to another with pause feature for administrator .
add fund to vest contract .
revoke vest ; release releasable fund to beneficiary and return remain to master and kill vest contract .
check for change in balance in order to track amount of locked tokens .
deploys a vest contract to _beneficiary .
master call this when it upload fund in order to differentiate betwen fund from master and 3rd party .
check for change in balance in order to track amount of lock tokens and notify master .
todo : make storage lib .
transfers releasable fund from vest to beneficiary ( caller of this method ) .
transfer tokens from the from account to the to account .
owner can transfer out any accidentally send erc20 tokens .
increases approve amount of tokens for spender .
decreases approve amount of tokens for spender .
overrides standardtoken . sol .
overrides owned . sol .
allows allow third party to transfer tokens from one address to another .
"private transfer , can only be call by this contract ."
set token price .
set allowance for other address .
"internal transfer , only can be call by this contract ."
withdraw eth .
withdraw tokens .
only owner can deposit ether into put option contract .
"only end time , onwer can transfer contract 's ether out ."
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
it provide an erc20 compatible transfer function without check of .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
total number of tokens in existence .
gets the balance of the specified address .
function to check the amount of tokens that an owner allow to a spender .
change ppbt selling and buy price .
set pbtt to contract against eth to pay tx .
user buy pbtt and pay in ether .
allows a token holder to burn tokens .
allows the owner to reclaim tokens that be assign to the token contract itself .
allows the owner to withdraw that be assign to the token contract itself .
allows the owner to withdraw all fund from contract to owner 's specific adress .
halts or unhalts direct trade without the sell / buy function below .
constructor function .
constructor function .
function to batch send tokens .
function to batch send tokens .
function to batch freeze account .
calculates the amount that have already vest .
allows the owner to revoke the vest .
destroy tokens .
destroy tokens from other account .
ico list management .
token lock management .
check the token and step lock .
regist holder step .
check the funder step lock .
"override erc20 interface funtion , to verify token release ."
only the owner can manage burn function .
1eth newrate tokens .
"_amount in meshx , ."
"_amount , _freezeamount in meshx ."
filter name string - convert uppercase to lower case .
will cause a certain _value of coin mint for _to .
will allow multiple mint within a single call to save gas .
internal method share by mint ( ) and airdropminting ( ) .
owner can permanently disable the contract .
grant tokens to a specified address .
revoke the grant of tokens of a specifed address .
calculate amount of vested tokens at a specifc time .
unlock vest tokens and transfer them to their holder .
rat for each tier and total wei in that tiers they be add up together .
function for whitelisting investors with cap .
call by the owner to close the crowdsale .
"start the public sale manually after the presale be over , duration be in days ."
total wei raise in the presale and public sale .
total cap of the presale and public sale .
total tokens sell duing the presale and public sale .
main buying function .
function for the mini me token .
"if the user send 0 ether , he receive 250 ."
create mintedamount tokens and send it to target .
peterson 's law protection .
transfer the specified amount of tokens to the specify address .
function to mint tokens .
to stop this contract .
allows the current owner to transfer control of the contract to a newowner .
transfer tokens from one address to another param _from address the address which you want to send tokens from param _to address the address which you want to transfer to param _value uint256 the amount of tokens to be transfer .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
approve should be call only first .
transfer to and lock it .
transfer to and lock it .
burns a specific amount of tokens .
dev function to mint tokens param _to the address that will receive the minted tokens .
revert if call by any account except owner .
revert if call by any account except owner .
only the owner be allow to burn tokens .
"when sale be n't end , issue tokens to investors pay with fiat currency ."
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
"withdraw tokens only after lock-up end , apply the stag lock-up scheme ."
approve and then comunicate the approve contract in a single tx .
custom add-on to erc20 : airdrop .
custom add-on to erc20 : airdrop .
"in case of any errors in race , enable full refund for the bettors to claim ."
method to claim unclaimed winnings after 30 day notice period .
place a bet on a coin ( horse ) lockbetting .
method to place the oraclize query .
method to calculate reward ( call internally by callback ) .
method to calculate an invidual 's reward .
expose the coin pool detail for dapp .
safemath addition .
method to place the oraclize query .
oraclize callback method .
transfer token for a specified address .
transfer tokens from one address to another .
ensure the transfer be valid .
enable the transfer of this token .
set the crowdsale address .
transfer token for a specified address .
transfer tokens from one address to another .
low level token purchase function .
send _value token to _to from msg . sender .
send _value token to _to from _from on the condition it be approve by _from .
inside a tokenfallback function msg . sender .
transfer to and lock it .
transfers tokens hold by lock .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
constructor function .
mitigate short address attack thank to https : / / github . com / numerai / contract / blob / c182465f82e50ced8dacb3977ec374a892f5fa8c / contract / safe . sol l30-l34 .
prevent transfer until trade allow .
todo : update test to expect throw .
todo : update test to expect throw .
"to change the approve amount you first have to reduce the address ' allowance to zero by call 'approve ( _spender , 0 ) ' if it be not already 0 to mitigate the race condition describe here : https : / / github . com / ethereum / eips / issue / 20 issuecomment-263524729 ."
"allow controlwallet to update the price within a time contstraint , allow fundwallet complete control ."
allow fundwallet or controlwallet to add ether to contract .
allow fundwallet to remove ether from contract .
transfer tokens from one address to a contract .
assemble the give address bytecode .
transfer token for a user or another contract address for erc20 and erc223 .
transfer token for a user or another contract address for erc20 and erc223 .
transfer tokens from one address to another .
allows the current owner to transfer control of the contract to a newowner .
check if the contract be activate .
activate the contract .
inactivate the contract .
user withdraw .
update round id .
check if the msg sender be human account .
check if admin or not .
set boundaries for incoming tx .
send eth to contract .
send eth to contract .
buy key use balance .
buy name .
private function .
throws if call by account different from the owner account .
updates lottery parameters .
withdraws commission sum to the owner .
withdraws ether for winner .
adds user address to participants .
buys tokens from sellers .
buys tokens from system ( mint ) for sender .
creates a new lottery .
returns current price for 1 token .
returns number of tokens that can be buy from seller .
approves tokens for sell .
returns part of number by percent .
returns winner address .
checks whether new lottery should be create .
returns token balance by user address .
returns sell token balance by user address .
buys tokens .
returns lottery detail by index .
returns top users by balance for current lottery .
returns seller id by user address .
low level token purchase function .
update token contract .
update wallet address .
create the token to be sell .
function to grant the amount of tokens that will be vest later .
function to grant the amount of tokens that will be vest later .
function to calculate the amount of tokens that can be vest at this moment .
function to redeem tokens that can be vest at this moment .
function to return grant token to the initial sender .
function to check the amount of tokens that an owner allow to a spender .
playerbookinterface interface .
destroy tokens from other account .
approve should be call when allowance _spender 0 .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
set allowance for other address .
transfer tokens to multiple address .
destroy tokens .
"distribute eth base on fee to com , aff , and p3d ."
"distribute eth base on fee to com , aff , and p3d ."
return all current round info need for front end - functionhash - 0x747dff42 .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
prevent contract from interact .
get exist or register new pid .
check to make sure user pick a valid team .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and p3d fees_ 0 j3ddatasets . teamfee ( 50 , 0 ) ; ."
"distribute eth base on fee to gen and pot fees_ 0 j3ddatasets . teamfee ( 50 , 0 ) ; ."
prepare compression data and fire event for buy or reload tx 's .
set gaslimit .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
function to mint tokens .
function to mint tokens .
"burns a specific amount of tokens , could be call only once ."
moves lock tokens to reserve account .
moves lock tokens to team account .
transfer token for a specified address .
transfer tokens from one address to another .
if bonus 1 then extra bonus 5 .
get current relative day of week ( 0-6 ) .
buy tokens .
commit to exercise this week .
payout your available balance base on your activity in previous weeks .
post image data to the blockchain and log completion .
withdraw tokens to eth .
store an image string and get back a numerical identifier .
initialize a week data struct .
get the current day ( from contract creation ) .
get the current week ( from contract creation ) .
transfer tokens .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
initialize the contract .
return the number of tokens allocate to this contract .
this be a constructor function which mean the following function name have to match the contract name declare above .
generates a random number from 0 to 100 base on the last block hash .
merge mining .
readjust the target by 5 percent .
reward be cut in half every reward era ( a tokens be mine ) .
standard kill ( ) function to recover fund .
"if the user send 0 ether , he receive 200 ."
mine your own 0xbtchate functions ! ! .
mine your own 0xbtchate functions ! ! .
set up the tokenbankroll stuff .
the actual roll function .
"finished the current bet of a player , if they have one ."
"pay winner , update contract balance to calculate new max bet , and send reward ."
token fallback to bet or deposit from bankroll .
sets max profit .
gets max profit .
subtracts from the contract balance track var .
adds to the contract balance track var .
only owner adjust contract balance variable ( only use for max profit calc ) .
an external update of tokens should be handle here .
only owner address can set maxprofitaspercentofhouse .
only owner address can set owner address .
only owner address can selfdestruct - emergency .
request a payment in tokens to a user from the appropriate tokenbankroll .
"makes sure that player profit ca n't exceed a maximum amount , that the bet size be valid , and the playernumber be in range ."
random helper .
generates the message to sign give the output destination address and amount .
"send the give amount of eth to the give destination use the two triplets ( v1 , r1 , s1 ) and ( v2 , r2 , s2 ) a signatures ."
"confirm that the two signature triplets ( v1 , r1 , s1 ) and ( v2 , r2 , s2 ) both authorize a spend of this contract 's fund to the give destination address ."
generate the the unsigned message ( in bytes32 ) that each owner 's wallet would have sign for the give destination and amount .
confirm the pair of address a two distinct owners of this contract .
construct the byte representation of the ascii-encoded hashed message write in hex .
convert from byte to ascii of 0-f http : / / www . unicode . org / chart / pdf / u0000 . pdf .
transfer token to a specify address and forward the data to recipient .
"add or remove game contract , which can accept elyxr tokens ."
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
sends jackpot fund for additional dividends .
liquifies tokens to ethereum .
modifier to ensure that a function be only call during the ico : .
modifier to ensure that a function be only call by the owner : .
internal function for determine the current bonus : ( it be assume that this function be only call during the ico ) .
extended function for exchange ether for tokens .
function that can be use to burn unsold tokens after the ico have end : .
function that the owner can withdraw fund : .
special override for the standard mint function .
special override for the standard finishminting function .
owner can transfer out any accidentally send erc20 tokens .
function to mint tokens .
low level token purchase function .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
allows for msg . sender .
gets the balance of the specified address .
function to check the amount of tokens that an owner allow to a spender .
transfers vest tokens to beneficiary .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
activates the trasfer for all users .
allows the owner to add addresse that can bypass the transfer lock .
sends all avaible tay to the tge contract to be properly distribute .
allows the owner to add addresse that can burn tokens .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
the granularity of the token .
return the account balance of some account .
return the list of default operators .
send _amount of tokens to address _to pass _userdata to the recipient .
authorize a third party _operator to manage ( send ) msg . sender 's .
revoke a third party _operator 's right to manage ( send ) msg . sender 's .
check whether the _operator address be allow to manage the tokens hold by _tokenholder address .
send _amount of tokens on behalf of the address from to the address to .
internal function that ensure _amount be multiple of the granularity .
helper function actually perform the send of tokens .
helper function actually perform the burn of tokens .
helper function that check for erc777tokensrecipient on the recipient and call it .
helper function that check for erc777tokenssender on the sender and call it .
this modifier be apply to erc20 obsolete methods that be implement only to maintain backwards compatibility .
for backwards compatibility .
erc20 backwards compatible transfer .
erc20 backwards compatible transferfrom .
erc20 backwards compatible approve .
erc20 backwards compatible allowance .
disables the erc20 interface .
re enable the erc20 interface .
generates _amount tokens to be assign to _tokenholder .
burns _amount tokens from _tokenholder by _operator .
the name of the token .
the symbol of the token .
"restrict methods in such way , that they can be invoke only by merchant account or by monethaaddress account ."
profile info by string key .
payment set by string key .
composite reputation value by string key .
set profile info by string key .
set payment set by string key .
set composite reputation value by string key .
allows withdrawal of fund to beneficiary address .
allows merchant to withdraw fund to beneficiary address .
allows merchant to withdraw fund to it 's own account .
allows merchant or monetha to initiate exchange of fund by withdraw fund to deposit address of the exchange .
allows merchant or monetha to initiate exchange of fund by withdraw all fund to deposit address of the exchange .
allows merchant to change it 's account address .
"restrict methods in such way , that they can be invoke only by monethaaddress account ."
allows owner to set new monetha address .
"restrict methods in such way , that they can be invoke only by merchant account ."
approves and then call the receive contract .
for ether .
the extensiontime be in second .
the new rate have to be pass in format : 100 rate 100 000 pass rate ( 1 ether 100 tokens ) 1 rate 1 000 pass rate ( 1 ether 1 token ) 0 . 01 rate 10 pass rate ( 100 ethers 1 token ) .
by default minweiamount 1000 .
set the exchange oracle after crowdsale .
this function be use for taxation purpose and will be use after pre-defined requirement be meet .
interface : playerbookreceiverinterface .
transfer tokens from one address to another .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to mint tokens .
allocate tokens to the users .
distribute tokens to grant .
allows the curretn owner to revoke grant .
number of veset token for _holder on _time .
calculate amount of vested tokens .
burns a specific amount of tokens .
modifier to make a function callable only when the target be not frozen .
freeze ? prevent allow target from send receive tokens .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
receive name / player info from name contract .
receive entire player name list .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
withdraws all of your earn .
use these to register name .
ethereum token .
ethereum token .
recommended fix for know attack on any erc20 .
erc223 transfer and invoke specify callback .
erc223 transfer to contract and invoke tokenfallback ( ) method .
token purchase function .
function to compute output tokens from input wei .
"must be call after presale end , to do some extra finalization ( forward / refund ) work ."
"must be call after crowdsale end , to do some extra finalization ( forward / refund ) work ."
investors can claim refund here if presale / crowdsale be unsuccessful .
checks whether presale fund goal be reach .
checks whether total fund goal be reach .
function to mint tokens .
function to burn tokens .
function to burn tokens .
function to mint tokens .
function to hash burn and mint detail .
claim your share of the balance .
internal interface ( extensible ) .
number of tokens that can be purchase with the specified _weiamount .
function to mint tokens .
function to check whether passed address be a contract address .
function to transfer any erc20 token to owner address which get accidentally transfer to this contract .
total number of tokens in existence .
gets the balance of the specified address .
function to check the amount of tokens that an owner allow to a spender .
transfer token for a specified address .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
transfer tokens from one address to another .
burns a specific amount of tokens .
burns a specific amount of tokens from the target address and decrements allowance .
function to mint tokens .
decrease total supply by _val .
set / unset _acct a an authorized module .
get _acct balance .
get allowance of _spender in behalf of _owner .
get if _acct be an authorized module .
get total supply .
increment _acct balance by _val .
decrement _acct balance by _val .
increase total supply by _val .
decrease total supply by _val .
onlyowner proposes to transfer control of the contract to a new owner .
move _amount from _from to _to .
setting operator _operator for _tokenholder .
getting operator _operator for _tokenholder .
increment _acct balance by _val .
decrement _acct balance by _val .
"can only be call by the newownercandidate , accept the transfer of ownership ."
owner can step down and assign some other address to this role .
"decentralizes the contract , this operation can not be undone ."
call have be separate into it own function in order to take advantage of the solidity 's code generator to produce a loop that copy tx . data .
set allowance of _spender in behalf of _sender at _value .
decrease allowance of _spender in behalf of _from at _value .
increase total supply by _val .
for backwards compatibility .
erc20 backwards compatible transfer .
erc20 backwards compatible transferfrom .
erc20 backwards compatible approve .
erc20 backwards compatible allowance .
the name of the token .
the symbol of the token .
the granularity of the token .
the total supply of the token .
return the account balance of some account .
send _amount of tokens to address _to .
authorize a third party _operator to manage ( send ) msg . sender 's .
revoke a third party _operator 's right to manage ( send ) msg . sender 's .
check whether the _operator address be allow to manage the tokens hold by _tokenholder address .
send _amount of tokens on behalf of the address from to the address to .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address from authorized balance of sender .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
change the balance database to _newdb .
erc20 backwards compatible transferfrom use backenddb .
erc20 backwards compatible approve .
erc20 backwards compatible allowance .
the total supply of the token .
return the account balance of some account .
authorize a third party _operator to manage ( send ) msg . sender 's .
revoke a third party _operator 's right to manage ( send ) msg . sender 's .
check whether the _operator address be allow to manage the tokens hold by _tokenholder address at remote database .
helper function actually perform the send of tokens use a backend database .
check whether an address be a regular address or not .
helper function actually perform the send of tokens .
helper function that check for erc777tokensrecipient on the recipient and call it .
helper function that check for erc777tokenssender on the sender and call it .
set presale time .
for push pre-ico record .
set salecap .
calcute bouns .
stop contract .
check saleactive .
get currentts .
buy token .
transfer tokens from one address to another .
initial contract .
addfunds teller can add more fund on his sellpoint .
update release amount for single day accord to dividend rule in https : / / coincool . cool .
the converttoether ( ) convert value of senc tokens to ether base on pegged rate .
the finalize ( ) should only be call after donation hard cap reach or the campaign reach the final day .
the setenddate ( ) change unit timestamp on wich de donations end .
"burns a specific amount of tokens , could be call only once ."
get decision result address .
"function be final , and must not be override ."
"function be virtual , and mean to be overridden ."
"function be final , and must not be override ."
decsendants should use _sender ( ) instead of msg . sender .
interface function to allow specify icap address a string .
"function be final , and must not be override ."
"function be final , and must not be override ."
"function be virtual , and mean to be overridden ."
"function be final , and must not be override ."
"function be virtual , and mean to be overridden ."
"function be final , and must not be override ."
"function be virtual , and mean to be overridden ."
"function be final , and must not be override ."
"function be virtual , and mean to be overridden ."
allow for selfdestruct possibility and send fund to owner .
adds vest token allocation .
transfers vest tokens to beneficiary .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
solidity hat stack limit .
return all current round info need for front end - functionhash - 0x747dff42 .
return player info base on address .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
during ico phase all eth send in by each player .
this be the core logic for any buy / reload that happen while a round be live .
"calculate unmasked earn ( just calculate , do not update mask ) ."
"average ico phase key price be total eth put in , during ico phase , divide by the number of key that be buy with that eth ."
"at end of ico phase , each player be entitle to x key base on final average ico phase key price , and the amount of eth they put in during ico ."
prevent contract from interact with fomo4d .
return the amount of key you would get give an amount of eth .
return current eth price for x key .
receive entire player name list .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"take key buy during ico phase , and add them to round ."
set boundaries for incoming tx .
update round timer base on number of whole key buy .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
calculate how many key would exist with give an amount of eth .
calculate how much eth would be in contract give a number of key .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
return the price buyer will pay for next 1 individual key .
return time leave .
return player earn per vault - functionhash - 0x63066434 .
standardtokendefrosting function allow the owner of the smart contract to defrost frozen tokens base on a base defrost rate of 0 . 2 ( from multiple recipients at once if desire ) of particular recipient address 50 .
customtokendefrosting function allow the owner of the smart contract to defrost frozen tokens base on custom defrost rates ( from multiple recipients at once if desire ) of particular recipient address 50 .
transfer token for a specified address .
transfer tokens from one address to another .
frozentokentransfer function allow the owner of the smart contract to transfer frozen tokens ( untransferable till melt ) to a particular recipient .
changecustomdefrostingrate function allow the owner of the smart contract to change individual custom defrost rat .
"removefrozentokenconfigurations function allow the owner of the smart contract to remove all frostbites , frozenbalances and defrost rat of an array of recipient address 50 ."
return all current round info need for front end - functionhash - 0x747dff42 .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
"calculate unmasked earn ( just calculate , do not update mask ) ."
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
calculate number of key receive give x eth .
calculate how many key would exist with give an amount of eth .
withdraws all of your earn .
fix for the erc20 short address attack .
allow for stake of glx tokens function be call only from owner which be the glx token distribution contract be only trigger for a period of time and only if there be still tokens from crowdsale .
mint tokens for crowdsale participants .
override buytokens so all mint come from golix .
set address which should receive the vested team tokens share on finalization .
true if crowdsale event have end .
allow for stake of glx tokens from crowdsale participants only work if tokens from token distribution be not sell out .
enable early finalization of crowdsale .
disable stake period .
creates golix token contract .
finalize crowdsale .
add a node to the blacklist .
remove a node from the blacklist .
"return true if the node be permit , false otherwise ."
destroy tokens .
destroy tokens from other account .
a uint256 specify the amount of tokens still available for the spender .
transfer tokens from one address to another .
increase the amount of tokens that an owner allow to a spender .
burnhackingamount ( ) function only exist for the incineration of steal fnk .
restartminting ( ) function isn t for just simple reissue .
buy token .
requires game to be currently active .
execute spin .
"pay winners , update contract balance , send reward where applicable ."
"this sound like a draconian function , but it actually just ensure that the contract have enough to pay out a jackpot at the rate you 've select ( i . e ."
returns a random number use a specified block number .
random helper .
"when ico be close , send the remain ( unsold ) tokens to address 0x0 ."
"function to update auth , contract owner can grant other account auth permission by this it require : 1 ."
convinient function for read token 's owner .
convinient function for read token 's erc20address .
convinient function for read be address authed .
function for batch transfer it require : 1 .
throws if call by any account that 's not whitelisted .
add an address to the whitelist .
add address to the whitelist .
remove an address from the whitelist .
remove address from the whitelist .
internal interface ( extensible ) .
validation of an incoming purchase .
source of tokens .
executed when a purchase have be validate and be ready to be execute .
"override for extensions that require an internal state to check for validity ( current user contributions , etc . ) ."
burns a specific amount of tokens .
set up fee distribution status thresholds .
set up specific fee and status threshold .
invest wbt token function .
invest bct token function .
recursively distribute deposit fee between parent .
update node status if children sum amount be enough .
set wbttoken exchange rate .
set bcttoken price .
set eth exchange rate .
set _status for _addr .
withdraw _amount for _addr .
withdraw contract balance to _addr .
withdraw correspond amount of eth to _addr and burn _value tokens .
withdraw correspond amount of eth to _addr and burn _value tokens .
transfer ownership of wbttoken contract to _addr .
transfer ownership of data contract to _addr .
renouncing to ownership will leave the contract without an owner .
transfers control of the contract to a newowner .
"call by the owner to unpause , return to normal state ."
prevent target from send or receive tokens by set unix time .
standard function transfer with no _data .
transfer tokens from one address to another .
function to collect tokens from the list of address .
function to distribute tokens to the list of address .
check if the give account be available .
check if the give account be not frozen .
throws if call by any account other than the collector .
check if the give account have enough balance more than give amount .
check if the give account be not frozen .
throws if call by any account other than the distributor .
throws if call by any account other than the freezer .
allows the current owner to transfer control of the contract to a newowner .
allows the current collector to transfer control of the contract to a newcollector .
allows the current distributor to transfer control of the contract to a newdistributor .
allows the current freezer to transfer control of the contract to a newfreezer .
check if the give account be valid .
prevent target from send or receive tokens .
function to mint tokens .
burns a specific amount of tokens .
set up specific fee and status threshold .
invest wbt token function .
invest bct token function .
recursively distribute deposit fee between parent .
update node status if children sum amount be enough .
set wbttoken exchange rate .
set bcttoken price .
set eth exchange rate .
add new child .
set _status for _addr .
withdraw contract balance to _addr .
withdraw correspond amount of eth to _addr and burn _value tokens .
withdraw correspond amount of eth to _addr and burn _value tokens .
transfer ownership of wbttoken contract to _addr .
transfer ownership of data contract to _addr .
use to make sure no one can interact with contract until it have be activate .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
for mining .
update contract overview infomations when new token be mine .
change miner contract if need .
public function .
update release amount for single day accord to dividend rule in https : / / coincoolotc . com .
throws if call by any account other than the owner .
allows to create a subdomain ( e . g .
returns the owner of top level domain ( e . g .
return the owner of a subdomain ( e . g .
the contract owner can take away the ownership of any domain own by this contract .
the contract owner can lock and prevent any future domain ownership transfer .
allows to update to new ens registry .
allows to update to new ens resolver .
logic run whenever a buy order be execute .
this be the core logic for any buy / reload that happen while a round be live .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
verifies a merkle proof prove the existence of a leaf in a merkle tree .
m o d i f i e r s .
function to mint tokens .
transfer token from message sender to another .
transfer token from 'from ' address to 'to ' addreess .
transfer function to be compatable with erc20 standard .
transfer function to be compatable with erc223 standard .
this function check if the address be a contract or wallet .
this function to be use if the target be a contract address .
this function to be use if the target be a normal eth / wallet address .
erc20 standard function .
erc20 standard function .
erc20 standard function .
public function to call the _burn function .
burn the specified amount of tokens by the owner .
create a vesting entry for the specify user .
returns the vested amount for a specify user .
returns the vested end time for a specify user .
checks if the vent period be over for a specify user .
manual end vest time .
returns the _name of the token .
returns the _symbol of the token .
returns the _standard of the token .
returns the _decimals of the token .
function to return the total supply of the token .
function to return the balance of a specified address .
function to mint tokens .
function to increase tokens .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
lock the special address .
returns tokens lock for a specified address for a specified purpose at a specified time .
throws if call by any account other than the adminer .
returns tokens available for transfer for a specified address .
allows the current owner to transfer control of the contract to a new owner .
new owner accept control of the contract .
change the control of the contract to a new adminer .
transfer token for a specified address .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
execute spin .
"pay winners , update contract balance , send reward where applicable ."
allow the token itself to send tokens use transferfrom ( ) .
create a tokenvault and fill with the specify newly mint tokens .
create specify number of tokens and transfer to destination .
lock tokens for a single whole period .
release vest tokens for the caller 's own address .
release vest tokens for the specified address .
check the locked balance for an address .
will open the trade for everyone .
trading limit - require the token sale to have close .
trading limit - require the token sale to have close .
from erc20 standard .
override to extend the way in which ether be convert to tokens .
override hasclosed to add minimal value logic .
override purchase validation to add extra value logic .
verify that the address be different than this contract address .
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
send coin .
a contract attempt _ to get the coin .
send coin .
a contract attempt to get the coin .
burns a specific amount of tokens .
burns a specific amount of tokens from the target address and decrements allowance .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
remove a role from an address .
throws if call by any account that 's not a admin .
getter to determine if address have admin role .
add a admin role to an address .
remove a admin role from an address .
claim a admin role from an address .
"call by the owner to lock , trigger stop state ."
"call by the owner to unlock , return to normal state ."
burns a specific amount of tokens .
function to mint tokens .
function to start mint new tokens .
modifier to make a function callable only when the contract be not pause .
transfers tokens to recipients multiply .
transfers tokens hold by timelock to recipients multiply .
"integer division of two number , truncate the quotient ."
fix for the erc20 short address attack .
modifier to allow action only when the contract is pause .
modifier to allow action only when the contract is not pause .
beneficiary claim tokens hold by time lock .
mint timelocked tokens .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
function to check the amount of tokens than an owner allow to a spender .
throws if call by any account other than the owner .
function to mint tokens .
function to stop mint new tokens .
owner can add a new customer to registry .
owner can add a new tx of payment for mcw to the customer 's txregistry .
owner can mark a customer 's tx of payment for mcw a spend .
check the customer 's address .
get the customer 's tx of payment for mcw amount .
get the customer 's tx of payment for mcw from customer 's tx list by index .
get the customer 's tx of payment for mcw data - amount of mcw tokens which be record in the tx .
get the customer 's tx of payment for mcw data - amount of kwh which be record in the tx .
get the customer 's tx of payment for mcw data - timestamp of payment for mcw which be record in the tx .
get the customer 's tx of payment for mcw data - tx of payment for kwh which be record in the tx .
get the customer 's tx of payment for mcw data - timestamp of payment for kwh which be record in the tx .
check the customer 's tx of payment for mcw .
check if the customer 's tx of payment for mcw be spend .
check the customer 's tx of payment for kwh .
get the customer 's tx of payment for mcw by tx payment for kwh .
owner can add a new tx of payment for mcw to the customer 's txregistry .
owner can mark a customer 's tx of payment for mcw a spend .
allow execution by the owner only .
transfer token for a specified address with pause and freeze feature for owner .
transfer tokens from one address to another with pause and freeze feature for owner .
transfer tokens from ico address to another address .
set ico address .
owner can freeze the token balance for choose token holder .
owner can unfreeze the token balance for choose token holder .
get the withdrawalcoolingperiod parameter value .
set the withdrawalcoolingperiod parameter value .
fire the withdrawalrequested event .
initialize the wallet with the operator and backupaccount address .
setting the account of the user to send fund to .
withdraw fund to the user account .
user request withdraw .
user perform withdraw .
allows the user to request a withdraw of his / her placements .
allows the user to perform the requestwithdraw operation .
verify that the string be not empty .
"return the difference of _x minus _y , assert if the subtraction result in a negative number ."
overrides parent behavior by transfer tokens from wallet .
"converts give number to base58 , limit by 32 symbols ."
create btc address : https : / / en . bitcoin . it / wiki / technical_background_of_version_1_bitcoin_addresses how_to_create_bitcoin_address .
help to recover stucked tokens .
allows to create a subdomain ( e . g .
constructor function .
"internal transfer , only can be call by this contract ."
for push pre-ico record .
low level token purchase * * * do not override .
function for daonomic ui .
executes buyback .
calculates tokens for this stage .
"_hashmessage hash ( _user _nonce _value ) _v , _r , _s be from supervisor 's signature on _hashmessage claimring ( . . . ) ."
constructor function .
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
"if the user send 0 ether , he receive 500tokens ."
the daico fund contract call this function to burn the user 's token to avoid over refund .
set the exchange rate from eth to usd .
investors can claim refund here if crowdsale be unsuccessful .
checks whether fund goal be reach .
validate if it be in ico stage 1 .
validate if it be in ico stage 2 .
validate if crowdsale have start .
validate the mininum contribution requirement .
executed when a purchase have be validate and be ready to be execute .
"finalization task , call when owner call finalize ( ) ."
calculate the token amount and add bonus if need .
enable the teamwithdraw state .
close the fund .
check if there be an ongoing proposal .
check if next budget period plan have be make .
get number of proposals .
get number of budget plan .
try to finialize the last proposal .
create new tap proposal by address out of company .
create new tap proposal by company .
create a refund proposal .
vote for a tap proposal .
vote for a tap proposal .
withdraw when there be no budget plan .
tokenholders can claim refund here .
check if refund be in lock period .
get remain fund .
receive the initial fund from crowdsale contract .
"prevents a contract from call itself , directly or indirectly ."
this function can be use in 2 instance 1st one if to withdraw tokens that be accidentally send to this contract 2nd be to actually withdraw the tokens and return it to the company in case they do n't find a candidate .
eth can not get lock in this contract .
"helper function , not really need , but good to have for the sake of posterity ."
function to resume token sale .
function for front-end token purchase on our website * * * do not override buyer address of the wallet perform the token purchase .
internal interface ( extensible ) .
source of tokens .
the following function be execute when a purchase have be validate and be ready to be execute .
override to extend the way in which ether be convert to tokens .
how eth be store / forward on purchase .
function for tokensale information on the website .
special function to delay the token sale if necessary .
check balance of this smart contract .
check the token balance of any ethereum address .
confirm if the token sale have finish .
"this function will send any unsold tokens to the null tokenburn contract address once the crowdsale be finish , anyone can publicly call this function ! ."
function to temporarily pause token sale if need .
saveaprrove to fix the approve race condition .
execute spin .
"pay winners , update contract balance , send reward where applicable ."
return true if crowdsale event have end .
send ether to the fund collection wallet .
"must be call after crowdsale end , to do some extra finalization ."
stops the mint and transfer token ownership to sale owner .
mints a single token to a unique address with a tokenuri .
sets token metadata uri .
get token metadata uri .
"in case the amassador quota be not meet , the administrator can manually disable the founder phase ."
"ensure that the first tokens in the contract will be equally distributed mean , no divine dump will be ever possible result : healthy longevity ."
transfer tokens from the caller to a new holder .
transfer tokens from other address .
"call by the owner to pause , trigger stop state ."
func unpause and finalunpause be do same stuff except from event .
transfer token for a specified address with call custom function external data .
transfer token for a specified address with external data .
transfer token for a specified address .
transfer tokens from one address to another .
internal part .
diagonal be not consider .
player name .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
"register for token initialize , 100 of total token will initialize to dev account ."
frozen for the team members .
frozen 15 of total supply for team members .
token freeze rule for token holders .
override some function to add support of block .
hold team / founder tokens for defined time .
finished ico .
failed ico - time be over .
allows some methods to be use by team or robot .
calculates amount of bonus tokens .
are we reach tokens limit ? .
add tokens bonus amount to counter .
manual start ico after pause .
manual pause ico .
auto success ico - cat withdraw ether now .
withdraw allow only on success .
generates team tokens after ico finish .
methods for bots request set / update robot address .
update token price in wei .
mb deprecate .
helpers calculation of min value .
buyamount * amounttokena / ( amounttokenb + buyamount ) buy : ( tokenamountincontract * _ethamountfrombuyer ) / ( contract_eth_balamce + _ethamountfrombuyer ) sell : sellamount * ( contract_eth_balance ) / ( tokenamount + sellamount ) .
returns the totalsupply .
return the balance of an specified account .
transfer function .
burn some of the tokens .
emit new tokens .
revert a transfer in case of error .
transfer tokens from other address .
"must be call after crowdsale end , to do some extra finalization work ."
updates current stage cap and return amount of excess tokens if ico do not have enough tokens .
authorize a third party _operator to manage ( send ) msg . sender 's .
revoke a third party _operator 's right to manage ( send ) msg . sender 's .
helper function actually perform the send of tokens .
helper function actually perform the burn of tokens .
generates _amount tokens to be assign to _tokenholder .
burns _amount tokens from _tokenholder .
function to stop mint new tokens .
helper function that check for erc777tokensrecipient on the recipient and call it .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and pooh ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
"upon game death , there might be some eth still lock in contract ."
calculate how many key would exist with give an amount of eth .
calculate how much eth would be in contract give a number of key .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
return the price buyer will pay for next 1 individual key .
erc820implementer public erc820registry ; .
constructor to create a referencetoken .
the name of the token .
the symbol of the token .
the granularity of the token .
the total supply of the token .
return the account balance of some account .
send _amount of tokens to address _to .
send _amount of tokens to address _to pass _userdata to the recipient .
authorize a third party _operator to manage ( send ) msg . sender 's .
extend 777 approveandcall and erc20 approve functionality that give an allowance and call the new operator .
revoke a third party _operator 's right to manage ( send ) msg . sender 's .
check whether the _operator address be allow to manage the tokens hold by _tokenholder address .
send _amount of tokens on behalf of the address from to the address to .
generates _amount tokens to be assign to _tokenholder .
helper function actually perform the burn of tokens .
this modifier be apply to erc20 obsolete methods that be implement only to maintain backwards compatibility .
disables the erc20 interface .
re enable the erc20 interface .
for backwards compatibility .
erc20 backwards compatible transfer .
erc20 backwards compatible transferfrom .
erc20 backwards compatible approve .
erc20 backwards compatible allowance .
internal function that ensure _amount be multiple of the granularity .
check whether an address be a regular address or not .
helper function actually perform the send of tokens .
helper function that check for erc777tokensrecipient on the recipient and call it .
helper function that check for erc777tokenssender on the sender and call it .
helper function that check for ieip777tokensoperator on the recipient and call it .
lock a percentage of tokens for a specified time period and then grant ownership to the specify owner .
helper function that return the amount of tokens aof an owner minus the amount currently lock .
throws if call by any account other than the owner .
tells the address of the owner .
sets a new owner address .
allows the current owner to transfer control of the contract to a newowner .
gets the tier ( 1-7 ) of the divs send base off of average dividend rate .
remove the game from the list dewhitelist it .
callable from game to change their own token allocation .
allocates tokens to game .
dump all free tokens back to the main bankroll .
contract withdraw free tokens back to the free tokens .
function to buy in tokens with ethereum .
emergency this fuck up free tokens .
withdraw eth .
withdraw divs and send to bankroll .
requires supply address to be a whitelisted contract .
requires msg . sender .
requires msg . sender .
admin / bankroll function to change bankroll address .
assembly function .
returns true if supply address be a contract .
token fallback - get enter when users transfer tokens to this contract .
function call only by a whitelisted game .
add a game to the whitelist .
dev withdrawal of tokens - split equally among all owners of contract .
use all available balance to buy in .
"withdraws dividends , then buy in half of balance 33 if balance 0 . 01 eth ."
multi allocate eth to all token bankroll .
actually allocate .
set the stake address .
transfer tokens from all tokenbankrolls to the master stake contract .
calls zethrbuyin okn the select tokenbankroll .
call token allocate function on all token bankroll .
token bankroll token-allocate function .
whitelist a game on all token bankroll .
dewhitelist a game on all token bankroll .
set address of a token bankroll ( via divrate ) .
set allocation of a token bankroll .
change allocation of the specify token bankroll by an amount .
any dividends acquire by this contract be automatically trigger .
"pay winners , update contract balance , send reward where applicable ."
calculate how many key would exist with give an amount of eth .
calculate how much eth would be in contract give a number of key .
low level token purchase * * * do not override .
validation of an incoming purchase .
executed when a purchase have be validate and be ready to be execute .
"in case one of u die , we need to replace ourselves ."
return the sell price of 1 individual token .
calculate token sell value .
"administrator can : - change the name of the contract - change the name of the token - change the pos difficulty ( how many tokens it cost to hold a masternode , in case it get crazy high later ) they can not : - take fund - disable withdrawals - kill the contract - change the price of tokens ."
liquifies tokens to ethereum .
transfer tokens to newtokenbankroll .
buy tokens at this contract 's divrate .
end the round .
update round timer base on number of whole key buy .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
withdraws all of your earn .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
end the round .
"distribute eth base on fee to com , aff , and pooh ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
withdraws all of your earn .
only way to give pohwhale eth be via by use fallback .
number of tokens the contract own .
number of dividends owe to the contract .
a trap door for when someone send tokens other than the intended ones so the overseers can decide where to send them .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
"yes there be tiny amount of divs generate on buy , but not enough to justify transfer to msg . sender ."
"same a buy , but explicitly set your dividend percentage ."
purchase tokens with ether .
"internal transfer , only can be call by this contract ."
"internal transfer , only can be call by this contract ."
buy token .
transfer token for a specified address .
only people with tokens .
only people with profit .
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
converts all of caller 's dividends to tokens .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
return the sell price of 1 individual token .
return the buy price of 1 individual token .
internal function to actually purchase the tokens .
override unsupported function ; no sell of p5 tokens .
instead of exit use the transfer function and change someone 's life ! ! ! p4rty on ! ! ! .
function to mint tokens .
function to mint tokens .
update contract overview infomations when new token mine .
gets the balance of the specified address .
sell amount tokens to contract .
this function can be use in 2 instance 1st one if to withdraw tokens that be accidentally send to this contract 2nd be to actually withdraw the tokens and return it to the company in case they do n't find a candidate .
eth can not get lock in this contract .
"helper function , not really need , but good to have for the sake of posterity ."
batch send coin .
modifier to make a function callable base on pause state .
call by the owner to set new pause flag pausedpublic ca n't be false while pausedowneradmin be true .
this contract have to be approve first in _childcontract .
erc20 top down .
erc721 bottom up .
return the owner at the top of the tree of composables .
erc721impl erc998 authentication .
function add here to reduce gas cost .
"callable by owner only , after specified time ."
"callable by owner only , after specified time , only for tokens implement erc20 ."
implementation of erc 223 .
this contract have to be approve first by _erc20contract .
use by erc 223 .
erc998erc721 bottom up composable .
contract management .
change the link hash of a moken this enable metadata / content data to be change for mokens .
erc721metadataimpl token url .
create a string make from an integer between two string .
it be predict that often a new era come with a mint price change .
minting add contract to list of contract that can mint mokens .
erc998erc20 top down composable .
burns a specific amount of tokens .
print a birthday message and then become impossible to execute after 23 hours .
validate an address - currently only check that it be n't null .
verify that the address be different than this contract address .
low level token purchase * * * do not override .
"check player profit , bet size and player number be within range ."
check game be currently active .
check payouts be currently active .
check only treasury address be call .
public function player submit bet only if game be active bet be valid can query oraclize and set player vars .
semi-public function - only oraclize can call .
public function in case of a failed refund or win send .
set gas price for oraclize callback .
set gas limit for oraclize query .
only owner adjust contract balance variable ( only use for max profit calc ) .
only owner address can set houseedge .
only owner address can set maxprofitaspercentofhouse .
only owner address can set minbet .
only owner address can transfer ether .
only owner address can do manual refund use only if bet place + oraclize fail to __callback filter logbet by address and / or playerbetid : .
only owner address can set emergency pause 1 .
only owner address can set emergency pause 2 .
only owner address can set treasury address .
only owner address can set owner address .
only owner address can suicide - emergency .
"distribute eth base on fee to com , aff , and p3d ."
enable transfer after token sale and before list .
disable transfer for upgrade or emergency events .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
addition to erc20 token methods .
addition to erc20 token methods .
addition to erc20 token methods .
addition to standardtoken methods .
addition to standardtoken methods .
function to mint tokens .
override to extend the way in which ether be convert to tokens .
startico start the public ico .
endico close down the ico .
finalizeico close down the ico and set need varriables .
solidity hat stack limit .
return all current round info need for front end - functionhash - 0x747dff42 .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
"internal transfer , only can be call by this contract ."
withdraws all of your earn .
"add up unmasked earn , vault earn , set them all to 0 ."
create and begin new auction .
https : / / github . com / bitguildplatform / documentation / blob / master / readme . md 2-required - game-smart - contract-changes https : / / github . com / bitguildplatform / documentation / blob / master / readme . md 2-required - game-smart - contract-changes .
returns auction info for a token on auction .
cancels unfinished auction and return token to owner .
transfers to _withdrawtoaddress all tokens control by contract _tokencontract .
allow buy cuties for token .
disallow buy cuties for token .
create and start a new auction .
adds to the list of open auction and fire the .
throw if call by any account other than the pauser .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
update the pauser role .
throws if call by any account other than a minter .
function to mint tokens .
sets a new owner address .
throws if call by any account other than the masterminter .
get minter allowance for an account .
checks if account be a minter .
get allow amount for an account .
get totalsupply of token .
get token balance of an account .
adds blacklist check to approve .
transfer tokens from one address to another .
transfer token for a specified address .
function to add / update a new minter .
function to remove a minter .
allow a minter to burn some of it own tokens .
throws if call by any account other than the blacklister .
throws if argument account be blacklist .
checks if account be blacklist .
adds account to blacklist .
the address of the implementation .
changes the admin of the proxy .
upgrade the back implementation of the proxy .
upgrade the back implementation of the proxy and call a function on the new implementation .
the admin slot .
sets the address of the proxy admin .
only fall back when the sender be not the admin .
delegates execution to an implementation contract .
fallback implementation .
returns the current implementation .
upgrades the proxy to a new implementation .
sets the implementation address of the proxy .
modifier to check whether the msg . sender .
the address of the proxy admin .
transfer token to a specify address and forward the data to recipient .
"add or remove game contract , which can accept omnidex tokens ."
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
function for the frontend to show ether wait to be send to bankroll in contract .
make sure we will send back excess if user send more then 2 ether before 100 eth in contract .
sends bankroll fund for additional dividends .
liquifies tokens to ethereum .
constructor function .
only allow by executive officer .
find the owner of an nft .
transfers the ownership of an nft from one address to another address .
transfers the ownership of an nft from one address to another address .
transfer ownership of an nft - - the caller is responsible .
change or reaffirm the approved address for an nft .
enable or disable approval for a third party ( operator ) to manage all of msg . sender 's .
get the approved address for a single nft .
query if an address be an authorized operator for another address .
a descriptive name for a collection of nfts in this contract .
an abbreviated name for nfts in this contract .
only allow by financial officer .
a distinct uniform resource identifier ( uri ) for a give asset .
count nfts track by this contract .
enumerate valid nfts .
enumerate nfts assign to an owner .
"actually do a transfer , do no precondition check ."
actually perform the safetransferfrom .
"update the content of your square , the first 3 personalizations for a square be free then cost 100 finney ( 0 . 01 ."
"beware , this do not use a safe transfer mechanism ! ."
"the price be always 0 . 5 ether , and you can buy any available square ."
only allow by operate officer .
reassign the executive officer role .
reassign the financial officer role .
reassign the operate officer role .
collect fund from this contract .
query if a contract implement an interface .
guarantees msg . sender .
count all nfts assign to an owner .
solidity hat stack limit .
return all current round info need for front end - functionhash - 0x747dff42 .
return player info base on address .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
"calculate unmasked earn ( just calculate , do not update mask ) ."
return the amount of key you would get give an amount of eth .
return current eth price for x key .
receive name / player info from name contract .
prevent contract from interact with lastunicorn .
receive entire player name list .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
move any unmasked earn to gen vault .
update round timer base on number of whole key buy .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
update mask for round and player when key be buy .
"add up unmasked earn , vault earn , set them all to 0 ."
withdraws all of your earn .
use these to register name .
return the price buyer will pay for next 1 individual key .
return time leave .
return player earn per vault - functionhash - 0x63066434 .
set the time of a signature .
insert for paranoia but may need to change gas price in future .
use for individual wallet holders to take a small amount of ether .
implicitly call spend - if both signatures have sign we then spend .
use to take a small amount of daily tokens .
constructor function .
destroy tokens .
"call by the owner to pause , trigger stop state ."
safely add two number .
overridden method to check for end of fundraise before allow transfer of tokens .
allow for easy balance check .
allows to figure out the amount of know token holders .
allows for easy retrieval of holder by array index .
deliver stt tokens from leondra ( leondrino exchange germany ) .
creates new stt tokens .
for eventual later move to another token contract .
adjust the cap accord to the white paper term ( see stt whitepaper version 1 . 0 from 23 .
safely substract two number .
burn function - name indicate the burn of all owner 's tokens .
safely multiply two number .
"transfers _value amount of tokens to address _to , and must fire the transfer event ."
"transfers _value amount of tokens from address _from to address _to , and must fire the transfer event ."
returns the account balance of another account with address _owner .
"allows _spender to withdraw from your account multiple time , up to the _value amount ."
returns the amount which _spender be still allow to withdraw from _owner .
event log .
overridden method to check for end of fundraise before allow transfer of tokens .
freeze tokens .
get the token balance for account tokenowner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
mint tokens .
burn tokens .
freeze tokens .
unfreeze tokens .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
check if the address can transfer certain amount of tokens .
get jishis ' locked amount of token .
get simus ' locked amount of token .
set lockup for jishis .
set lockup for strategic simu .
calculates the price and transfer winnings .
https : / / github . com / bitguildplatform / documentation / blob / master / readme . md 2-required - game-smart - contract-changes https : / / github . com / bitguildplatform / documentation / blob / master / readme . md 2-required - game-smart - contract-changes .
how much ether we get from sell n tokens .
modifier throws if call by any account other than the operator_ or owner .
allows the current owner to transfer control to a newoperator .
get operator .
allows ops to add account to the whitelist .
deny any access except during sale period ( it 's time for sale hardcap have n't reach yet ) .
deny any access before all sales will be finish .
deny any access before hardcap will be reach .
deny any access before softcap will be reach .
guards from call to the contract in destructed state .
deny any access except the contract be not in init state .
allow access only for whitelisted users .
gets absolute hardcap value which mean it will be great than softcap value .
gets absolute issue hardcap volume which mean it will be great than softcap value .
gets current state of emission provider .
add users to whitelist .
removes users from whitelist .
issue tokens for user .
issue tokens for user .
performs finish hardcap manually .
performs distribution of send bmc tokens and send them to profiterole address .
activates distruction .
restricts transfer only for : 1 ) oracle and only atx tokens ; 2 ) from itself to holder .
add oracles to whitelist .
removes oracles from whitelist .
during ico phase all eth send in by each player .
"calculate unmasked earn ( just calculate , do not update mask ) ."
distribute eth base on fee to gen and pot .
"if you mark a function nonreentrant , you should also mark it external ."
"to trigger payout three out of four administrators call this function , fund will be transfer right after verification of third signer call ."
reset value of pending ( transaction object ) .
checks if give address be an administrator .
two admnistrator can replace key of third administrator .
reset value of update ( keyupdate object ) .
modifier allow only if function be call by administrator .
staking mft for a node address .
"unstake a staked node address , will remove from whitelist and refund stake ."
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
register a name .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
receive name / player info from name contract .
prevent contract from interact with gscam .
get exist or register new pid .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
approve should be call when allow _spender 0 .
burns a specific amount of tokens .
this function can be use in 2 instance 1st one if to withdraw tokens that be accidentally send to this contract 2nd be to actually withdraw the tokens and return it to the company in case they do n't find a candidate .
https : / / github . com / bitguildplatform / documentation / blob / master / readme . md 2-required - game-smart - contract-changes https : / / github . com / bitguildplatform / documentation / blob / master / readme . md 2-required - game-smart - contract-changes .
transfer token for a specified address .
transfer tokens from one address to another .
transfers tokens hold by timelock to beneficiary .
hatchcoins produce coin .
computational cost .
mint and burn .
give an address access to this role .
remove an address ' access to this role .
check if an address have this role / / revert .
check if an address have this role .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
allows to add a new owner .
allows to remove an owner .
allows an owner to submit and confirm a withdraw transaction .
allows anyone to execute a confirmed transaction .
function to send ether to address .
begin a game .
finish a game that be in progress .
return current game state .
returns the minimum bet .
returns the maximum bet .
calculate winnings for the give bet and percent .
returns the win percent when go low on the give number .
returns the win percent when go high on the give number .
process a successful roll .
roll the dice for a player .
the callback function be call by oraclize when the result be ready the oraclize_randomds_proofverify modifier prevent an invalid proof to execute this function code : the proof validity be fully verify on-chain .
fail safe for balance transfer .
"clean up a player abandon game , but only if it 's great than 24 hours old ."
set rng callback gas .
set the minimum bet .
set whether or not the game be run .
set the max bet threshold percent .
transfers the current balance to the recepient and terminate the contract .
begin a game .
finish a game that be in progress .
"clean up a player abandon game , but only if it 's great than 24 hours old ."
set rng callback gas .
gets length of array contain all member account or total supply .
gets membership type .
allows the owner to set a new owner address .
refund money if kyc / aml fail .
allow owner to withdraw fund .
updates the fee amount .
allows a user to become dda members if they pay the fee .
this update / transfer the member address .
use this function to set membershiptype for the member .
use this function to set memberid for the member .
use this function to remove member acct from array memberacct .
use this function to member acct from array memberacct .
getter function to get all membersaccts .
get member information .
"multiplies two number , throw on overflow ."
private method for register an interface .
guarantees msg . sender .
checks msg . sender .
gets the balance of the specified address .
gets the owner of the specify token id .
returns whether the specify token exist .
approves another address to transfer the give token id .
"gets the approved address for a token id , or zero if no address set ."
sets or unsets the approval of a give operator .
tells whether an operator be approve by a give owner .
"integer division of two number , truncate the quotient ."
transfers the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
returns whether the give spender can transfer a give token id .
internal function to mint a new token .
internal function to burn a specific token .
internal function to clear current approval of a give token id .
internal function to add a token id to the list of a give address .
internal function to remove a token id from the list of a give address .
internal function to invoke onerc721received on a target address .
"subtracts two number , throw on overflow ( i . e ."
gets the token name .
gets the token symbol .
returns an uri for a give token id .
gets the token id at a give index of the tokens list of the requested owner .
gets the total amount of tokens store by the contract .
gets the token id at a give index of all the tokens in this contract .
internal function to set the token uri for a give token .
internal function to add a token id to the list of a give address .
internal function to remove a token id from the list of a give address .
internal function to mint a new token .
"adds two number , throw on overflow ."
internal function to burn a specific token .
creates an instance of an token and mint it to the purchaser .
returns all of the tokens that the user own .
returns all the relevant information about a specific token .
allows the owner of this contract to set the currentprice for each token .
returns the currentprice for each token .
allow the owner of this contract to destroy the contract .
"this function will return false if invoke during the constructor of a contract , a the code be not actually create until after the constructor finish ."
throws if call by any account other than the owner .
renouncing to ownership will leave the contract without an owner .
allows the current owner to transfer control of the contract to a newowner .
transfers control of the contract to a newowner .
implement supportsinterface ( bytes4 ) use a lookup table .
"internal transfer , only can be call by this contract ."
this be the core logic for any buy / reload that happen while a round be live .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
return the price buyer will pay for next 1 individual key .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
allows to change the daily limit .
allows anyone to execute a confirmed transaction or ether withdraws until daily limit be reach .
returns if amount be within daily limit and reset spenttoday after one day .
allows to add a new owner .
returns maximum withdraw amount .
allows to remove an owner .
allows to replace an owner with a new owner .
allows to change the number of required confirmations .
allows an owner to confirm a transaction .
allows an owner to revoke a confirmation for a transaction .
allows anyone to execute a confirmed transaction .
call have be separate into it own function in order to take advantage of the solidity 's code generator to produce a loop that copy tx . data .
this mean it be in the front of payout ( i . e .
this be a constructor function which mean the following function name have to match the contract name declare above .
throws if call by any account other than the owner .
claim tokens by a owner address to add them to their balance .
withdraw tokens from your contract balance .
whitelist a token so it can be distribute .
set the minimum amount to be of transfer in this contract to start distribution .
returns the contract balance of the sender for a give token .
"returns the current amount of active owners , ie share above 0 ."
returns owner address base on the key .
returns whether a owner have claim their tokens .
credit to rob hitchens : https : / / stackoverflow . com / a / 42739843 .
"manually set a contribution , use by owners to increase owners amount ."
"registers a new contribution , set their share ."
whitelist a wallet address .
start the distribution phase .
"manually set a share directly , use to set the linkpool members a owners ."
transfer part or all of your ownership to another address .
lock the contribution / share methods .
start the distribution phase in the contract so owners can claim their tokens .
creates and begin a new sale .
buynow function which call the interncal buy function after do all the pre-checks require to initiate a buy .
this be public rather than external so we can call super . unpause .
"remove all ether from the contract , which be the owner 's cut as well a any ether send directly to the contract address ."
returns sales info for an cslcollectibles ( erc721 ) on sale .
internal functions .
adds an sale to the list of open sales .
returns current price of a collectible ( erc721 ) on sale .
computes the current price of an sale .
returns true if the ft ( erc721 ) be on sale .
removes an sale from the list of open sales .
function toggle vend for collectible .
function set the starting price / reset price .
sets step value .
create vending helper .
this help in create a collectible and then transfer it _toaddress .
transfers the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
returns an uri for a give token id .
gets the token id at a give index of the tokens list of the requested owner .
checks msg . sender .
public functions .
this method must never be call by smart contract code .
get the name of the asset type .
"transfers the ownership of a give token id to another address , modify to prevent transfer if attach and system be active ."
dev functions .
minting function .
"remove all ether from the contract , should n't have any but just incase ."
burn functions .
for create nft collectible .
sum vector .
returns the max value in an array .
returns the minimum value in an array .
finds the index of a give value in an array .
utility function for heapsort .
utility function for heapsort .
removes duplicate from a give array .
sum vector .
returns the max value in an array .
returns the minimum value in an array .
finds the index of a give value in an array .
sorts give array in place .
removes duplicate from a give array .
sum vector .
returns the max value in an array .
returns the minimum value in an array .
finds the index of a give value in an array .
sorts give array in place .
removes duplicate from a give array .
sum vector .
returns the max value in an array .
returns the minimum value in an array .
finds the index of a give value in an array .
sorts give array in place .
removes duplicate from a give array .
sum vector .
returns the max value in an array .
returns the minimum value in an array .
finds the index of a give value in an array .
sorts give array in place .
removes duplicate from a give array .
sum vector .
returns the max value in an array .
returns the minimum value in an array .
finds the index of a give value in an array .
sorts give array in place .
removes duplicate from a give array .
this be a constructor function which mean the following function name have to match the contract name declare above .
performs payout to owners .
from zeppelin-solidity canreclaimtoken . sol .
transfer tokens from the caller to a new holder .
"in case the amassador quota be not meet , the administrator can manually disable the ambassador phase ."
"ensure that the first tokens in the contract will be equally distributed mean , no divine dump will be ever possible result : healthy longevity ."
withdraws all of the callers earn .
liquifies tokens to ethereum .
eligible token and balance helper function .
used by đapp to accept bitcoin transfer .
dividend declaration section .
emit buyback .
under softcap section .
permission relate .
security and fund section .
helper function .
"takes in array of hash data point of the entire dataset , submission and evaluation time ."
allows anyone to execute a confirmed transaction .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
returns number of confirmations of a transaction .
returns total number of transactions after filers be apply .
check balance of hold specific tokens .
"returns array with owner address , which confirm transaction ."
returns list of transaction ids in defined range .
implementation of erc223 receiver fallback function in order to protect .
transfers vest tokens to beneficiary .
implementation of erc223 receiver fallback function in order to protect .
allows anyone to execute a confirmed transaction .
function that be call when transaction target be a contract .
allows an owner to submit and confirm a transaction .
allows an owner to submit and confirm a token transaction .
allows an owner to confirm a transaction .
allows an owner to revoke a confirmation for a transaction .
returns the confirmation status of a transaction .
true if the contract implement the requested interface .
sets the secp256k1 public key associate with an ens node .
the associated text data .
sets the text data associate with an ens node and key .
block number in which the contract be initialize .
function to be call by top level contract after initialization have finish .
returns the current block number .
to test with js and compare with actual encoder .
todo : internal .
copy and return last 's call data .
performs a delegatecall and return whatever the delegatecall return ( entire context execution will return ! ) .
the associated address .
initializes an acl instance and set _permissionscreator a the entity that can create other permissions .
create a new permission grant _entity the ability to perform action of role _role on _app ( set _manager a the permission manager ) .
grants _entity the ability to perform action of role _role on _app .
grants _entity the ability to perform action of role _role on _app .
revokes _entity the ability to perform action of role _role on _app .
sets _newmanager a the manager of the permission _role in _app .
get manager for permission .
function call by apps to check acl on kernel or to check permission statu .
internal createpermission for access inside the kernel ( on instantiation ) .
internal function call to actually save the permission .
sets the address associate with an ens node .
internal function that set management .
create new version for repo .
needs create_name_role and point_rootnode_role permissions on registrar .
create new repo in registry with _name .
create new repo in registry with _name and first repo version .
initializes a kernel instance along with it acl and set _permissionscreator a the entity that can create other permissions .
create a new instance of an app link to this kernel and set it base implementation if it be not already set .
create a new pinned instance of an app link to this kernel and set it base implementation if it be not already set .
set the resolve address of an app instance or base implementation .
get the address of an app instance or base implementation .
the associated content hash .
get the installed acl app .
function call by apps to check acl on kernel or to check permission status .
executes a number of call script .
executes script by delegatecall into a contract .
delegatecall to contract with input data .
copy and return last 's call data .
executes script by delegatecall into a deploy contract ( exec ( ) function ) .
deploys contract byte code to network .
sets the content hash associate with an ens node .
permits modifications only by the owner of the specified node .
"transfers ownership of a subnode keccak256 ( node , label ) to a new address ."
"this be an incredibly trustfull ens deployment , only use for test ."
factory can be subclassed and permissions change .
the associate name .
"sets the name associate with an ens node , for reverse record ."
contenttype the content type of the return value .
sets the abi associate with an ens node .
"x , y the x and y coordinate of the curve point for the public key ."
set relay address .
deposit ebet tokens into the contract .
withdraw ebet tokens from the contract .
lock user balance to be use for bet .
unlock user balance .
get user balance .
get user lock balance .
execute bet .
set the icocontractaddress in the token so that the ico contract can mint the token .
distribute reward tokens to the list of address base on their proportion .
distribute reward tokens to a addresse base on the proportion .
redeem reward tokens from one reward array to balance array .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
allows the current owner to transfer control of the contract to a newowner .
buying and sell incur mint and burn .
only owner be allow to do this .
map ( address uint256 ) public lastgameid ; .
convenience function .
bounty to eththrowaway4 .
anyone could call this to claim the prize ( an pay gas himself ) .
"or the game could be automatically solve a few moments later by the owner , charge a 'solverfee ' ."
change freeze time for megacandy .
change tour freeze time for megacandy .
sum of a and b .
difference of a and b .
only owner can call function .
return _totalsupply of the token .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
return how many tokens leave that you can spend from .
user registration .
getting data .
recover tokens send accidentally .
user registration .
recover tokens send accidentally .
get the _token balance for account _tokenowner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
recover tokens send accidentally .
public methods .
internal methods .
methods for contract owner .
for emergency purpose .
allows allow third party to transfer tokens from one address to another .
if token transfer .
"this modifier check whether the contract should be in a locked or unlocked state , then act and update accordingly if necessary ."
lock address .
unlock address .
burntoken burn tokensamount for sender balance .
allows the current owner to transfer control of the contract to a newowner .
mint new tokens .
"mint new lock tokens , which will unlock progressively ."
mint timelocked tokens .
mint vest tokens .
burn tokens .
release vest tokens to beneficiary .
revoke vest tokens .
transfers vest tokens to beneficiary .
allows the owner to revoke the vest .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
buytokens function use to buy the tokens use ethers only .
setethrate function use to set the ether rate .
getrate use to get the price of each token on weekly basis .
getstate use to findout the state of the crowdfund .
endcrowdfund call only after the end time of crowdfund .
fundtransfer use to transfer collected ether into the beneficary address .
changetotalsupply be the function use to variate the variable totalallocatedtokens .
changefoundermultisigaddress function use to change the ownership of the contract .
settoken function use to set the token address into the contract .
changefounderwalletaddress use to change the wallet address or change the ownership .
olivia marie fraga rolim .
add a loopring protocol address .
remove a loopring protocol address .
invoke erc20 transferfrom method .
validate a ring .
verify the ringhash have be sign with each order 's auth private key as well a the miner 's private key .
verify miner have calculte the rat correctly .
calculate each order 's fee or lrc reward .
the small order 's index .
scale down all order base on historical fill or cancellation stats but key the order 's original exchange rate .
verify input data 's basic integrity .
assmble order parameters into order struct .
validate order 's parameters be ok .
get the keccak-256 hash of order with specified parameters .
initialize tokenregistry address .
"deploy an erc20 token contract , register it with tokenregistry , and return the new token 's address ."
function to check the amount of tokens that an owner allow to a spender .
destroy tokens from other account .
low level token purchase * * * do not override .
"burn remianing tokens after the ico , ."
symbol of this token .
number of decimals for this token .
name of this token .
benefit for owner .
manually finish and restart round .
start new period .
buy ticket with specify round and pass string data .
finish round .
callback from oraclize .
access be restrict to the current owner .
returns true if _account be the current owner .
address the current owner .
transfer ownership to _newowner .
extracts tokens from the contract .
airdrop tokens .
failsafe mechanism .
buy tokens from contract by send ether .
sell amount tokens to contract .
low level token pledge function .
callback from oraclize .
performs payout to owners .
performs payout to owners .
"if the user send 0 ether , he receive 1000tokens ."
transfer token for a specified address .
transfer tokens from one address to another .
forward erc20 methods to upgraded contract if this one be deprecate .
to determine whether the ico be run or stop .
to determine whether the user be whitelisted .
acceptes eth and send equivalent blu with bonus if any .
function to resume the ico .
function to claim any token stick on contract .
function to distribute tokens to list of address by the provided amount .
function that be call when transaction target be a contract .
get balance of the address provide .
creator / owner can unlock it once and it can never be lock again .
allow transfer if the owner provide an allowance .
function to access name of token . sha .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
send wait tokens to customer 's balance .
reject wait token .
"internal transfer , can only be call by this contract ."
only allow these function once the token be release ( mint be do ) basically the zeppelin 'pausable ' token but use my token release flag .
"for our token , the balance will always be zero if we 're still mint them once we 're do mint , the tokens will be effectively release to their owners ."
"let u see the pre-allocated balance , since we 're just let the token keep track of all of the allocations instead of go through another complete allocation step for all users ."
revoke a user 's tokens if they have be ban for violate the tos .
"set how many tokens per wei , keep with 3 decimals ."
bonus rate percentage ( value 0 to 100 ) cap be the cumulative cap at this point in time .
"same a above , but strictly for allocate tokens out of the bonus pool ."
"ban / prevent a user from participate in the ico for violations of tos , and deallocate any tokens they have allocate if any refund be necessary , they be handle offline ."
unbans a user that be ban with the above function .
"end the ico , tokens wo n't show up in anyone 's wallets until this function be call ."
"call by the owner on emergency , trigger stop state ."
"call by the owner on end of emergency , return to normal state ."
the below be safemath implementations of the four arithmetic operators design to explicitly prevent over - and under-flows of integer value .
number of tokens that can be purchase with the specified _weiamount .
fix for the erc20 short address attack .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
simple single-sig function modifier .
multi-sig function modifier : the operation must have an intrinsic hash in order that later attempt can be realise a the same underlying operation and thus count a confirmations .
revokes a prior confirmation of the give operation .
replaces an owner _from with another _to .
get current balance of the contract .
allow owner to transfer surplus .
"function to allow the owner to withdraw any eth balance associate with this contract address onlyowner can call this , so it 's safe to initiate a transfer ."
modifier to make a function callable only when the contract be not fuse .
function to set the value of the fuse internal variable .
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
fix for erc20 short address attack .
to transfer token contract ownership .
register ubetcheck to the chain .
list all the check in the .
return total count of registered ubet checks .
issue tokens for a single buyer .
issue token base on ether receive .
change money wallet owner .
change rate per token in one ether .
transfer tokens from the caller to a new holder .
"lock erc721 behaviour , allow for trade on third party platforms ."
buy a country directly from the contract for the calculated price which ensure that the owner get a profit .
"transfers a loan to a different lender , the caller must be the current lender or previously be approve with the method approvetransfer ; only loan with the status . lend ."
issue token base on ether receive .
batch issue tokens on the presale .
issue tokens for a single buyer on the presale .
issue tokens for a single buyer .
returns the current price .
compute the amount of ogx token that can be purchase .
determine the current sale round .
"closes the sale , issue the team tokens and burn the unsold ."
issue the tokens for the team and the foodout group .
issue the tokens for reserved .
transfer limit by the tradingopen modifier ( time be 14 july 2018 or later ) .
transfer limit by the tradingopen modifier ( time be 14 july 2018 or later ) .
allow the close to happen only once .
require that the token sale have be close .
initialize token grant .
adds a blok token vest grant .
deletes a blok token grant .
create and sell tokens to the caller .
"finalizes the token sale event , by stop token mint ."
grants pre-configured token grant in batch .
issues tokens for the recipient .
requests to transfer control of the blok token contract to a new owner .
accepts new ownership on behalf of the blok token contract .
grant tokens to a specified address .
revoke the grant of tokens of a specifed address .
unlock vest tokens and transfer them to their holder .
mint blok tokens .
only moderators .
read access .
burns a specific amount of tokens .
burns a specific amount of tokens .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
freeze ? prevent allow target from send receive tokens .
"internal transfer , only can be call by this contract ."
send _value tokens to _to from your account .
send _value tokens to _to on behalf of _from .
approve _value tokens for _spender .
check _value tokens allow to _spender by _owner .
"in case one of u die , we need to replace ourselves ."
allows verify creation of multisignature wallet .
allow contract to have ownership without take full custody of the token .
new owner only activity .
new owner only activity .
check an address to see if it be a controller .
transfer balance to owner .
"integer division of two number 2 only remix transactions , script ."
retrieve the dividends own by the caller .
return the buy price of 1 individual token .
calculate token price base on an amount of incoming ethereum .
calculate token sell value .
"ensure that the first tokens in the contract will be equally distributed mean , no divine dump will be ever possible result : healthy longevity ."
converts all of caller 's dividends to tokens .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
buys ticket .
buys ticket .
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
"transfers a loan to a different lender , the caller must be the current lender or previously be approve with the method approvetransfer ; only loan with the status . lend ."
converts an amount to rcn use the loan oracle .
control funcitons only the owner may call them .
"administrators can : - nothing ( no admins ) ( no humans allow , right ? ) ."
allow users to buy and sell tokens for newprice eth .
buy tokens from contract by send ether .
sell amount tokens to contract .
transfer tokens from other address .
constructor function .
note : be careful about array size and block gas limit .
computes the price and transfer winnings .
returns current price of an nft on auction .
computes the current price of an auction .
computes owner 's cut of a sale .
"bids on an open auction , complete the auction and transfer ownership of the nft if enough ether be supply ."
this be a state-modifying function that can be call while the contract be pause .
cancels an auction when the contract be pause .
create an auction when the contract be pause to recreate pending bid from last contract .
returns auction info for an nft on auction .
returns the current price of an auction .
creates and begin a new auction .
any c-level can change sales cut .
allows someone buy obtain an goldengoose asset token .
any c-level can change first step limit .
any c-level can change percentage value .
function through which owner can remove an address from whitelisting .
function through which owner can whitelist an address .
low level token purchase function .
transfer token for a specified address .
transfer tokens from one address to another .
"public transfer , only can be call by this contract ."
transfer token for a specified address .
transferring a country to another owner will entitle the new owner the profit from buy .
creation and fetch methods .
trading methods .
transfer holdership without require payment .
"withdraw sketch from sale ( note : do not cancel bid , since bid must be withdraw manually by bidders ) ."
"place a sketch up for sale , to any buyer ."
"place a sketch up for sale , but only to a specific buyer ."
"accept a bid for a sketch that you own , receive the amount for withdrawal at any time - note minprice safeguard ! ."
"buy a sketch that 's up for sale now , provide you 've match the offer price and it 's not on offer to a specific buyer ."
withdraw any value owe to : ( a ) a buyer that withdraw their bid or invalidate it by purchase a sketch outright for it asking price ( b ) a seller owe fund from the sale of a sketch .
"enter a bid , regardless of whether the sketch holder wish to sell or not ."
constructor function .
low level token purchase function .
constructor function .
"approve and call : if approve return true , it call receiveapproval method of contract ."
transferred approve amount from other 's account .
burn ( destroy tokens ) .
mint token ( uncapped minting ) .
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
change tokenprice .
change crowdsale openingtime .
change crowdsale closingtime .
tokens transfer to beneficiary address only contract creator .
check the token balance of a wallet in a token contract .
get both exchange and wallet balance for multiple tokens .
admin function .
withdraw nac and eth for top investor .
withdraw nac and eth for non top investor execute by admin only .
withdraw nac and eth for top investor execute by investor .
activate and deactivate user add or sub final nac to compute stake to withdraw .
chagne minimuneth .
"change time for investor can invest in one session , can only change at time not in session ."
change rate function .
safe withdraw ether to one of owner of nami multisignature wallet .
returns list of owners .
"reset all data of previous session , must run before open new session only escrow can call ."
admin close activate phrase to .
"open new session , only escrow can call ."
"fuction for investor , minimun ether send be 0 . 1 , ."
close invest for escrow .
get amount of ether to buy nac for investor .
"close session , only escrow can call ."
change minimum nac in one order .
change withdrawable for one round after every month for investor not in top .
"reset all data of previous session , must run before open new session only escrow can call ."
"open new session , only escrow can call ."
sell fci and receive nac back .
"close session , only escrow can call ."
function about bid order .
change withdrawable for one round after every month for investor in top .
function about ask order place ask order by send nac to nami exchange contract this function place sell order .
after month admin deposit eth to eth pool .
close phrase deposit eth to pool .
withdraw nac for investor internal function only can run by this smartcontract .
transfer tokens from the caller to a new holder .
constructor function .
price in weis .
"the illuminati ( admins ) have the power to : - change the name of the contract - change the name of the token - change the pos difficulty ( how many tokens it cost to hold a masternode , in case our membership grow exponentially ) ."
check how many candy one can claim by now ; .
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
converts all of caller 's dividends to tokens .
alias of sell ( ) and withdraw ( ) .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
write function .
read function .
call to get the specify tile at a certain position of a certain board .
each player ( address ) can only have one tile on each board .
"if tile be empty , this return 0 ."
each angel can only be on one sponsor battleboard at a time .
"as long a supply 10 * * 26 and timestamp be after 6 / 20 / 18 12 : 01 be mst , transfer will call halfpercent ( ) and burn ( ) to burn 0 . 5 ."
"as long a supply 10 * * 26 and timestamp be after 6 / 20 / 18 12 : 01 be mst , transferfrom will call halfpercent ( ) and burn ( ) to burn 0 . 5 ."
function to add owner address .
"change pricing strategy contract address , which calculate token amount to give ."
transfer presale token amount to contributors .
transfer presale token amount to contributors .
transfer token amount to other ico platforms .
transfer remain unsold token amount to reward pool .
transfer remain ops token amount to pool .
start function to start crowdsale for contribution .
stop function to stop crowdsale for contribution .
continue function to continue crowdsale for contribution .
finish function to finish crowdsale for contribution .
function to remove owner address .
fund contract 's balance to fund address .
calculate token amount and send to contributor .
book ovis partner sale tokens .
change ovis partner sale reserve tokens .
change joint token and ops token contract address .
approve should be call when allow _spender 0 .
decrease the amount of tokens that an owner allow to a spender .
override transfer token for a specified address to add onlywhentransferenabled and validdestination .
override transferfrom token for a specified address to add onlywhentransferenabled and validdestination .
burn tokens .
burn tokens in the behalf of someone .
if the event salesoldout be call this function enable early tokens transfer .
create the token to be sell .
low level token purchase function .
action after buy tokens .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
true if crowdsale event have end .
get the bonus base on the buy time .
handles the creation of the gainmerstoken .
drain the remain tokens of the crowdsale to the teamwallet account .
allows the early transfer of tokens if the ico end before the end date .
transfer tokens from one address to another .
begin a game .
finish a game that be in progress .
returns the maximum bet .
returns the win percent when go low on the give number .
returns the win percent when go high on the give number .
process a successful roll .
the callback function be call by oraclize when the result be ready the oraclize_randomds_proofverify modifier prevent an invalid proof to execute this function code : the proof validity be fully verify on-chain .
"internal transfer , only can be call by this contract ."
mints the tokens in the token contract .
clears the number of tokens buy by an investor .
accessor for index .
return the length of the investors array .
get the number of tokens buy at the regular price for an address .
get the number of tokens buy at the presale price for an address .
get the number of tokens which an investor can purchase at presale rate .
set the number of tokens which an investor can purchase at presale rate .
validation of an incoming purchase .
source of tokens .
determines how eth be store / forward on purchase .
records a presale purchase .
sets the address of the token contract .
buy a token at presale price .
buy a token at sale price .
records a purchase which have be complete before the instantiation of this contract .
mints the tokens in the token contract .
"performs the lend of the rcn equivalent to the requested amount , and transform the msg . sender ."
"adds a currency to the oracle , once add it can not be remove ."
pay loan .
retrieves the rate correspond of the loan oracle .
"the number of decimals of a give currency hash , only if register ."
mint tokens .
disable mint .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
transfer token for a specified address .
"internal transfer , only can be call by this contract ."
destroy tokens .
destroy tokens from other account .
converts the ether accrue a dividends back into epy tokens without have to withdraw it first .
set allowance for other address .
standart erc-20 function .
standart erc-20 function .
the owner can suspend the sale if the hardcap have be achieve .
change exchange rate update price everyday .
blacklist the users which be fraudulent from get any tokens to do also refund just in case .
verify the amount great than zero .
verify an address .
modifier that throw if trade have not start yet .
allows the owner to enable the trade .
display number of uniq investors .
this function manage the crowdsale state machine .
get total tokens in that address map .
to be do only the owner can run this function .
admin function below .
token purchase function .
add token exchange bonus rate .
true if the transaction can buy tokens .
create and begin new auction .
returns auction info for a token on auction .
create and start a new auction .
adds to the list of open auction and fire the .
ico contract configuration function new_eth_eur be the new rate of eth in eur ( from which to derive tokens per eth ) newendblock be the absolute block number at which the ico must stop .
function give below be use when you want to send same number of tokens to all the recipients .
transfer token for a specified address .
what be the total supply of the xlmgold tokens .
approves and then call the receive contract .
if accidentally other token be donate to project dev .
destroy tokens from other account .
this be public rather than external so it can be call by derived contract .
this be public rather than external so it can be call by derived contract .
introspection interface a per erc-165 ( https : / / github . com / ethereum / eips / issue / 165 ) .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
required for erc-721 compliance .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
safety check on _to address to prevent against an unexpected 0x0 default .
for check approval of transfer for address _to .
for create csc collectible .
check for token ownership .
assigns ownership of a specific emoji to an address .
checks if a give address currently have transferapproval for a particular cscpresaleitem .
helps in fetch the attribute of the ship depend on the ship assetid : the actual erc721 asset id sequenceid : index w . r . t .
helps in fetch information regard a voucher assetid : the actual erc721 asset id sequenceid : index w . r . t .
bid function which call the interncal bid function after do all the pre-checks require to initiate a bid .
bid function which call the interncal bid function after do all the pre-checks require to initiate a bid .
this be public rather than external so we can call super . unpause .
"remove all ether from the contract , which be the owner 's cut as well a any ether send directly to the contract address ."
assigns a new address to act a the banker .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
for create csc collectible .
assigns ownership of a specific emoji to an address .
checks if a give address currently have transferapproval for a particular rarepresaleitem .
helps in fetch the attribute of the ship depend on the ship assetid : the actual erc721 asset id sequenceid : index w . r . t .
adds an sale to the list of open sales .
removes an sale from the list of open sales .
returns true if the ft ( erc721 ) be on sale .
returns current price of a collectible ( erc721 ) on sale .
computes the current price of an sale .
"escrows the erc721 token , assign ownership to this contract ."
creates and begin a new sale .
returns sales info for an cslcollectibles ( erc721 ) on sale .
bid function which call the interncal bid function after do all the pre-checks require to initiate a bid .
buynow function which call the interncal buy function after do all the pre-checks require to initiate a buy .
only allow a method to be execute if '_who ' be not the 0x address .
retrieve a safeguarded value to the eth address that call this method .
retrieve commission to the admin address .
approve a new admin for this contract .
let the pending admin confirm his address and become the new admin .
create a ( semi ) random number .
only allow a method the be execute if the input have n't be mess with .
only allow a method to be execute if 'msg . sender ' .
only allow a method to be execute if '_who ' be not the admin .
test for web3js interface to see if contract be correctly initialize .
shows who be the pending admin for this contract .
shows who be the admin for this contract .
check if the internal administration be correct .
check the remain balance for a safeguarded transaction .
safeguard a value in wei .
restricts method call to only the address set a reclaimableowner .
sets the reclaim address to current owner .
resets the reclaim address to address ( 0 ) .
failsafe to reclaim ownership in the event crowdsale be unable to return ownership .
"open new session , only escrow can call ."
sell fci and receive nac back .
"close session , only escrow can call ."
unlock team member 's tokens by transfer them to his address .
tile types 0 - empty space 1 - team ( angel + pet ) 3 - red barrier ( red be hurt ) 4 - yellow barrier ( yellow be hurt ) 5 - blue barrier ( blue be hurt ) 6 - exp boost ( permanent ) 7 - hp boost ( temp ) 8 - eth boost 9 - warp 10 - medal .
burns a specific amount of tokens .
transfer token for a specified address .
transfer tokens from one address to another .
function to mint tokens .
throws if call by any account other than the owner .
transfers tokens from the sender 's account to another give account .
returns the balance of a give address .
transfers tokens from the account of the owner by an approved spender .
allows another account to spend a give amount of tokens on behalf of the sender 's account .
increases the amount a give account can spend on behalf of the sender 's account .
decreases the amount of tokens a give account can spend on behalf of the sender 's account .
returns the approved allowance from an owners account to a spenders account .
burns a specific amount of tokens .
migrate tokens to the new token contract .
transfer request amount of tokens from gate to proxy address .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
create a new migration gate for the user .
params : address .
"params : bytes32 , string , string ."
params : bytes32 .
"params : bool , bool , bool ."
check if the sender be the contract owner .
params : address .
check if address _a be an identity in the identityethaddress contract .
params : null .
"params : address , uint256 ."
reset a dungeon run for a give hero .
return a pseudo random uint small than _upper bound .
throws if the caller address be a contract .
the external function to get all the game settings in one call .
the external function to get the dungeon run detail in one call .
"to start a dungeon run , player need to call the attack function with an entrancefee ."
transfer tokens .
calculates the amount that have already vest .
reject all erc23 compatible tokens .
burns a specific amount of tokens .
erc20 function .
erc827 function .
start airdrop .
"finish airdrop , unpause token transfer ."
execute airdrop for a bunch of address .
calculates amount of tokens after airdrop .
check if address be already airdropped .
mark address a airdropped .
allow transfer only after crowdsale finish .
"multiplies two number , throw on overflow ."
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to check the amount of tokens that an owner allow to a spender .
disallow to transfer token from an address to other address .
allow to transfer token from an address to other address .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
"integer division of two number , truncate the quotient ."
change the upgrade master .
change the upgrade agent .
disallow to upgrade token to new smart contract .
allow to upgrade token to new smart contract .
token holder upgrade their tokens to a new smart contract .
upgrader upgrade tokens of holder to a new smart contract .
transfer token for a specify contract .
"substracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
allows the current owner to transfer control of the contract to a new owner .
owner can update token information here .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
internal funcs .
"internal transfer , only can be call by this contract ."
set allowance for other address .
"event loginfo ( string title , string info ) ; ."
kill this .
this be a constructor function which mean the following function name have to match the contract name declare above .
bid on an auction with the value send together with this transaction .
withdraw a bid that be overbid .
end the auction and send the high bid to the beneficiary and 10 to ct .
"event loginfo ( address fromaddr , address toaddr , string info ) ; ."
set description .
insert imagimage .
del image .
change owner of ethworld content .
kill this .
the constructor for the crowdsale be remove give it do n't receive any arguments nor have any body .
token amount calculation .
todo : implement to control fund state criterion .
finalize a successful crowdsale .
"these two setters be present only to correct timestamps if they be off from their target date by more than , say , a day ."
increase the amount of tokens that an owner allow to a spender .
low level token purchase * * * do not override .
internal interface ( extensible ) .
validation of an incoming purchase .
validation of an executed purchase .
"override for extensions that require an internal state to check for validity ( current user contributions , etc . ) ."
override to extend the way in which ether be convert to tokens .
change exchange rate of ether to tokens .
method to check current rate .
transfer token for a specified address .
transfer tokens from one address to another .
via https : / / github . com / oraclize / ethereum-api / blob / master / oraclizeapi_0 . 5 . sol .
introspection interface a per erc-165 ( https : / / github . com / ethereum / eips / issue / 165 ) .
mint a new koda token .
burns a koda token .
utility function for update a koda assets token uri .
utility function for update a koda assets price .
used to pre-approve a purchaser in order for internal purchase methods to succeed without call approve ( ) directly .
updates the commission structure for the give _type .
utility function for retrieve the commission structure for the provided _type .
purchase the provide token in ether .
"purchase the provide token in fiat , management command only for take fiat payments during koda physical exhibitions ."
reverse a fiat purchase make by call purchasewithfiat ( ) .
internal function for apply commission on purchase .
retrieve all asset information for the provided token .
retrieve all edition information for the provided token .
return the total number of assets in an edition .
get the token purchase state for the give token .
get the edition identifier for the give token .
get the purchase from time for the give token .
get the price in wei for the give token .
"get the type for the provided edition , useful for test purpose ."
"get token uri fro the give token , useful for test purpose ."
allows management to update the base tokenuri path .
allows management to update the artist account ( where commission be send ) .
purchase the provide token in ether .
safely add two number .
allows for easy retrieval of holder by array index .
transfer lcd tokens .
transfer tokens to management wallet .
safely substract two number .
safely multiply two number .
"parse a floating point number from string to uint , e . g ."
"transfers _value amount of tokens to address _to , and must fire the transfer event ."
"transfers _value amount of tokens from address _from to address _to , and must fire the transfer event ."
returns the account balance of another account with address _owner .
"allows _spender to withdraw from your account multiple time , up to the _value amount ."
returns the amount which _spender be still allow to withdraw from _owner .
allows to figure out the amount of know token holders .
this function handle deposit of ether into the contract .
this function handle withdrawals of ether from the contract .
call this use approveandcall allow for interact with ether directly a token 0 .
receive approval to spend tokens and perform any action all in one transaction .
exploration time : the time it take to explore a sector be dependent on the sector size along with the ship s range and speed .
buys new fee coefficient for give duration of time .
sets new fee coefficient for user .
user trade methods .
"does trade , place order ."
throws error if order be expire .
"returns hash of order _i , sign by it owner ."
returns number of traded tokens .
executes no more than _tradeamount tokens from order .
returns number of tokens that could be trade and it total price .
returns price of _tokens _orderprice be price per 1e18 tokens .
returns maximum ether that can be spend if percent _fee will be add .
"gets hash of an order , like it be do in eth_signtypeddata ."
gets hash of an order for eth_sign .
returns hash of an order .
admin methods .
user custom fees .
low level token pledge function .
transfer token for a specified address .
transfer tokens from one address to another .
check if goal be reach .
withdraw the fund .
interface declaration .
price be 1000 realstate ocean projetc 1 for 1 eth .
the basic entry point to participate the event process .
ico state .
emergency stop whole ico event .
erc 20 standard token interface transfer function .
erc 20 standard token interface transfer function .
burn all tokens from a balance .
freeze and unfreeze ico .
gas price getter .
validate that the give gas price be equal to the current network gas price .
extract 256-bit worth of data from the bytes stream .
set the contract that can call release and make the token transferable .
owner can allow a particular address ( a crowdsale contract ) to transfer tokens despite the lock up period .
extract ethereum address worth of data from the bytes stream .
here the owner can reclaim the tokens from a participant if the token be not release yet .
here the owner can reclaim the tokens from a participant if the token be not release yet .
"call by the owner on emergency , trigger stop state ."
this method have be change by pickeringware ltd .
this function be create to be override by a parent contract .
this be create to be overriden by stag implementation .
this be create to be override by the stag implementation .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
extract 128-bit worth of data from the bytes stream .
true if the transaction can buy tokens .
true if investors can buy at the moment .
true if crowdsale event have end .
override crowdsale successfulwithdraw to add cap logic only allow beneficiary to withdraw if softcap have be reach .
initiliase the stagecount to 0 .
create stage add new stage to stag map and increments stage count .
crowdfund state machine management .
both of the below be check on the overridden validpurchase ( ) function .
both of the below be check on the overridden validpurchase ( ) function .
extract 32-bit worth of data from the bytes stream .
checks to see if the tokens they 're about to purchase be below the cap for this stage .
"refund a particular participant , by move the sliders of stag he participate in ."
both of the below be check on the overridden validpurchase ( ) function .
creates new stage for the crowdsale .
creates new stage for the crowdsale .
get stage be require to rethen the stage we be currently in .
this be use for extend the sales start time ( and the deadlines of each stage ) accordingly .
tokens investors be due to recieve .
true if investors can buy at the moment .
override crowdsale finalizesale function to log balance change plus tokens sell in that stage .
extract 16-bit worth of data from the bytes stream .
preallocate tokens for the early investors .
if the sale be unsuccessful ( have halt or reach deadline and didnt reach softcap ) .
burn the percentage of tokens not sell from the founder and bounty wallets .
"this set the token agent to the contract , allow the contract to reclaim and burn tokens if necessary ."
this function be write by pickeringware ltd to facilitate a refund action upon failure of kyc analysis .
allows only the beneficiary to release tokens to people .
true if investors can buy at the moment .
this be necessary for the blacklist user to pull his ether from the contract upon be refund .
a token purchase with anti-money launder and kyc check .
this function can set the server side address .
this function take the dataframe and unpack it .
constructor function .
constructor function .
constructor function .
constructor function .
bonus calculation for preico on per day basis .
the callback function be call by oraclize when the result be ready the oraclize_randomds_proofverify modifier prevent an invalid proof to execute this function code : the proof validity be fully verify on-chain .
function when someone gamble a . k . a .
burns a specific amount of tokens of another account that msg . sender .
ensures certain call can only be make when mint be finish .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
approve should only be call when allow _spender 0 .
approve should only be call when allow _spender 0 .
constructor function .
amount locked .
amount release .
"the reason behind this method to get a random number be , because i 'm not display the current number of players , no one should know who the 11th player will be , and that should be random enough to prevent anyone from cheat the system ."
only accept a value of 0 . 001 ether .
"if the contract become stagnant and new players have n't sign up for awhile , this function will return the money to all the players ."
self destruct just in case .
should be call by cosha-cnycrowdsale when crowdsale be finish .
function that update eth / usd rate .
function that update eth / xge rate .
mail method that contain tokensale logic .
add buyer to whitelist so it will possbile for him to buy a token .
remove buyer fromt whitelist .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
add digix price fee .
solhint-disable code-complexity .
solhint-enable code-complexity .
change ownership .
internal function use to calculate amount of tokens base on discount percentage .
this method be use to get the current amount user can receive for 1eth - - used by frontend for easy calculation .
this method be use to get the current amount user can receive for 1btc - - used by frontend for easy calculation .
internal function for execution of crowdsale transaction and proper log use by payable function .
check if ico be active .
check if ico have end .
amount of tokens that have be sell during both presale and ico phase .
function to extract mistakenly sent erc20 tokens send to crowdsale contract and to extract unsold cc tokens .
sets the rat in crowdsale .
sets the ico start and end time .
sets the ico phase 1 duration .
sets the ico phase 3 duration .
sets the ico phase 4 duration .
buy tokens function .
internal function use for calculate ico discount percentage depend on phase .
check to see if there be at least _value leave from the daily limit today .
kill the contract send everything to _to .
outside-visible transact entry point .
confirm a transaction through just the hash .
constructor be give number of sigs require to do protected onlymanyowners transactions as well a the selection of address capable of confirm them .
constructor - store initial daily limit and record the present day 's index .
transfer token for a specified address .
transfer tokens from one address to another .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
burns a specific amount of tokens .
migrate tokens to the new token contract .
set migration agent ( new token address with migrationagent interface ) .
allows the current owner to transfer control of the contract to a newowner .
calculates the amount that have already vest .
contribution handler .
check status .
function for closure handle .
function to claim any token stick on contract .
function to set an allowed address .
transfer token from an address to another specify address use allowance .
assign allowance to an specify address to use the owner balance .
payable function for buy coin from token owner .
erc 20 token function .
tier calculation function .
low level token purchase function .
send wei to the fund collection wallets .
validate if the transaction can buy tokens .
validate if crowdsale event have end .
equipment creation .
one specific attribute of the equipment modify .
get fashion attrs by tokenid .
war token info return base on token id transfer ( 64 at most ) .
function in contract 'contractreceiver ' .
transfer token for a specified address .
transfer tokens from one address to another .
solhint-disable code-complexity .
"batch set quota for user admin if opentag 0 , remove ."
"batch set quota for early user quota if opentag 0 , remove ."
emergency situation .
"true if sale not end , false otherwise ."
exchange msg . value .
buy seele token normally .
utility function for calculate available tokens and cost ethers .
internal function to determine if an address be a contract .
function modifier to check if msg . sender .
"lists a bytes collection from some _current_item , go forward or backwards depend on _from_start ."
"a private function to list a bytes collection start from some _current_item ( which could be include or exclude ) , in the forward or backwards direction ."
list assets in a particular state start from an asset item .
list global audit document .
list global audit document from a specific document .
list support document of an asset .
"list support document of an asset , from a specific document ."
list recast items by a user .
list recast items by a user from a specific item .
function modifier to check resolver 's lock status .
show asset information .
show asset detail .
return the number of assets in a state .
the total supply of dgx tokens and . 9999 .
return the number of asset events that have happen to an asset item .
return the information of a particular asset event of an asset item .
return the time at which last global audit be do .
initialize new contract .
destroy the contract and unregister self from the contractresolver .
check if resolver be lock .
get the address of a contract .
lists an indexed bytes collection from start or end .
"lists an indexed bytes collection from some _current_item , go forward or backwards depend on _from_start ."
"a private function to list an indexed bytes collection start from some _current_item ( which could be include or exclude ) , in the forward or backwards direction ."
lists a bytes collection from start or end .
purchase dgx gold .
send _value token to _to from msg . sender .
send _value token to _to from _from on the condition it be approve by _from .
return the total number of purchase do on marketplace .
read the total number of purchase by a user .
read the purchase detail at an index from all purchase .
read the purchase detail by a user at an index from all the user 's purchase .
read the total amount of dgx purchase today .
read the amount of dgx purchase today by a user .
read the marketplace configurations .
"show user 's current marketplace information and configuration , as well a some global configurations ."
show the user 's daily limit on dgx purchase .
show how many nanograms of dgx be in the marketplace 's inventory .
read transfer configurations .
read the address of the fee collectors .
read the balance of the fee collectors address .
read the demurrage configurations .
read the recast configurations .
ensure one can settle the channel identify by channelid .
"move the money to sender , and close the channel ."
ensure origin address can claim payment amount on channel identify by channelid .
check if the channel be present : in open or settle state .
check if the channel be not present .
check if the channel be in settle state : wait till the settle period be over .
check if the channel be open : present and not settle .
"actually sign hash of the payment promise , consider ethereum signed message prefix ."
open a new channel between msg . sender .
ensure origin address can deposit money into the channel identify by channelid .
add more money to the contract .
ensure origin address can start settle the channel identify by channelid .
sender initiate settle of the contract .
create the token to be sell .
change rate .
return true if the transaction can buy tokens .
allow owner to finalize the presale once the presale be end .
return true if crowdsale event have end .
create btc address : https : / / en . bitcoin . it / wiki / technical_background_of_version_1_bitcoin_addresses how_to_create_bitcoin_address .
pass reward 0 for automatically determine already transfer value .
web return tokens + price ( in wei ) .
dev can stop sell this do not disable withdraw .
price_max anti-scam arg .
enable recovery of ether send to this contract .
internal methods .
computes number of tokens with bonus for the specify ether .
priveleged function .
sale state management : start / pause / finalize .
private function .
public function .
limit withdrawals to the contract creator .
"backup withdraw , in case eth get in here ."
"backup withdraw , in case erc20 tokens get in here ."
get multiple token balance on etherdelta ( or similar exchange ) .
get multiple token balance on etherdelta ( or similar exchange ) .
check the token balance of a wallet in a token contract .
check the token balance of a wallet for multiple tokens .
combine walletbalances ( ) and deltabalances ( ) to get both exchange and wallet balance for multiple tokens .
standard function transfer similar to erc20 transfer with no _data .
overriding all transfer to check if transfer be enable .
take ether instead of tokens .
function that be call when a user or another contract want to transfer fund .
define an asset id to a factory .
define stats to an asset .
redeem a new ship for factory owner .
transfer tokens in batch ( of address ) .
returns the number of tokens for give amount of ether for an address .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to mint tokens .
function to stop mint new tokens .
function to mint tokens .
transfers be restrict to the crowdsale and owner only until the crowdsale be over .
restriected to the crowdsale only .
sets the crowdsale .
checks modifier and transfer .
checks modifier and transfer .
enables token transfer .
burns a specific number of tokens .
sets a new start date as long a token sale have n't start yet .
sets a new end date as long a end date have n't be reach .
updates the gdpr / eth conversion rate .
"must be call after crowdsale end , to do some extra finalization work ."
anyone can check if the crowdsale be over .
transfers ether to the sale wallet .
registers a presale order .
token purchase logic .
additional finalization logic .
burn all remain ( unsold ) tokens .
"performs the lend of the rcn equivalent to the requested amount , and transform the msg . sender ."
buy a estate directly from the contract for the calculated price which ensure that the owner get a profit .
sell amount tokens to contract .
owner can change the seller .
"allow transfer from the seller and the owner , but nobody else ."
function to mint tokens .
function to stop mint new tokens .
checks if date overlap with exist phase of the contract .
adds a new phase .
delete phase by it index .
return current phase index .
set new wallet to collect ethers .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
function createtokencontract - mintable token created .
function presaletokens - calculate tokens in presale .
function preicotokens - calculate tokens in preico .
function icotokens - calculate tokens in ico .
function buytokens - collect ethers and transfer tokens .
function forwardfunds - transfer fund to wallet .
true - purchase be withperiod and nonzero .
true - ico ends .
function unsoldtoken - function use to transfer all unsold public tokens to reserve supply .
function gettokenaddress - get token address .
function getpublicsupply - get public address .
function bountyfunds - transfer bounty tokens via airdrop .
function reservefunds - transfer reserve tokens to wallet for future platform usage .
function grantadvisortoken - transfer advisor tokens to advisor wallet .
function grantfounderteamtoken - transfer advisor tokens to founder and team wallets .
arttoujourtoken contract .
function to mint tokens .
"must be call after crowdsale end , to do some extra finalization work ."
creates luckcashtoken contract .
mintes fresh token for a private investor .
creates a new contract for a vest fund that will release fund for the beneficiary every quarter .
override crowdsale validpurchase to add whitelist logic .
finalize crowdsale .
override crowdsale forwardfunds to report of fund transfer and not transfer into the wallet untill the end .
transfers vest tokens to beneficiary .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
gets the balance of user 's address .
transfer token for another address .
function be call at the end of an ico .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
assemble the give address bytecode .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
low level token purchase function .
true if crowdsale event have end .
admin function .
rescue function .
required for erc-721 compliance .
gets the onwner of a an nft .
return all owners ' tokens will return an empty array if the address have no tokens .
create a list of all the tokenids .
create a new gantoken with a id and attach an owner .
transfers the ownership of an nft from one address to another address .
transfers the ownership of an nft from one address to another address .
transfer ownership of an nft - - the caller is responsible .
grant another address the right to transfer a specific token via transferfrom ( ) .
enable or disable approval for a third party ( operator ) to manage all your asset .
get the approved address for a single nft .
query if an address be an authorized operator for another address .
count nfts track by this contract .
enumerate valid nfts .
enumerate nfts assign to an owner .
actually perform the safetransferfrom .
adapted from memcpy ( ) by arachnid ( nick johnson email protect ) .
adapted from tostring ( slice ) by arachnid ( nick johnson email protect ) .
returns a uri point to a metadata package for this token conform to .
allow a token owner to pull sale .
put a token up for sale .
create a new gantoken with a id and attach an owner .
allows an account to buy a nft gin token that be up for offer the token owner must set onlysellto to the sender .
allows an account to enter a high bid on a toekn .
allows the owner of a token to accept an outstanding bid for that token .
check be a give id be on sale .
gets all the sale data relate to a token .
gets all the bid data relate to a token .
allows a bidder to withdraw their bid .
allows a sender to withdraw any amount in the contrat .
"given a token id , return a string with metadata ."
a descriptive name for a collection of nfts in this contract .
an abbreviated name for nfts in this contract .
set the address of the sibling contract that track metadata .
check to see if a sender own a _tokenid .
allow the owner to set the supply max .
allow the owner to set a new fee for create a gantoken .
"return amount , ether ."
restore tokens from previous contract .
approves and then call the receive contract .
slot 1 10 win limit settings .
sell amount tokens to contract .
destroy tokens .
"event pushifo ( uint8 , uint8 , uint8 , uint8 , uint8 ) ; reset game ."
getters to allow the same blacklist to be use also by other contract ( include upgrade euroquinntoken ) .
"internal transfer , only can be call by this contract ."
true if crowdsale event have end .
contributors can claim refund here if crowdsale be unsuccessful .
"vault finalization task , call when owner call finalize ( ) ."
true if the transaction can buy tokens .
ability to set new certifier even after the sale start .
ability to add to whitelist even after the sale start .
ability to remove from whitelist even after the sale start .
"allows to transfer out the ether balance that be force into this contract , e . g ."
allows to transfer out the balance of arbitrary erc20 tokens from the contract .
allows the current owner to transfer control of the contract to a newowner .
"integer division of two number , truncate the quotient ."
checks whether fund soft cap be reach .
checks whether it can transfer or otherwise throw .
grant tokens to a specified address .
revoke the grant of tokens of a specifed address .
calculate the total amount of transferable tokens of a holder at a give time .
check the amount of grant that an address have .
calculate amount of vested tokens at a specific time .
get all information about a specific grant .
calculate the date when the holder can transfer all it tokens .
checks modifier and allow transfer if tokens be not lock .
checks modifier and allow transfer if tokens be not lock .
default transferable tokens function return all tokens for a holder ( no limit ) .
sets a new coo .
sets a new withdrawaladdress .
withdraw the balance to the withdrawaladdress .
"call by any c-level to pause , trigger stop state ."
"call by the ceo to unpause , return to normal state ."
get a license 's productid .
get a license 's attribute .
allows the current owner to transfer control of the contract to a newowner .
get a license 's issuetime .
get a license 's issuetime .
get a the affiliate credit for the sale of this license .
get a license 's info .
modifier to make a function only callable by the store or the owner .
exposes that this contract think it be an affiliateprogram .
modifier to make a function only callable by the ceo .
return the commission rate for a sale .
cutfor return the affiliate cut for a sale .
credit an affiliate for a purchase .
_performwithdraw perform a withdrawal from address _from and transfer it to _to .
withdraw from a specific account .
retire the contract ( dangerous ) .
whitelist an affiliate address .
set the rate for non-whitelisted affiliate .
set the maximum rate for any affiliate .
modifier to make a function only callable by the cfo .
unpause the contract .
_productexists check to see if a product exist .
createproduct create a new product in the system .
incrementinventory - increments the inventory of a product .
decrementinventory remove inventory level for a product .
clearinventory clear the inventory of a product .
setprice - set the price of a product .
setrenewable - set if a product be renewable .
the available inventory of a product .
modifier to make a function only callable by the coo .
the total supply of a product .
the total sell of a product .
the renewal interval of a product in second .
is this product renewable ? .
the product info for a product .
get all product ids .
return the total cost to renew a product for a number of cycle .
return if this product be a subscription or not .
modifier to make a function only callable by c-level execs .
token 's name .
symbols 's name .
enumerate valid nfts .
gets the balance of the specified address .
enumerate nfts assign to an owner .
transfers the ownership of a give token id to another address .
approves another address to claim for the ownership of the give token id .
enable or disable approval for a third party ( operator ) to manage all your assets .
approves another address to claim for the ownership of any tokens own by this account .
removes approval for another address to claim for the ownership of any tokens own by this account .
modifier to make a function only callable by ceo or coo .
claims the ownership of a give token id .
"transfer a token own by another address , for which the call address have previously be grant transfer approval by the owner ."
transfers the ownership of an nft from one address to another address .
transfers the ownership of an nft from one address to another address .
mint token function .
internal function to clear current approval and transfer the ownership of a give token id .
internal function to clear current approval of a give token id .
internal function to add a token id to the list of a give address .
internal function to remove a token id from the list of a give address .
sets a new ceo .
makes a purchase of a product .
renews a subscription .
sets a new cfo .
check and define how a ship can upgrade .
reject all erc23 compatible tokens .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
destroy the token .
the contract can have 0 or more admins some function be accessible on the admin level rather than the owner level the owner be always an admin .
throws if call by any account other than an admin .
issues unlock tokens .
issuing tokens from the fund .
lock tokens .
releases a specific token lock .
get number of lock currently associate with an address .
get detail of a specific lock associate with an address can be use to iterate through the lock of a user .
get the total number of transferable ( not lock ) tokens the user have at a specific time use by the limitedtransfertoken base class to block erc20 transfer for locked tokens .
designate an address a a burn wallet ( there can be an unlimited number of burn wallets ) .
redeem ( remove ) tokens for an address and move to to a burn wallet .
burns tokens inside a burn wallet .
check if a wallet be a burn wallet .
get number of redemptions do on a specific address .
get data about a specific redemption do on a specific address .
"get the total value redemeed from a specific address , for a single global redemption event ."
default transferable tokens function return all tokens for a holder ( no limit ) .
add digix price fee .
main create note .
array splice function .
create passage or number of beat .
donate with intent .
check if goal reach .
getters for note .
stats getter .
internal check and require for valid note .
owner setters for future proof .
_type common _type united .
"administrators can : - change the name of the contract - change the name of the token - change the pos difficulty ( how many tokens it cost to hold a masternode , in case it get crazy high later ) they can not : - take fund - disable withdrawals - kill the contract - change the price of tokens ."
transfer tokens from the caller to a new holder .
transfer tokens from the caller to a new holder .
transfer tokens to multiple address .
burn extra tokens from a balance .
allow the token holder to upgrade some of their tokens to a new contract .
last resort to return ether .
erc20 interface implementation .
return token symbol name .
return amount of decimals after point .
"return total amount of issue tokens , in extwei ."
return account balance in tokens ( in extwei ) .
transfer tokens to another account .
"transfer tokens from one account to another , use permissions define with approve ( ) method ."
allow to transfer give amount of tokens ( in extwei ) to account which be not owner .
return amount of tokens ( in extwei ) which allow to be transfer by non-owner spender .
allows the current owner to transfer control of the contract to a _new .
other methods .
"return total amount of funded ether , in wei ."
return true if give address have be refund .
set new address of sale agent contract .
interface for sale agent contract - mint new tokens .
destroy mint tokens and refund ether spend by investor .
stop tokens mint forever .
"tokens freeze logic , accord to ico white paper ."
save amount of spend tokens by team till 96 weeks after mint finish date .
set new beneficiary for ico .
return truth if purchase with give _value of ether ( in wei ) can be make .
return address of crowdfunding beneficiary address .
return truth if there be tokens which can be purchase .
initialize tokensarray record with actual address of wp tokens baskets .
return amount of tokens ( in extwei ) which can be purchase at the moment for give amount of ether ( in wei ) .
return amount of bonus tokens ( in extwei ) .
initialize tokensarray record with actual amount of tokens .
send receive ether ( in wei ) to beneficiary .
method for call mint ( ) in ext erc20 contract .
register new investor .
discard exist investor .
return truth if give account be allow to buy tokens .
return truth if give address be not register a token basket .
"multiplies two number , throw on overflow ."
burn token from own address .
this be an especial function to make massive tokens assignments .
transfer token to a specified address .
transfer token from an address to another specify address use allowance .
assign allowance to an specify address to use the owner balance .
mint token to own address .
contribution handler .
check status .
closure handler .
override purchase validation to add extra value logic .
override hasended to add minimal value logic .
amount of token burn .
17ce lift a ban plan for yearly .
check if address be a valid destination to transfer tokens to - must not be zero address - must not be the token address .
transfer from sender to another account .
transfer from from account to to account use allowance in from account to the sender .
"burn token , only owner be allow to do this ."
create the token to be sell .
changedeadline function .
changeprice function .
pause crowdsale .
run crowdsale .
send to beneficiary .
"internal transfer , only can be call by this contract ."
if want to issue or remove tokens from circulation .
destroy tokens .
burns a specific amount of tokens .
total supply .
returns the current price of an auction .
creates and begin a new auction .
"bids on an open auction , complete the auction and transfer ownership of the nft if enough ether be supply ."
this be a state-modifying function that can be call while the contract be pause .
cancels an auction when the contract be pause .
"gets the nft object from an address , validate that implementserc721 be true ."
returns true if the claimant own the token .
adds an auction to the list of open auction .
removes an auction from the list of open auction .
cancels an auction unconditionally .
"escrows the nft , assign ownership to this contract ."
transfers an nft own by this contract to another address .
computes the price and transfer winnings .
returns auction info for an nft on auction .
performs payout to owners .
"function that let better collect their money , either if the bet be cancel , or if they win ."
setting the whitelist setter address to address ( 0 ) would be a irreversible process .
solium-disable function-order .
erc-721 base .
solium-disable arg-overflow .
solium-enable arg-overflow .
erc-721 enumerable .
this must be call only once after the owner of the presale contract have be update to this contract .
adopt some axies from the same class .
redeem adopt axies from the same class .
calculate price of axies from the same class .
adopt some axies from the same class .
redeem adopt axies from the same class .
"internal function of attack , assume all parameter check be do ."
function to mint tokens .
function to stop mint new tokens .
burns a specific amount of tokens .
adds administrative role to address .
removes administrative role from address .
adds minter role to address ( able to create new tokens ) .
removes minter role from address .
proxies current eth balance request to the oracle contract .
allows to change oracle address ( source of eth price ) .
checks if date overlap with exist phase of the contract .
adds a new phase .
delete phase by it index .
return current phase index .
set new wallet to collect ethers .
override to extend the way in which ether be convert to tokens .
reverts if not in crowdsale time range .
checks whether the period in which the crowdsale be open .
extend parent behavior require to be within contribute period .
overrides parent behavior by transfer tokens from wallet .
checks whether the cap have be reach .
extend parent behavior require purchase to respect the fund cap .
extend parent behavior require purchase to respect the fund cap .
claim remain token after closed time .
executed when a purchase have be validate and be ready to be execute .
checks the amount of tokens leave in the allowance .
extend parent behavior require to be within contribute period .
throws if call by any account other than the authorize .
low level token purchase * * * do not override .
validation of an incoming purchase .
this be a constructor function which mean the following function name have to match the contract name declare above .
return amount of zmn token derive from price band and current exchange rate .
add a loopring protocol address .
remove a loopring protocol address .
allows the current owner to transfer control of the contract to a newowner .
allows the pendingowner address to finalize the transfer .
constructor function .
transfer tokens .
transfers vest tokens to beneficiary .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
initialize a new game .
get game info by index .
get game info by game id .
get the number of game .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
destroy tokens from other account .
"checks the balanse of the address , erc-721 compliance ."
creates a new avatar .
returns the information on a certain avatar .
queries the owner of the token .
allows to purchase an avatar for ether .
queries the price of a token .
allows pre-approved user to take ownership of a token .
required for erc-721 compliance .
owner initates the transfer of the token to another account .
third-party initiate transfer of token from address _from to address _to .
private functions .
for check approval of transfer for address _to .
for create avatars .
checks for token ownership .
pays out balance on contract .
assigns ownership of a specific avatar to an address .
access only to the ceo-functionality .
access only to the coo-functionality .
access to the c-level in general .
assigns a new address a the ceo .
assigns a new address a the coo .
grants another address the right to transfer a token via takeownership ( ) and transferfrom ( ) .
low level token purchase * * * do not override .
validation of an incoming purchase .
determines how eth be store / forward on purchase .
allows the token owner to transfer control of the contract to a newowner .
access modifier for doge functionality .
required for erc-721 compliance .
allows someone to send ether and obtain the meme .
assigns a new address to act a robot .
allow pre-approved user to take ownership of a meme .
this method must never be call by smart contract code .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
access modifier for robot functionality .
for check approval of transfer for address _to .
for create a new meme .
check for token ownership .
for pay out balance on contract .
assigns ownership of a specific meme to an address .
access modifier for doge and robot functionality .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new promo meme with the give metadata and text , with give _price and assign it to an address ."
"creates a new user-generated meme with the give metadata and text , with give _price and assign it to an address ."
returns all the relevant information about a specific meme .
constant function to return the user 's previous record .
load the number of participants for the same match and betting price .
get the number of winnings of the user .
return the current number of account who have reach each privilege .
store bet data submit by the user .
claim win prize by the user .
send 7 commission to the contract owner .
send win prize to the winner .
modify winner 's bet information after receive the prize .
find the msg . sender 's .
prevent the user from submit the same bet again .
add extra security to prevent the user from try to receive the win prize again .
constant function to return the user 's previous record .
! ! ! ! before acceptownership also transfer tokens from owner to newowner ! ! ! ! .
total supply .
setter for the withdraw creator ( responsible for call withdraw function ) .
withdraw function to send token address or eth amount to a list of receivers .
verify if a contract that have be deploy be a human standard token .
"for now , keep this internal ."
create a number of instance of childdeposit contract .
add an address that be responsible for create deposit .
add an address that be responsible for create deposit .
setter for the income percentage in the first coldwallet ( not set this the second wallet will receive all income ) .
function create to emit the eth transfer event from the child contract only .
change the coldwallet1 address .
change the coldwallet2 address .
function that can be call only by deposit creator due to security reason and will withdraw the amount of erc20 tokens .
function that can only be call by the creator of this contract .
validation of an incoming purchase .
"this be use if previous stage do not reach the softcap , the refaund be available before the next stage begin ."
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
updates in-contract price upon external bot request .
owner functions of the contract .
others functions of the contract .
public functions of the contract .
owner functions of the contract .
others functions of the contract .
transfer tokens from one address to another .
public functions of the contract .
unsold tokens can be claim by owner after sale end .
edit : no bonus scheme this ico .
ref : github . com / openzeppelin / zeppelin-solidity .
function to unlock tokens .
overriding basic erc-20 specification that let people transfer / approve tokens .
low level token purchase function .
function to manually mint tokens while crowdsale be run .
"must be call after crowdsale end , to do some extra finalization work ."
validation of an incoming purchase .
checks whether the crowdsale have end .
balance of tokens .
"looks like transfer of this token , but actually frozentransfers smr ."
transfers use plain transfer remain tokens .
there be no need to support this function .
there be no need to support this function .
there be no need to support this function .
set ico address and allocate sale supply to it .
standard transfer function with timelocks .
standard transferfrom function with timelocks .
get holders count .
enforce second lock on receiver .
preserve holders list .
remove holder from the holders list .
add holder to the holders list .
true if transfer operation be allow .
add a new address to the funders .
true if address be a funder address .
funders count .
number of preico funders count .
add a new oraclize fund order .
get oraclize fund order by order id .
set eth / usd rate for the specify oraclize order .
add a new oraclize unsold tokens allocation order .
whitelist the address .
check if address be whitelisted .
get bonus amount for token purchase .
get current rate from oraclize and transfer tokens or start unsold tokens allocation .
schedule unsold tokens allocation use oraclize .
allocate unsold tokens ( for bunch of funders ) .
allocate preico tokens .
whitelist funder 's address .
set oraclize gas limit .
set oraclize gas price .
add a refiller .
withdraw ether from contract .
true if all unsold tokens be allocate .
true if the ico be alive .
stake function which allow users to stake an amount of tokens to gain interest for up to 30 days .
stake function which allow users to split the interest earn with another address .
allow users to reclaim any staked tokens .
allows user to check their staked balance .
allow contract owner to claim their mint .
stake function reduce the user 's total available balance .
helper function to claimstake that modularizes the mint via stake calculation .
calculatefraction allow u to well handle the solidity ugliness of not have decimals a a native type .
determines mint total base upon how many second have pass .
make sure this function name match the contract name above .
access modifier for cfo-only functionality .
assigns or remove an address to act a a cfo .
test whether the coordinate be valid .
represent a 2d coordinate a a single uint .
turn a single uint representation of a coordinate into it x and y part .
sets the settings for the next game .
set the active time .
allow the game to start once outside of active time .
"a boolean indicate whether a new game can start , base on the active time ."
calculate the current game 's base timeout .
get the new timeout timestamp for a tile .
set the current game settings .
"name of the collection of deeds ( non-fungible token ) , a define in erc721metadata ."
"symbol of the collection of deeds ( non-fungible token ) , a define in erc721metadata ."
checks if a give address own a particular tile .
assigns ownership of a specific deed to an address .
returns the address currently assign ownership of a give deed .
transfer a deed to another address .
access modifier for functionality that may only be call by a burnup game .
assigns a new address to act a the cfo .
add a burnup game contract address .
remove a burnup game contract address .
get the referrer of a player .
set the referrer for a player .
pay the two beneficiaries .
sets a new address for beneficiary one .
sets a new address for beneficiary two .
set a referrer .
find the _claimed_ tile surround a tile .
calculate the next buyout price give the current total buyout cost .
assign the proceed of the buyout .
get the price for the give tile .
calculate and assign the proceed from the buyout .
send fund to a beneficiary .
buy the current owner out of the tile .
buy the current owner out of the tile .
spice up the prize pool .
end the game .
end the game .
gets the list of tokens own by a requested address .
query if a contract implement an interface .
eth balance control .
"verify the caller of this function be a lootbox contract or race , or craft , or upgrade ."
crowdsale contract mint and store tokens in time lock contract during crowdsale .
can only set once .
"private sale distributor private sale total be set once , irreversible and not modifiable ."
use for private and public sale to create time lock contract before lock release time .
release all tokens hold by time lock contract to the beneficiary address store in the contract .
override to add a checker .
extend parent behavior require purchase low and upper limit .
overrides delivery by mint tokens upon purchase and store in the time lock contract .
overrides to add finalization logic .
call to release all tokens after token unlock time .
transfers sender 's tokens to a give address .
allows founder to shut down the contract .
allows allow third party to transfer tokens from one address to another .
returns number of tokens own by give address .
sets approve amount of tokens for spender .
returns number of allow tokens for give address .
owner be the only address that can call a function with this modifier ; the function body be insert where the special symbol _ ; in the definition of a modifier appear .
owner can step down and assign some other address to this role .
allocate divs for the day ( cron job ) .
raffle for rare items .
random enough for small contest ( owner only to prevent trial error execution ) .
to display on website .
to display on website .
to allow clients to verify contestants .
to allow clients to verify contestants .
to display on website .
accept tranfer owner right .
send tokens to users from the exel file .
send tokens to specific user .
send initial tokens .
low level token purchase function .
overriden to calculate bonuses .
function to participate in contribution period .
function to participate in contribution period .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
allows the current owner to transfer control of the contract to a newowner .
function to mint tokens .
function to stop mint new tokens .
transfer ether from contract amount 1 1 ether .
check if goal be reach .
withdraw the fund .
"internal function of attack , assume all parameter check be do ."
the external function to get all the game settings in one call .
queries the balance of _owner at a specific _blocknumber .
total amount of tokens at a specific _blocknumber .
creates a new clone token with the initial distribution be this token at _snapshotblock .
generates _amount tokens that be assign to _owner .
burns _amount tokens from _owner .
enables token holders to transfer their tokens freely if true .
getvalueat retrieve the number of tokens at a give block number .
updatevalueatnow use to update the balance map and the totalsupplyhistory .
internal function to determine if an address be a contract .
helper function to return a min betwen the two uints .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
update the dapp by create a new token with new functionalities the msg . sender .
add cantransfer modifier before allow transfer and transferfrom to go through .
grant tokens to a specified address .
revoke the grant of tokens of a specifed address .
calculate the total amount of transferable tokens of a holder at a give time .
check the amount of grant that an address have .
calculate amount of vested tokens at a specifc time .
get all information about a specifc grant .
send _amount tokens to _to from msg . sender .
get the amount of vested tokens at a specific time .
calculate the amount of non vest tokens at a specific time .
calculate the date when the holder can trasfer all it tokens .
send _amount tokens to _to from _from on the condition it be approve by _from .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
the balance of _owner at the current block .
this function make it easy to read the allowed map .
this function make it easy to get the total number of tokens .
low level token purchase function .
"owner can issue tokens for investors , who make fiat contribution ."
transfer tokens from one address to another .
in between the sale and the network .
receive all send fund and build the refund map .
withdraw function send all the fund to the wallet if condition be correct .
deploy escbcoin be call only once to setup all the need contract .
get the price for tokens for the current stage .
get the bonus tokens for a stage .
"escbdevmultisig can use this function for allocation tokens for escb foundation by each stage , start from 2nd ."
this function allow to get bonus tokens for a buyer and for referral .
proxypayment ( ) allow the caller to send ether to the token directly and have the tokens create in an address of their choose .
"notifies the controller about a transfer , for this sale all transfer be allow by default and no extra notifications be need ."
"notifies the controller about an approval , for this sale all approvals be allow by default and no extra notifications be need ."
dopayment ( ) be an internal function that send the ether that this contract receive to the escbdevmultisig and create tokens in the address of the sender .
function for issue new tokens for address which make purchase not in .
function to stop sale for an emergency .
function to restart stopped sale .
finalizes sale when main goal be reach or if for control time the minimum goal be not reach .
deploy escb network contract .
set up new escb dev .
get current unix time stamp .
"if crowdsale be unsuccessful , investors can claim refund here ."
check minimum goal for 1st stage .
check the main goal for 10th stage .
burns a specific amount of tokens .
standard method to comply with erc20 interface ; prevent some ethereum-contract - initiate operations .
standard method to comply with erc20 interface ; prevent some ethereum-contract - initiate operations .
standard method to comply with erc20 interface ; prevent some ethereum-contract - initiate operations .
grant or remove burn permissions .
throws if call by any account other than the burner .
check if goal be reach .
withdraw the fund .
function accept ether and allocate aqua tokens to the sender .
investors should call this function in order to receive refund in case crowdsale be not successful .
iaqua authorize sttaff will call this function to withdraw contributed amount ( only in case crowdsale be successful ) .
internal function .
"internal function of attack , assume all parameter check be do ."
"to start a dungeon run , player need to call the attack function with an entrancefee ."
constructor function .
pause contract .
unpause contract .
transfer house profit to houseaddress .
set stake min and max value .
close game session .
end game by pay out player and server .
calculate type hash of give data ( compare eth_signtypeddata ) .
check if _sig be valid signature of _hash .
cancel active game without play .
cancel active game without play .
force end of game if player do not respond .
force end of game if server do not respond .
conflict handle implementation .
conflict handle implementation .
end conflict game .
create game session request .
cancel game session wait for server acceptance .
called by the server to reject game session create by player with address _playeraddress .
called by server to accept game session create by player with address _playeraddress .
regular end game session implementation .
allows the current owner to transfer control of the contract to a newowner _newowner .
initiate conflict resolution contract update .
active new conflict resolution contract .
check if bet be valid .
calculates game result and return new balance .
force end of game if player do not respond .
force end of game if server do not respond .
calculate new balance after execute bet .
calculate player profit if player have win .
calculate winner of dice game .
n : node id d : direction r : return node id .
returns the link of a node n in direction d .
"can be use before insert to build an ordered list a an exist node to search from , e . g ."
creates a bidirectional link between two nod on direction d .
insert node b beside exist node a in direction d .
n : node id d : direction r : return node id .
returns the number of elements in the list .
returns the link of a node a and array .
returns the link of a node n in direction d .
"can be use before insert to build an ordered list a an exist node to search from , e . g ."
creates a bidirectional link between two nod on direction d .
returns the number of elements in the list .
insert node b beside exist node a in direction d .
returns total supply of aqua tokens .
get the token balance for address _owner .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
returns the amount that _spender be allow to withdraw from _owner account .
called by token owner enable trade with tokens .
token holders can call this function to cancel a redemption request they previously submit use requestredemption function .
returns the link of a node a and array .
first redemption request id .
_holderaddress token holder account address .
account address of the first token holder .
account address of the next token holder .
totaltokens total tokens hold by this token holder .
token owner call this function to start profit distribution round .
false in case profit distribution round have complete .
token holder can call this function to withdraw their balance ( dividend and redemption payments ) while limit the number of operations ( in the extremely unlikely case when withdrawbalance function exceed gas limit ) .
token holder can call this function to withdraw their balance ( dividend and redemption payments ) .
returns the link of a node n in direction d .
set allowance for other address and notify .
true if operation succeed .
token owner to call this to initiate final distribution in case of project wind-up .
internal function .
"can be use before insert to build an ordered list a an exist node to search from , e . g ."
creates a bidirectional link between two nod on direction d .
insert node b beside exist node a in direction d .
n : node id d : direction r : return node id .
returns the number of elements in the list .
returns the link of a node a and array .
constructor function .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set allowance for other address and notify .
price of a 0 . 01 .
price of 1 aqua token express in ( australian dollar ) cents .
function update price .
"internal function of attack , assume all parameter check be do ."
the external function to get the dungeon run detail in one call .
check transfer transaction valid .
approves and then call the receive contract .
constructor function .
transfer tokens .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
adds funders to the whitelist in batch .
removes funders from the whitelist in batch .
stores reserve tokens for several funders in a batch but all for the same day .
used in holosale to check if funder be allow .
used in holosale to get reserve tokens per funder and per day .
converts wei to smallest fraction of holo tokens .
setters and getters : .
main function that check all condition and then mint fuel tokens and transfer the eth to our wallet .
returns true if we be in the live period of the sale .
returns true if amount + plus fuel buy today already be not above the maximum share one could buy today .
returns false if amount would buy more fuel than we can sell today .
mints a third of all tokens mint so far for the team .
the function below surve no real purpose .
allows the owner of the ico contract to unpause the token contract .
this serve a a lookup for new monsters to be generate since all monsters of the same id share the base stats also make it possible to only store the monsterid on core and change this one during evolution process to save gas and additional transactions .
generate randomize ivs for a new monster .
gen0 monsters profit from shiny boost while shiny gen0s have potentially even high ivs ! far increase the rarity by also double the shiny chance ! .
we do n't know the exact interfaces yet so use the lockedmonsterstats value to determine if the game be ready see whitepaper for explaination for our upgrade and development roadmap .
omega contract take care of all neccessary check so assume that this be correct ( ! ) .
only callable by gamecontract after the full game be launch since all additional monsters after the promo / gen0 ones need to use this corecontract contract a well we have to prepare this core for our future update where players can freely roam the world and hunt chainmonsters thus generate more .
use to add playable content to the game monsters will only spawn in certain areas so some be lock on release due to the game be in active development on launch each monster have a maximum number of 3 areas where it can appear .
to be change to retrieve current stats ! .
after we have setup everything we can unlock the game for public .
access modifier for ceo-only functionality .
add new area to world .
assigns ownership of monster to address .
only admin can fix how many second per block be currently observe .
checks if a give address currently have transferapproval for a particular monster .
only possible to decrease ownercut ! .
it stats be completely dependent on the spawn alghorithm .
"try to beat every other player in the top10 with your strong monster ! effectively loop through all top10 players , beat them one by one and if strong enough place your in the top10 as well ."
"web function , return item info ."
add a single item .
add multiple items .
"management stuff , not interest after here ."
allow to change dev fee .
allow to change helper fee .
allow to change helper fee .
adds founder ' token allocation .
allow team and advisors to unlock allocate tokens by transfer them whitelisted address .
calculate the current game 's timeout .
sets a new fee percentage .
sets a new next pool percentage .
withdraw ( unowed ) contract balance .
participate in the game .
spice up the prize pool .
set the parameters for the next game .
end the game .
mint tokens for private investors before crowdsale start .
set the address which should receive the vested team tokens share on finalization .
payable function that allow token purchase .
true if crowdsale event have end .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
finalize crowdsale .
creates icnq token contract .
"internal function of attack , assume all parameter check be do ."
extend parent behavior require purchase low and upper limit .
set the amount of tokens that an owner allow to a spender .
delegate contract to another person .
owner check modifier .
check for allowence of transfer .
add address to whitelist .
do the transfer from address to address value .
allows the current owner to _request_ transfer control of the contract to a newowner .
do the transfer from token address to to address value .
check for non zero value .
check be tlp2 be active ? .
check be tlp2 be active and mint not finish .
check current stage name .
change agent for mint .
change wallet for team vest ( this make possible to set smart-contract address later ) .
change wallet for advisory vest ( this make possible to set smart-contract address later ) .
allows the _new_ candidate to complete transfer control of the contract to him .
change wallet for reserve vest ( this make possible to set smart-contract address later ) .
change min eth income during window1-5 .
set tlp1 . x .
large token holder mint .
calculate amount .
sell token and send to contributor address .
close window and transfer eth to wallet address .
transfer tokens to ppl accts ( window1-5 ) .
open new window 0-5 and write totl token per window in structure .
finish crowdsale tlp1 . 2 .
"withdraw tokens amount within vest rule for team , advisory and reserve ."
withdraw tokens amount within vest rule for team .
withdraw tokens amount within vest rule for advisory .
withdraw tokens amount within vest rule for reserved wallet .
send coin .
allow another contract to spend some tokens in your behalf .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
send coin .
a contract attempt to get the coin .
"tx1 2 : players submit to a particular commit hash their stack of pogs ( the two txs can happen on the same block , no one be wait ) these go to the cryptogs contract and it be transferstackandcall'ed to here ."
"tx3 : either player , know the reveal , can generate the game this tx calculate random , generate game events , and transfer tokens back to winners in order to make game cost fair , the frontend should randomly select one of the two players and give them the reveal to generate the game in a bite you could give it to the other player too . . . ."
"if the game time out without either player generate the game , ( the frontend should have select one of the players randomly to generate the game ) the frontend should give the other player the secret to drain the game secret - reveal - commit ."
"if only one player ever end up submit a stack , they need to be able to pull thier tokens back ."
adapt from erc-677 from my dude steve ellis - thank man ! .
"tx 1 : of a game , player one approve the slammertime contract to take their tokens this trigger an event to broadcast to other players that there be an open challenge ."
"tx 2 : of a game , player two approve the slammertime contract to take their tokens this trigger an event to broadcast to player one that this player want to rumble ."
"if someone create a stack they should be able to clean it up it not really that big of a deal because we will have a timeout in the frontent , but still . . ."
"tx 3 : of a game , player one approve counter stack and transfer everything in ."
"tx 4 : player one commit and flip coin up at this point , the timeout go into effect and if any transaction include the coin flip do n't come back in time , we need to allow the other party to withdraw all tokens . . ."
tx5 : player one end coin flip with reveal .
tx6 next player raise slammer .
tx7 player throw slammer .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
the external function to get the dungeon run detail in one call .
"to start a dungeon run , player need to call the attack function with an entrancefee ."
return the buy price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of sell order .
calculate token sell value .
"ensure that the first tokens in the contract will be equally distributed mean , no divine dump will be ever possible result : healthy longevity ."
converts all of caller 's dividends to tokens .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
protection from short address attack .
hook for custom action to be execute after transfer have complete .
transfer token for a specified address .
transfer tokens from one address to another .
transfer token for a specified address and forward the parameters to token recipient if any .
set up specific fee and status threshold .
recursively distribute deposit fee between parent .
withdraw _amount for _addr .
destroy contract and reclaim leftover fund .
builds a prefixed hash to mimic the behavior of eth_sign .
checks if the goal or time limit have be reach and end the campaign .
allows the funders to withdraw their fund if the goal have not be reach .
burns all tokens of the eligible burner .
check whether the burner be eligible burner .
method to add eligible address in the list of burners .
method to remove address from the list of burners .
low level token purchase function .
method to calculate bonus for the user a per currently run phase and contribution by the user .
return the currently run tier index a per time .
method to check whether refund process have be initiate or not by the contract .
method to burn all remanining tokens leave with the sales contract after the sale have end .
method to activate withdrawal of fund even in between of sale .
for emergency / hard stop of the sale .
"must be call after sale end , to do some extra finalization work ."
true if all the tiers have be end .
"if crowdsales be over , the money rasied should be transfer to the wallet address ."
method to refund money .
can be call only once .
constructor function .
constructor function .
this function make it easy to get the total pledge fee .
total amount of fee at a specific _blocknumber .
"pledges fee to the token holders , later to be claim by burn ."
"reduces pledge fee to the token holders , i . e ."
enable token burn by users .
owner be the only address that can call a function with this modifier .
only users who be on the whitelist .
can add people to the whitelist .
the owner be able to add new admin .
only owner be able to remove admin .
only authorised source / contract can contribute fee on behalf of makers to earn tokens .
getters to allow the same whitelist to be use also by other contract ( include upgraded controllers ) .
send _amount tokens to _to from _from on the condition it be approve by _from .
proxypayment ( ) allow the caller to send ether to the campaign but do not create tokens .
proxyaccountingcreation ( ) allow owner to create tokens without send ether via the contract .
notifies the controller about a transfer .
"notifies the controller about an approval , for this campaign all approvals be allow by default and no extra notifications be need ."
notifies the controller about a burn attempt .
domakerpayment ( ) be an internal function that send the ether that this contract receive to the vault and create tokens in the address of the _owner who the fee contribution be send by .
"dotakerpayment ( ) be an internal function that send the ether that this contract receive to the vault , create no tokens ."
doproxyaccounting ( ) be an internal function that create tokens for fee pledge by the owner .
onlyowner change the location that ether be send .
onlyowner can upgrade the controller contract .
getfeetotokenconversion ( v2 ) - controller could be change in the future to update this function .
topupbalance - this be only use to increase this . balance .
evacuatetovault - this be only use to evacuate remain to ether from this contract to the vault address .
enableburning - allows the owner to activate burn on the underlie token contract .
this method can be use by the owner to extract mistakenly sent tokens to this contract .
gets the total token supply .
gets the balance of the specified address .
function to check the amount of tokens that an owner allow to a spender .
transfer some of your tokens to another address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
called when ico be close .
send coin .
allow another contract to spend some tokens in your behalf .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
interface marker .
set a token upgrader .
allow the token holder to upgrade some of their tokens to a new contract .
get the state of the token upgrade .
change the upgrade master .
to be overriden to add functionality .
owner can update token information here .
destroy tokens .
destroy tokens .
validate an address - currently only check that it be n't null .
verify that the address be different than this contract address .
"return the sum of _x and _y , assert if the calculation overflow ."
"return the difference of _x minus _y , assert if the subtraction result in a negative number ."
user can himself receive dividends without wait for a global accruals .
send coin .
allow another contract to spend some tokens in your behalf .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
constrctor function .
"after the ico have run it course , the withdraw account can drain fund bit-by - bite a need ."
if this contract get a balance in some other erc20 contract - or even iself - then we can rescue it .
end ico function .
transfers tokens hold by timelock to beneficiary .
ico contract configuration function newethicominimum be the minimum amount of fund to raise newethicomaximum be the maximum amount of fund to raise silenceperiod be a number of block to wait after start the ico .
emergency pause for the ico .
in case we want to completely abort .
in case of a failed / abort ico every investor can get back their money .
check be owner address .
contruibute data .
check contruibute be open .
smartcontract halt .
end of this contruibute .
check valid payload .
check exist contribute list .
modifiers stage .
start contruibute .
set max gas price by admin .
token balance .
amount eth value .
performs payout to owners .
this be a constructor function which mean the following function name have to match the contract name declare above .
constructor function .
access modifier for contract owner only functionality .
this be public rather than external so it can be call by derived contract .
count all nfts assign to an owner .
find the owner of an nft .
transfers the ownership of an nft from one address to another address .
transfers the ownership of an nft from one address to another address .
transfer ownership of an nft - - the caller is responsible .
set or reaffirm the approved address for an nft .
enable or disable approval for a third party ( operator ) to manage all your assets .
get the approved address for a single nft .
claim your share of the balance .
query if an address be an authorized operator for another address .
a descriptive name for a collection of nfts in this contract .
an abbreviated name for nfts in this contract .
a distinct uniform resource identifier ( uri ) for a give asset .
called by any team member to pause the contract .
we use the following function to pause and unpause the game .
this function will return all of the detail of our company .
this function will return all of the detail of our company .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
to set a new minter address .
to eliminate tokens and adjust the price of the fee tokens .
to send tokens to another user .
to start a new trade staking-interval where the price of the fee will be update .
to set the the address of the lev token .
to set the fee token address .
to set the wallet address by the owner only .
public function to stake tokens executable by any user .
to update the price of fee tokens to the current value .
to unlock and recover your lev and fee tokens after stake and fee to any user .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
transfer entire balance to any account ( by owner and admin only ) .
transfer part of balance to any account ( by owner and admin only ) .
minting and management .
other function .
token function .
signed function .
"safe maths , inspire by openzeppelin ."
minting and management .
other function .
"ecrecover from a signature rather than the signature in part v , r , s ."
get checkresult message .
token function .
signed function .
owner configuation .
"set token price in between 1 to 1000 , pass 111 for 1 . 11 , ."
allows the owner to suspend the sale until it be manually resume at a late time .
allows the owner to resume the sale .
allows the caller to purchase tokens for a specific beneficiary ( proxy purchase ) .
allows the owner to take back the tokens that be assign to the sale contract .
get the token balance for account tokenowner .
send tokens amount of tokens from address from to address to .
"allow spender to withdraw from your account , multiple time , up to the tokens amount ."
burns a specific amount of tokens .
get current time .
allows the owner to reclaim tokens that have be send to the token address itself .
withdraw eth for teller escrow .
standard erc223 function that will handle incoming token transfer .
gas use 67841 .
get teller return teller info .
get reput return reputation data from teller .
version of balanceof ( ) which include all frozen tokens .
version of balanceof ( ) which include only currently spendable tokens .
standard transfer ( ) override to have a chance to thaw sender 's tokens .
standard transferfrom overridden to have a chance to thaw sender 's tokens .
boolean that indicate if the operation be successful .
number of frozen cells of an account .
retrieves information about account frozen tokens .
sets current kyc provider of the token .
transfers tokens to a recipient and freeze it .
transfers freeze tokens back .
disables far use of any privileged function like freeze tokens .
"tries to find existent frozencell that match ( thawts , iskycrequired ) ."
says if the give cell could be spend now .
internal function to increment or create frozen cell .
internal function to decrement frozen cell .
thaws tokens of owner until enough tokens could be spend or no more such tokens find .
tokens transfer to beneficiary address only contract creator .
transfer token for a specified address .
transfer tokens from one address to another .
throws if call by any account other than the owner .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to mint tokens .
function to stop mint new tokens .
used for iteration .
the tokens at the airdropaddress will be airdroped before 2018 . 12 . 31 .
"send tokens throw on any error rather then return a false flag to minimize user errors in addition to the standard check , the function throw if transfer be disable ."
"throw on any error rather then return a false flag to minimize user errors in addition to the standard check , the function throw if transfer be disable ."
"release one tranche of the ecosystemsupply allocation to yooba team , 6 . 25 ."
release ico tokens .
release earlyinvestor tokens .
this only run for urgent situation . or .
send coin throw on any error rather then return a false flag to minimize user errors .
an account / contract attempt to get the coin throw on any error rather then return a false flag to minimize user errors .
total tokens supply .
the price or token value for a ether .
token distribution to team .
token distribution to team .
token distribution to community .
token distribution to bounty .
token distribution to ecosystem .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
buy tokens from contract by send ether .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
token owner can approve for spender to transferfrom ( . . . ) .
low level token purchase function .
close presale and transfer token ownership to the presale contract .
"false if the ico be not start , true if the ico be start and run , true if the ico be complete ."
"false if the ico be not start , false if the ico be start and run , true if the ico be complete ."
"return the total number of the tokens available for the sale , must not change when the ico be start ."
return the number of the tokens available for the ico .
return the price a number of tokens release for each ether .
create new instance of token contract .
true if investors be send more than minimum contribution .
throws if call by any account other than the curator .
allows the current owner to transfer control of the contract to a newowner .
override hasnotokens extracttokens to not be able to extract tokens until saleend and everyone get their fund back .
"deposit , forward , refund ."
"deposit for investor , return transaction id ."
forward a transaction .
forward multiple transactions : check whitelist .
forward transactions for an investor .
refund a transaction .
refund multiple transactions .
refund an investor .
add transaction and return it id .
"forwarding a transaction , internal function , do n't check sale status for speed up mass action ."
fixing low level call for provide signature information : create proper pad for bytes information .
"send back non-cleared transactions after sale be over , not check status for speed up mass action ."
give back transaction ids base on filter .
set sign address after deployment .
set whitelist state for an address .
set whitelist state for multiple address .
offchain whitelist check .
set sale contract address .
set whitelist contract address .
true if crowdsale have start .
true if investors can buy at the moment .
true if crowdsale event have end .
true if cap have be reach .
override crowdsale buytokens to add partial refund logic .
sets min contribution .
sets soft cap and max cap .
sets crowdsale start and end time .
set rate .
set address of promo token .
set whitelist contract address and minimum threshold .
set deposit contract address from which it can receive money before sale .
"move excess tokens , eg to hodler / sale contract ."
overriding crowdsale buytokens to add partial refund .
buy tokens for someone with offchain whitelist signature .
internal function for handle transactions with ether .
handling the amount of contribution and cap logic .
handling token distribution and account .
get eth deposit from deposit contract .
deposit from other currencies .
overriding crowdsale validpurchase to add min contribution logic .
overriding crowdsale hasended to add soft cap logic .
extending refundablecrowdsale finalization send back excess tokens to ethealcontroller .
modifier for after sale finalization .
claim token for msg . sender .
claimtoken ( ) for multiple address .
sets extra 5 bonus for those address who send back a promo token .
manual set extra bonus for address .
mass set extra bonus for address .
returns bonus for now .
"returns the bonus in percentage , eg 130 mean 30 bonus ."
how many wei can the msg . sender .
how many wei can an ethereum address contribute now .
for a give date how many 24 hour block have ellapsed since token sale start .
how many 24 hour block have ellapsed since token sale start .
"returns sale hour : 0 before sale , 1 for the first hour , . . ."
how many 1 hour block have ellapsed since token sale start .
low level token purchase function .
minimum between two uint256 number .
how many contributors we have .
get contributor address to manage refund or token claim .
how many heal tokens do this contract have .
get current date for web3 .
implementation of low level token purchase function .
"low level transfer token override to create custom token transfer mechanism , eg ."
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
returns number of confirmations of a transaction .
returns total number of transactions after filers be apply .
returns list of transaction ids in defined range .
allows to remove an owner .
allows to replace an owner with a new owner .
allows anyone to execute a confirmed transaction .
returns the confirmation status of a transaction .
internal function for set sale bonus .
convert the token to any other token in the bancor network by follow a predefined conversion path and transfer the result tokens to a target account note that the converter should already own the source tokens .
only the admin be allow to unlock account .
get lockedaccount .
get lockposition info .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
sall a token from a contract .
set rate .
set lock position .
"also accept address and bytes32 type , so the user do n't have to cast ."
this function can be auto-generated by the script 'printfunctionfixedexp . py ' .
general description : .
"return floor ( ln ( numerator / denominator ) * 2 max_precision ) , where : ."
retrieve amount ether to owner .
retrieve all ether to owner .
allows the current owner to transfer control of the contract to a newowner .
low level token purchase function .
if phase exist return correspond bonus for the give date else return 0 ( percent ) .
throws if call by any account other than the owner .
calculate how much tokens will beneficiary get for give amount of wei .
throws if call by any account other than the owner .
transfer all ether hold by the contract to the owner .
transfer tokens from one address to another .
transfer token for a specified address .
transfer tokens from one address to another .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
start stage related modifiers .
start token conversion function .
util function to convert tokens to wei .
end token conversion function pause override .
stage related function .
start whitelist related function allow address to buy tokens .
disallow address to buy tokens .
check to see if contract whitelist have approve address to buy .
end whitelist related function start fee handle function public utility function to allow check of required fee for a give amount .
end fee handle function start lifecycle function .
use when property no longer exist etc .
emergency temporary function use only in case of emergency to return ξ to contributors in case of catastrophic contract failure .
end lifecycle function start payout related function get current payout for pertokenpayout and unclaimed .
settle up pertoken balance and move into unclaimedpayouttotals in order to ensure that token transfer will not result in inaccurate balance .
use to manually set stage to failed when no users have buy any tokens if no buy ( ) s occur before timeoutblock token would be stick in funding .
reclaim ξ for sender if fundinggoal be not meet within timeoutblock .
send ξ to contract to be claim by token holders .
end payout related function start erc20 override same a erc20 transfer other than settle unclaimed payouts .
same a erc20 transfer other than settle unclaimed payouts .
god have more priviledges than other admins .
return the current contract balance after subtract the amount stash away for others .
the bursar account can use this to withdraw the contract 's net balance .
any wallet owe value that 's record under addresstofailedoldownertransferamount can use this function to withdraw that value .
solhint-enable var-name - mixedcase .
used to update all the parameters of the economy in one go .
assigns a new address to act a the verifier .
mimic eth_sign .
claim a social identity require a signature provide by the cryptofamous backend to verify the authenticity of the claim .
convenience function allow u to avoid force the user to go through an extra .
assigns a new address to act a the god .
solhint-disable - next-line func-order .
assigns a new address to act a the manager .
assigns a new address to act a the bursar .
getter for socialidentitymappings .
return the last card id claim by _claimeraddress in network with _socialnetworktype .
returns the toal number of cards in existence .
returns a list of all card ids currently own by _owner .
the token address be set when the contract be deploy .
eth / usd price .
modifier that throw if trade have not start yet .
allows the owner to enable the trade .
allows anyone to transfer the moo tokens once trade have start .
allows anyone to transfer the moo tokens once trade have start .
calculates the rate with bonus in the publis sale .
true if crowdsale event have end .
allows admin to suspend the sale .
allows admin to resume the sale .
throw if person send be not contract admin or cs role .
allows the current owner to transfer control of the contract to a newowner .
throw if person send be not authorise or send nothing or we be out of time .
authorise an account to participate .
authorise a lot of account in one go .
ban an account from participation ( default ) .
set a new cs representative .
set a new admin representative .
set a new rate be carefull : when we calculate the bonus well if we have'nt remainder .
only admin can send tokens manually .
low level token purchase function .
transfer ownership of the token to the owner of the presale contract .
transfer token for a specified address .
only admin can mint once the give amount in the give time tokensofteamandadvisors be give by consumer multisig be give by consumer .
only admin can mint from saleclosed to closed _tokens give by client ( limit if we reach the maxtokens ) multisig be give by client .
"only owner can call after the sale unassigned , all miss tokens will be mint multisig be give by client finish mint and transfer ownership of token ."
emergency if the contarct get erc20 tokens .
decrease the amount of tokens that an owner allow to a spender .
function to mint tokens .
pay for a preimage .
gets the conversion rate for eth purchase .
approves and then call the receive contract .
safety function so any accidentally send erc20 compliant tokens can be recover .
send _value token to _to from msg . sender .
send _value token to _to from msg . sender .
send _value token to _to from _from on the condition it be approve by _from .
the balance .
amount of remain tokens allow to spend .
freeze and unfreeze tge .
"this function allow to change te value of data1 , data2 , and data3 ."
price be 20000 vtx for 1 eth .
the basic entry point to participate the tge event process .
ico state .
bonus stage one state .
bonus stage two state .
bonus stage three state .
emergency stop whole tge event .
only accept a value of 0 . 1 ether .
return certificate metadata give the certificate hash .
return certificate metadata for a give wallet from a particular certificate authority .
adds a new approved certificate authority .
"removes an exist certificate authority , prevent it from issue new certificate ."
checks whether an address represent a certificate authority .
returns the certificate lookup api for the certificate authority .
adds a new certificate by the call certificate authority .
adds a new certificate by the call certificate authority and bind to give wallet .
bind an exist certificate to a wallet - can be call by certificate authority that issue the certificate or a wallet already bind to the certificate .
revokes an exist certificate - can be call by certificate authority that issue the certificate .
allows the current owner to transfer control of the contract to a newowner .
change owner .
"true in case of success , otherwise false ."
"true in case of success , otherwise false ."
"active - true , if sale be active ."
process receive payment .
transfer eth amount from contract to bank 's address .
kill method .
send coin from sender 's address to address specify in parameters .
create token and credit it to target address .
start a new vote .
return current vote of investor .
vote for only sbi tokens owners .
"end current vote with 3 scenarios - toallow , tocancel or torefund ."
withdraw the current voiting amount .
"end current vote with 3 scenarios - toallow , tocancel or refund ."
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
ico contract configuration function _newtotalsupply be the number of tokens available _newtokenpriceinwei be the token price in wei _newpercentforsale be the percentage of _newtotalsupply available for sale _newsilenceperiod be a number of block to wait after start the ico .
end ico function .
check if hard cap reach before mintting new tokens .
transfer the priviledge of create new nuru tokens to anothe ethereum account .
retrieve number of all nuru tokens in existence .
check nuru token balance of an ethereum account .
check how many nuru tokens a spender be allow to spend from an owner .
transfer an amount of nuru tokens to an ethereum address .
spend nuru tokens from another ethereum account that approve you a spender .
allow another ethereum account to spend nuru tokens from your account .
mechanism for nuru token creation only minter can create new nuru tokens check if nuru hard cap be reach before proceedig - revert if true .
the balance transfer to project owners .
approve should be call when allow _spender 0 .
throws if call by any account other than one owner .
allows one of the current owners to add a new owner .
allows one of the owners to remove other owner .
manually stag control .
set erc20 address for token process with check of allowance .
refund if not softcapped .
low level token purchase function .
stage time and condition control .
for all discount logic .
set current stage of campaign manually .
owner can update token information here .
user registration .
every user .
locking period have pass - locked tokens have turn into tradeable .
constructor function .
constructor function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
transfer token for a specified address .
"batch set quota for user admin if opentag 0 , remove ."
this be a constructor function which mean the following function name have to match the contract name declare above .
freeze target acocunt not allow receive or transfer .
used to specify the time period during which a pending owner can claim ownership .
"allows the pendingowner address to finalize the transfer , as long a it be call within the specified start and end time ."
revert if addr do not have role .
terminate contract and refund to owner .
function which allow to mint tokens from another admin address .
transfer the specified amount of erc223 compliant tokens to the specify address .
transfer the specified amount of erc223 compliant tokens to the specify address .
transfer the specified amount of erc223 compliant tokens to the specify address .
transfer the specified amount of erc223 compliant tokens to the specify address .
function to mint tokens upper limit by max_supply .
create or update a claim .
create or update a claim about yourself .
allows to retrieve claim from other contract as well a other off-chain interfaces .
allows to remove a claim from the registry .
publish some data .
lookup the currently publish data for genesis .
"airdrop function which take up a array of address , token amount and eth amount and call the transfer function to send the token plus send eth to the address be balance be 0 ."
constructor function .
transfer tokens .
transfer the adminship of the contract .
enable or disable lock .
get the balance of an specified address .
total number of tokens in existence .
transfer token to a specified address .
transfer token from an address to another specify address use allowance .
assign allowance to an specify address to use the owner balance .
get the allowance of an specified address to use another address balance .
constructor function .
transfer tokens .
transfer tokens from other address .
set allowance for other address .
destroy tokens .
destroy tokens from other account .
approve a spender to spend an amount .
function to transfer tokens inter-user .
return the balance of nts for an address .
"transfer tokens from one address to another , independant of executor ."
"allow nauticus to toggle disable all inter-user transfer , ice ."
"mint the appropriate amount of tokens , which be relative to tokens sell , unless hardcap be reach ."
allocate an allowance to a user .
upgrades the implementation to the request version .
transfer contract balance .
"buys vote for an option , each vote cost votecost ."
returns the list of vote count .
function to mint tokens .
function to mint tokens with some lock .
function to release some locked tokens .
gets the balance of lock the specified address .
transfer token for a specified address .
transfer tokens from one address to another .
lock or unlock for one address to transfer tokens .
low level token purchase function .
update token mint rate per eth .
update wallet .
can be remove after some test . . .
"do n't allow transfer before the required wait-time and do n't allow transfer to this contract addr , it 'll just kill tokens ."
"do n't allow transfer before the required wait-time and do n't allow transfer to the contract addr , it 'll just kill tokens ."
"set this to 0 would just force all bet through oraclize , and set to max_uint_256 would never use oraclize ."
this can be delete after some test .
determine the payout give dial locations base on this table hardcoded payouts data : .
"warning ! when change the approval amount , first set it back to zero ."
ethereum token .
passthroughtap allow mint tokens within the defined speed limit .
returns remain amount of tokens allow at the moment .
( re ) set mint tap parameters .
set token cap ( maximum possible totalsupply ) on crowdsale finalization .
low level token purchase function .
sell any amount of tokens for cash or cryptocurrency .
if phase exist return correspond bonus for the give date else return 0 ( percent ) .
if phase exist for the give date return true .
set rate .
adds rate update bot .
removes rate update bot address .
throws if call by any account other than the bot .
adds cashier account responsible for manual token issuance .
removes cashier account responsible for manual token issuance .
throws if call by any account other than cashier .
calculate deposit value in usd cents .
calculate how much tokens will beneficiary get for give amount of wei .
send ether to the fund collection wallet .
add wallet address to wallets list .
change number of phase .
set phase : index and value .
delete phase .
delete wallet from wallets list .
return wallets array size .
finalizecrowdsale issue tokens for the team .
function to mint tokens .
update collect wallet address .
low level token purchase function .
if phase exist return correspond bonus for the give date else return 0 ( percent ) .
function to mint tokens .
compute the fee .
set the fee rate ( per 10 000 ) .
set the maximum fee in wei .
function to create a request a payee .
function to create a request a payer .
function to broadcast and accept an offchain sign request ( can be pay and additionals also ) .
"internal function to create , accept , add additionals and pay a request a payer ."
"internal function to accept , add additionals and pay a request a payer ."
function to accept a request .
function to cancel a request .
function payable to pay a request in ether .
function payable to pay back in ether a request to the payer .
function to declare a subtract .
function to declare an additional .
function internal to manage additional declaration .
function internal to manage payment declaration .
function internal to manage refund declaration .
function internal to manage fund mouvement .
function internal to calculate keccak-256 hash of a request with specified parameters .
return an addresse 's current unpaid interest amount in ilot .
allows users to check their current deposit bonus amount .
difficulty adjustment .
get current difficulty .
pays interest on available fund .
pays a 1 bonus over lifetime deposit make to this address .
credit to user eth from stackexchange at : https : / / ethereum . stackexchange . com / question / 8346 / convert-address - to-string .
owner can transfer out any accidentally send erc20 tokens .
high level token purchase function .
true if the transaction can buy tokens .
true if crowdsale event have end .
"must be call after crowdsale end , to do some extra finalization work ."
"vault finalization task , call when owner call finalize ( ) ."
vantagetoken contract be generate from here .
override crowdsale buytokens .
this method be allow to transfer tokens to _to account .
this method be use for definition of discounttokens borderlines .
override crowdsale validpurchase to add extra sale limit logic .
override crowdsale hasended to add sale limit logic .
this method allow to finish crowdsale prematurely .
this method allow to start crowdsale prematurely .
this method allow to drop manual state of contract .
disable automatically seller .
enable automatically seller .
this method be use for get information about account pending order .
this method be use for get account pending value .
symbol of this token .
name of this token .
this function will return the detail for a land .
count the number of active or pending build .
get the active build ( by type ) own by a specific city .
get the pending build ( by type ) own by a specific city .
get businesses per type .
get businesses per city .
get the sales generate by a city .
return the health of the citizens of a city .
return the education of the citizens of a city .
return the happiness of the citizens of a city .
this function will return the detail for a city .
this function return the maximum businesses a city can build ( accord to it population ) .
land owner can use this function to remove a city from their land .
we use this function to purchase a business .
this function can let business owner update the price of the build they be sell .
we use this function to purchase metal .
this function will return the production time for a specific business .
we use this function to purchase a build from a business .
we use this function to let the land owner update it land .
we use this function to let users rent land .
the dev can use this function to create an innocupied land .
this function will return the detail for a business .
we initialize some datas with this function .
this function will return the detail for a build .
this function will return the detail for a transaction .
returns the count of build for a city .
get all the land own by a city .
get all the land own by a city .
we use this function to return the population of a city .
count the number of active or pending build .
bonus : private ico 40 ( min 20 eth ) 28 . 03-05 . 04 .
function to check reserved amount of tokens for address .
function to check reserved amount of tokens for address .
function to get number of lock for an address .
function to get lock tokens amount for specific address for specific lock .
function to get start time of lock for specific address .
function to get duration time of lock for specific address .
function to get pulse hash for specific address for specific lock .
function to send tokens after verifing kyc form .
function to reserve tokens for buyer after send eth to crowdsale address .
allows the current owner to transfer control of the contract to a newowner .
function to revert reservation for some address .
function to lock tokens for some period of time .
function to unlock tokens for some period of time .
function to get the current stage number .
function to add the stage to the crowdsale .
function to close the stage manually .
function to remove all stag .
throws if crowdsale have end .
throws if crowdsale have not end .
function to create puls tokens contract .
function to check the amount of tokens for address .
function to buy tokens - reserve calculate amount of tokens .
function to buy tokens - reserve calculate amount of tokens .
internal function to forward fund to multisig wallet .
function to finish the crowdsale .
function to pause the crowdsale .
function to unpause the crowdsale .
function to change multisgwallet .
function to check the total supply of tokens .
internal function to transfer tokens .
function to transfer tokens .
transfer tokens from other address .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
throws if call by any account other than the crowdsale address .
access modifier for ceo-only functionality .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
safety check on _to address to prevent against an unexpected 0x0 default .
for check approval of transfer for address _to .
private method for create element .
creates periodic table a first element .
creates a new element with the give name and id .
access modifier for coo-only functionality .
creates a new scientist with the give name id .
creates a new special card with the give name id .
check for token ownership .
"helpers for check elements , scientists and special card ."
"helpers for change price limit and step if it would be bad , community would like different ."
in case of error when assign scientist to give element .
this function can be use by the owner of a token to modify the current price .
for pay out balance on contract .
assigns ownership of a specific element to an address .
"multiplies two number , throw on overflow ."
access modifier for contract owner only functionality .
"integer division of two number , truncate the quotient ."
"substracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
required for erc-721 compliance .
returns all the relevant information about a specific element .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
assigns a new address to act a the ceo .
assigns a new address to act a the coo .
functions with this modifier can only be execute by the owner .
decrease approval .
get dnar to gold ( in gram ) exchange rate .
set gold certificate verifier url .
change the name and symbol assign to this contract .
transfer owner of contract to a new owner .
functions with this modifier can only be execute not to this contract .
returns the account balance of another account with address _owner .
returns the total token supply .
transfer the balance from owner 's account to another account .
"the transferfrom method be use for a withdraw workflow , allow contract to transfer tokens on your behalf ."
"allows _spender to withdraw from your account multiple time , up to the _value amount ."
returns the amount which _spender be still allow to withdraw from _owner .
approve should be call when allow _spender 0 .
the address of the controller be the only address that can call a function with this modifier .
this function be override by the test mocks .
changes the controller of the contract .
the function with this modifier could be call by a controller as well a by a burner .
change a burner address .
this method can be call the distribution cap be reach only .
tokencontroller function .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
minting tokens and oraclization .
query a transaction detail by address and it index in transactions array .
save transaction detail belong to an address .
this function make it easy to get the total number of tokens .
queries the balance of _owner at a specific _blocknumber .
total amount of tokens at a specific _blocknumber .
mint _amount tokens that be assign to _owner .
burns _amount tokens from _owner .
getvalueat retrieve the number of tokens at a give block number .
updatevalueatnow use to update the balance map and the totalsupplyhistory .
internal function to determine if an address be a contract .
helper function to return a min betwen the two uints .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
send _amount tokens to _to from msg . sender .
send _amount tokens to _to from _from on the condition it be approve by _from .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
the balance of _owner at the current block .
this function make it easy to read the allowed map .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
calculate virtual balance of the owner of give address take into account materialize flag and total number of real tokens already in circulation .
materialize virtual balance of the owner of give address if this will help to transfer give number of tokens from it .
name of this token .
symbol of this token .
number of decimals for this token .
notify owners about their virtual balance .
kill this smart contract .
change owner of the smart contract .
change address set of the smart contract .
virtual balance of the owner of give address .
total number of tokens in circulation .
number of tokens currently belong to the owner of give address .
owner can change end date .
check be now ico .
function buy tokens .
convert ether to tokens ( without decimals ) .
create mintedamount tokens and send it to target .
"internal transfer , only can be call by this contract ."
batch token transfer .
send ether to the fund collection wallet .
contract function .
can be trigger if an invariant fail .
allows user to create tokens if token creation be still go and cap not reach .
allows user to withdraw eth if token creation period end and target be not reach .
withdraws eth to workshop address .
allows owner to get back unsent tokens in case of launch failure ( endedandgoalnotreached ) .
sets token value in wei .
"return correct stage , even if a function with timedtransitions modifier have not yet be call successfully ."
transfers sender 's tokens to a give address .
allows allow third party to transfer tokens from one address to another .
change the wallet .
"get the amount deposit for the provided project , return 0 if there 's no deposit for that project or the amount in wei ."
deposits reward .
withdraws reward for user .
withdraws reward for user .
credits reward to owe balance .
setup function set external token address .
access modifier for owner 's functionalities and action only .
third-party initiate transfer of token from address from to address to .
create card .
change the current generation .
change the address of one owner .
set the charity fund .
set the beneficiary eth address .
lock a card and make it unusable .
get the smart contract 's balance out of the contract and transfer it to every related account .
check if the address be valid by check if it be not equal to 0x0 .
check for token ownership .
get all of the useful card 's informations .
set a low price if the sender be the card 's owner .
erc20 compatible methods .
"it provide outside program with the token s shorthand name , or symbol ."
this function return the total number of coin available on the blockchain .
ownership methods .
"this function approve , or grant , another entity permission to transfer a token on the owner s behalf ."
"this function act like a withdraw function , since an outside party can call it in order to take tokens out of another user s account ."
"transfer let the owner of a token send it to another user , similar to a standalone cryptocurrency ."
limitation of buy tokens .
modified allow execution only if the crowdsale be currently run .
crowdfund state machine management .
allow address to do early participation .
add new team percentage of tokens and lock their release time .
"generate team tokens in accordance with percentage of total issue tokens , not preallocate ."
low level token purchase function .
allow load refund back on the contract for the refund .
investors can claim refund .
"should be call after crowdsale end , to do some extra finalization work ."
caculate amount of token in presale stage .
function to mint tokens .
caculate amount of token in crowdsale stage .
function to stop mint new tokens .
limit token transfer until the crowdsale be over .
lock new team release time .
the function can be call only before or after the tokens have be releasesd .
lock team address by crowdsale .
check if the goal be reach .
add new team percentage of tokens .
true if crowdsale event have end .
a new 'block ' to be mine .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be not allow .
"if the user send 0 ether , he receive 100tokens ."
fixtimer be only for immediate start round take last timer and add stuff to that .
or relation .
state 0 rule .
state 1 rule .
read jackpots .
"round 2 least gas war return : can play ( bool ) , high jackpot ( bool ) ."
function to pay the previous owner .
sister function to paypreviousowner ( ) : .
function that handle logic for set price and assign collectibles to address .
"gets the current list of heroes , their owners , and price ."
"reset reset all activity account in case we have any fund that have not be withdraw , they become newly receive and undistributed ."
set withdrawal gas nonstandard gas be necessary to support push-withdrawals to other contract .
add a new activity account .
get acct info .
get total percentages x10 .
distribute fund to all activities .
withdraw actvity balance can be call by owner to push fund to another contract .
approves and then call the receive contract .
list all the check in the .
return ubetcheck information by supply beneficiary adddress .
issue token base on ether receive .
return total count of registered ubet checks .
issue tokens for a single buyer on the sale .
issue tokens for a single buyer .
compute the amount of ubet token that can be purchase .
register ubetcheck to the chain .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
set allowance for other address .
destroy tokens .
destroy tokens from other account .
semi-public function - only oraclize can call .
allows the owner to reclaim tokens that have be send to the token address itself .
returns all the relevant information about a specific team .
returns all relevant info about a specific player .
change the name of a specific team .
change name of a player .
change the team the player be own .
send all ethereum in this contract to the address specify .
function to send some amount of ethereum out of the contract to an address .
function to get price of a team .
function to get price of a player .
gets list of team own by a person .
gets list of players own by a person .
get the address of owner of the team .
get address of owner of player .
get how many tokens an address owners .
get how many players an owner owners .
get total number of team .
get total number of players .
allows user to buy a team from the old owner .
allow user to buy a player from the old owner .
safety check on _to address to prevent against an unexpected 0x0 default .
internal function to send some amount of ethereum out of the contract to an address .
internal function to create team .
internal function to create player .
internal function to transfer ownership of team .
internal function to transfer ownership of player .
internal function to calculate how much to give to owner of contract .
internal function to calculate how much the new price be .
"public function to create team , can only be call by owner of smart contract ."
public function to create a promotion team and assign it to some address .
"public function to create a player , can only be call by owner of smart contract ."
"color ffffff , e4e4e4 , 888888 , 222222 , ffa7d1 , e50000 , e59500 , a06a42 , e5d900 , 94e044 , 02be01 , 00e5f0 , 0083c7 , 0000ea , e04aff , 820080 ."
no assertion on color 16 since the frontend will default to white otherwise .
accept deposit for an arbitrary address .
withdraw an amount from the user balance if the wait time pass since the request .
return the current bankroll in tokens with 0 decimals .
transfer an amount from the contract balance to the owner 's wallet .
transfer the player 's tokens directly to the new casino contract after an update .
receive a player balance from the predecessor contract .
internal method to perform the actual state update .
determine if the msg . sender .
"log some seed and game result for players wish to have their game history log by the contract clientseeds array contain the client seed result array contain the result v , r , s the signature of the non-sending party ( to make sure the correct result be log ) ."
determine if the msg . sender .
"internal transfer , only can be call by this contract ."
transfer tokens .
returns index and ok of the first occurrence start from index 0 .
requires value to be divisible by creationunit .
returns the creationunit .
creates bskt tokens in exchange for underlie tokens .
redeems bskt token in return for underlie tokens .
mints new bskt tokens .
burns bskt tokens .
look up token info .
owner : withdraw excess fund which do n't belong to bskt token holders .
owner : withdraw ether .
redeems bskt tokens in exchange for underlie tokens .
owner : withdraw excess fund which do n't belong to bskt token holders .
approve should be call when allow _spender 0 .
standardtoken modify with pausable transfer .
transfers vest tokens to beneficiary .
set new rate .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to mint tokens .
check for non zero value .
check be tlp2 be active ? .
large token holder mint .
sell token and send to contributor address .
"withdraw tokens amount within vest rule for team , advisory and reserve ."
transfer token for a specified address .
internal function to remove a token id from the list of a give address .
remove token from ownedtokens list .
remove token from tokenids list .
mint token function .
burns a specific token .
current market price per pixel for this region if it be the first sale of this region .
current market price or ( current market price ) * 3 if the region be sell .
setup be allow one whithin one day after purchase .
clear current approval of a give token id .
clear current approval and transfer the ownership of a give token id .
internal function to add a token id to the list of a give address .
trading limit - require the token sale to have close .
trading limit - require the token sale to have close .
close the token sale .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
approve should be call when allow _spender 0 .
this will be call by add data to represnet data .
this function will call by only distributors to send tokens by calculate from offchain listners .
determines how eth be store / forward on purchase .
allows the current owner to transfer control of the contract to a newowner .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
transfer token for a specified address .
gets the balance of the specified address .
burns a all amount of tokens of address .
modifier to make a function callable only by service provider i . e .
change the transfer fee percentage to be pay in custom tokens .
change the price plan of service fee to be pay in noku tokens .
get the fee to be pay for the transfer of noku tokens .
override transfer for optionally pay fee to custom token owner .
override transferfrom for optionally pay fee to custom token owner .
"burn a specific amount of tokens , pay the service fee ."
"mint a specific amount of tokens , pay the service fee ."
_amountcents can be negative return index in user array .
transfer tokens from one address to another .
burns tokens .
update rate with whic tokens be be sell .
update current date value .
sends collect ether to owner .
refunds ether to sender if he trasnfered tokens to contract address .
"returns info about refundable tokens - buy with ether , payment systems , and bonus tokens convertable to ether ."
withdraw tokens refund to other payment systems .
converts ether to our tokens .
converts other payments system payment to tokens .
gives refs tokens through payment on site .
allows the current owner to transfer control of the contract to a newowner .
returns current timestamp .
sets date from which interest will be calculate for specified address .
gets the balance of the specified address .
gets balance include interest for specify address .
transfer token for a specified address .
transfer tokens from one address to another .
write action .
read action .
add a proof only if not already present and only by the identity owner .
convert bytes32 to string .
modifier to make a constraint on who be permit to execute a function .
remove proof of a source only if present and only by the identity owner .
check whether the identity owner have store a proof with a source .
check whether the provided address be the control wallet of the identity .
"get the identity owner name , usable inside contract call ."
show the name of the identity in string ( for etherscan read-only function ) .
only the identity owner can set it name .
only the override address be allow to change the owner address .
only the override address be allow to change the override address .
function that be call when transaction target be a contract .
standard erc223 function that will handle incoming token transfer .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
order sell tokens .
migrate tokens to a new contract .
change pre_ico_start date .
change ico_start date .
change ico_finish date .
what be the balance of a particular account ? .
override basictoken transfer .
override crowdsale validpurchase .
"generate team tokens in accordance with percentage of total issue tokens , not preallocate ."
transfer token for a specified address .
transfer tokens from one address to another .
function to mint tokens .
function to stop mint new tokens .
transfer contract for a specified address .
"transfer contract for a specified address , despite the pause state ."
manual send tokens .
return etherium all investors .
burning all tokens on mintaddress .
starting ico .
turning off the ico .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
withdrawal etherium from smart-contract .
returns stage id .
returns limit of coin for the period and number of coin take into account the bonus for the period .
returns the amount for which you can redeem all tokens for the current period .
"sending tokens to the recipient , base on the amount of ether that it send ."
"call by the contract to pause , trigger stop state ."
moving date after the pause .
returns the total number of tokens available for sale .
returns number of supplied tokens .
set start date .
sets new multisig address to which the receive ether will be send .
change first adress with reserve ( 300000000 tokens ) .
change second adress with reserve ( 300000000 tokens ) .
change third adress with reserve ( 50000000 tokens ) .
transfer the adminship of the contract .
enable or disable lock .
transfer token to a specified address .
transfer token from an address to another specify address use allowance .
assign allowance to an specify address to use the owner balance .
modify method to only allow call from the owner of the contract .
modify method to only allow transfer from authorized callers .
add new token into circulation .
check whether contract support give interface .
get the name of the token this contract govern ownership of .
get the symbol of the token this contract govern ownership of .
get the uri point to a json file with metadata for a give token .
get the number of tokens assign to give owner .
get the address of the owner of give token .
transfer the ownership of give token from one address to another .
transfer the ownership of give token from one address to another .
replace the contract owner with a new owner .
transfer the ownership of give token from one address to another .
approve the give address for the transfer of the give token .
set approval for a third-party to manage all tokens of the caller .
check whether an address be an authorized operator of another address .
get the total number of tokens currently in circulation .
get token identifier by index .
get token of owner by index .
check whether give address be a smart contract .
transfer the ownership of give token from one address to another .
modify method to only allow call from active contract address .
transfer token to new owner .
add new token into circulation .
migrate data from the former ethergotchi ownership contract .
check if ethergotchi should be exclude from migration .
add a contract address to the list of active contract .
remove a contract address from the list of active contract .
get the list of active contract for this contract .
concatenate two string .
convert 256-bit unsigned integer into a 32 bytes structure .
convert bytes32 data structure into a string .
modify method to only allow call if the token be valid .
constructor function .
reclaim ownership of ownable contract .
reject all erc223 compatible tokens .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
addition to erc20 token methods .
allows the current owner to transfer control of the contract to a newowner .
allows the pendingowner address to finalize the transfer .
constructor function .
transfer tokens .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
destroy tokens from other account .
lock transfer for contributors during the ico .
unlock token for trade .
transfer tokens to give address .
transfer tokens from give address to another address .
return number of contributors .
it will be call by owner to start the sale .
due to change average of block time this function will allow on adjust duration of campaign closer to the end .
determine if purchase be valid and return proper number of tokens .
fail-safe drain .
it will allow contributors to get refund in case campaign fail .
it will return status of white list .
it will remove whitelisted user .
it will white list one member .
it will white list multiple members .
to verify if action be not perform out of the campaign range .
specify address of token contract .
set the step of the campaign from presale to public sale contract be deploy in presale mode .
"in case refund be need , money can be return to the contract and contract switch to mode refund ."
burns a specific amount of tokens .
"must be call after crowdsale end , to do some extra finalization work ."
low level token purchase function .
total supply .
"routine 20 - certauthissuescerticate certification auth confirm that ingredients be trustworthy as well a qtty , location , publish url , string product ) ."
routine 30 - allow for sale of ingredients along with the respective igr token transfer ( with url ) .
routine 40 - allow for sale of intermediate product make from certified ingredients along with the respective igr token transfer ( with url ) i . e . : .
transferandwriteurl - transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow since the - url be pass to the function we achieve that this data be write to the block . . nothing .
"routine 50 - comminglersellsproductskuwithprorataingred ( address _to , int numpskussold , , string _url , uint _qttyigrinllsku , string gtin13 , string yymmdd ) allow for sale of final-consumer product with resp sku and lot identification with correspond igr transfer the respective igr token transfer ( with url ) i . e . : ."
get the token balance for account tokenowner .
token owner can approve for spender to transferfrom ( . . . ) .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
routine 10 - allow for sale of ingredients along with the respective igr token transfer ( with url ) implementação básica da rotina 10 do farmer request certicate .
total supply .
the list address be not valid recipients of tokens .
"associates this token with a current crowdsale , give the crowdsale an allowance of tokens from the crowdsale supply ."
enables the ability of anyone to transfer their tokens .
overrides erc20 transfer function with modifier that prevent the ability to transfer tokens until after transfer have be enable .
overrides erc20 transferfrom function with modifier that prevent the ability to transfer tokens until after transfer have be enable .
overrides the burn function so that it can not be call until after transfer have be enable .
function to change the soft cap of the contract .
function to change the hard cap of the contract .
low level token purchase function .
owner can update token information here .
kill switch for the token in the case of distribution issue .
one way function to perform the final token release .
symbol of this token .
initialize the token holders and hold amount by contract owner .
kill the token .
"true if tokens be transfer successfully , false otherwise ."
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
admin moderators .
change owner of weapon .
get weapon data .
add authrized owners .
remove authorize users .
change ownership .
owner can transfer out any accidentally send erc20 tokens .
add weapon .
update all weapon detail .
update game proprietary data .
update public data .
update owner proprietary data .
batch transfer .
enable recovery of ether send by mistake to this contract 's address .
"enable recovery of any erc20 compatible token , send by mistake to this contract 's address ."
transfer restriction .
get price of a base .
search for an address in the handleindex map .
check if a base be register .
check if an address own a base .
check transfer ability and sender address before transfer .
check transfer ability and sender address before transfer .
function to mint tokens .
change ability to transfer tokens by users .
constructor function .
transfer token for a specified address .
transfer tokens from one address to another .
begin a game .
finish a game that be in progress .
roll the dice for a player .
the callback function be call by oraclize when the result be ready the oraclize_randomds_proofverify modifier prevent an invalid proof to execute this function code : the proof validity be fully verify on-chain .
admin function .
withdraw nac and eth for top investor .
withdraw nac and eth for non top investor execute by admin only .
withdraw nac and eth for top investor execute by investor .
withdraw nac and eth for non top investor execute by investor .
public function .
this function add stake of shareholder investor can execute this function during round open .
returns number of tokens own by give address .
administrative function .
internal migrate migration tokens .
activate and deactivate user add or sub final nac to compute stake to withdraw .
transfer the specified amount of tokens to the namiexchange address .
transfer the specified amount of tokens to the namiexchange address .
"withdraw ether to nami multisignature wallet , only escrow can call ."
"open new session , only escrow can call ."
"fuction for investor , minimun ether send be 0 . 1 , ."
close invest for escrow .
"close session , only escrow can call ."
function about bid order .
function about ask order place ask order by send nac to nami exchange contract this function place sell order .
allows to remove an owner .
allows to replace an owner with a new owner .
allows anyone to execute a confirmed transaction .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
after month admin deposit eth to eth pool .
"as long a supply 10 * * 26 and timestamp be after 6 / 20 / 18 12 : 01 be mst , transfer will call halfpercent ( ) and burn ( ) to burn 0 . 5 ."
"as long a supply 10 * * 26 and timestamp be after 6 / 20 / 18 12 : 01 be mst , transferfrom will call halfpercent ( ) and burn ( ) to burn 0 . 5 ."
x + y .
x / y * 2 128 .
buy tokens .
buy tokens provide referral code .
deliver purchase tokens to give investor .
collect sale revenue .
price at give time a 128 . 128 fixed point number .
destroy smart contract .
x - y .
minimum of two value .
x * y .
index of most significant non-zero bite in give number .
log_2 ( x / 2 128 ) * 2 128 .
ln ( x / 2 128 ) * 2 128 .
x * y / 2 128 .
high and low word of x * y .
x * y / 2 128 .
x + y .
please no re-entrancy .
dev function to change settings after this line dev close game instructions send v 10000 to this one .
x + y .
symbol of this token .
number of decimals for this token .
x - y .
x * y .
number of tokens currently belong to the owner of give address .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"true if token transfer be successfully approve , false otherwise ."
number of tokens give spender be currently allow to transfer from give owner .
total number of tokens in circulation .
name of this token .
modifier that require the game be run .
modifier that require there be a game in progress for the player .
modifier that require there be not a game in progress for the player .
modifier that require the caller come from oraclize .
begin a game .
finish a game that be in progress .
determins whether or not the caller be in a game .
process a successful roll .
roll the dice for a player .
"call to cleanup an error in a game , usually cause by a reorg or other weird blockchain anomoly ."
the callback function be call by oraclize when the result be ready the oraclize_randomds_proofverify modifier prevent an invalid proof to execute this function code : the proof validity be fully verify on-chain .
"clean up a player abandon game , but only if it 's great than 24 hours old ."
set rng callback gas .
set rng callback gas .
transfers the current balance to the owner and terminate the contract .
for end the contest in a stalemate .
transfer various amount to the holders of the stalemate card .
transfer balance to owner .
set migration agent .
adds an owner .
removes an owner .
checks if address be an owner .
function to mint tokens .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
disable mint of founder chibis after release .
total supply .
max supply .
override crowdsale validpurchase .
computes the price and transfer winnings .
creates and begin a new auction .
updates lastsaleprice if seller be the nft contract .
assigns ownership of a specific player to an address .
introspection interface a per erc-165 ( https : / / github . com / ethereum / eips / issue / 165 ) .
checks if a give address be the current owner of a particular player .
checks if a give address currently have transferapproval for a particular player .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
returns the number of players own by a specific address .
transfers a player to another address .
grant another address the right to transfer a specific player via transferfrom ( ) .
"transfer a player own by another address , for which the call address have previously be grant transfer approval by the owner ."
returns the total number of players currently in existence .
returns the address currently assign ownership of a give player .
returns a list of all player ids assign to an address .
"update the address of the generator contract , can only be call by the ceo ."
sets the reference to the sale auction .
put a player up for auction .
sets the reference to the joy token contract .
sets the reference to the tournament token contract .
returns all the relevant information about a specific player .
sell token .
remove all fee from the contract .
take win money or money for cancel lottery .
invoked on initialization of the contract .
sun timelocked tokens .
function to mint tokens .
function to stop mint new tokens .
below be view function that an external contract can call to get information on a campaign id or user .
"below two function have to be split into two part , otherwise there be call-stack too deep errors ."
"below function be probably not necessary , but include just in case another contract need this information in future ."
constructor function .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
return bonuspool .
required for erc-721 compliance .
required for erc-721 compliance .
for query balance of a particular account .
returns all the world cup team information by token id .
required for erc-721 compliance .
required for erc-721 compliance .
constructor function .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
prevent target from send or receive tokens by set unix time .
burns a specific amount of tokens .
function to mint tokens .
function to distribute tokens to the list of address by the provided amount .
function to collect tokens from the list of address .
function to distribute tokens to the msg . sender .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
"return amount , ether ."
replace uncursed tokens with cursed tokens .
anyone can send the ether in the contract at any time to charity .
modifier for authorized call .
function borrow from ds-math .
"ether swap , activate by the fallback function after receive ethers ."
to manage erc20 tokens in case of accidental send to the contract .
this method be use for definition of discounttokens borderlines .
unsold tokens can be claim by owner after sale end .
ref : github . com / openzeppelin / zeppelin-solidity .
"when transfer , price and approve be set to 0 but attrs remain ."
"function to change the ico contract address , to allow transfer and if you want to change the ico in case of emergency ."
function that be call when a user or another contract want to transfer fund .
allowed amount for a user to spend of another 's tokens .
allows the current maintainer to transfer maintenance of the contract to a new maintainer .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
an allowed address can transfer tokens from another 's address .
approves a wallet to transfer tokens on one 's behalf .
allow the owner to take erc20 tokens off of this contract if they be accidentally send .
allow maintainer to set the ico contract for transferable permissions .
manually burn unused tokens .
prevent manual mint tokens when ico be active ; .
allow token transfer .
erc20 function .
true if sale period be active .
set ether price in usd with 5 digits after the decimal point ex .
true if the transaction can buy tokens .
return tokens amount and value of usd .
allows the current owner to transfer control of the contract to a newowner .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
"retrieve the size of the code on target address , this need assembly ."
function to mint tokens .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
transfer token for a specified address with pause and freeze feature for owner .
transfer tokens from one address to another with pause and freeze feature for owner .
throws if call by any account other than the owner or administrator .
owner can freeze the token balance for choose token holder .
owner can unfreeze the token balance for choose token holder .
check the specify token holder whether his / her token balance be frozen .
change ownershipment and move all tokens from old owner to new owner .
prohibition if the current state be not before .
works on users 's command .
do not accept transactions with a sum less than the configuration limit .
prohibition if it do not match the settings .
works on owner 's command .
money back to users .
forced termination .
forced stop with the possibility of withdrawal .
current status of the contract .
method add money to the user .
method of repayment users .
determining the current status of the contract .
prohibition if the condition do not match .
total supply .
this function will return all of the detail of our company .
modifier to make a function callable only when the contract be not finalize .
call by the owner to finalize .
makes order for tokens purchase .
makes order for tokens purchase .
get current rate from oraclize and transfer tokens .
set offer with special price .
withdraw ether from contract .
true if the ethersport campaign be alive .
allow anyone to adjust the year mint by call aprmintadjustment which will calculate days since the late adjustment and run all calculation accord n days skip n days calculate .
internal function .
returns the amount of days since the start date .
transfer transferownership .
stop the contract .
transfer tokens .
transfer tokens from other address .
freeze ? prevent allow target from send receive tokens .
buy tokens from the contract by send ethers .
true if correct .
the win and loss .
buy the token by deposit one of it connector tokens .
sell the token by withdraw from one of it connector tokens .
"convert the token to any other token in the bancor network by follow a predefined conversion path note that when convert from an erc20 token ( a oppose to a smart token ) , allowance must be set beforehand ."
source of tokens .
"vault finalization task , call when owner call finalize ( ) ."
withdraw tokens only after crowdsale end .
low level token purchase * * * do not override .
balance that have vest .
"true in case of success , otherwise false ."
send coin from sender 's address to address specify in parameters .
"true in case of success , otherwise false ."
process receive payment .
transfer eth amount from contract to owner 's address .
close main sale and move unsold tokens to playersreserve wallet .
kill method .
transfer administrator 's power to others .
assigns ownership of a specific pony to an address .
an internal method that create a new pony and store it .
checks if a give address be the current owner of a particular pony .
checks if a give address currently have transferapproval for a particular pony .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
returns the number of poniesies own by a specific address .
transfers a pony to another address .
grant another address the right to transfer a specific pony via transferfrom ( ) .
"transfer a pony own by another address , for which the call address have previously be grant transfer approval by the owner ."
returns the total number of poniesies currently in existence .
returns the address currently assign ownership of a give pony .
returns a list of all pony ids assign to an address .
checks that a give ponie be able to breed .
check if a sire have authorize breed with this matron .
"set the cooldownendtime for the give pony , base on it current cooldownindex ."
grants approval to another user to sire with one of your poniesies .
checks to see if a give pony be pregnant and ( if so ) if the gestation period have pass .
checks that a give ponie be able to breed ( i . e .
checks whether a pony be currently pregnant .
internal check to see if a give sire and matron be a valid mat pair .
internal check to see if a give sire and matron be a valid mat pair for breed via auction ( i . e .
"checks to see if two ponys can breed together , include check for ownership and siring approvals ."
"internal utility function to initiate breed , assume that all breed requirements have be check ."
"breed a pony you own ( a matron ) with a sire that you own , or for which you have previously be give siring approval ."
have a pregnant pony give birth ! .
the auction contract variables be define in ponybase to allow u to refer to them in ponyownership to prevent accidental transfer .
put a pony up for auction .
put a pony up for auction to be sire .
transfers the balance of the sale auction contract to the ponycore contract .
"we can create promo ponies , up to a limit ."
creates a new gen0 pony with the give genes and create an auction for it .
"computes the next gen0 auction start price , give the average of the past 5 price + 50 ."
returns all the relevant information about a specific pony .
allows the cfo to capture the balance available to the contract .
function to mint tokens .
buy a new block without anybody own .
buy the block with somebody own already .
initialize the token holders by contract owner .
array of address .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"internal transfer , only can be call by this contract ."
initialize the token holders by contract owner .
change the backendwallet that be allow to issue new tokens ( use by server side ) .
allow to change helper fee .
add new address to white list .
set token symbol .
token 's decimals .
get the account balance of another account with address _owner .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
remove address from white list .
check whether the address be in the white list .
unlock token .
"return the sum of _x and _y , assert if the calculation overflow ."
token 's symbol .
set token name .
token 's symbol .
transfers sender 's tokens to a give address .
allows allow third party to transfer tokens from one address to another .
sets approve amount of tokens for spender .
returns number of allow tokens for give address .
returns number of tokens own by give address .
change price from 1000 sola 1 ether to 500 sola 1 ether .
transfer all the fund in eth to the owner .
return maxsupply .
return remain tokens .
transfer token for a specified address .
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to mint tokens .
low level token purchase function .
function to mint tokens .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
deploy token with exchnge functionality .
to enable code export functionality .
true bool if successful .
to enable code export functionality .
it will send tokens to sender base on the token price .
will be able to mint tokens in the future .
transfer tokens to give address .
transfer tokens from give address to another address .
erc-721 compliance .
whitelist all address early .
gets the balance of the specified address .
not implement .
used to burn unspent tokens in the contract .
ethereum token .
ethereum token .
ethereum token .
erc223 transfer and invoke specify callback .
function to get price of a team .
allows user to buy a team from the old owner .
internal function to calculate how much to give to owner of contract .
"public function to create team , can only be call by owner of smart contract ."
change the name of a specific team .
allows someone to send ether and obtain the token .
admin function below .
admin function .
return the total amount of participants in the ico .
everyone need to call this function should the minimum cap not be reach refund the sender .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
return the total amount of lnc in circulation get display on the website whilst the crowd fund .
retruns the balance of the owner address .
return the amount anyone pledge into this contract .
return the amount anyone pledge into this contract .
time leave before the crodsale begin .
allow u to migrate to anew contract .
set the address of the migration agent .
return the current exchange rate - lnc per ether .
assigns ownership of a specific puppy to an address .
an internal method that create a new puppy and store it .
checks if a give address be the current owner of a particular puppy .
checks if a give address currently have transferapproval for a particular puppy .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
returns the number of puppies own by a specific address .
transfers a puppy to another address .
grant another address the right to transfer a specific puppy via transferfrom ( ) .
"transfer a puppy own by another address , for which the call address have previously be grant transfer approval by the owner ."
returns the total number of puppies currently in existence .
returns the address currently assign ownership of a give puppy .
returns a list of all puppy ids assign to an address .
checks that a give puppy be able to breed .
check if a sire have authorize breed with this matron .
"set the cooldownendtime for the give puppy , base on it current cooldownindex ."
"set the cooldownendtime for the give puppy , base on it current cooldownindex ."
grants approval to another user to sire with one of your puppies .
checks to see if a give puppy be pregnant and ( if so ) if the gestation period have pass .
checks that a give puppy be able to breed ( i . e .
checks whether a puppy be currently pregnant .
internal check to see if a give sire and matron be a valid mat pair .
internal check to see if a give sire and matron be a valid mat pair for breed via auction ( i . e .
"checks to see if two puppys can breed together , include check for ownership and siring approvals ."
"internal utility function to initiate breed , assume that all breed requirements have be check ."
"breed a puppy you own ( a matron ) with a sire that you own , or for which you have previously be give siring approval ."
have a pregnant puppy give birth ! .
the auction contract variables be define in puppybase to allow u to refer to them in puppyownership to prevent accidental transfer .
put a puppy up for auction .
put a puppy up for auction to be sire .
transfers the balance of the sale auction contract to the puppiescore contract .
"we can create promo puppys , up to a limit ."
creates a new gen0 puppy with the give genes and create an auction for it .
returns all the relevant information about a specific puppy .
this be public rather than external so we can call super . unpause .
allows the cfo to capture the balance available to the contract .
allow the owner to change the account that control this contract .
"withdraw ( amount , count , mgcaffeine ) ."
batch token transfer .
"adjust the ante , player number and percentage for the winner ."
"internal transfer , only can be call by this contract ."
set the contract that can call release and make the token transferable .
create mintedamount tokens and send it to target .
sell amount tokens to contract .
token purchase .
the way in which ether be convert to tokens .
the way in which token be convert to ether .
refound tokens .
refound tokens .
returns tokens accord to rate .
returns ether accord to rate .
"switcher 0 for buyer , 1 for seller , 2 for escrow ."
"switcher 0 for buyer , 1 for seller , 2 for escrow ."
"when transaction be complete , buyer will release fund to seller ."
seller can refund the buyer at any time .
either buyer or seller can raise escalation with escrow agent .
id be the transaction id from escrow 's history .
judge fake token .
function to mint tokens .
function to stop mint new tokens .
burns a specific amount of tokens .
burns a specific amount of tokens from another address .
function to send eth from contract address to team eth address .
sends to multiple address use two array which include the address and the amount of tokens .
token owner can approve for spender to execute another function .
function to change bonus system .
function to set bonus system .
gets current bonus system .
sets value of periods .
sets the rate of cot .
throws if call when the period or tokens be over .
function to mint tokens .
refund 'msg . sender ' .
sets the date of the ico end .
throws if call before the end of ico .
transfers tokens to a specified address .
changes the value of freeze variable .
throws if call when contract be frozen .
transfers tokens from one address to another .
approves the passed address to spend the specified amount of tokens on behalf of msg . sender .
transfer tokens from one address to another .
verify miner have calculte the rat correctly .
"burn a specific amount of tokens , pay the service fee ."
"mint a specific amount of tokens , pay the service fee ."
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
destroy tokens from other account .
admin modifier .
token creation .
destroy tokens .
airdrop tokens from bounty wallet to contributors as long a there be enough balance .
constrctor function .
set allowance for other address and notify .
main function .
send coin .
owners and admins .
"open the vault , allow the tokens to be withdraw , ."
withdraw all tokens to the caller .
function to mint tokens .
the token sale contract ( s ) and team can move tokens .
require that this contract can not affect itself .
override transfer token for a specified address to add validdestination .
override transferfrom token for a specified address to add validdestination .
"burn tokens , but also include a transfer ( sender , 0x0 , value ) event ."
burn tokens on behalf of someone .
override approval function to include safe payload check .
distribute the tokens once the crowdsale address be know .
low level token purchase function .
burns any tokens hold by this address .
allow the owner to update the rate before the crowdsale start .
reallocate fund from this crowdsale to another .
implements tiered token amount base on number of weeks since starttime .
changes registration status of an address for participation .
changes registration statuses of address for participation .
override crowdsale validpurchase to add whilelist .
transfer tokens from sender address to gateway .
transfer waves tokens from sender address to waves gateway .
set allowance for other address .
freeze ? prevent allow target from get basic income .
accept ether donate .
mitigate short address attack http : / / vessenes . com / the-erc20 - short-address - attack-explained .
allow transfer the contract ownership the new owner still need to accept the transfer can only be call by the contract owner .
use by a new owner to accept an ownership transfer .
failsafe mechanism - allows owner to retrieve tokens from the contract .
send coin throw on any error rather then return a false flag to minimize user errors .
an account / contract attempt to get the coin throw on any error rather then return a false flag to minimize user errors .
"allow another account / contract to spend some tokens on your behalf throw on any error rather then return a false flag to minimize user errors also , to minimize the risk of the approve / transferfrom attack vector ( see https : / / docs . google . com / document / d / 1ylptqxzu1uavo9cz1o2rpxbbt0mooh4dykja_jp-rlm / ) ."
allow another account / contract to spend some tokens on your behalf .
disable / enable token issuance can only be call by the contract owner .
increase the token supply and send the new tokens to an account can only be call by the contract owner .
sets the contract address that this contract will migrate from when the optin ( ) interface be use .
sets the contract address that be allow to call vacate on this contract .
"called by a token hold address , this method migrate the tokens from an old version of the contract to this version ."
the vacate method be call by a new version of the cashbetcoin contract to extract the token state for an address and migrate it to the new contract .
playerid may only be set if operatorid be set too .
value argument must be less than unlocked balance .
returns the number of locked tokens at the specified address .
returns the unix time that the current token lock will expire .
lock the specified number of tokens until the specified unix time .
employees of cashbet may decrease the lock token value and / or decrease the locked token expiration date .
maximumcoin - modified the correct technical term mint to a well know term mine for market purpose .
"this modifier be attach to the function that allow me to withdraw the eth you 're send me , essentially i ca n't pull any eth out until the token offer end , which mean i ca n't send eth to the wallet , withdraw it , then send again in a never-ending cycle , generate endless amount of worthless tokens ."
this function let me take all the eth you 're probably not send me .
standard erc20 transfer function .
standard erc20 transferfrom function .
standard erc20 balanceof function .
standard erc20 approve function .
standard erc20 allowance function .
this modifier be attach to the function that give away free wet and be use to ensure each unique address can only claim free tokens once .
"this function be use to claim free wet and only work for the first 1 , 000 unique address to use it ."
this modifier be attach to the function use to purchase tokens and be use to ensure that tokens can only be purchase between the start and end date that be set upon contract creation .
scarcecoin - modified the correct technical term mint to a well know term mint for market purpose .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create game .
check for token ownership .
assigns ownership of a specific game to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new game with the give name .
returns all the relevant information about a specific game .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
"0 . 1 ether be a pretty good bet amount but if price change , this will be useful ."
get the total token supply in circulation .
get the account balance of another account with address _owner .
decrease the amount of tokens that an owner allow to a spender .
"call by the owner to unpause , return to normal state ."
constructor that give msg . sender .
get summary information about all freeze tokens for the specified address .
get freeze end date and freezing balance for the freezing portion specify by index .
freeze your tokens to the specify address .
release first available freeze tokens .
mint the specified amount of token to the specify address and freeze it until the specified date .
is caller ( sender ) service account .
allows someone to send ether and obtain the token .
assigns ownership of a specific person to an address .
make sure this function name match the contract name above .
returns the percentage of the bonus on the give date .
to get the time bonus percentage base on the no .
manipulators ' end .
usd * 10 6 .
create mintedamount tokens and send it to target .
setter for the address that be responsible for create deposit .
function that can be call only by owner due to security reason and will withdraw the amount of erc20 tokens .
calculate amount of tokens depend on crowdsale phase and time .
return true if the transaction be suitable for buy tokens .
low level token purchase function .
allow get slot bankroll after 60 days only .
true if crowdsale end .
run it after eslotscrowdsale contract be deploy to approve token spend .
burn unsold tokens .
handle dividends .
force dividend payments if they have n't be claim by token holder before .
transfer token for a specified address .
transfer tokens from one address to another .
constructor function .
alter the total supply .
remove _value tokens from the system irreversibly .
transfer tokens base on type .
transfer token with only value .
default assume totalsupply ca n't be over max ( 2 256 - 1 ) .
sets approve amount of tokens for spender .
returns number of allow tokens for give address .
returns balance of bti tokens .
returns the total number of bti tokens .
pause the crowdsale .
unpause the crowdsale .
burn tokens .
constructor function .
symbol of this token .
initialize the token holders by contract owner .
array of address .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
name of this token .
set a fee for ask a question with u a the arbitrator .
submit the arbitrator 's answer to a question .
"request arbitration , freeze the question until we send submitanswerbyarbitrator ."
withdraw any accumulated question fee from the specified address into this contract .
constructor function .
"internal transfer , only can be call by this contract ."
buy tokens from contract by send ether .
sell amount tokens to contract .
"internal transfer , only can be call by this contract ."
modifier to allow only owner have full control on the function .
the price or token value for a ether .
token distribution .
send value token to to from msg . sender .
send value token to to from from .
the transaction address and send the event a approval .
the amount which spender be still allow to withdraw from owner .
burn tokens on behalf of someone .
transfer token for a specified address .
gets the balance of the specified address .
burns a specific amount of tokens .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
can undelegate by pass in newcontract address ( 0 ) .
"if a delegate have be designate , all erc20 call be forward to it ."
all delegate erc20 function be forward to correspond normal function .
burning function a withdraw money from the system .
create _amount new tokens and transfer them to _to .
change the minimum and maximum amount that can be burn at once .
"transfer and transferfrom be both dispatch to this function , so we check blacklist and pay stake fee here ."
setter min max params for investition .
number of complete cycle d / m / w / y .
"loop 'for ' wrapper , where 100 , 000 , 10 3 decimal ."
invest box controller .
"compaund intrest realization , return balance + intrest ."
bonus program .
make invest .
close invest .
"safe close invest , check for complete by date ."
notify owners about their balance be in promo action .
transfers sender 's tokens to a give address .
increase the token supply and send the new tokens to an account can only be call by the contract owner .
transfer ethereum from contract .
return in interface string encode to bytes ( max len 5 bytes ) .
approves and then call the receive contract .
total supply .
get the token balance for account tokenowner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
whitelist an address .
transfer token for a specified address .
not implement .
not implement .
not implement .
not implement .
used to burn unspent tokens in the contract .
check if the caller be the owner of the contract .
change the owner of the contract .
allows the current owner to transfer control of the contract to a newowner .
peterson 's law protection .
transfer tokens from one address to another .
assigns a new address to act a the coo .
test whether the coordinate be valid .
represent a 2d coordinate a a single uint .
turn a single uint representation of a coordinate into it x and y part .
sets the settings for the next game .
assigns ownership of a specific deed to an address .
find the _claimed_ tile surround a tile .
calculate the next buyout price give the current total buyout cost .
assign the proceed of the buyout .
calculate and assign the proceed from the buyout .
buy the current owner out of the tile .
end the game .
a set of function to get required variables .
recipientcontainer can transfer undefined fund to itself and terminate the contract after finaldate .
owner can change extendedtime if require .
internal method which retrieve unclaimed fund in tokens .
manager add user to whitelist by execute function addaddressinwhitelist .
manager can add tokens to whitelist .
burns a specific token for a user .
eth balance control .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
low level token purchase function .
breaks when balance 10 20 ether .
caller must assure that _balance max_uint128 .
buy a country directly from the contract for the calculated price which ensure that the owner get a profit .
set the rule for special role .
assign bp token to another address .
calc the balance that the user shuold hold .
transfer value bp tokens from sender 's account msg . sender .
transfer value bp tokens from sender 'from ' to provide account address to .
transfer ether balance to owner .
transfer token to owner .
for test only .
for test only .
for test only .
for test only .
for test only .
low level token purchase function .
for test only .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
allows anyone to transfer the pay tokens once trade have start .
allows anyone to transfer the pay tokens once trade have start .
modifier to allow token creation only when the sale is on .
modifier to allow token creation only when the hardcap have not be reach .
allows anyone to create tokens by deposit ether .
allows to set the toal alt deposit measure in eth to make sure the hardcap include other deposit .
allows authorize acces to create tokens .
allows the owner to set the hardcap .
allows the owner to set the multisig contract .
throws if call by any account tat be not authorize .
allows the owner to finish the mint .
allows the owner to transfer erc20 tokens to the multi sig vault .
function to get a specific authorizer .
function to check if an address be authorize .
function to add a new authorizer .
allows the current owner to update a single rate .
allows the current owner to update multiple rat .
allows the anyone to read the current rate .
"must be call after crowdsale end , to do some extra finalization work ."
transfer token for a specified address .
transfer token for a specified address .
gets the balance of the specified address .
function that be call when transaction target be a contract .
assemble the give address bytecode .
transfer tokens from one address to another .
verify that an amount be great or equal to zero .
transfer tokens from one address to another .
transfer tokens from one address to another .
validate an address - currently only check that it be n't null .
validate multiple address - currently only check that it be n't null .
verify that an amount be great than zero .
usd * 10 6 .
"the commiter get his bounty and deposit , there be three situations 1 ."
"if the campaign fail , the consumers can get back the bounty ."
send coin .
a contract attempt to get the coin .
transfer all ether hold by the contract to the owner .
reject all erc223 compatible tokens .
confirm an address change and migrate vest schedule to new address .
"calculates the total tokens that have be vest for a vest schedule , assume the schedule be past the cliff ."
registers a vest schedule to an address .
allows a registered address to withdraw tokens that have already be vest .
"allows contract owner to terminate a vest schedule , transfer remain vested tokens to the registered address and refund owner with remain tokens ."
allows a registered address to request an address change .
add bonus to pre-sale period .
approve others to spend on your behalf .
transferred approve amount from other 's account .
burn ( destroy tokens ) .
transfer ownership .
freeze account - onlyowner .
emerygency freeze - onlyowner .
constructor function .
put a puppy up for auction .
put a puppy up for auction to be sire .
number of decimals for this token .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"true if token transfer be successfully approve , false otherwise ."
total number of tokens in circulation .
"attach the token contract , can only be do once ."
function call after crowdfundendtime .
buy token function call only in duration of crowdfund active .
function to buy the tokens at presale .
function to calculate the total no of tokens with bonus multiplication .
function to transfer the fund to founder account .
get function function to get the current state of the crowdsale .
function provide the current bonus rate .
provide the bonus .
get function .
transfer tokens from one address to another .
gets the balance of the specified address .
function to check the amount of tokens that an owner allow to a spender .
function to keep track of the total token allocation .
function to change founder multisig wallet address .
function to change the founder multisig address .
sell amount tokens to contract .
open the crowdsale .
close the crowdsale .
withdraw the fund .
set or reaffirm the approved address for an nft .
enable or disable approval for a third party ( operator ) to manage all your asset .
actually perform the safetransferfrom .
"update the content of your square , the first 3 personalizations for a square be free then cost 10 finney ( 0 . 01 ."
change bet expect end time .
callback from oraclize .
allow the owner to make another address the owner .
allows the current owner to transfer control of the contract to a newowner .
grant or remove burn permissions .
throws if call by any account other than the burner .
burns a specific amount of tokens .
transfer balance to owner .
throws if call by any account other than the owner .
mint more xd .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to approve the transfer of the tokens and to call another contract in one step .
burns a specific amount of tokens .
enables the transfer of tokens for everyone .
"assigns the special transfer right , before transfer be enable ."
"removes the special transfer right , before transfer be enable ."
allows to transfer out the balance of arbitrary erc20 tokens from the contract .
"allows to transfer out the ether balance that be force into this contract , e . g ."
modifier to check if tokens can be transfer .
transfer token for a specified address .
total supply .
whitelist an address .
whitelist all address early .
transfer token for a specified address .
allows the current owner to transfer control of the contract to a newowner .
the ownership be transfer only if the new owner approve it .
burns a specific amount of tokens .
that function could be call only once ! ! ! after that nothing could be revert ! ! ! .
transfer tokens from one address to another .
low level token purchase function .
returns number of investors .
owner can allow or disallow refund even if soft cap be reach .
sends order tokens to investors after ico end if soft cap be reach tokens can be send only if ico have end .
owner can send back collect eth if soft cap be not reach or kyc be not pass .
owner of contract can withdraw collect eth by call this function .
used to delay start of ico .
after pre-sale make need to reduce hard cap depend on tokens sell .
internal function .
calculates bonuses base on current stage .
"checks if more tokens should be mint base on amount of sell tokens , require additional tokens and total supply ."
authorize a third party operator to manage ( send ) msg . sender 's .
authorize a third party operator to manage one particular asset .
internal operations .
supply-altering function .
transaction relate operations .
"alias of safetransferfrom ( from , to , assetid , `` ) ."
"securely transfer the ownership of a give asset from one address to another address , call the method onnftreceived on the target address if there 's code associate with it ."
transfers the ownership of a give asset from one address to another address .
"returns true if the contract implement interfaceid and interfaceid be not 0xffffffff , false otherwise ."
get all tokens of a give address .
enumerate tokens assign to an owner .
method to check if an asset identify by the give id exist under this dar .
land create and destroy .
inactive key after 1 year lose ownership .
land getters .
land transfer .
land update .
gets the total amount of assets store by the contract .
queries what address own an asset .
gets the balance of the specified address .
query whether an address have be authorize to move any assets on behalf of someone else .
query what address have be particularly authorize to move an asset .
query if an operator can move an asset .
low level token pledge function .
send coin .
destroy tokens .
"internal transfer , only can be call by this contract ."
create the fdu token to be sell .
token purchase function .
true if crowdsale event have end . .
set business logic .
send ether to fiduxa main collection wallet safety measure : we send to the contract creator address only .
true if the transaction can buy tokens base on cap and time .
dopayment ( ) be an internal function that send the ether that this contract receive to the vault and create tokens in the address of the _owner assume the tokensale be still accept fund .
onlyowner change the location that ether be send .
onlyowner change the set to allow transfer tokens .
onlyowner change the exchange rate of token to eth .
onlyowner change the controller of the tokencontract .
proxypayment ( ) allow the caller to send ether to the tokensale and have the tokens create in an address of their choose .
"notifies the controller about a transfer , for this tokensale all transfer be allow by default and no extra notifications be need ."
"notifies the controller about an approval , for this tokensale all approvals be allow by default and no extra notifications be need ."
generates _amount tokens that be assign to _owner .
burns _amount tokens from _owner .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
owner can step down and assign some other address to this role .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to mint tokens .
function to stop mint new tokens .
high level token purchase function .
true if the transaction can buy tokens .
true if crowdsale event have end .
true if burntoken function have end .
true if bountyfunds function have end .
true if grantrewardtoken function have end .
function transfertoken work to transfer tokens to the specify address on the call of owner within the crowdsale timestamp .
goldiamtoken contract be generate from here .
dopayment ( ) be an internal function that send the ether that this contract receive to the vault and create tokens in the address of the _owner assume the tokensale be still accept fund .
send some fund along with the call to cover oraclize fee .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
checks if the goal or time limit have be reach and end the campaign .
token purchase .
it be necessary for a correct change of status in the event of completion of the campaign .
transfer fund eth to multisig wallet if reach minimum goal .
manual start crowdsale .
true if crowdsale event have end .
local development .
send coin .
a contract attempt to get the coin .
send coin .
a contract attempt to get the coin .
call by the owner to start the crowdsale .
total number of tokens initially .
remain number of tokens .
setup the crowdsale parameters .
change crowdsale bonus rate .
set usd / eth rate in usd ( 1000 ) .
finish crowdsale in some reason like goals reached or etc .
check if goal be reach .
withdraw the fund .
sets the publication fee that 's charge to users to publish items .
sets the share cut for the owner of the contract that 's charge to the seller on a successful sale .
cancel an already publish order .
cancel an already publish order can only be cancel by seller or the contract owner .
executes the sale for a publish ntf .
allows the owner to enable the trade .
allows anyone to transfer the reporter tokens once trade have start .
allows anyone to transfer the reporter tokens once trade have start .
calculates the amount of bonus coin the buyer get .
true if crowdsale event have end .
throw if person send be not contract owner or cs role .
throw if person send be not authorise or send nothing .
authorise an account to participate .
authorise a lot of account in one go .
ban an account from participation ( default ) .
set a new cs representative .
set a newrate if have a big different in ether / dollar rate .
low level token purchase function .
transfer ownership of the token to the owner of the presale contract .
modifier to allow action only when the contract is pause .
modifier to allow action only when the contract is not pause .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
allows to perform method by any of the owners .
allows to perform method only after all owners call it with the same arguments .
used to delete cancel or perform operation .
allows owners to change ownership .
allows owners to change ownership .
"user can transfer tokens with this method , method be disable if emergencylock be activate ."
"this be use to allow some account to utilise transferfrom and send tokens on your behalf , this method be disable if emergencylock be activate ."
"sender can transfer tokens on others behalf , this method be disable if emergencylock be activate ."
creates new tokens as long a total supply do not reach limit .
destroys the amount of tokens and lower total supply .
minimum limit of purchase .
calculation of the bonuses in two periods .
overload finalize with condition on goal over hasclosed .
finalize contract with return of ownership to developers address .
query lock tokens .
emergency situation that require contribution period to stop .
emergency situation resolve .
"stop crowd , can not re-start ."
emergency situation .
manually unlock 10 total tokens .
exchange msg . value .
set white list in batch .
add one user into white list .
"internal transfer , only can be call by this contract ."
find the owner of an nft .
get the approved address for a single nft .
a distinct uniform resource identifier ( uri ) for a give asset .
actually perform the safetransferfrom .
"update the content of your square , the first 3 personalizations for a square be free then cost 100 finney ( 0 . 1 ."
coin out .
eth out .
getter functions .
a security precaution - - do n't interact with contract unless you .
getter functions .
restrict external contract call .
generateproofset - function for off-chain proof derivation .
internal function for generate the proof-set .
internal function for hash the seed .
internal function for hash bytes .
internal function for hash an address .
lock - store a proof-set .
unlock - verify a proof to transfer the locked fund .
withdrawtokens - withdraw tokens from contract .
cleardeposits - internal function to send ether .
executes the sale for a publish ntf .
cancel an already publish order .
cancel an already publish order can only be cancel by seller or the contract owner .
modifier that require the operational boolean variable to be true .
checks the amount of tokens that an owner allow to a spender .
approves the passed address to spend the specified amount of tokens on behalf of msg . sender .
gets the balance of the specified address less great of escrow tokens and free signup tokens .
gets the balance of the specified address less escrow tokens .
get operate status of contract .
sets contract operations on / off .
authorizes ico end and burn of remain tokens .
sets fee use in interface transactions .
sets signup tokens allocate for each user ( base on availability ) .
sets signup tokens allocate for each user ( base on availability ) .
modifier that require the contractowner account to be the function caller .
sets wallet to which ico eth fund be send .
authorizes a smart contract to call this contract .
deauthorizes a previously authorize smart contract from call this contract .
checks if a contract be authorize to call this contract .
sets the wei to when exchange rate .
sets the u . s .
sets the account that will be use for platform manager function .
checks if an account be the platformmanager .
checks if an account be the platformmanager or supportmanager .
gets address of supportmanager .
modifier that require the platformmanager account to be the function caller .
checks if referral tokens be available .
checks if user be a registered user .
checks pre-reqs and handle user registration .
registers a user wallet with a referrer and deposit any applicable signup tokens .
registers a user wallet with a referrer and deposit any applicable bonus tokens .
adds jiffys to escrow for a user .
refunds jiffys from escrow for a user .
handles payment for an interface transaction .
handles actual token transfer for payment .
handles transfer of tokens for vest grant .
contract constructor .
handles transfer of tokens for vest revoke and release .
gets an array of address register with contract .
gets an array of address register with contract .
returns ico-related state information for use by api .
buy ico tokens .
buy ico tokens with usd .
process token purchase .
calculates ico bonus tokens .
"copyright ( c ) 2016 smart contract solutions , inc ."
token allocations for various account .
gets the balance of the call address .
gets the balance of the specified address .
transfers token for a specified address .
transfers tokens from one address to another .
function that be call when a user or another contract want to transfer fund .
user transfer permission .
proposes to transfer control of the contract to a newownercandidate .
accept ownership transfer .
the dev ( owner ) will call this method to extract the tokens .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
the dev ( owner ) will call this method to extract the tokens .
function that be call when a user or another contract want to transfer fund .
sale be active .
soft cap not reach .
start preico .
start ico .
finish ico / preico .
admin can pause token sell .
admin can unpause token sell .
transfer dev tokens to vest wallet .
transfer dev tokens to vest wallet .
standard function transfer similar to erc20 transfer with no _data .
admin can withdraw ether beneficiary address .
different coin purchase .
claim refund ether in soft goal not reach .
transfer tokens to user .
define distount percents for different token amount .
ico be finish successfully .
define distount percents for different token amount .
get discount percent for number of tokens .
check ico goals achievement .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
token transfer from from to _to ( permission need ) .
increase permission for transfer .
decrease permission for transfer .
user token balance .
proxypayment ( ) allow the caller to send ether to the tokensale and have the tokens create in an address of their choose .
"notifies the controller about a transfer , for this tokensale all transfer be allow by default and no extra notifications be need ."
"notifies the controller about an approval , for this tokensale all approvals be allow by default and no extra notifications be need ."
setter for the transferable flag .
update method for all the date .
utility function to allow the owner to handle the early sale purchase .
utility function to allow the owner to handle private and bitcoin buyers .
dopayment ( ) be an internal function that send the ether that this contract receive to the vault and create tokens in the address of the _owner assume the tokensale be still accept fund .
allow the owner of tokensale to change the controller of the token .
finalizesale ( ) end the tokensale .
pauses the contribution if there be any issue .
resumes the contribution .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
change founder address ( where ico eth be be forward ) .
buy entry point .
emergency stop ico .
author : pipermerriam .
required methods of erc721 .
optional methods of erc721 .
erc-165 standard interface detection ( require ) .
map ( address uint256 ) public auctionsrunbyuser ; .
only if there be a bug discover and we need to migrate to a new market contract .
simple methods .
helper methods .
add new proposal and put it in list to be approve .
admins be able to approve proposal that someone submit .
vote for specific proposal with yes or no .
get data about specific proposal .
get all not approve proposals .
get all active proposals .
send coin .
allow another contract to spend some tokens on my behalf .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
burn fucks by user .
burn fucks from users .
allows an owner to submit and confirm a transaction .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
approve should be call when allow _spender 0 .
return token if case when need to redeploy auction contract .
mint the boosters can only be call by owner .
create a chest .
ceiling function for fish generator .
sets the address get the proceed from fish in the aquarium .
batch fish from 1 to 10 time .
call this to resolve hash and generate fish / chests .
batch resolve fish attempt .
adds an array of hash to be use for resolve .
call this function to attack another fish .
handles lose gain weight after fight .
get attack and defence from fish .
apply a booster to a fish .
square root function use for weight gain / loss .
utlitiy function for easy test can be remove later .
mints fish accord to params can only be call by the owner .
internal method for mint a fish .
sets the cost for fish in the aquarium .
sets address that resolve hash for fish can only be call by the owner .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
function to mint tokens .
function to stop mint new tokens .
burns a specific amount of tokens .
true if crowdsale event have end .
override this method to have a way to add business logic to your crowdsale when buy .
true if the transaction can buy tokens .
this function will return all of the detail of the pokemons .
"when countdowns and events happen , use the checker ."
set withdraw only use when bug happned .
this function will return all of the detail of the pokemons .
try create new player in storage .
get possible output for specify player at now .
get delay on opportunity to exit for specify player at now .
sender enter to the game .
address of the price setter .
price of one ponzi token in wei .
interest rate of the game a numerator / denominator . from .
level of the game .
get contract work state .
get timestamp of the level startup .
delet specify player from storage .
get amount of ponzi tokens in the game . ponzi .
get current delay on new level .
erc677 token fallback .
set price of one ponzi token in wei .
owner do disown .
set state of contract work .
"set the pricesetter address , which have access to set one ponzi token price in wei ."
try create new player .
calc possibly output ( compound interest ) for specify input and number of payout .
the game go no next level .
get info about specify player .
calc numerator of interest rate for specify level .
convert ponzi token to wei .
conver bytes data to address .
get input of specify player .
get whether specify player in storage or not .
get timestamp of specify player .
try set input of specify player .
do selfdestruct .
sender exit from the game .
allows someone to send ether and obtain the token .
for erc-721 compliance .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create item .
check for token ownership .
assigns ownership of a specific item to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new promo item with the give name , with give _price and assign it to an address ."
creates a new item with the give name .
returns all the relevant information about a specific item .
for erc-721 compliance .
required for erc-721 compliance .
burn unsold token and return bonus token .
send coin .
a contract attempt to get the coin .
token buyer have special to transfer from public sale supply .
no zero address transaction .
allow contract owner to burn token .
initiate the team vest by transfer the teamsupply t0 _teamvestingcontractaddress .
allow change of loyalty wallet a these wallets might be use externally by web apps to dispense loyalty reward and may get compromise .
allocate loyalty a need from loyalty pool into the current loyalty wallet to be disburse .
assign foundation supply to a contract address .
assign reserve supply to a contract address .
calculates the amount that have already vest .
increase the amount of tokens that an owner allow to a spender .
modifier to allow token creation only when the sale is on .
modifier to prevent buy tokens below the minimum require .
modifier to allow token creation only when the hardcap have not be reach .
receive eth from the sender .
allows the owner to set the starting time .
allows the owner to set the minimum purchase .
allows the owner to set the hardcap .
allows to set the total alt deposit measure in eth to make sure the hardcap include other deposit .
allows the owner to set the multisig contract .
allows the owner to stop the sale .
allows the owner to close the sale and stop accept eth .
allows the owner to transfer erc20 tokens to the multisig vault .
owner can transfer out any accidentally send erc20 tokens .
resource discovery .
assigns a new address to act a the ceo .
assigns a new address to act a the coo .
lock transfer for contributors during the ico .
transfer tokens to give address .
transfer tokens from give address to another address .
"in case refund be need , money can be return to the contract and contract switch to mode refund ."
it will be call by owner to start the sale .
due to change average of block time this function will allow on adjust duration of campaign closer to the end .
due to ether to dollar flacutation this value will be adjust during the campaign .
it will be call by fallback function whenever ether be send to it .
determine if purchase be valid and return proper number of tokens .
this function will finalize the sale .
fail-safe drain .
fail-safe token transfer .
it will allow contributors to get refund in case campaign fail .
to populate website with status of the sale and minimize amout of call for each variable .
set the step of the campaign from presale to public sale contract be deploy in presale mode .
begin a game .
finish a game that be in progress .
determins whether or not the caller be in a game .
process a successful roll .
roll the dice for a player .
the callback function be call by oraclize when the result be ready the oraclize_randomds_proofverify modifier prevent an invalid proof to execute this function code : the proof validity be fully verify on-chain .
write function .
it will return status of white list .
it will remove whitelisted user .
it will white list one member .
it will white list multiple members .
determine if the _from address be a contract .
how many tokens we have leave in our approval pool .
in case we need extra price tiers ( table stake where people can play ) we can add additional ones .
if we need to update price tiers .
if we need to adjust the amount players or ethernalgo get for each game .
separating the cfo and the ceo responsibilities require the ability to set the cfo account .
separating the cfo and the ceo responsibilities require the ability to set the cfo account .
convinience function to access the share .
simple wrapper to return the number of board in total .
we would like to easily and transparantly share the game 's statistics with anyone and present on the web-app .
make sure this board be in wait for result status .
make sure this board be in one of the end of game state .
make sure this board still have balance .
make sure this board still have a spot for at least one player to join .
restricts game for the allow table stake .
checks a status if and return if it 's an end game .
gets the update time for a board .
gets the current board status .
gets the current balance of the board .
"sets the current balance of the board , this be internal and be triggerred by function run by external player action ."
overload to set the board status when we only have a boardid .
gets the player color give an address and board ( overload for when we only have boardid ) .
gets the player color give an address and board .
gets the player address give a color on the board .
check if a player be on board ( overload for boardid ) .
check if a player be on board .
check which player act next .
this be the first function a player will be use in order to start play .
this function allow a player to cancel a match in the case they be wait for an opponent for a long time but do n't find anyone and would want to get their deposit of table stake back .
gets the current player board to present to the player a need .
creates a new board in case no board be find for a player to register .
creates a new board in case no board be find for a player to register .
starts the game and set everything up for the match .
handles the registration of a player to a board .
helper function to caclulate how much time a player use since now .
convinience function to help present how much time a player have .
helper function to access the time periods of a player in a board .
"the main function to split game revenues , this be trigger only by change the game 's state to one of the end game state ."
"withdraw accumulate balance , call by payee ."
"updating the player 's time periods leave , accord to the current time - board last update time ."
updates the board status accord to the players score .
"performs a pass action on a psecific board , only by the current active color player ."
"resigns a player from a specific board , can get call by either player on the board ."
"claiming the current act player on the board be out of time , thus losses the game ."
update a board status with a lose color .
"internally use to move to the next turn , by switch side and update the board last update time ."
adding a stone to a specific board and position ( row col ) .
"returns a board 's row detail , specify which color occupy which cell in that row ."
returns the current color of a specific position in a board .
"calcultes whether a position capture an enemy group , or whether it 's a suicide ."
internally use to set a flag in a shrinked board array ( use to save gas cost ) .
internally use to check whether a flag in a shrinked board array be set .
gets a group start from the position color send .
return the adjacent position for a give position .
"calculates the board 's score , use area score ."
ids empty group on the board .
allow another contract to spend some tokens in your behalf .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
owner can update token information here .
transfer dead tokens to contract master .
increase the airdrop count to allow sweet humans ask for more beautiful kitten coins .
define amount of kitten coins to hold in order to get holder reward .
define how many wonderful kitten coins will be issue for participate the selfdrop : basic and holder reward .
define how many wonderful kitten coins will be issue for donators participate the selfdrop .
sends all eth contributions to lovely kitten owner .
"sends all remain kitten coins to owner , just in case of emergency ."
sends all other tokens that would have be send to owner ( why people do that ? we do n't meow ) .
"update number of kitten coins remain for drop , just in case it be need ."
defines donator bonus to receive .
transfer dead tokens to contract master .
gas guzzler .
match simulator .
freeze prevent allow target from send receive tokens .
allows to buy ico tokens directly from this contract by send ether .
allows anyone to preview a buy of ico tokens before an actual buy .
allows token owners to redeem tokens to this contract for it value promise .
a sellers allow limit in hold ico tokens be check .
a buyers allow limit in hold ico tokens be check .
a buyers allow limit in hold ico tokens along with financial capacity to buy be check .
allow a seller to formally register his sell offer at exchangemacroansy .
function for book and lock for a buy with respect to a sale offer register .
burning tokens ie remove tokens from the formal total supply .
withdraw payments to beneficiary .
internal function can call by this contract only .
allows to receive coin from contract share approve by contract .
_gettknaddr ( ) ; _geticoaddr ( ) ; _getexchgaddr ( ) ; address tkn_addr ; address ico_addr ; address exchg_addr ;  .
allows to send coins to other account .
"sender can set an allowance for another contract , ."
allows _spender to spend no more than _value coin from your account .
query the hash of an interface give a name .
sets an external manager that will be able to call setinterfaceimplementer ( ) on behalf of the address .
query if an address implement an interface and thru which contract .
sets the contract that will handle a specific interface ; only the address itself or a manager define for that address can set it .
erc165 specific .
"check if user illicit activity , freezeaccount and back to totalsupply ."
"if a bag have n't be purchase in over timeout , reset it level back to 0 but retain the exist owner ."
"internal transfer , only can be call by this contract ."
"0 . 1 ether be a pretty good bet amount but if price change , this will be useful ."
mints a base token to an address with a give composition price .
allow an address to withdraw it balance in the contract .
"give an array of ids , return whether or not this composition be valid and unique do not assume the layer array be flatten ."
return composition price of a give token id .
get total price for mint a composition give the array of desired layer .
set the composition price for a token id .
"give an array of ids , return whether or not this composition be valid and unique for when only base layer be allow do not assume the layer array be flatten ."
"give an array of ids , return whether or not this composition be valid and unique when compositions be allow do not assume the layer array be flatten ."
trim the give array to a give size .
check if a token be an exist token by check if it have non-zero layer .
set composition price for a token .
calculate the next token id base on totalsupply .
"give an array of ids , return whether or not this composition be unique assumes the layer be all base layer ( flatten ) ."
payout method for the contract owner to payout contract profit to a give address .
set global default composition fee for all new tokens .
mints a base token to an address with a give composition price .
mints a composition emoji .
return the name ethmoji .
return the name emj .
set avatar for an address .
return the id represent the avatar of the address .
transfer ownership of token .
set avatar if no avatar be previously set .
remove avatar for address .
withdraw accumulate balance to the payee .
transfer the balance from owner 's account to another account .
transfer the balance from owner 's account to advisor 's account .
only owner address can set maxprofitaspercentofhouse .
only owner address can transfer phx .
only owner address can selfdestruct - emergency .
"check player profit , bet size and player number be within range ."
check game be currently active .
check payouts be currently active .
check only treasury address be call .
public function player submit bet only if game be active bet be valid .
internal function set max profit .
only owner adjust contract balance variable ( only use for max profit calc ) .
dont touch pls .
"false first call for cancel offer , prevent withdraw twice withdraws fee to owner if he own this one ."
return if creator want blue yeah this program have this logic behind it although not necessary .
"play game with set , and a bool if you also want to create offer on the side ."
process game .
"random function via blockhas and address addition , timestamp ."
"pay fee to owners no safemath necessary , will always be fine due to control in limit of fee ."
"from set , 3 data to retrieve above ."
allow to change dev fee .
allow to change helper fee .
only use in ui .
lookups struct into offergamelist .
create a new offer with set .
"internal function , necessary to keep track of simple game link ."
"public cancel offer , intern necessary for simple link note : offer cancel be msg . sender ."
"play offer game : target address , id , possible set ."
same a offer cancel .
owner functions .
"contrary to most erc20 implementations , require that recipient be exist member ."
"contrary to most erc20 implementations , require that recipient be exist member ."
private functions .
owner should call this on twice a month .
"places member be a banished state whereby they be no longer a member , but their username remain active ( prevent re-registration ) ."
place a username back into circulation for re-registration .
mod functions .
send karma to exist account .
"if a member have be bad , they wo n't be able to receive a dividend : ( ."
member functions .
member can withdraw their share of donations from the previous month .
erc20 functions .
allow multiple transactions array .
burn for future token swap .
allows the owner to flush the eth .
transfers vest tokens to beneficiary .
add new beneficiary to start vest .
allows the owner to revoke the vest .
allows the owner to destroy a beneficiary .
admin function .
used only if ether price increase ( decrease the price card ) .
implementation erc721 .
for this case the only metadata be the name of the human .
humanitycard function .
sale function .
get function .
send coin .
this pull the allow tokens amount from address to another .
allow another contract to spend some tokens in your behalf .
this function be use to increase the amount of tokens allow to spend by spender .
this function be use to decrease the amount of tokens allow to spend by spender .
function to distribute tokens to list of address by the provided amount .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc223 transfer with no _data .
for create collectibles .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
allow an owner to set their own price and keep the fee structure .
allow pre-approved user to take ownership of a token .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create mobsters .
check for token ownership .
"withdraw , but leave whack pool amount in - players need ."
godfather can claim contract 48 hrs after card be purchase .
assigns ownership of a specific mobster to an address .
utility to round to the game precision .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new mobster with the give name .
creates a new mobster with the give name .
returns all the relevant information about a specific mobster .
hit a mobster .
write function .
modifier that insist on a valid bet .
begin a game .
finish a game that be in progress .
determins whether or not the caller be in a game .
indicates whether or not the give bet be a valid bet .
returns the balance in play .
returns the number of game complete .
returns the game complete at the give index .
returns the number of game a player complete .
returns the game a player complete at the give index .
process a successful roll .
process a failed roll .
roll the dice for a player .
the callback function be call by oraclize when the result be ready the oraclize_randomds_proofverify modifier prevent an invalid proof to execute this function code : the proof validity be fully verify on-chain .
main language data .
international language data .
set crowdsaleclosed .
set price .
set transferrable .
set contract address .
transfer tokens .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to mint tokens .
function to stop mint new tokens .
burns a specific amount of tokens .
true if tokensale event have end .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
destroy tokens from account .
create tokens and send it to specific address .
freeze specific account from send receive tokens .
stops all token transfer in case of emergency .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
transfers vest tokens to beneficiary .
allows the owner to revoke the vest .
"only when necessary such a gas price change , adjust the gas to be reimburse on every transfer when sender account below minimum ."
"when necessary , adjust the minimum wei require in an account before an reimibusement of fee be triggerred ."
owner withdrawal for excessive gas fee deposit .
allow everyone to start transfer tokens freely at the same moment .
add the ether address to whitelist to enable transfer of token .
remove the ether address from whitelist in case a mistake be make .
return true when the address be in the exception list eg .
below be internal function .
approve should be call when allow _spender 0 .
allows the current owner to transfer control of the contract to a newowner .
transfer token for a specified address .
"when necessary , adjust minimum ftx to transfer to make the gas worthwhile ."
check and define how a ship can upgrade .
function to whitelist partner address .
function to authenticate user .
function to update the hydrovaluesmap .
function call by hydro api to check if the partner have validate .
function to update the partnervaluesmap with their amount and challenge string .
user 's admin function .
users 's data storage .
admin function .
function to mint tokens .
setting minter interface .
minter 's interface .
"of course , call to internal function use the internal call convention , which mean that all internal type can be pass and memory type will be pass by reference and not copy ."
set to move after crowdsale have open .
burning tokens .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
in case the ownership need to be transfer .
"function be virtual , and mean to be overridden ."
"function be final , and must not be override ."
"function be virtual , and mean to be overridden ."
only assets 's admins be allow to execute .
"function be final , and must not be override ."
lifts the ban on transfer for give address .
revokes the ban on transfer for give address .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
"function be final , and must not be override ."
"function be virtual , and mean to be overridden ."
"function be final , and must not be override ."
allowed to only contract onwer .
should be perform only by root contract owner .
number of symbols .
asset existance .
asset decimals .
asset name .
asset description .
asset reissuability .
asset owner address .
owner right availability .
owner right availability .
asset total supply .
holder balance .
holder balance .
holder address .
should be perform by a contract owner or it co-owners .
should be perform by a contract owner or it co-owners .
holder id .
holder id .
trust existance .
holder to spender allowance .
holder to spender allowance .
direct ownership pass without change / claim pattern .
emits error event with specify error message .
emits erc20 transfer event on this contract .
emits erc20 approval event on this contract .
only asset implementation contract assign to sender be allow to call .
asset implementation contract .
asset total supply .
holder balance .
holder to spender allowance .
asset decimals .
when transfer tokens decrease assuranvepayments for sender and increase for reciever .
allow the owner to burn the token from their account .
function to access name of token .
function to access symbol of token .
function to access decimals of token .
function to access total supply of tokens .
"makes an offer to trade tokenamount of erc20 token , token , for weiamount of wei ."
makes an offer to trade msg . value .
cancels all previous offer by msg . sender .
cancels any previous offer to trade weiamount of wei for tokenamount of tokens .
take some ( or all ) of the ether ( minus fee ) in the buyorderbalances hash in exchange for totaltokens tokens .
function to start transfer tokens .
execute bet .
buy tokens from contract by send ether .
sell amount tokens to contract .
withdrawal amount eth from contract .
withdrawal amount tokens from contract .
destroy tokens .
allow execution by the owner only .
allow transfer the contract ownership the new owner still need to accept the transfer can only be call by the contract owner .
check if it be safe to subtract two number .
get user course list .
add a course to a user .
add course to a user .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
withdraw in 3 month after fail .
stops owner from gain access to all functionality .
throws if call by any account other than the owner .
change the upgrade master .
child contract can enable to provide the condition when the upgrade can begin .
limit token transfer until the crowdsale be over .
create new tokens and allocate them to an address . .
allows the current owner to transfer control of the contract to a newowner .
allow upgrade agent functionality kick in only if the crowdsale be success .
owner can update token information here .
interface declaration .
self check if all reference be correctly set .
owner can allow a crowdsale contract to allocate new tokens .
function to set default vest schedule parameters .
make an investment .
allocate tokens for the early investors .
track who be the customer make the payment so we can send thank you email .
allow anonymous contributions to this crowdsale .
finalize a succcesful crowdsale .
allow to ( re ) set finalize agent .
allow address to do early participation .
allow crowdsale owner to close early or extend the crowdsale .
allow crowdsale owner to begin early or extend the crowdsale .
allow to ( re ) set price strategy .
allow to change the team multisig address in the case of emergency .
allow load refund back on the contract for the refund .
investors can claim refund .
true if the crowdsale have raise enough money to be a succes .
increase the amount of tokens that an owner allow to a spender .
this be for manual test of multisig wallet interaction .
interface marker .
can we run finalize properly .
called once by crowdsale finalize ( ) if the sale be success .
called from invest ( ) to confirm if the curret investment do not break our cap rule .
dynamically create tokens and assign them to the investor .
iterate through tranches .
decrease the amount of tokens that an owner allow to a spender .
get the current tranche or bail out if we be not in the tranche periods .
get the current price .
calculate the current price for buy in amount .
function to set / update vest schedule .
"release tokens a per vest schedule , call by contributor ."
"release tokens a per vest schedule , call by anyone ."
burns a specific amount of tokens .
allow the token holder to upgrade some of their tokens to a new contract .
set an upgrade agent that handle .
add bonus to pre-sale period .
this be a supercheap psuedo-random number generator that rely on the fact that who will mine and when they will mine be random .
determine if the _from address be a contract .
set cooldown of phoenix .
set price cutoff when determine phoenix price after explosion .
set price percentage for when price exceed or equate to price cutoff to reset to .
set price percentage for when price be low than price cutoff to reset to .
set base price for phoenixes .
purchase show from previous owner .
note that the previous and current owner will be the same person after this function be call .
users can withdraw their accumulated dividends .
check if game be in beta or not .
"function anyone can call to turn off beta , thus disable some function ."
determines next price of token .
set dividend payout of phoenix .
set explosive power of phoenix .
function to access name of token .
function to access symbol of token .
function to access decimals of token .
function to access total supply of tokens .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
change bet expect end time .
"determine the outcome manually , immediately ."
callback from oraclize .
"returns whether collections be now available , or not ."
performs payout to owners .
"function that let better collect their money , either if the bet be cancel , or if they win ."
modifier to only allow empty the remain value of the contract to owners .
"joins an array of slice , use self a a delimiter , return a newly allocate string ."
give an address access to this role .
remove an address ' access to this role .
check if an address have this role / / revert .
check if an address have this role .
revert if addr do not have role .
determine if addr have role .
add a role to an address .
remove a role from an address .
modifier to scope access to a single role ( use msg . sender .
"if something go wrong with contract , we can turn on this function and then withdraw balance and pay players by hand without need to kill contract ."
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
release the locked tokens own by an account with several stag this need the contract get approval from the account by call approve ( ) in the token contract and also need the releasing-to address have already be set .
bind a contract a it owner .
change the owner of the contract from this contract address to the original one .
bind a contract a it owner .
release the locked tokens own by a number of account .
release the locked tokens own by an account .
freeze multiple of the account .
"transfer a list of amount of tokens to a list of account , and then freeze the tokens ."
"release the locked tokens own by multi-accounts , which be the tokens that belong to these account before be lock ."
"transfer an amount of tokens to an account , and then freeze the tokens ."
release the token which be lock for once and will be total release at once after the end point of the lock period .
"release the locked tokens own by an account , which only have only one lock time and do n't have release stage ."
release the locked tokens own by an account with several stag this need the contract get approval from the account by call approve ( ) in the token contract .
set the new endtime of the released time of an account .
set the new released period length of an account .
set the new released period length of an account .
get the locked stag of an account .
get the endtime of the locked stag of an account .
get the remain unrleased tokens of the locked stag of an account .
get the remain releasing period of an account .
get the remain original tokens belong to an account before this time lock .
get all the remain original tokens belong to a serial of account before this time lock .
freeze the amount of tokens of an account .
"release the locked tokens own by an account , which be the tokens that belong to this account before be lock ."
release the locked tokens own by an account with several stag this need the contract get approval from the account by call approve ( ) in the token contract and also need the releasing-to address have already be set .
bind a contract a it owner .
remove an account from the frozen account list .
remove a time record from the time record list of one account .
freeze the amount of tokens of an account .
constructor function .
"ether swap , activate by the fallback function after receive ethers ."
purchase meme from previous owner .
solhint-enable const-name - snakecase .
"same erc20 behavior , but revert if still mint ."
"same erc20 behavior , but revert if still mint ."
reverts if call before the sale end .
reverts if call not do the refund period .
set restrict period participation cap for a list of address .
"finalizes the token sale event , by stop token mint ."
"reclaim all erc20 compatible tokens , but not more than the vit tokens which be reserve for refund ."
"allows participants to claim their tokens , which also transfer the ether to the fund recipient ."
allows participants to claim all their tokens .
allows participants to claim refund for their purchased tokens .
allows participants to claim refund for all their purchase tokens .
initialize token grant .
issues tokens for the recipient .
returns whether the sale have end .
"returns whether the sale be during it restricted period , where only white-listed participants be allow to participate ."
returns whether the sale be during it refund period .
returns whether the sale be during it refund period .
name of this token .
symbol of this token .
returns list of tokens .
"if a bag have n't be purchase in over timeout , reset it level back to 0 but retain the exist owner ."
modifiers and controllers .
token exchange .
token cap update .
"ether swap , activate by the fallback function after receive ethers ."
validate an address - currently only check that it be n't null .
allows the current owner to transfer control of the contract to a newowner .
batch token transfer .
start the crowdsale .
allow the current owner to change the owner of the crowdsale .
allow the owner to change the tokens for sale number .
allow the owner to change the start / end time for a period .
allow the owner to withdraw all the tokens remain after the crowdsale be over .
allow the owner to withdraw all ether from the contract after the crowdsale be over .
check how many tokens be remain for distribution .
calculate how many tokens can be distribute for the give contribution .
allow a user to contribute to the crowdsale .
available to mint by owner .
unlocked tokens in an account .
owner functions .
change the redemption wallet address .
change the gizer items contract address .
change the ico end date .
minting of tokens by owner .
minting of tokens by owner .
transfer out any accidentally send erc20 tokens .
private function .
erc20 function .
override transferfrom .
bulk token transfer function .
functions to convert gzr to gizer items .
gzr token owner buy several gizer items ( max 100 ) .
internal function to call .
get the account balance for an address .
transfer the balance from owner 's account to another account .
allow _spender to withdraw from your account up to _amount .
spender of tokens transfer tokens from the owner 's balance .
returns the amount of tokens approve by the owner that can be transfer by spender .
information functions .
are tokens tradeable .
modify method to only allow the owner to call it .
reset the maximum bonus threshold to the correct value .
withdraw all ether from the contract .
withdraw remain chi from the contract .
get the number of bonus tiers .
get bonus percentage and threshold of a give bonus tier .
get the next bonus tier index .
get the number of sell tokens .
calculate the number of bonus tokens to send the buyer .
called to force a payout without have to restake .
called by the erc223 contract ( phx ) when send tokens to this address .
assign amount_ of tokens to investor identify by to_ address .
trigger start of ico .
suspend this ico .
terminate the ico .
change basic ico parameters .
resume a previously suspend ico .
send ether to the fund collection wallet .
add address to ico whitelist .
remove address from ico whitelist .
returns true if give address in ico whitelist .
enable whitelisting .
disable whitelisting .
recalculate ico state base on current block time .
assign amount_ of privately distribute tokens to someone identify with to_ address .
function that be call when a user or another contract want to transfer fund .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
token transfer from from to _to ( permission need ) .
this function be callable by anyone .
knc rate handle .
set reserve data .
wallet fee .
tax parameters .
ensures that b be great than a to handle negative .
ensures that the sum of two value be great than the intial value .
approve and enact the contract .
approves and then call the receive contract .
approves and then call the receive contract .
modifier to allow action only when the contract is not pause .
transfer token for a specified address .
transfer tokens from one address to another .
burns a specific amount of tokens .
"must be call after crowdsale end , to do some extra finalization work ."
throws if call by any account other than the owner .
"after the manual mint process end , this shall be invoke pass the ico crowd sale contract address so that nobody else will be ever able to mint more tokens ."
that function could be call only once ! ! ! after that nothing could be revert ! ! ! .
transfer token for a specified address .
transfer tokens from one address to another .
function to mint tokens .
transfer token for a specified address .
gets the balance of the specified address .
owner properties .
general properties .
todo - solidity do n't support return of structs .
private methods .
oraclize callbacks .
this be a supercheap psuedo-random number generator that rely on the fact that who will mine and when they will mine be random .
write function .
write function .
call to get the specified team at a certain position of a certain board .
each angel can only be on one sponsor leaderboard at a time .
each accessory can only be on one sponsor leaderboard .
constructor function .
uuid function add a new code + weight .
update the weight of an exist code .
remove an exist code .
utility function https : / / ethereum . stackexchange . com / question / 9142 / how-to - convert-a - string-to - bytes32 .
required functions .
get the owner of a certain token .
transfer token .
transfer from .
approve token transfer ( we do not make it payable ) .
metadata functions .
internal function .
information function .
token minting .
throws if call by any account other than the owner .
show tradability of the contract .
transfer sender 's tokens to a specified address .
allows allow third party to transfer tokens from one address to another .
retrieves the token balance of any single address .
allows _spender to spend no more than _value tokens in your behalf .
returns the amount which _spender be still allow to withdraw from _owner .
"allows _spender to spend no more than _value tokens in your behalf , and then ping the contract about it ."
remove _value tokens from the system irreversibly .
remove _value tokens from the system irreversibly on behalf of _from .
allows the current owner to transfer control of the contract to a newowner .
terminates contract when call by the owner .
"internal transfer , only can be call by this contract ."
grant tokens to customers .
buy quantity of tokens depend on the amount of send ethers .
forbid specify address from send receive tokens .
allow specify address send receive tokens .
let users trade with the token .
send coin throw on any error rather then return a false flag to minimize user errors .
allows execution by the controller only .
allows execution by the air drop manager only .
function to mint tokens .
function for handle token issue .
function to issue tokens for investors .
function to batch mint tokens .
function to enable token transfer .
function to enable token transfer .
burn tokens .
"a separate method gethash ( ) for convert bytes to uint64 8 , which be do since the evm can not pass bytes between contract ."
"this will be invoke by the owner , when owner want to rescue ethers ."
proposes to transfer control of the contract to a newownercandidate .
accept ownership transfer .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
buy tokens from contract by send ether .
"internal transfer , only can be call by this contract ."
add num tokens which mean that totalsupply will be add by num * decimals .
burn tokens at will .
distribute reserve tokens .
owner only function for manual assignment of tokens .
burns request amount of sender 's tokens .
pausabletoken function copy to allow assigntokens ( ) to use super . transfer ( ) .
returns total supply of issue tokens .
returns balance of address .
transfers tokens from your address to other .
approve other address to spend tokens on your account .
a contract attempt to get the coin .
get the amount of allow tokens to spend .
withdraw ether to a multisig address .
issue new tokens .
destroy tokens from owners account .
issue new tokens .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
buy tokens from contract by send ether .
sell amount tokens to contract .
destroy tokens from other account .
transfer tokens from one address to another .
allows _spender to spend no more ( allowance ) than _approvetokenswithdecimal tokens in your behalf .
destroy tokens and remove _value tokens from the system irreversibly .
destroy tokens ( _value ) from the system irreversibly on behalf of _from .
add holder address into holderindex map and to the holders array .
allows the current owner to transfer control of the contract to a newowner .
set admin account to manage contract .
issue first round tokens to owner address .
issue tokens for reserve .
freeze or unfreeze an address .
lockup account till the date .
get the cuurent ss holder count .
get the current ss holder address .
pause the contract by only the owner .
unpause the contract by only he owner .
change the symbol attribute of the contract by the owner .
change the name attribute of the contract by the owner .
"add two number , throw on overflow ."
modifier to make a function callable only when account not frozen .
modifier to make a function callable only when the contract be not pause .
modifier to make a function callable only when the contract be pause .
"internal transfer , only can be call by this contract ."
transfer to a specific address .
issue new tokens .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
issue token base on ether receive .
compute the amount of ing token that can be purchase .
determine the current sale tier .
issue tokens for a single buyer .
returns the current price .
start token sale .
stop token sale .
if the token sale be finish .
scan the addressindices for ensure the target address be include .
allocate interest .
charge investers for management fee .
distribute more token of contract and transfer to owner .
remove a quantity of tokens .
calculate the fee tokens for transfer .
total supply .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
"internal transfer , only can be call by this contract ."
"whatever call this should have either the optionalproxy or onlyproxy modifier , and pass in messagesender ."
return the equivalent fiat value of the give quantity of ether at the current price .
"true iff the current block timestamp be later than the time the price be last updated , plus the stale period ."
"update the current ether price and update the last updated time , refresh the price staleness ."
anything call this must apply the onlyproxy or optionalproxy modifiers .
allow a user to withdraw any tokens that have vest .
decrease the amount of tokens that an owner allow to a spender .
function below this line be onlyowner .
function below this line be public .
function below this line be onlycontroller .
function below this line be onlyowner .
public function .
function below this line be onlyledger .
function below this line be onlytoken .
function below this line be onlycontroller .
"with each call to purchasetrophy , fee will build up in this contract 's balance ."
withdraw the fund .
returns current contract 's owner .
adding new voter 's proposal .
returns the cryptokitty 's owner address .
transfers contract 's ownership .
returns storage 's address .
sets storage 's address .
returns default register fee .
sets default register fee .
returns contract 's balance .
registering proposal in replacement for provided vote .
recording proposals vote .
modifiers - restricting access and state machine pattern .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
transfer token to a contract address with additional data if the recipient be a contact .
transfer token all tokens to a contract address with additional data if the recipient be a contact .
call erc677 tokenfallback for erc677recipient contract .
check addr if be contract .
contract receive eth ( payable ) from sender and transfer some amount of tokens to him .
sender receive his pending withdrawals ( if 0 ) .
gets the pending withdrawals of the specified address .
"initialize the contract , only owner can call and only once ."
get contract work state .
get price of one token in wei .
get address of the bank .
get timestamp of first entrance to sale state .
get address of the price setter .
owner do disown .
set state of contract work .
set price of one token in wei and fix it .
set unfix token price to true .
"set the pricesetter address , which have access to set one token price in wei ."
gets the balance of the specified address .
"set the bank , which receive 95 eth from tokens sale ."
convert token to wei .
conver wei to token .
get actual token price .
get token price for specific day after start sale tokens .
"it be always must be true , for correct withdrawals and receivers eth ."
the name of the token .
the symbol of the token .
uses - e . g .
total number of tokens in existence .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to mint tokens .
"sz : functions setlev1 , setlev2 to change level of price ."
change freeze time for candy .
change tour freeze time for candy .
time in minutes .
price in candycoins .
time in minutes .
price in candycoins .
in weis .
price in weis .
gets the owner of the specify unicorn id .
internal function to add a unicorn id to the list of a give address .
internal function to remove a unicorn id from the list of a give address .
transfer by market .
change freeze time for candy .
change tour freeze time for candy .
gets the balance of the specified address .
gets the list of unicorns own by a give address .
gets the approved address to take ownership of a give unicorn id .
tells whether the msg . sender .
approves another address to claim for the ownership of the give unicorn id .
claims the ownership of a give unicorn id .
transfers the ownership of a give unicorn id to another address .
internal function to clear current approval and transfer the ownership of a give unicorn id .
internal function to clear current approval of a give unicorn id .
this can be change ! .
allows someone to send ether and obtain the token .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create region .
check for token ownership .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new promo region with the give name , with give _price and assign it to an address ."
creates a new region with the give name .
returns all the relevant information about a specific region .
required for erc-721 compliance .
transfer token for a specified address .
"if a bag have n't be purchase in over timeout , reset it level back to 0 but retain the exist owner ."
this function be call by the passmessage method from thecyber contract .
"internal transfer , only can be call by this contract ."
approves and then call the receive contract .
override mintabletokenn . finishminting ( ) .
overrided destructor .
overrided destructor companion .
function to mint tokens .
function to stop current round .
function that allow the current owner to transfer ownership .
function that allow the current owner to withdraw any amount of eth from the contract .
"internal transfer , only can be call by this contract ."
an integer contain _width bits of _value start at the _offset bite .
the sine result a a number in the range - 32767 to 32767 .
return the cos of an integer approximate angle .
symbol of this token .
number of decimals for this token .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"true if token transfer be successfully approve , false otherwise ."
"true on success , false on error ."
set new owner for the smart contract .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
total number of tokens in circulation .
name of this token .
functions with this modifier can only be execute by the owner .
what be the balance of a particular account ? .
mint the token .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
allow the owner to burn the token from their account .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
transfer token for a specified address .
low level token purchase function .
transfer tokens from one address to another .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
function to mint tokens .
the external function to get all the game settings in one call .
the external function to call when join the next tournament .
the onlyowner external function to call when join the next tournament .
the onlyowner external function to call to cancel the next tournament and refund .
withdraw all ether from the contract .
compute all winners and losers for the first round .
compute all second winners of all first round winners .
compute all second losers of all first round losers .
compute the final winner .
compute the final loser .
return a pseudo random uint small than low bound .
the external function to get all the game settings in one call .
appoint sales agent of token .
transfer tokens from vault to account if sales agent be correct .
allow the owner to burn a specific amount of tokens from the vault .
bonus calculation for transaction .
token purchase function .
send wei to the fund collection wallets .
validate if the transaction can be success .
show if crowdsale have end or no .
constructor function .
function to mint tokens .
decrease the amount of tokens that an owner allow to a spender .
burns a specific amount of tokens .
destroy tokens from other account .
set inital arguments of the crowdsale .
crowdsale state function .
to be call by owner or contract .
emergency pause .
resume pause crowdsale .
send ether to the fund collection wallet .
setter function for crowdsale parameters .
set the ether to token rate .
value of 0 not whitelisted .
remove the address from whitelist .
flag address a kyc approve .
set kyc status a fail .
true if the transaction can buy tokens .
true if crowdsale event have end .
used to buy tokens .
internal call to check max user cap .
internal call to allocate tokens purchase .
functions for refund claim tokens .
partial refund users .
used by investor to claim token .
used by investor to claim bonus token .
used by owner to distribute bonus token .
used by owner to distribute token .
for case where token be mistakenly sent / airdrops .
total number of tokens in existence .
transfer token for a specified address .
transfer tokens from one address to another .
function to access name of token .
function to access symbol of token .
function to access decimals of token .
function to access total supply of tokens .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
check the token balance of a wallet in a token contract .
check the token balance of a wallet for multiple tokens .
calculate the amount of eth the contract pay out on a sell .
change the owner .
calculate the amount of eth the contract require on a buy .
chi buy function .
chi sell function .
allows owner to move chi ( e . g .
"hopefully this do n't get use , but it allow for gotchi rescue if someone send their gotchi ( or a cat ) to the contract by mistake ."
"allows the owner to move ether , for example to an update contract ."
set the market spread ( actually it 's half of the spread ) .
allows for deposit of eth and chi at the same time ( to avoid temporary imbalance in the market ) .
allows for withdrawal of eth and chi at the same time ( to avoid temporary imbalance in the market ) .
add multiple address to the whitelist .
remove an address from the whitelist .
remove multiple address from the whitelist .
modifier to check whitelist admin status .
start accept payments .
stop accept payments .
add a user to the whitelist admins .
remove a user from the whitelist admins .
add an address to the whitelist .
allows an admin to update whitelist .
low level token purchase function .
returns true if crowdsale event have end .
bonuses for large purchase ( in hundredths of percent ) .
returns you how much tokens do you get for the wei pass .
returns true if the transaction can buy tokens .
escape hatch in case the sale need to be urgently stop .
allows someone buy obtain an goldengoose asset token .
calculate the amount of eth the contract require on a buy .
allows someone to send ether and obtain the token .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create scene .
check for token ownership .
assigns ownership of a specific scene to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new promo scene with the give name , with give _price and assign it to an address ."
creates a new scene with the give name .
returns all the relevant information about a specific scene .
required for erc-721 compliance .
limit purchase to whitelisted participants only .
purchase while crowdsale be live only .
forward ether receive to refund vault and generate tokens for purchaser .
close sale and allocate bounty and team tokens .
reassign leon token to the subsequent ico smart contract .
add address to whitelist .
remove address from whitelist .
check if an address be whitelisted .
check token balance in this contract .
function to release tokens to beneficiary address .
change the beneficary address .
this method can be use to extract tokens mistakenly send to this contract .
transfer tokens from one address to another .
function to mint tokens .
true if the transaction can buy tokens within cap nonzero .
low level token purchase function .
true if crowdsale event have end limit have not be reach .
"if weiamountraised be over tier thresholds , then upgrade wink per eth ."
override this method to have a way to add business logic to your crowdsale when buy .
constructor function .
low level token purchase function .
"preico 1 eth 4 , 000 tokens - - limit 0 , 10 eth 1 stage 1 eth 3 , 000 tokens - - limit 0 , 10 eth 2 stage 1 eth 2 , 500 tokens - - limit 0 , 10 eth 3 stage 1 eth 2 , 000 tokens - - limit 0 , 10 eth 4 stage 1 eth 1 , 750 tokens - - limit 0 , 10 eth 5 stage 1 eth 1 , 500 tokens - - limit 0 , 10 eth ."
"total supply tokens for periods preico 1 , 000 , 000 tokens 1 stage 7 , 000 , 000 tokens 2 stage 13 , 000 , 000 tokens 3 stage 19 , 000 , 000 tokens 4 stage 25 , 000 , 000 tokens 5 stage 30 , 000 , 000 tokens ."
modifier to check transaction initiator be only owner .
transfer tokens to an address give by sender .
"transfer tokens from one address to another , for erc20 ."
function to check the amount of tokens that an owner have allow a spender to recieve from owner .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
finalize the crowdsale .
failsafe drain .
ownership can be transfer to provided newowner .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
to handle erc20 short address attack .
to enable transfer of tokens .
check if the address be pass belong to a contract .
check balance of give account address .
approve should be call when allow _spender 0 .
override to extend the way in which ether be convert to tokens .
reverts if not in crowdsale time range .
low level token purchase * * * do not override .
validation of an incoming purchase .
allow pre-approved user to take ownership of a token .
total the total supply of tokens .
owner initates the transfer of the token to another account .
creates a new library with the give language and name .
creates a new library with the give language and name and founder address .
creates a new library with the give language and name and owner address and starting price .
returns all the relevant information about a specific library .
_price the current price of token .
_nextprice the next price of token .
_founder the address of library founder .
_nextprice the next price .
_devcut the developer 's cut .
for query founder cut which be leave in the contract by purchase .
this function withdraw all of developer 's cut which be leave in the contract by purchase .
this function withdraw select amount of developer 's cut which be leave in the contract by purchase .
this function withdraw select amount of developer 's cut which be leave in the contract by purchase .
purchase a library directly from the contract for the calculated price which ensure that the owner get a profit .
this method must never be call by smart contract code .
this method must never be call by smart contract code .
assigns a new address to act a the owner .
assigns a new address to act a the founder of library to let him withdraw collect fund of his library .
bool the result of check .
bool the result of validation .
function to create a new library .
bool the result of validation .
assigns ownership of a specific library to an address .
access modifier for owner functionality .
access modifier for founder of library .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
balance the number of tokens own by owner .
required for erc-721 compliance .
required for erc-721 compliance .
"not interesting , safe math function ."
add holder addr into array .
frozen or unfrozen account .
lockup account till the date .
get the cuurent ss holder count .
get the current ss holder address .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
"internal transfer , only can be call by this contract ."
transfer token for a specified address .
transfer tokens from one address to another .
set allowance for other address .
destroy tokens .
destroy tokens from other account .
approves and then call the receive contract .
anybody can burn a specific amount of their tokens .
owner can burn a specific amount of tokens of other token holders .
burns a specific amount of tokens of a token holder .
transfer token for a specified address with pause feature for owner .
transfer tokens from one address to another with pause feature for owner .
sets the backend address for automated operations .
allows the function to be call only by the owner and backend .
add wallet to whitelist .
update additional data for whitelisted wallet .
remove wallet from whitelist .
check the specified wallet whether it be in the whitelist .
get the checksum of additional data for the specify whitelisted wallet .
get the creation timestamp for the specify whitelisted wallet .
function for sell tokens .
function for fund withdrawal .
function for manual token assignment ( token transfer from ico to request wallet ) .
add new investment to the ico investments storage .
"function to return money to one customer , if mincap have not be reach ."
allows the current owner to transfer control of the token contract from ico to a newowner .
owner ca n't unpause the crowdsale before call init ( ) .
owner can change the exchange rate before ico begin .
_setcooldowntime : set new cooldown time .
_isvalidskin : whether an account can mix use these skin .
mixing auto .
"get mix result , return the resulted skin id ."
put asset on sale .
allows the current owner to transfer control of the contract to a newceo .
withdraw an sale order .
buy skin in market .
compute the marketcut .
create base skin for sell .
donate a skin to player .
recycle bin .
bleach some attribute .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
transfer token for a specified address method override to support freeze account .
transfer tokens from one address to another .
checks if an address be frozen .
freeze an account - frozen account be not allow to transfer .
thaw an account - un-freeze a previously frozen account .
unfroze tokens if some leave unsold from ico .
if soft cap be not reach - participant can ask ethers back .
for info .
count tokens i could buy now .
override token creation to integrate with mywish token .
allowed to only contract onwer .
should be perform only by root contract owner .
number of symbols .
asset existance .
asset decimals .
asset name .
asset description .
asset reissuability .
asset owner address .
owner right availability .
owner right availability .
asset total supply .
holder balance .
holder balance .
holder address .
should be perform by a contract owner or it co-owners .
should be perform by a contract owner or it co-owners .
holder id .
holder id .
trust existance .
holder to spender allowance .
holder to spender allowance .
emits error event with specify error message .
emits error if call not by asset owner .
"function be final , and must not be override ."
"function be virtual , and mean to be overridden ."
"function be virtual , and mean to be overridden ."
"function be virtual , and mean to be overridden ."
emits erc20 transfer event on this contract .
emits erc20 approval event on this contract .
only asset implementation contract assign to sender be allow to call .
only platform be allow to call .
asset implementation contract address .
asset implementation contract address .
asset implementation contract address .
freeze-time start .
only current asset owner be allow to call .
asset implementation contract .
asset total supply .
holder balance .
holder to spender allowance .
asset decimals .
"pre-ico sale start on 31 of march , end on 06 april 2018 1st ."
allows the current owner to transfer control of the contract to a newowner .
modifier avoid short address attack .
token burn function to be call at the time of token swap .
function be call when the buy function be invoke only after the pre sale duration and return the current discount in percentage .
transfer token for a specified address .
transfer tokens from one address to another .
modifier to allow action only when the contract is pause .
result - the hash of the string .
"( active , transferownerto , data , owner ) - a tuple contain the active flag , transfer status , data field and owner of an entity ."
"( entityactive , connectionentityactive , connectionactive , data , direction , expiration ) - tupple contain the entity active and the connection field ."
public function .
"isuserentity - true if the entity be create with createuser ( ) , false if the entity be create use createvirtualentity ( ) ."
internal function .
returns a new unique deterministic address that have not be use before .
emits an event if an entity resolution take place .
returns the correct entity address resolve base on entityofuser map .
returns the correct entity address resolve base on entityofuser map and also revert if the resolve if it be own by the message sender sender .
external function .
adds two number and return result throw in case an overflow occur .
creates a new user entity and a connection in one transaction .
creates a new virtual entity that be assign to a unique address .
creates a new virtual entity and a connection in one transaction .
edits data or active boolean of an entity that the msg sender be an owner of .
creates a request to transfer the ownership of an entity which must be accept .
accepts a request to transfer the ownership of an entity .
edits a connection to another entity .
donate a skin to player .
bleach some attribute .
queries the balance of _owner at a specific _blocknumber .
total amount of tokens at a specific _blocknumber .
burns _amount tokens from _owner .
helper function to return a min betwen the two uints .
send _amount tokens to _to from msg . sender .
send _amount tokens to _to from _from on the condition it be approve by _from .
the balance of _owner at the current block .
this function make it easy to read the allowed map .
buying ethereum for tokens .
set allowance for other address .
will withdraw the whole allowance ; .
based on division down round .
function to clean up the state and move not allocate tokens to custody .
only accessible from the constructor .
call to clean up the contract .
function to alloc tokens to a community member .
call to clean up the contract after all tokens be assign .
will withdraw the whole allowance ; .
based on division down round .
token burn function to be call at the time of token swap .
approve function to adjust allowance to investment of each individual investor .
bool be true be _investor be approve .
"address of the referral , return 0x0 if there be none ."
boolean of it be or be n't an contract address .
approve function to adjust allowance to investment of each individual investor .
"address of the referral , return 0x0 if there be none ."
require have ownership of the two presale contract .
initiate from signals ( pass the ownership to a oracle to handle a script be recommend ) .
function to clean up the state and move not allocate tokens to custody .
"must be call after crowdsale end , to do some extra finalization work ."
true if the transaction can buy tokens .
buy in function to be call from the fallback function .
uint256 of how many tokens can one get .
it 's separate so it do n't have to run in constructor .
function to do set or adjust the starttime - not mandatory but good for future start .
it 's mandatory to finalize ( ) .
adjust finalization to transfer token ownership to the fund hold address for further use .
clean up function to get the contract selfdestructed - optional .
set token control info .
valid duration block .
add token function .
to mint tokens .
to burn tokens .
"true if tokens be create successfully , false otherwise ."
"this modifier check whether the contract should be in a locked or unlocked state , then act and update accordingly if necessary ."
burntoken burn tokensamount for sender balance .
transfer fund between two address that be not the current msg . sender .
adds an approval for the specified account to spend money of the message sender up to the defined limit .
gets the current allowance that have be approve for the specified spender of the owner address .
gets the balance of a specified account .
transfer the balance from owner 's account to another account .
returns auction info for an nft on auction .
updates lastsaleprice if seller be the nft contract .
owner be the only address that can call a function with this modifier .
owner can step down and assign some other address to this role .
transfer token for a specified address .
transfer tokens from one address to another .
transfer token for a specified address .
approves another address to claim for the ownership of the give token id .
calculate the final sale price after the owner-cut have be calculate .
calculate the price increase base on the current purchase price .
gets the current ( or default ) price of a day .
sets the nickname for an account address .
mint token function .
internal function to clear current approval and transfer the ownership of a give token id .
internal function to clear current approval of a give token id .
internal function to add a token id to the list of a give address .
creates the initial day tokens available ( this be the mint process ) .
assigns initial days to owners during mint period .
claim a day for your very own ! .
allows someone to send ether and obtain the token .
transfer tokens from one address to another .
return ubetcheck information by supply beneficiary adddress .
register ubetcheck to the chain .
check if contract be open .
shoot the previous robin hood ! .
map ( address uint256 ) public payments ; add dividend to pool .
get how much tokens you get for amount bah area calculation result in a quadratic equation i hate square root in solidity .
"buy tokens , only be call from robinhood ."
sell all your tokens to claim your dividend .
"square root function , take from ethereum stack exchange ."
check if owner or if contract be open .
functions only for owner ( developer ) .
developer ( owner ) can open game .
developer can change fee .
developer change amount price to add tower .
add tower .
gettimer of towerid to see how much time ( in second ) you need to win that tower .
internal payout function .
"takeprize , can be call by everyone if contract be open ."
"if overflow happen we dicrease the weiraised because , those will be return to investor and it be not weiraised ."
if the last tokens where sell and buyer send more ethers than require we save the overflow data .
"this be rip of from zeppelin contract , because zeppelin finalzablecrowdsale contract extend timedcrowdsale contract and here it be not the case ."
a add to b .
a subtract b .
a multiply by b .
a divide by b .
emits erc20 transfer event on this contract .
emits erc20 approval event on this contract .
only platform be allow to call .
only current asset owner be allow to call .
asset implementation contract .
asset total supply .
holder balance .
holder to spender allowance .
asset decimals .
allow for the withdrawal of ecr20 tokens and ether ! must be the intended recipient after the excavation date .
check if it be safe to add two number .
check if it be safe to subtract two number .
only old controller can call setcontrolleraddress .
_amountcents can be negative return index in user array .
approves and then call the receive contract .
each mntp token holder get a gold reward a a percent of all reward proportional to his mntp token stake .
migration reward decrease linearly .
there be no way to revert that .
there be no way to revert that .
used to send reward ) .
this be an emergency function that can be call by creator only .
access methods .
this method be call when migration to goldmint 's blockchain process be start . . .
that do n't mean that you cant migrate from ethereum - goldmint blockchain that mean that you will get no reward .
call this to migrate your mntp tokens to goldmint mnt ( this be one-way only ) _gmaddress be something like that - bts7yrxckbjkxho57rcbqye3neiprwxxesw3hxs5ckrnft8x7mdgi .
allow transfer if the owner provide an allowance .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
an internal method that create a new lambo and store it .
an internal method that tune an exist lambo .
any c-level can fix how many second per block be currently observe .
checks if a give address be the current owner of a particular lambo .
checks if a give address currently have transferapproval for a particular lambo .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
returns the number of lambos own by a specific address .
transfers a lambo to another address .
grant another address the right to transfer a specific lambo via transferfrom ( ) .
"transfer a lambo own by another address , for which the call address have previously be grant transfer approval by the owner ."
returns the total number of lambos currently in existence .
returns a list of all lambo ids assign to an address .
adds an sale to the list of open sales .
cancels a sale unconditionally .
computes the price and transfer winnings .
removes a sale from the list of open sales .
returns true if the nft be on sale .
adds an affiliate to the list .
removes a affiliate from the list .
computes the price and transfer winnings .
creates and begin a new sale .
"bids on a sale , complete the sale and transfer ownership of the nft if enough ether be supply ."
"bids on a sale , complete the sale and transfer ownership of the nft if enough ether be supply ."
this be a state-modifying function that can be call while the contract be pause .
cancels a sale when the contract be pause .
returns sale info for an nft on sale .
returns the current price of a sale .
creates and begin a new sale .
returns affiliate info for an affiliate code .
removes affiliate .
calls the nft contract with the tuned attribute .
"remove all ether from the contract , which be the owner 's cut as well a any ether send directly to the contract address ."
the sale contract variables be define in etherlambosbase to allow u to refer to them in etherlambosownership to prevent accidental transfer .
put a lambo up for sale .
transfers the balance of the marketplace contract to the etherlamboscore contract .
we can build lambos .
we can tune lambos .
returns all the relevant information about a specific lambo .
returns all the relevant information about a specific lambo .
returns all the relevant information about a specific lambo .
this be public rather than external so we can call super . unpause .
assigns ownership of a specific property to an address .
an internal method that create a new property and store it .
computing height of a build with respect to city progression .
convenience function to see if this build have room for a unit .
this internal function skip all validation check .
update allow for set a build privacy .
update allow for set the data associate to a property .
checks if a give address be the current owner of a particular property .
checks if a give address currently have transferapproval for a particular property .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
transfers a property own by this contract to the specify address .
returns the number of properties own by a specific address .
transfers a property to another address .
grant another address the right to transfer a specific property via transferfrom ( ) .
"transfer a property own by another address , for which the call address have previously be grant transfer approval by the owner ."
returns the total number of properties currently in existence .
returns the address currently assign ownership of a give property .
returns a list of all property ids assign to an address .
assigns a new address to act a the cfo .
sets the reference to the sale auction .
put a property up for auction .
transfers the balance of the sale auction contract to the aethercore contract .
units can be contructed within public and owned build .
creation of unit properties .
creation of build properties .
creates a new property with the give detail and create an auction for it .
updates the minimum payment require for call createunit ( ) .
update world progression factor allow for build to grow taller a the city expand .
set property data update flag .
"computes the next auction start price , give the average of the past 5 price + 50 ."
"used to mark the smart contract a upgraded , in case there be a serious break bug ."
returns all the relevant information about a specific property .
override unpause so it require all external contract address to be set before contract can be unpaused .
called by any c-level role to pause the contract .
"owner can transfer token even stop , ."
user be try to flush the toilet .
"if manual flush attempt , the user have a chance to flush their own poo ."
"if 2 hours elapse since last purchase , increase chance of win pot ."
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create poo .
check for token ownership .
assigns ownership of a specific poo to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new poo with the give name .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
change need for refactoring enchant items have a recommend bid which increase your likelihood of obtain the item .
true if investors can buy at the moment .
true if crowdsale event have end .
true if investors can buy at the moment .
sets bonuses for usd amount .
overrided buytokens method of parent crowdsale contract to provide bonus by change and restore rate variable .
computes overall bonus base on time of contribution and amount of contribution .
computes bonus base on time of contribution relative to the begin of crowdsale .
computes bonus base on amount of contribution .
sets bout to ether rate .
allows to adjust the crowdsale end time .
sets the wallet to forward eth collected fund .
sets the wallet to hold unsold tokens at the end of ico .
creates token contract for ico .
finalizes the crowdsale .
helper to pause boutoken .
helper to unpause boutoken .
allocates tokens from presale to a special wallet .
transfer presaled tokens even on pause token contract .
allocates tokens for investors that contribute from website .
recover tokens send in error .
create the token to be sell .
override this method to have a way to add business logic to your crowdsale when buy .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
allow transfer of token to new owner .
burns a specific amount of tokens .
low level token purchase function .
true if pre-ico crowdsale event have end .
true if ico crowdsale event have end .
a public method that create a new asset and store it .
get a list of ship explore our universe .
explore a sector with a defined ship .
exploration be complete and 5 objects maximum will be drop during one exploration .
exploration time : the time it take to explore a sector be dependent on the sector volume along with the ship s range and speed .
create the token to be sell .
override this method to have a way to add business logic to your crowdsale when buy .
true if the transaction can buy tokens .
low level token purchase function .
true if pre-ico crowdsale event have end .
true if ico crowdsale event have end .
initializes contract with initial supply tokens to the creator of the contract .
this be a constructor function which mean the following function name have to match the contract name declare above .
throws if call by any account other than the owner .
allows the owner to change the token exchange rate .
convenience show balance .
burn tokens if need to .
send eth with affilate code .
allows owner to create tokens without eth .
change owner vault .
change periods .
change saleon .
no more god like .
allows anyone to create tokens by deposit ether .
allows the owner to send the fund to the vault .
fix for the erc20 short address attack .
modifier to allow token creation only when the hardcap have not be reach .
transfer token for a specified address .
transfer tokens from one address to another .
transfer tokens from one address to another accord to off exchange agreements .
gets the balance of the specified address .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens than an owner allow to a spender .
add bonus to pre-sale period .
get the attribute ( equipments + stats ) of a hero from it gene .
"calculate the power of a hero from it gene , it calculate the equipment power , stats power , and super hero boost ."
calculate the power of a dungeon floor .
calculate the sum of top 5 heroes power a player own .
set the previously temp store upgraded hero genes .
set the address of the dungeon token contract .
set the address of the hero token contract .
set the address of the secret dungeon challenge formula contract .
set the address of the secret hero train formula contract .
updates the fee for call recruithero ( ) .
updates the fee contribution multiplier require for call transport ( ) .
updates the novice dungeon id .
updates the percentage portion of consolation reward a player get when meet the faith requirement .
updates the consolation reward percentage .
updates the challenge cooldown time .
"remove the ownership by set the owner address to null , after call this function , all onlyowner function will be be able to be call by anyone anymore , the contract will achieve truly decentralisation ."
updates the fee contribution multiplier require for call trainx ( ) .
updates the fee contribution multiplier require for call trainequipment ( ) .
internal function to set the previously temp store upgraded hero genes .
throws if _dungeonid be not create yet .
recruit a new novice hero with no attribute ( gene 0 ) .
the main external function to call when a player transport to another dungeon .
internal function to assign location of a player .
"throws if dungeon status do not allow transportation , also check for dungeon existence ."
throws if player do recruit first hero yet .
"the main external function to call when a player challenge a dungeon , it determine whether if the player successfully challenge the current floor ."
compute the remain time for which the hero can perform a challenge again .
split the challenge function into multiple part because of stack too deep error .
split the challenge function into multiple part because of stack too deep error .
"throws if dungeon status do not allow challenge , also check for dungeon existence ."
"throws if player do not own the hero , or the hero be still in cooldown period , and no pending power update ."
"the external function to call when a hero train with a dungeon , it determine whether whether a train be successfully , and the result genes ."
"the external function to call when a hero train a particular equipment with a dungeon , it determine whether whether a train be successfully , and the result genes ."
"an internal function of a hero train with dungeon , it determine whether whether a train be successfully , and the result genes ."
split the _train function into multiple part because of stack too deep error .
"determine if the hero train be successful or not , and the result genes and power ."
calculate and assign the appropriate faith value to the player .
"throws if dungeon status do not allow train , also check for dungeon existence ."
"throws if player do not own the hero , and no pending power update ."
the external function to get all the game settings in one call .
the external function to get all the relevant information about a specific player by it address .
the external function to get all the relevant information about a specific dungeon by it id .
"split floor relate detail out of getdungeondetails , just to avoid stack too deep error ."
the external function to get all the relevant information about a specific hero by it id .
since the dungeontoken contract be re-deployed due to optimization .
we need to migrate all player location from beta token contract to version 1 .
returns the address currently assign ownership of a give token .
returns the approved address of a give token .
get an array of ids of each token that an user own .
external function to transfer a token to another address .
grant another address the right to transfer a specific kitty via transferfrom ( ) .
"transfer a kitty own by another address , for which the call address have previously be grant transfer approval by the owner ."
assigns ownership of a specific token to an address .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
throws if _dungeonid be not create yet .
checks if a give address be the current owner of a particular token .
returns the total number of tokens currently in existence .
"the external function that create a new dungeon and store it , only contract owners can create new token , and will be restrict by the dungeon_creation_limit ."
"the external function to set dungeon status by it id , refer to dungeonstructs for more information about dungeon status ."
"the external function to add additional dungeon reward by it id , only contract owners can alter dungeon state ."
"the external function to add another dungeon floor by it id , only contract owners can alter dungeon state ."
since the dungeontoken contract be re-deployed due to optimization .
"bids on an open auction , complete the auction and transfer ownership of the token if enough ether be supply ."
this be a state-modifying function that can be call while the contract be pause .
cancels an auction when the contract be pause .
throws if call by any account other than the owner or anotherowner .
"remove all ether from the contract , which be the owner 's cut as well a any ether send directly to the contract address ."
returns auction info for an token on auction .
returns the current price of an auction .
creates and begin a new auction .
adds an auction to the list of open auction .
computes the price and transfer winnings .
cancels an auction unconditionally .
removes an auction from the list of open auction .
returns current price of an token on auction .
returns true if the token be on auction .
allows the current owner to assign another owner .
creates and begin a new auction .
allows the current owner to assign another owner .
returns the number of tokens own by a specific address .
returns the total number of tokens currently in existence .
"an external function that create a new hero and store it , only contract owners can create new token ."
"the external function to set the hero genes by it id , only contract owners can alter hero state ."
set the cooldownstarttime for the give hero .
since the herotoken contract be re-deployed due to optimization .
this be a constructor function which mean the following function name have to match the contract name declare above .
get price of the current tier .
get current tier id .
get available amount of tokens .
get specification of all tiers .
check whether crowdsale be currently active .
check whether sale end be schedule .
check whether crowdsale have finish .
contribute eth in exchange for tokens .
register contribution with give id .
schedule price tier .
schedule crowdsale end .
burns all tokens which have not be sell .
calculate amount of onl tokens receive for give eth value .
find close tier id to give block .
function to stop mint new tokens .
true if the transaction can buy tokens .
current time .
time-based bonus rate .
change the state from presale to public sale .
true if the crowdsale have raise enough money to be successful .
change start and endtime for testing purpose .
change the current token price per ether .
allocated tokens transfer to advisory team .
allocated tokens transfer to market place incentive team .
allocated tokens transfer to founder key employee team .
burn the tokens .
this be a constructor function which mean the following function name have to match the contract name declare above .
0 population 1 food 2 wood 3 stone 4 iron 5 gold 6 woodwork 7 mason 8 blacksmith 9 goldforge 10 spirit 11 prestige .
initiate user when first visit .
"build build at location ( posx , posy ) ."
expand map in direction x .
expand map in direction y .
claim resources .
get the total supply .
buy an emoji .
changing the price by the owner of the emoji .
withdraw all balance .
get the balance of a user .
get the username of a user .
set the username of sender user .
get the owner of an emoji .
get the codepoints of an emoji .
get the name of an emoji .
get the price of an emoji .
ceate a new emoji for the first time .
"edit emoji information to maintain confirm for unicode standard , we ca n't change the price or the owner ."
public setters area .
token purchase .
"if crowdsale be unsuccessful , investors can claim refund here ."
issue token base on ether receive .
compute the amount of suc token that can be purchase .
"true if sale have start , false otherwise ."
"true if sale have end , false otherwise ."
true if sale be due when the last phase be finish .
true if the hard cap be reach .
start the token sale .
triggers unsold tokens to be issue to target address .
returns the current price .
compute the amount of tra token that can be purchase .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
check if goal be reach .
withdraw the fund .
donate a skin to player .
bleach some attribute .
total supply .
get the token balance for account tokenowner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
verify that the gas price be low than 50 gwei .
low level token purchase function .
true if the transaction can buy tokens .
anyone can call this method to verify whether the bttstoken contract at the specified address be deploy use this factory .
any account can call this method to deploy a new bttstoken contract .
number of deployed tokens .
factory owner can transfer out any accidentally send erc20 tokens .
admin trasfer .
"internal transfer , only can be call by this contract ."
permanently destroy tokens .
"same a burn without reduce cap , allow re-minting ."
only to be use in case tokens be distribute to allow setsale to issue more in case cap would be hit .
managers only get a cut of floor sales .
attempt to send the fund immediately .
transfer tokens .
a contract attempt to get tokens .
set allowance for another address .
set allowance for another address and call a function .
destroy tokens .
destroy tokens from another account .
generates the message to sign give the output destination address and amount .
"send the give amount of eth to the give destination use the two triplets ( v1 , r1 , s1 ) and ( v2 , r2 , s2 ) a signatures ."
"confirm that the two signature triplets ( v1 , r1 , s1 ) and ( v2 , r2 , s2 ) both authorize a spend of this contract 's fund to the give destination address ."
generate the the unsigned message ( in bytes32 ) that each owner 's .
confirm the pair of address a two distinct owners of this contract .
construct the byte representation of the ascii-encoded hashed message write in hex .
convert from byte to ascii of 0-f http : / / www . unicode . org / chart / pdf / u0000 . pdf .
computes owner 's cut of a sale .
"compara two number , and return the big one ."
"compara two number , and return the big one ."
creates a new asset with the give field .
checks the balance of a certain address .
allows the owner to unfreeze the contract .
overrides the original erc20token implementation by add whennotfrozen modifier .
send _value tokens to _to from _from if _from have approve the process .
allows another contract to spend some tokens on your behalf .
the function initialize the bundle of account with a release date .
add new account with locked token balance to the specify bundle type .
allows an account to be release if it meet the time constraints .
returns the total locked tokens .
allows core team account tokens to be release .
allows advisors account tokens to be release .
transfers tokens from one address to another .
access control modifier that allow only whitelisted address to call the method .
internal function that set whitelist status in batch .
public function that allow the owner to whitelist multiple entries .
public function that allow the owner to blacklist multiple entries .
changes the beneficiary of the donationraiser .
sets converstion rate of 1 eth to eps .
allow owner to collect balance of contract during donation period .
send _value tokens to _to from _from if _from have approve the process .
allows another contract to spend some tokens on your behalf .
shows the number of tokens approve by _owner that be allow to be transfer by _spender .
the newowner finish the ownership transfer process by accept the ownership .
modifier make methods callable only when the contract be not frozen .
allows the owner to freeze the contract .
transfer all ether hold by the contract to the address specify by owner .
allow change the individual cap .
low level token purchase function .
vesting logic .
totalsupply be set via the mint process .
member function to mint tokens to a beneficiary .
member function that can be call to release vested tokens periodically .
unpausetoken token for transfer .
buy landmark or ambassador from contract for calculated price that ensure that : previous owner get a profit specific ambassador get his / her fee every owner of landmark in an ambassador group get a cut .
owner can change price .
transfer 0 . 3 .
erc721 methods .
third-party initiate transfer of token from address _from to address _to .
for check approval of transfer for address _to .
for create token .
check for token ownership .
assigns ownership of a specific token to an address .
returns all the relevant information about a specific token .
this method must never be call by smart contract code .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
for query balance of a particular account .
for query owner of token .
allow pre-approved user to take ownership of a token .
for query totalsupply of token .
owner initates the transfer of the token to another account .
sets the resolver record for a name in ens .
configures a domain for sale .
unlists a domain .
returns information about a subdomain .
registers a subdomain .
owner return the address of the account that control a domain .
transfers internal control of a name to a new account .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
burns a specific amount of tokens .
allows the current owner to transfer control of the contract to a newowner .
allow token holders to send tokens to multiple address from one single transaction .
function to mint tokens .
ncore tokens be not transferrable .
end the campaign after deadline .
overriding standardtoken function that let people transfer / approve tokens .
create base skin for sell .
our daemon will clear daily summon number .
set mix formula contract address .
"setprepaidfee : set advance amount , only owner can call this ."
multi transfer token for a specified address .
transfer token for a specified address .
approves and then call the receive contract .
transfers tokens hold by timelock to beneficiary .
low level token purchase function .
constrctor function .
"vault finalization task , call when owner call finalize ( ) ."
true if the transaction can buy tokens .
current time .
start public sale .
it will call when crowdsale unsuccessful if crowdsale complete .
change starttime .
change edntime .
change token price per 1 eth .
change wallet address .
funtion : transfer owner 's authority .
funtion : transfer tokens .
proxypayment ( ) allow the caller to send ether to the pretokensale and have the tokens create in an address of their choose .
"notifies the controller about a transfer , for this pretokensale all transfer be allow by default and no extra notifications be need ."
"notifies the controller about an approval , for this pretokensale all approvals be allow by default and no extra notifications be need ."
dopayment ( ) be an internal function that send the ether that this contract receive to the vault and create tokens in the address of the _owner assume the pretokensale be still accept fund .
internal function to determine if an address be a contract .
finalizesale ( ) end the pretokensale .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
pauses the contribution if there be any issue .
resumes the contribution .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
call this method to extract the tokens .
overrideable for easy test .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
function to approve the transfer of the tokens and to call another contract in one step .
allows to transfer out the balance of arbitrary erc20 tokens from the contract .
"allows to transfer out the ether balance that be force into this contract , e . g ."
accept eth .
verify miner have calculte the rat correctly .
calculate each order 's fee or lrc reward .
fix for the erc20 short address attack .
this function must be call by token holder in case of crowdsale fail .
overridder modifier to allow exceptions for pause for a give address .
modifier create to prevent short address attack problems .
override transfer method to include the onlypayloadsize check modifier .
override transferfrom method to include the onlypayloadsize check modifier .
override approve method to include the onlypayloadsize check modifier .
override increaseapproval method to include the onlypayloadsize check modifier .
override decreaseapproval method to include the onlypayloadsize check modifier .
override mint method to include the onlypayloadsize check modifier .
method to updated allowedtransfers for an address .
overridden methods .
true if investors can buy at the moment .
allows owner to add / remove whitelistingagents .
allows the current owner to update contribution limit .
allows the current owner to change the eth to token generation rate .
allows the current owner to change the crowdsale cap .
allows the current owner to change the required minimum contribution .
function to perform mint to predefined beneficiaries once crowdsale have start can be call by only once and by owner only .
allows the current owner to transfer token control back to contract owner .
transfer tokens from other address .
destroy tokens .
destroy tokens from other account .
for push pre-ico record .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
withdraw tokens only after crowdsale end .
withdraw tokens or other users .
validation of an incoming purchase .
source of tokens .
executed when a purchase have be validate and be ready to be execute .
override to extend the way in which ether be convert to tokens .
"internal transfer , only can be call by this contract ."
function to transfer tokens .
function to transfer tokens from other address .
function set allowance for other address .
function to destroy tokens .
destroy tokens from other ccount .
"internal transfer , only can be call by this contract ."
function to create more coin and send it to target .
function to prevent allow target from send receive tokens .
override to extend the way in which ether be convert to tokens .
helper method that allow owner to unpause withdrawls for any address .
helper method that allow anyone to check amount that be available for withdrawl by a give address .
helper method that allow a beneficiary to withdraw tokens that have vest for their address .
helper method that allow owner to mark allocation a do .
helper method that allow owner to pause withdrawls for any address .
transfer some fund to the target investment address .
"execute a staticcall ( introduce with ethereum metropolis , non-state - modify external call ) ."
"keccak256 order hash , part one ."
"keccak256 order hash , part two ."
"hash an order , return the hash that a client must sign , include the standard message prefix ."
approve an order and optionally mark it for orderbook inclusion .
"cancel an order , prevent it from be match ."
"atomically match two order , ensure validity of the match , and execute all associate state transition ."
"call hashorder - solidity abi encode limitation workaround , hopefully temporary ."
mask must be 1 / 8th the size of the byte array .
"arrays must be of equal length , otherwise will return false ."
can be call by the user only .
receive tokens and generate a log event .
owner only .
"same functionality a delegateproxy , just assert the return value ."
true if the transaction can buy tokens .
true if crowdsale event have end .
low level token purchase function .
allows the owner to set the token contract address .
retrieves individual investor token balance .
allows owner to initiate the claim phase .
allows owner to finalize contract ( only after investor claimend time ) .
allows the owner to claim all unclaimed investor tokens .
facilitates the assignment of investor address and amount ( only before claim phase start ) .
allows owner to claim future use tokens in favor of fusebeneficiary account .
allows presale investors to claim tokens .
for special event .
approves and then call the receive contract .
burns a specific token .
internal function to add a token id to the list of a give address .
internal function to remove a token id from the list of a give address .
mint token function .
count number of bytes require to represent an unsigned integer .
frees value sub-tokens ( e . g .
frees up to value sub-tokens .
frees value sub-tokens own by address from .
frees up to value sub-tokens own by address from .
spec : get the account balance of another account with address owner .
spec : send value amount of tokens to address to .
spec : send value amount of tokens from address from to address to .
"spec : allow spender to withdraw from your account , multiple time , up to the value amount ."
spec : returns the amount which spender be still allow to withdraw from owner .
totalsupply give the number of tokens currently in existence .
creates a child contract that can only be destroy by this contract .
mints value new sub-tokens ( e . g .
destroys value child contract and update s_tail .
frees up to value sub-tokens own by address from .
totalsupply be the number of word we have in storage .
mints value new sub-tokens ( e . g .
frees value sub-tokens ( e . g .
frees up to value sub-tokens .
frees value sub-tokens own by address from .
prvent from the erc20 short address attack .
allows someone to send ether and obtain the token .
divident distributions .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create gameitem .
check for token ownership .
this function can be use by the owner of a gameitem item to modify the price of it gameitem item .
assigns ownership of a specific gameitem to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new promo game item with the give name , with give _price and assign it to an address ."
creates a new gameitem with the give name .
returns all the relevant information about a specific gameitem .
required for erc-721 compliance .
overridden transfer method to facilitate emergency pause .
overridden transferfrom method to facilitate emergency pause .
allows owner to finalize contract .
facilitates the assignment of investor address and amount ( only before contract be finalize ) .
sets the resolver record for a name in ens .
configures a domain for sale .
"configures a domain , optionally transfer it to a new owner ."
sets the transfer address of a domain for after an ens update .
unlists a domain .
returns information about a subdomain .
registers a subdomain .
upgrades the domain to a new registrar .
"stops the registrar , disable configure of new domains ."
sets the address where domains be migrate to .
returns the address that own the specified node .
migrates the domain to a new registrar .
returns the address of the resolver for the specified node .
"returns the ttl of a node , and any record associate with it ."
transfers ownership of a node to a new address .
"transfers ownership of a subnode sha3 ( node , label ) to a new address ."
sets the resolver address for the specified node .
sets the ttl for the specified node .
owner return the address of the account that control a domain .
transfers internal control of a name to a new account .
total number of tokens initially .
remain number of tokens .
setup the crowdsale parameters .
utility to help seek fo specyfied document .
utility to help seek fo specyfied document .
utility to help seek fo specyfied document .
to update document : 1 - add new version a ordinary document 2 - call this function to link old version with update .
adds new document - only owner and if not retire .
retire if new version will be available .
gets document with id .
gets base url so gui will know where to seek for storage .
function to mint tokens .
main token buy function .
emergency stop crowdsale .
change admin address .
change founder address .
withdraw foreign tokens .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"substracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
practicing safe math ( division suck ) . . . . . .
set token control info .
valid duration block .
add token function .
transfer token for a specified address .
gets the balance of the specified address .
function to check the amount of tokens that an owner allow to a spender .
"monday , 5 march 2018 , 00 : 00 : 00 gmt - sunday , 25 march 2018 , 23 : 59 : 59 gmt ."
"internal transfer , only can be call by this contract ."
buy tokens from contract by send ether .
sell amount tokens to contract .
destroy tokens .
destroy tokens from other account .
"internal transfer , only can be call by this contract ."
modifier function to prepend to later function in this contract in order to redner them only useable by the etheraffle address .
housekeeping function in the event this contract be no longer need .
modifier function to prepend to later function render the method only callable if the crowdsale be run .
modifier function to prepend to later function render the method only callable if the crowdsale be not run .
"redeem bonus lot : this function can not be call until the crowdsale be over , nor after the withdraw period ."
"should crowdsale be cancel for any reason once it have begin , any ether be refund to the purchaser by call this funcion ."
function callable only by etheraffle 's multi-sig wallet .
function callable only by etheraffle 's multi-sig wallet .
toggle crowdsale status .
this function be what allow this contract to receive erc223 compliant tokens .
allows someone to send ether and obtain the token .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create whale .
check for token ownership .
assigns ownership of a specific whale to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new promo whale with the give name , with give _price and assign it to an address ."
creates a new whale with the give name .
returns all the relevant information about a specific whale .
required for erc-721 compliance .
freeze _frozenamount of tokens hold by _target with periodicreleaselock .
transfers tokens hold by periodicreleaselock to beneficiary .
transfers tokens of unknown holders to token contract owner .
public getters for private state variables .
allow the owner to withdraw all the tokens remain after the crowdsale be over .
allow the owner to withdraw all ether from the contract after the crowdsale be over .
this function be intentionally internal because we do not check condition here .
get number of real contributors .
this function for transfer tokens one by one .
owner can transfer out any accidentally send erc20 tokens as long a they be not the sale tokens .
after create sale contract first function should be approveandcall on token contract with this contract a spender and total_tokens_to_distribute for approval this callback function call form token contract after approve on token contract eventually tokensremainingforsale total_tokens_to_distribute .
change default presale date .
change default presale date .
change default sale date .
change default distibution time .
this function add contributor that already make contribution before presale start should be call only after token be transfer to sale contract .
start the crowdsale .
allow the current owner to change the owner of the crowdsale .
calculate how many tokens can be distribute for the give contribution .
true if crowdsale event have end .
function to transfer token back to owner .
function to change rate .
true if the transaction can buy tokens .
true if the admin can send tokens manually .
check token availibility for current phase and max allow token balance .
function to transfer token manually .
check token availibility for current phase and max allow token balance .
low level token purchase function .
token owner can approve for spender to transferfrom ( . . . ) .
send _value amount of tokens from address _from to address _to .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
"internal transfer , only can be call by this contract ."
send _value tokens to _to in behalf of _from .
remove _value tokens from the system irreversibly .
function to distribute tokens to the list of address by the provided amount .
function to collect tokens from the list of address .
function to distribute tokens to the msg . sender .
function that be call when a user or another contract want to transfer fund .
minting required amount of tokens in a loop .
minting extra ( team and community ) tokens .
return ownership to previous owner .
check transfer be allow .
change team tokens holder .
change community tokens holder .
transfer token for a specified address if transfer be open .
transfer tokens from one address to another if transfer be open .
open transfer for everyone or throw .
allow transfer for the give address against global rule .
mint extra token to correspond token and community holders .
increase approve amount to spend .
decrease approve amount to spend .
modifier to make a function callable only when the contract be not pause .
modifier to make a function callable only when the contract be pause .
transfer token for a specified address .
burns a specific amount of tokens .
function to mint tokens .
create the token to be sell .
low level token purchase function .
create the token to be sell .
accepts ether and create new ico tokens .
"function for add discount for concrete buyer , only available for the owner ."
function to remove discount .
public function that calculate the amount in wei for specific number of tokens .
removes discount for concrete buyer .
function that convert wei into tokens .
sets the address to transfer fund .
allow address to buy tokens .
"transfer tokens from owner to specific address , available only for the owner ."
"creates a vest contract that vest it balance of any erc20 token to the _beneficiary , gradually in a linear fashion until _start + _duration ."
transfer tokens from address to owner address .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
transfer tokens from one address to another .
adds or updates contributions .
increase token sell amount .
owner can transfer out any accidentally send caerus tokens .
make sure this function name match the contract name above .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
transfers from one address to another ( need allowance to be call first ) .
approves another address a certain amount of fuel .
gets an address 's fuel allowance .
gets the fuel balance of any address .
releases 1 / 4 of team supply after 6 months .
releases 1 / 4 of team supply after 12 months .
releases 1 / 4 of team supply after 18 months .
releases 1 / 4 of team supply after 24 months .
adds to balance .
removes from balance .
burns a specific amount of tokens .
token api .
transfers amount to address .
get abel address .
set oscar address .
get oscar address .
80 to oscar and 20 to abel .
in case of emergency or fall function .
get all eth ethmined .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
enables the transfer of tokens for everyone .
"assigns the special transfer right , before transfer be enable ."
"removes the special transfer right , before transfer be enable ."
allows to transfer out the balance of arbitrary erc20 tokens from the contract .
"allows to transfer out the ether balance that be force into this contract , e . g ."
allows the current owner to transfer control of the contract to a newowner .
transfer token for a specified address .
requires value to be divisible by creationquantity .
returns the creationquantity .
creates basket tokens in exchange for underlie tokens .
redeems basket token in return for underlie tokens .
tokenaddresses underlying token address .
tokenunits number of token base units require per creation unit .
mints new basket tokens .
burns basket tokens .
look up token info .
owner : withdraw excess fund which do n't belong to basket token holders .
_a win if score 0 and _b win if score 0 .
calculates the current token owner 's payout amount if the token sell .
calculates the payout of each dividend recipient in the event of a share sale .
fetches the number of stock available .
fetches the share ids connect to the give stock .
"proceeds be pay out right away , but the contract might receive unexpected fund ."
calculates the current purchase price for the give stock share .
symbol of this token .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
name of this token .
allows future extensibility ( new card mutations + workshop update ) .
"management function to facilitate future contract extensibility , unlock of ( untradable ) referal bonus card and contract ownership ."
"the powerful schema that will allow the workshop ( crystal ) price to fluctuate base on performance , keep the game fresh evolve over time ! ."
contracts ca n't list card without contact u ( wallet address be unaffected ) .
helper method that allow owner to allocate tokens to an address .
assemble the give address bytecode .
register a new pool and mint it tokens .
transfer give amount of tokens to specify address .
get available amount of tokens in the specified pool .
get lock timestamp of the pool or zero .
set allowance for other address .
supply may be increase at any time and by any amount by mint new tokens and transfer them to a desired address .
supply may be decrease at any time by subtract from a desired address .
approves and then call the receive contract .
returns alloed status .
token metadata .
functions to migrate from previous contract .
this function be execute at initialization and set the owner of the contract .
contract initialisation .
contract initialisation .
return address mayor ; .
convenience is_empty function .
"before call setup , the sender must call approve ( ) on the chi token ."
investor can claim his tokens within two weeks of ico end use this function .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
transfer the balance from owner 's account to another account .
copy from gnosissafe https : / / github . com / gnosis / gnosis-safe - contract / blob / master / contract / gnosissafe . sol .
allows an owner to cancel the process of transfer proxy to new identitymanager .
allows an owner to finalize and completly transfer proxy to new identitymanager .
checks that address a be the first input in msg . data .
creates a new proxy contract for an owner and recovery .
creates a new proxy contract for an owner and recovery and allow an initial forward call which would be to set the registry in our case .
allows a user to transfer control of exist proxy to this contract .
allows a user to forward a call through their proxy .
allows an olderowner to add a new owner instantly .
allows a recoverykey to add a new owner with usertimelock wait time .
allows an owner to remove another owner instantly .
allows an owner to change the recoverykey instantly .
allows an owner to begin process of transfer proxy to new identitymanager .
allows an owner to cancel the process of transfer proxy to new identitymanager .
allows an owner to finalize migration once admintimelock time have pass .
allows a user to forward a call through their proxy .
allows an olderowner to add a new owner instantly .
allows a recoverykey to add a new owner with usertimelock wait time .
allows an owner to remove another owner instantly .
allows an owner to change the recoverykey instantly .
allows an owner to begin process of transfer proxy to new identitymanager .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create girl .
check for token ownership .
assigns ownership of a specific girl to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new girl with the give name .
returns all the relevant information about a specific girl .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
allows someone to send ether and obtain the token .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create car .
check for token ownership .
assigns ownership of a specific car to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new promo car with the give name , with give _price and assign it to an address ."
creates a new car with the give name .
returns all the relevant information about a specific car .
required for erc-721 compliance .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
withdraw other erc20 .
function to check the amount of tokens that an owner allow to a spender .
set address of ico smart-contract which control token initial token distribution .
assign amount_ of tokens to investor identify by to_ address .
add address to ico whitelist .
remove address from ico whitelist .
returns true if give address in ico whitelist .
enable whitelisting .
disable whitelisting .
trigger start of ico .
suspend this ico .
terminate the ico .
change basic ico paraneters .
resume a previously suspend ico .
send ether to the fund collection wallet .
recalculate ico state base on current block time .
modifier to make a function callable only when the contract be not lock .
modifier to make a function callable only when the contract be lock .
"call by the owner to locke , trigger lock state ."
"call by the owner to unlock , return to unlocked state ."
gets the balance of the specified address .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
functions with this modifier can only be execute by the owner .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
is the _spender allow to spend on the behalf of the _owner ? .
100 _rate 200 price of nac for investor win _rate / 100 price of nac for investor loss 2 - _rate / 100 .
get amount of ether to buy nac for investor .
"close session , only escrow can call ."
transfers asset balance between holders wallets .
ask asset proxy contract to emit erc20 compliant transfer event .
emits error event with specify error message .
emits error if call not by asset owner .
emits error if call not by asset proxy .
emits error if _from do n't trust _to .
this function allow players to purchase planets from other players .
user be purchase attack .
user be purchase defense .
"this function will return the detail for the connect user ( planets count , attack count , defense count ) ."
this function will return the detail of a planet .
the dev can use this function to create new planets .
initiate function that will create the planets .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
burns a specific amount of tokens .
function to mint tokens .
gets the balance of the specified address .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to check the amount of tokens that an owner allow to a spender .
burns a specific amount of tokens .
change send ban period .
transfer tokens .
transfer tokens from other address .
"check player profit , bet size and player number be within range ."
check game be currently active .
check payouts be currently active .
check only oraclize address be call .
check only owner address be call .
check only treasury address be call .
public function player submit bet only if game be active bet be valid can query oraclize and set player vars .
semi-public function - only oraclize can call .
public function in case of a failed refund or win send .
check for pending withdrawals .
internal function set max profit .
player check provably fair .
set gas price for oraclize callback .
set gas limit for oraclize query .
only owner adjust contract balance variable ( only use for max profit calc ) .
only owner address can set houseedge .
only owner address can set maxprofitaspercentofhouse .
only owner address can set minbet .
only owner address can transfer ether .
only owner address can do manual refund use only if bet place + oraclize fail to __callback filter logbet by address and / or playerbetid : .
only owner address can set emergency pause 1 .
only owner address can set emergency pause 2 .
only owner address can set treasury address .
only owner address can set owner address .
only owner address can suicide - emergency .
only the contract owner can transfer without restrictions .
overrides mintabletoken . mint ( ) .
checks modifier and allow transfer if tokens be not lock .
checks modifier and allow transfer if tokens be not lock .
enables token transfer .
burns a specific number of tokens .
adds an address to the whitelist of verifiers .
removes an address from the whitelist of verifiers .
sets a new start date as long a token have n't start yet .
sets a new end date as long a end date have n't be reach .
updates the eth / usd conversion rate as long a the public sale have n't start .
"must be call after crowdsale end , to do some extra finalization work ."
"if crowdsale be unsuccessful , a refund can be claim back ."
"if crowdsale be unsuccessful , participants can claim refund ."
release time-locked tokens .
release time-locked tokens for any vested address .
verifies kyc for give participant .
adds an address for pre-sale commitments make off-chain .
additional finalization logic .
low level token purchase .
release all the bet back to the bettors if the oracle result can not be verify .
set up founder address token balance .
for verification .
function to mint tokens .
buy tokens .
calcurate to bonusrate by date .
contract status change to unavailable .
"function for user to bet on team idx , ."
set next start date .
set the new min purchase value .
change the bonus percentage .
change the next milestone .
set the next price .
withdraw the fund .
internal function to handle insert delegate into state .
internal function to test if a delegation be valid or revoke / nonexistent .
"get previous delegation , create new delegation via function and then commit to globaldlgts ."
"get previous delegation , create new delegation via function and then commit to tokendlgts ."
"get previous delegation , create new delegation via function and then commit to globaldlgts ."
"get previous delegation , create new delegation via function and then commit to tokendlgts ."
"give some voter and token address , get the delegation id - failover to global on 0 address ."
"return 2 list : first of voter address , second of token contract ."
give access to historicaldelegations .
access the globaldelegation map .
access the tokendelegation map .
access our log list of token contract .
convenience function to turn delegations into a returnable structure .
private methods .
createlisting adds new erc721 token .
determines next price of token .
purchase toekn from previous owner .
"shift the 6 most recent buyers , and add the new buyer to the front ."
transfer token from previous owner to new owner .
withdraw dev 's cut .
updates the payout for the token the owner have .
update a single toekn payout for transfer .
owner can withdraw their accumulate payouts .
return all token data .
determines if token exist by check it 's price .
guarantees msg . sender .
internal function to clear current approval and transfer the ownership of a give token id .
internal function to add a token id to the list of a give address .
"creates a new promo person with the give name , with give _price and assign it to an address ."
returns all the relevant information about a specific person .
fix for the erc20 short address attack .
buy token by send ether here .
formula for the dynamic price change algorithm .
functions for the contract owner .
some useful getters ( although you can just query the public variables ) .
overriding payment function to take control over the logic .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
owner can transfer out any accidentally send erc20 tokens .
allows someone to send ether and obtain the token .
low level token purchase function .
erc-721 compliance .
calculate how many tokens can be distribute for the give contribution .
"multiplies two number , throw on overflow ."
this function be use to let admins give cities back to owners of previous contract .
this function allow to make an offer from someone else .
withdraw fund .
admin add stuff .
add a city will mint economy_boost citycoins ( country must exist ) .
add a monument ( city must exist ) .
edit a city if it have n't be buy yet .
buy and manage a city .
economy boost : this be call by function below that will buy a city from someone else it will draw economy_boost_trade citys from the un fund and split them in the relevant country .
sell a city .
step 2 : owner can always cancel .
step 3 : someone else accept the offer .
in-game use of citys .
"adds two number , throw on overflow ."
decrease the amount of tokens that an owner allow to a spender .
"get name for specified address and namespace , ."
"get name for specified namespace and msg . sender , ."
get name for specified address in global namespace ( bytes32 ( 0 ) ) .
get name for specified tokens .
get name for specified tokens .
get name for specified address and namespace .
allows the current owner to transfer control of the contract to a newowner .
"set name for specify token , ."
"set description for specify token , ."
"get description of specify token , ."
"set global name for msg . sender , ."
"get global name for specified address , ."
"get global name for msg . sender , ."
allows someone to send ether and obtain the token .
divident distributions .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create pow .
check for token ownership .
this function can be use by the owner of a pow item to modify the price of it pow item .
assigns ownership of a specific pow to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new promo pow with the give name , with give _price and assign it to an address ."
creates a new pow with the give name .
returns all the relevant information about a specific pow .
required for erc-721 compliance .
assigns ownership of a specific element to an address .
an internal method that create a new element and store it .
checks if a give address be the current owner of the specified element tokenid .
checks if a give address currently have transferapproval for a particular element .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
returns the number of tokens own by a specific address .
transfers a element to another address .
grant another address the right to transfer a specific element via transferfrom ( ) .
"transfer a element own by another address , for which the call address have previously be grant transfer approval by the owner ."
returns the total number of tokens currently in existence .
returns the address currently assign ownership of a give element .
returns a list of all element ids assign to an address .
calculate and reward point to the current king .
get the king 's current point .
get the first player 's current point .
get the second player 's current point .
check current leader 's point .
calculates the point a player earn in a give timer interval .
pays out current king .
transfer players their winnings .
gets a player 's information .
gets the sender 's information .
constructor function .
transfer tokens from one address to another .
total supply .
create the token to be sell .
low level token purchase function .
send ether to the fund collection wallet ( s ) .
true if the transaction can buy tokens .
the function to pull back tokens from a notorious user .
function to set the new price can only be call from owner wallet .
function to pause the crowdsale can only be call from owner wallet .
"function to resume the crowdsale if it be pause can only be call from owner wallet if the crowdsale have be stop , this function would not resume it ."
shows the remain tokens in the contract i . e .
function to show the equity percentage of an owner - major or minor can only be call from the owner wallet .
function to change the coin percentage award to the partner can only be call from the owner wallet .
airdrop to old token holders .
burns _amount tokens from _owner .
modifier to make a function callable only when the contract be not pause .
modifier to make a function callable only when the contract be pause .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
amount of remain tokens allow to spend .
set allowance for other address and notify .
total amount of tokens .
destroy tokens .
destroy tokens from other account .
constructor function .
owner can step down and assign some other address to this role .
the address of the controller be the only address that can call a function with this modifier .
changes the controller of the contract - only the controller or owner can execute this operation .
throws if stop be false .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
approve should be call when allow _spender 0 .
"destroy coin , cap be 5 billion ."
tokens be lock during the ico .
allow burn of tokens only by authorized users .
"before transferabletime , only the token event contract and owner can transfer tokens ."
transferabletime restrictions on the parent function .
transferabletime restrictions on the parent function .
"set transferabletime transferabletime can only be set earlier , not later once tokens be transferable , it can not be pause ."
all function can only be call before event have end .
"function to join the pre sale associate with variables , function , events of suffix pre ."
"function to join the main sale associate with variables , function , events of suffix main ."
send eth for safekeeping .
"set the parameters for the contribution round associate with variables , function , events of suffix pre ."
"set the parameters for the contribution round associate with variables , function , events of suffix main ."
"change the whitelist status of an address for pre sale associate with variables , function , events of suffix pre ."
"change the whitelist status of an address for main sale associate with variables , function , events of suffix main ."
end the token generation event and deactivate all function can only be call after end time burn all remain tokens in this contract that be not exchange .
emits error event with specify error message .
"only the contract owner may end this contract , and may do so only if there be 0 bid ."
place a bid .
calcuate the timestamp after which the auction will expire .
issue token base on ether receive .
compute the amount of tgc token that can be purchase .
transfer token for a specified address .
restrict mint by the maximum_supply allow .
function to mint tokens .
function to stop mint new tokens .
erc-721 compliance .
admin initiate a request to mint _amount trueusd for account _to .
"after a day , admin finalize mint request by provide the index of the request ( visible in the mintoperationevent accompany the original request ) ."
transfer ownership of _child to _newowner .
transfer ownership of a contract from trueusd to this timelockedcontroller .
change the transaction fee charge on transfer / mint / burn .
change the recipient of stake fee to newstaker .
future erc20 call to trueusd be delegate to _delegate .
incoming delegate * call from _source will be accept by trueusd .
update this contract 's trueusd pointer to newcontract ( e . g .
change trueusd 's name and symbol .
replace the current admin with newadmin .
swap out trueusd 's address list .
update a whitelist / blacklist .
rename a whitelist / blacklist .
claim ownership of an arbitrary claimable contract .
start new tge stage .
burn tokens to burnaddress from msg . sender .
allows an owner to confirm freezeng process .
allows to users withdraw eth in frozen stage .
allows an owner to confirm a change settings request .
amount of block leave to the end of this stage of tge .
get your ethers back ( if no one have pay the griefcost ) .
"called by the owner in emergency , trigger stop state ."
determine if purchase be valid and return proper number of tokens .
this function will return number of tokens base on time intervals in the campaign .
erase contribution from the database and do manual refund for disapproved users .
allow on manual addition of contributors .
contributors can claim tokens after public ico be finish tokens be only claimable when token address be available and lock-up period reach .
this function can be call by admin to claim user 's token in case of difficulties .
"in case refund be need , money can be return to the contract and contract switch to mode refund ."
call to send tokens to contributors after ico and lockup period .
this function will finalize the sale .
"called by the owner to end of emergency , return to normal state ."
failsafe drain .
failsafe token transfer .
it will allow contributors to get refund in case campaign fail .
to verify if action be not perform out of the campaing range .
to populate website with status of the sale .
specify address of token contract .
set the step of the campaign .
it will be call by owner to start the sale .
due to change average of block time this function will allow on adjust duration of campaign closer to the end .
it will be call by fallback function whenever ether be send to it .
it will return status of white list .
it will return refferal address .
it will remove whitelisted user .
it will white list one member .
it will white list multiple members .
send coin .
a contract attempt to get the coin .
modifier function to prepend to methods render them only callable by the etheraffle multisig wallet .
this function destroy tokens by subtract them from the total supply and remove them from the give address .
housekeeping - call in the event this contract be no longer need .
transfer the specified amount of freelot to the specify address .
transfer the specified amount of freelot to the specify address .
returns balance of a queried address .
allow change of contract ownership ready for future upgrade change in management structure .
remove a minter should they no longer require or need the the privilege .
allow addition of a destroyer to allow future contract to use the role .
remove a destroyer should they no longer require or need the the privilege .
this function mint tokens by add tokens to the total supply and assign them to the give address .
admin initiate a request to mint _amount trueusd for account _to .
admin initiate a request to transfer _child to _newowner .
admin initiate a request to transfer ownership of a contract from trueusd to this timelockedcontroller .
admin initiate a request that the minimum and maximum amount that any trueusd user can burn become newmin and newmax .
admin initiate a request that the stake fee be change .
admin initiate a request that the recipient of the stake fee be change to newstaker .
admin initiate a request that future erc20 call to trueusd be delegate to _delegate .
admin initiate a request that incoming delegate * call from _source be accept by trueusd .
admin initiate a request that this contract 's trueusd pointer be update to newcontract .
admin initiate a request that trueusd 's name and symbol be change .
"after a day , admin finalize the transfer of a child contract by provide the index of the request ( visible in the transferchildoperationevent accompany the original request ) ."
"after a day , admin finalize the burn bound change ."
"after a day , admin finalize the staking fee change ."
"after a day , admin finalize the stake fee recipient change ."
owner of this contract ( immediately ) replace the current admin with newadmin .
admin ( immediately ) update a whitelist / blacklist .
mint token function .
mint token function .
start debug methods .
end debug methods .
bind a contract a it owner .
change the owner of the contract from this contract to another .
ballot submission .
internal function to ensure atomicity of voter log .
allow the owner to reveal the secret key after ballot conclusion .
test function .
update a single city payout for transfer .
owner can withdraw their accumulate payouts .
return all city data .
determines if token exist by check it 's price .
internal function to add a token id to the list of a give address .
createlisting adds new erc721 token .
determines next price of token .
purchase city from previous owner .
transfer city from previous owner to new owner .
sets item 's payout .
updates the payout for the cities the owner have .
decrease the amount of tokens that an owner allow to a spender .
set new rate ( emergency case ) .
send tokens to specify wallet wallet .
low level token purchase function .
set new date for main-sale ( emergency case ) .
set new wallets ( emergency case ) .
low level token purchase function .
allows someone to send ether and obtain the token .
payment code here .
tx5 : player one end coin flip with reveal .
tx7 player throw slammer .
adds an provided value to the set .
removes the give value from the set .
returns true iff the value be contain in the set .
returns an array contain all the ids in the set .
returns the next value in the set .
returns the previous value in the set .
add whitelist .
bulk add .
remove address from whitelist .
bulk remove .
get list .
allows someone to send ether and obtain the token .
divident distributions .
for create pow .
"creates a new promo pow with the give name , with give _price and assign it to an address ."
creates a new pow with the give name .
returns all the relevant information about a specific pow .
change minimum purchase amount any time only owner .
add pre-sale purchase tokens only owner .
is finish date ico reach ? .
is hard cap tokens reach ? .
is ico finished ? .
calc total tokens for fix value and bonus percent .
get current bonus percent for this transaction .
throws if date be n't between ico date .
purchase tokens for the amount of ether send to this contract .
private functions .
owner should call this on 1st of every month .
mod functions .
send karma to exist account .
"if a user have be bad , they wo n't be able to receive a dividend : ( ."
user functions .
user can withdraw their share of donations from the previous month .
erc20 functions .
"contrary to most erc20 implementations , require that recipient be exist user ."
"contrary to most erc20 implementations , require that recipient be exist user ."
iterate through milestones .
get the current milestone or bail out if we be not in the milestone periods .
get the current price .
calculate the current price for buy in amount .
burn tokens from owner 's address .
returns the number of tokens currently hold by _owner .
"dynamic value of ether in reserve , accord to the crr requirement ."
"calculates the number of tokens that can be buy for a give amount of ether , accord to the dynamic reserve and totalsupply value ( derive from the buy and sell price ) ."
converts a number tokens into an ether value .
the polynomial r c1 * x + c3 * x 3 + . . .
the polynomial r 2 + c2 * x 2 + c4 * x 4 + . . .
the below be safemath implementations of the four arithmetic operators design to explicitly prevent over - and under-flows of integer value .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
sells your tokens for ether .
the slam-the - button escape hatch .
gatekeeper function to check if the amount of ether be send be n't either too small or too large .
function that return the ( dynamic ) price of buy a finney worth of tokens .
function that return the ( dynamic ) price of sell a single token .
calculate the current dividends associate with the caller address .
sell function that take tokens and convert them into ether .
overrides erc20 transferfrom function with modifier that prevent the ability to transfer tokens until after transfer have be enable .
low level token purchase function .
"call by the owner on end of emergency , return to normal state ."
true if the transaction can buy tokens .
take ethers from zebiwallet to smart contract .
transfer ether from smartcontract to zebiwallet .
take ethers from zebiwallet to smart contract .
transfer ether from smartcontract to zebiwallet .
return value in zwei calculate number of tokens include bonuses .
send ether to the fund collection wallet .
check if the investor can buy tokens .
maintains list of investors with failed kyc validation .
overrided buytokens method of parent crowdsale contract to provide bonus by change and restore rate variable .
lock team tokens for 3 years with vest contract .
lock reserve tokens for 1 year .
"starts ico , make ico contract owner , so it can mint ."
"starts preico , make preico contract owner , so it can mint ."
sets mdk to ether rate .
gives user tokens for contribution in bitcoins .
allows to adjust the crowdsale end time .
"override super createtokencontract , so it 'll not deploy mintabletoke ."
"give not buy tokens to owner , also give back ownership of mdktoken contract ."
constructor that give msg . sender .
owner call after endlottery .
return the number of tokens own by ( _owner ) .
transfer a part to another account .
transfer a part to another account .
"approve the ( _to ) address to use the transferfrom function on the token with id ( _tokenid ) if you want to clear all approvals , simply pass the zero address ."
approve many token ids .
transfer the part with id ( _tokenid ) from ( _from ) to ( _to ) ( _to ) must already be approve for this ( _tokenid ) .
return the current owner of the token with id _tokenid .
return a dynamic array of the ids of all tokens which be own by ( _owner ) .
same issue a above .
this be public so it can be call by getpartsofowner .
"every level , you need 1000 more exp to go up a level ."
"part type , subtype , have one internal function which let u implement the divergent interfaces ."
a distinct uri ( rfc 3986 ) for a give token .
return a metadata uri .
part be store sequentially .
thirsty function .
code duplicate .
return true if the token with id _partid be own by the _claimant address .
"return false if auction start time be 0 , likely from uninitialised struct ."
assigns ownership of the token with id _partid to this contract must have already be approve .
transfer the token with id _partid to buy address .
"removes auction from public view , return token to the seller ."
calculates price and transfer purchase to owner .
return the current price of the token be auction in _auction .
compute the current price of an deflating-price auction .
compute percentage fee of transaction .
remove all ether from the contract .
creates an auction and list it .
purchases an open auction .
allows a user to cancel an auction before it 's resolve .
return the current price of the auction of a token with id _partid .
returns the detail of an auction from it _partid .
allows owner to cancel an auction .
transfer a part to an address .
helper function adapt from jossie calderon on stackexchange .
"total supply of part - - a no part be ever delete , this be simply the total supply of part ever create ."
returns the total number of deeds currently in existence .
internal function which check whether the token with id ( _tokenid ) be own by the ( _claimant ) address .
internal function which check whether the token with id ( _tokenid ) be own by the ( _claimant ) address .
withdrawing balance .
transfer ownership of the contract .
change maintenance fee .
the perktree be represent in a uint8 32 represent a binary tree see the number of perk active buy a new perk 0 : prestige level - start at 0 ; next row of tree 1 : offensive move 2 : defensive move next row of tree 3 : melee attack 4 : turret shoot 5 : defend arm 6 : body dodge next row of tree 7 : mech melee 8 : android melee 9 : mech turret 10 : android turret 11 : mech defence 12 : android defence 13 : mech body 14 : android body next row of tree 15 : melee electric 16 : melee steel 17 : melee fire 18 : melee water 19 : turret electric 20 : turret steel 21 : turret fire 22 : turret water 23 : defend electric 24 : defend steel 25 : defend fire 26 : defend water 27 : body electric 28 : body steel 29 : body fire 30 : body water .
sum of perk ( exclude prestige ) .
you can unlock a new perk every two level ( include prestige when possible ) .
sets the reference to the sale auction .
list a part for auction .
transfer balance back to core contract .
an internal method that create a new part and store it .
"uint8 public defenceelementbysubtypeindex 1 , 2 , 4 , 3 , 4 , 1 , 3 , 3 , 2 , 1 , 4 ; uint8 public meleeelementbysubtypeindex 3 , 1 , 3 , 2 , 3 , 4 , 2 , 2 , 1 , 1 , 1 , 1 , 4 , 4 ; uint8 public bodyelementbysubtypeindex 2 , 1 , 2 , 3 , 4 , 3 , 1 , 1 , 4 , 2 , 3 , 4 , 1 , 0 , 1 ; / / no more lambos : ' ( uint8 public turretelementbysubtypeindex 4 , 3 , 2 , 1 , 2 , 1 , 1 , 3 , 4 , 3 , 4 ; ."
"the following function do n't create part , they add new part a possible reward from the reward pool ."
deprecate subtypes .
put shards together into a new part-crate .
scrap a part for shards .
store the part information of purchase crate .
owner only withdrawal function for the presale .
once only function .
actually part type .
convert old string representation of robot into 4 new erc721 part .
give one more chance .
users can open pending crate on the new contract .
"can never remove any of these contract , can only add once we publish a contract , you 'll always be able to play by that ruleset good for two player game which be non-susceptible to collusion people can be trust to choose the most beneficial outcome , which in this case be the fair form of gameplay ."
actually probably just want a length getter here a default public map getters be pretty expensive .
store sum .
convert win into pending battle crate .
in perksrewards .
do n't need to do any scale should already have be do by previous stag .
require part in order .
ico start and stop .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
add token function .
set token control info .
transfer token to .
we use the following function to pause and unpause the game .
"multiplies two number , throw on overflow ."
this function will be use to add a new hero by the contract creator .
this function will be use by the contract creator to generate 5 heroes id randomly out of 55 heroes and it can be generate only once and can not be alter at all even by contractcreator .
this function can be use by the contractcreator to start the payout to the lucky 5 winners .
this function allow users to purchase tournament of power heroes .
this function will be use to update the detail of dbz hero detail by the contract creator .
this function can be use by the owner of a hero to modify the price of it hero .
this function will return all of the detail of the tournament of power heroes .
this function will return only the price of a specific hero .
this function will return only the price of a specific hero .
this function will return only the dbz owner address of a specific hero .
this function will return only tournament of power total prize .
required for erc-20 compliance .
required for erc-20 compliance .
required for erc-20 compliance .
token owner can approve for spender to transferfrom ( . . . ) .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
required for erc-721 compliance .
allow pre-approved user to take ownership of a token .
required for erc-721 compliance .
required for erc-721 compliance .
for check approval of transfer for address _to .
check for token ownership .
for upcoming price change features .
required for erc-721 compliance .
assigns ownership of a specific collectible to an address .
this method must never be call by smart contract code .
return an array with all token ids .
for create collectible .
specify address of token contract .
transfers vest available tokens to beneficiary .
this function will determine vested amount .
to populate website with status of the sale .
this function will determine status of crowdsale .
to allow for contribution from interface .
set the step of the campaign from presale to public sale contract be deploy in presale mode .
it will be call by owner to start the sale .
this function will finalize the sale .
it will allow contributors to get refund in case campaign fail .
allocate tokens to dev / team / advisors .
failsafe drain .
transfer tokens which be not subject to vest .
determine amount of commission for the platform .
return number of contributors .
it will be call by fallback function whenever ether be send to it .
this function will return number of tokens base on time intervals in the campaign .
lock transfer during the ico .
transfer tokens to give address .
transfer tokens from give address to another address .
it will white list one member .
it will white list multiple members .
owner be the only address that can call a function with this modifier .
owner can step down and assign some other address to this role .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
function that handle logic for set price and assign collectibles to address .
"gets the current list of heroes , their owners , and price ."
"converts give number to base58 , limit by _maxlength symbols ."
concatenates two string .
generates a shortlink code .
get sum price require to birth baby .
get the parent of a certain baby .
frontend can use this to find the birther percent for animal .
check the birther balance of a certain address .
determines if token exist by check it 's price .
internal function to clear current approval and transfer the ownership of a give token id .
mint token function .
internal function to add a token id to the list of a give address .
determines next price of token .
purchase animal from previous owner .
check to see whether a newly purchase animal should give birth .
internal function to birth a baby if an owner have both mom and dad .
transfer token from previous owner to new owner .
withdraw dev 's cut .
withdraw anyone 's birther balance .
return all relevant data for an animal .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create movie .
check for token ownership .
assigns ownership of a specific movie to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new promo movie with the give name , with give _price and assign it to an address ."
creates a new movie with the give name .
returns all the relevant information about a specific movie .
set allowance for other address and notify .
public function player submit bet only if game be active bet be valid can query oraclize and set player vars .
semi-public function - only oraclize can call .
player check provably fair .
function transfer token for a specified address .
function get the balance of the specified address .
function transfer tokens from one address to another .
function approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function be to check the amount of tokens that an owner allow to a spender .
modifier throw if call by any account other than the owner .
function allow the current owner to transfer control of the contract to a newowner .
function burn a specific amount of tokens .
sends request to change settings .
allows anyone to execute a confirmed transaction .
returns the confirmation status of a transaction .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
returns number of confirmations of a transaction .
returns total number of transactions after filers be apply .
returns list of owners .
"returns array with owner address , which confirm transaction ."
returns list of transaction ids in defined range .
allows an owner to confirm a change settings request .
shows what settings be request in a settings change request .
allows to add a new owner .
allows to remove an owner .
allows to replace an owner with a new owner .
allows to change the number of required confirmations .
allows an owner to submit and confirm a transaction .
allows an owner to confirm a transaction .
allows an owner to revoke a confirmation for a transaction .
return cardlist array .
allow card owner to cancel lease offer .
allow future tenant to lease a card .
get last lease from a card .
get lease from card .
get lease list from a card .
transfer the ownership of a card .
return balance from sender .
allow address to withdraw their balance .
compute initial card price ( in wei ) .
allow contract owner to set nsfw flag on a card .
fill card struct .
initialize sell card for future .
send split amount to respective balance .
compute _cut from a _price .
return card detail by id .
return card by id .
"this be call on the initial buy card , user to user buy be at buycard ( ) ."
perform a user to user buy transaction .
allow card owner to edit his card informations .
allow card owner to set his card on sale at specific price .
allow card owner to cancel sell offer .
allow card owner to set his card on lease at fixed price per block and duration .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
freeze ? prevent allow target from send receive tokens .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
buy tokens from contract by send ether .
sell amount tokens to contract .
this function will return only the price of a specific pokemon .
this function will return only the owner address of a specific pokemon .
this function will return only the level of pokemons .
"delete function , use when bug comeout ."
"set function , use when bug comeout ."
this function will be use to add a new hero by the contract creator .
this function allow users to purchase pokemon .
this function will return all of the detail of the pokemons .
transfers the same amount of tokens to up to 100 specified address .
transfers a variable amount of tokens to up to 100 specified address .
"internal transfer , only can be call by this contract ."
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
buy tokens from contract by send ether .
sell amount tokens to contract .
allow users to read comment .
funzioni debug .
0 - stop 1 - presale 2 - sale 1 3 - sale 2 .
burn the rest keep nuc and team tokens .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
distribute tokens out .
"starts ico , make ico contract owner , so it can mint ."
"starts preico , make preico contract owner , so it can mint ."
"internal transfer , only can be call by this contract ."
setup the crowdsale parameters .
constructor function .
allows someone to send ether and obtain the ( unclaimed only ) token .
assigns a new address to act a the ceo .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for register an opinion .
for create opinion .
check for token ownership .
assigns ownership of a specific opinion to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates initial set of opinions .
returns all the relevant information about a specific opinion .
required for erc-721 compliance .
let you permanently delete someone elses opinion .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create tot .
check for token ownership .
assigns ownership of a specific tot to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new tot with the give name .
returns all the relevant information about a specific tot .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
creates a new tot with the give name .
this method must never be call by smart contract code .
for create item .
assigns ownership of a specific item to an address .
creates a new item with the give name .
returns all the relevant information about a specific item .
allows someone to send ether and obtain the token .
buy tokens from contract by send ether .
sell amount tokens to contract .
set the bool value of sale_pause .
set the bool value of return_pause .
check if the sender be the admin .
transfer the admin role to a new address .
transfer function use to send tokens to an address .
minting function that can only be call by the admin .
toekn transfer function .
allows to users withdraw eth in frozen stage .
transfer the admin role to a new address .
minting function that can only be call by the admin .
function below this line be onlyowner set message of the day .
function below this line be onlyowner .
returns the confirmation status of a transaction .
returns number of confirmations of a transaction .
"returns array with owner address , which confirm transaction ."
allows to add a new owner .
alias of sell ( ) and withdraw ( ) .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
precautionary measure in case we need to adjust the masternode rate .
"if we want to rebrand , we can ."
"if we want to rebrand , we can ."
method to view the current ethereum store in the contract .
retrieve the total token supply .
retrieve the tokens own by the caller .
retrieve the dividends own by the caller .
retrieve the token balance of any single address .
retrieve the dividend balance of any single address .
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
"it have refferedbuy , but it not use , so more money to all players : ) ."
calculate token price base on an amount of incoming ethereum .
calculate token sell value .
calculate amount of dividends base on the incoming value from the users .
converts all of caller 's dividends to tokens .
allows someone to send ether and obtain the token .
for create mobsters .
creates a new mobster with the give name .
returns all the relevant information about a specific mobster .
hit a mobster .
requires value to be divisible by granularity .
returns the granularity .
creates etf tokens in exchange for underlie tokens .
redeems etf token in return for underlie tokens .
tokenaddresses underlying token address .
tokenunits number of token base units require per grain .
mints new etf tokens .
burns etf tokens .
helper to transfer underlying tokens during creation .
helper to transfer underlying tokens during redemption .
look up token info .
owner : withdraw excess fund which do n't belong to etf token holders .
transfer ownership from owner to newowner .
accept ownership of the contract .
the amount lock for _address .
whether the bonus distribution be successful or not .
"may 01 , 2018 00 : 00 : 00 utc ."
symbol of this token .
number of decimals for this token .
"true if tokens be create successfully , false otherwise ."
name of this token .
buy tokens from contract by send ether .
sell amount tokens to contract .
set open .
set allowance for other address and notify .
check that crowd sale be live .
forward ether receive to refund vault and generate tokens for purchaser .
activate end of crowdsale state .
check if crowdsale target be reach .
refund ether to investors if crowdsale be unsuccessful .
generate a random use the block number and loop count a the seed of randomness .
function for approve contributors after kyc .
function for withdraw win amount by the winners .
current token balance of this contract .
list of top winners .
list of random winners .
function to destroy contract .
low level token purchase function .
number of tokens .
update winners list .
true if contract be expire .
function to find the winners .
throws if call by any account other than the owner .
adding new owners .
deleting owners .
update variables relate to crowdfunding .
limit token transfer until the crowdsale be over .
transfer token and invoke contract request payment with notifcation .
function to pay the previous owner .
function that handle logic for set price and assign collectibles to address .
"gets the current list of heroes , their owners , and price ."
calculate the final sale price after the owner-cut have be calculate .
calculate the price increase base on the current purchase price .
gets the current ( or default ) price of a day .
sets the nickname for an account address .
claim a day for your very own ! .
transfer token for a specified address .
insert n after prev .
remove node n precede by prev .
for create company .
check for token ownership .
for pay out balance on contract .
throws if call by any account other than the owner .
burns a specific amount of tokens .
freeze ? prevent allow target from send receive tokens .
the initial distributor be responsible for allocate the supply into the various pool describe in the whitepaper .
erc20 balanceof ( ) .
erc20 transfer ( ) .
erc20 transferfrom ( ) .
erc20 approve ( ) .
erc20 allowance ( ) .
not officially erc20 .
not officially erc20 .
"token purchase function can be call by someone else , too ."
"a uint256 , amount of tokens for amount of wei ."
sends ether to the vault for safekeeping and refund if crowdsale fail .
true if the transaction can buy tokens .
"must be call after crowdsale end , to do some extra finalization work ."
"if crowdsale be unsuccessful , investors can claim refund here ."
emergency situations only .
wraps up the crowdsale .
user can claim tokens once the crowdsale have be finalize .
determine 1 / 8th of every user 's contribution in their deserved tokens .
how many tokens a user have already withdraw .
"how many weeks , a a whole number , have pass since the end of the crowdsale ."
withdraw all the leftover tokens if more than 2 weeks since the last withdraw opportunity for contributors have pass .
helper function to do rounded division .
setting the rate start the ico and set the end time .
whitelisted users can contribute during the starting period of the crowdsale .
whitelisted users can contribute during the starting period of the crowdsale .
low level token purchase function .
funtion to determine the number of the current round .
function to give tokens to others users who have buy genbby tokens .
update variables relate to crowdfunding .
function to increase capoftotalsupply in the next phase of kstarcoin 's ecosystem .
function to check whether the current supply exceed capoftotalsupply .
for erc20 .
additional standardtoken method of zeppelin-solidity .
additional standardtoken method of zeppelin-solidity .
for erc827 .
additional standardtoken method of zeppelin-solidity .
additional standardtoken method of zeppelin-solidity .
notation for erc827 .
function to mint coin .
function to mint coin .
burns a specific amount of coin .
burns a specific amount of coin .
function which allow users to buy kstarcoin during the crowdsale period .
this function be occur when owner mint coin to users a they buy with cryptocurrency other than eth .
function to reward influencers with kstarcoin .
function to exchange kscpoint to kstarcoin .
if something go wrong we can destroy the contract and everyone get a refund at card price for each of their card .
destroy tokens from other account .
"internal transfer , only can be call by this contract ."
set minimum payout .
set card / watt / month .
get mine payout and send to everyone .
add graphics card for owner of contract .
add graphics card for someone else .
transfers tokens hold by timelock to beneficiary .
allows someone to send ether and obtain the token .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create city .
check for token ownership .
assigns ownership of a specific city to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new promo city with the give name , country and price and assign it to an address ."
creates a new city with the give name and country .
returns all the relevant information about a specific city .
required for erc-721 compliance .
low level token purchase function .
function to pause the crowdsale can only be call from owner wallet .
"function to resume the crowdsale if it be pause can only be call from owner wallet if the crowdsale have be stop , this function would not resume it ."
modifier to make a function callable only when the address be frozen .
modifier to make a function callable only when the address be not frozen .
modifier to make a function callable only by owner or freezing agent .
function to freeze an account from transactions .
function to release an account form frozen state .
function to allow a contract to freeze address .
close the first stage ; issue reserve and team tokens .
close the second stage and overall sale .
issue the team tokens and lock them for 90 days from the day the token be list on an exchange .
trading limit - require the first stage to have close .
trading limit - require the first stage to have close .
only allow to execute before the first stage be close .
only allow to execute after the first stage be close .
"internal transfer , can only be call by this contract ."
a boolean that indicate if the operation be successful .
wd function .
function to enable / disable smart contract buy-in .
betid id of bet .
the bet object .
function to update a bet manually .
update the bet underlying bet rule in the contract ( fee etc . ) .
set allowance for other address .
amount the returned amount in cmsc wei .
function to mint tokens .
"startico integration , locktime be ignore ( ignore the warn ) ."
"performs the final stage of the token sale , mint additional 40 of token fund , transfer mint tokens to an external fund ( 20 game fund , 10 team , 5 advisory board , 3 bounty , 2 founder ) ."
allows the current owner to transfer control of the contract to a newowner .
this function allow players to purchase land during our pre-sale .
these function will return the detail of a piece of land .
get all the land own by a specific address .
"this function will return the data about the pre-sale ( how many land purchase , current price ) ."
this function make it easy to get the total number of tokens .
queries the balance of _owner at a specific _blocknumber .
total amount of tokens at a specific _blocknumber .
creates a new clone token with the initial distribution be this token at _snapshotblock .
generates _amount tokens that be assign to _owner .
burns _amount tokens from _owner .
getvalueat retrieve the number of tokens at a give block number .
updatevalueatnow use to update the balance map and the totalsupplyhistory .
helper function to return a min betwen the two uints .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
this function be override by the test mocks .
erc20 methods .
send _amount tokens to _to from msg . sender .
send _amount tokens to _to from _from on the condition it be approve by _from .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
the balance of _owner at the current block .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
transfer all balance to address .
transfer bounty reserve tokens .
transfer bounty reserve tokens .
transfer bounty reserve tokens .
makes order for tokens purchase .
get current rate from oraclize and sell tokens .
add funder to kyc fail list .
add a direct fund map .
add a collector .
makes order for tokens purchase .
true if the saft campaign be alive .
withdraw tokens from contract .
low level token purchase function .
allows someone to send ether and obtain the token .
for create person .
"creates a new promo person with the give name , with give _price and assign it to an address ."
creates a new person with the give name .
returns all the relevant information about a specific person .
we use the following function to pause and unpause the game .
number of decimals for this token .
name of this token .
low level token purchase function .
allows someone to obtain the token .
allow pre-approved user to take ownership of a token .
expensive ; not to be call by smart contract .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create a creator .
check for token ownership .
for pay out the full balance of contract .
assigns ownership of creator token to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new creator with the give name , price , and the total number of collectibles order then assign to an address ."
returns all the information about creator token .
required for erc-721 compliance .
for contract payout .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
sell amount tokens to contract ( 1 amount 0 . 000000000000000001 here ) .
transfer tokens from other address .
"internal transfer , only can be call by this contract ."
"internal transfer , only can be call by this contract ."
determines whether the seller be the maker or the taker for a give option .
determines whether the buyer be the maker or the taker for a give option .
transfer payment from an option 's buyer to the seller less the 1 fee send to the admin .
allows a taker to fill an offchain order for an option create by a maker .
allows a maker to cancel their offchain option order early ( i . e .
handler for trade tokens into and out of the option at the give strike price .
allow an option 's buyer to trade tokens into and out of the option at the strike price until the option 's maturation .
allows an option 's seller to withdraw their fund after the option 's maturation .
users must first deposit eth into the exchange in order to purchase options .
users can withdraw any amount of eth up to their current balance .
"to deposit tokens , users must first approve the transfer in the token contract ."
users can withdraw any amount of a give token up to their current balance .
transfer fund from one user 's balance to another 's .
transfer fund from a user 's balance into an option .
transfer fund from an option to a user 's balance .
hashes an option 's parameters for use in look up information about the option .
computes the current state of an option give it parameters .
function that indicate whether pre ico be active or not .
low-level purchase function .
function that be call by our robot to allow users to buy tonkens for various cryptos .
sets address of seller robot .
set start time of ico .
function to get ether from contract .
batch vote ( delegate to chairperson ) .
computes the win proposal take all previous vote into account .
calls winningproposal ( ) function to get the index of the winner contain in the proposals array and then return the name of the winner .
proposal rank by votecount .
true if the transaction can buy tokens .
burn a specific amount of tokens of other token holders if refund process enable .
add wallet to whitelist .
create _amount new tokens and transfer them to _to .
base on 'transfer ' in https : / / github . com / openzeppelin / zeppelin-solidity / blob / master / contract / token / erc20 / basictoken . sol .
transfers tokens hold by timelock to beneficiary .
throws if call by any account other than the owner .
set finish minting .
start or pause tradable to transfer token .
"updateicodatetime ( uint256 _starttime , ) ."
change starttime to start ico manually .
change endtime to end ico manually .
total tokens supply .
change total supply .
the balance the particular account .
the balance of kyc wait to be approve .
send value token to to from msg . sender .
send value token to to from from .
the transaction address and send the event a approval .
the price or token value for a ether .
refund back if not kyc approve .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
true if crowdsale current lot event have end .
set / change multi-signature wallet address .
change eth / token exchange rate .
compute the amount of shc token that can be purchase .
calculate the final sale price after the owner-cut have be calculate .
calculate the price increase base on the current purchase price .
claim a day for your very own ! .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
compute the amount of hpb token that can be purchase .
ballot submission .
internal function to ensure atomicity of voter log .
allow the owner to reveal the secret key after ballot conclusion .
ballot params - allow the frontend to do some check .
test function .
returns current price of an ft ( erc-20 ) on auction .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
"remove all ether from the contract , which be the owner 's cut as well a any ether send directly to the contract address ."
creates and begin a new auction .
"bids on an open auction , complete the auction and transfer ownership of the ft ( erc-20 ) if enough ether be supply ."
this be a state-modifying function that can be call while the contract be pause .
cancels an auction when the contract be pause .
returns auction info for an ft ( erc-20 ) on auction .
returns the current price of an auction .
creates and begin a new auction .
work the same a default bid method .
function to chnage the ownercut only accessible by the owner of the contract .
returns true if the claimant own the token .
"escrows the erc-20 token , assign ownership to this contract ."
transfers an erc-20 token own by this contract to another address .
adds an auction to the list of open auction .
cancels an auction unconditionally .
computes the price and transfer winnings .
removes an auction from the list of open auction .
returns true if the ft ( erc-20 ) be on auction .
owner can allow or disallow refund even if soft cap be reach .
calculates bonuses base on current stage .
"calculates bonuses , specific for the ico ."
emergency stop or start ico .
check whether ico run or not .
erc 20 standard token interface transfer function .
destroy tokens .
main function for receive the eth from the investors and transfer tokens after calculate the price .
approves and then call the receive contract .
erc20 token balanceof query function .
token balance normalise for display ( 4 decimals remove ) .
erc20 token transfer function with additional safety .
erc20 token transferfrom function with additional safety .
"erc20 allow _spender to withdraw , multiple time , up to the _value amount ."
erc20 return allowance for give owner spender pair .
erc20 updated increase approval process ( to prevent double-spend attack but remove need to zero allowance before set ) .
erc20 updated decrease approval process ( to prevent double-spend attack but remove need to zero allowance before set ) .
contract owner able to transfer any airdropped or erc20 tokens that be send to the token contract address ( mistakenly or a part of airdrop campaign ) .
setup the crowdsale parameters .
standart erc-20 function .
standart erc-20 function .
standart erc-20 function .
check to see if an ethereum account have assign a checksum for a particular resource .
retrieve the checksum assign assign to particular resource .
each ethereum account may assign a 'checksumpair ' to a resource exactly once .
this function move a proposal to a final state of withdrawnbycreator ' and return tokens to the source describe by the proposal 's transfer .
this function move a proposal to a final state of rejectedbyresourcesetcreator ' and return tokens to the source describe by the proposal 's transfer .
this function move a proposal to a final state of rejectedbyresourcesetcreator ' and send tokens to the destinations describe by the proposal 's transfer .
approve should be call when allow _spender 0 .
to update token information at the end .
burn extra tokens from a balance .
"substracts two number , throw on overflow ( i . e ."
fix for the erc20 short address attack .
atomic increment of approved spend .
atomic decrement of approved spend .
migrate tokens to the new token contract .
modifier to make a function callable only after ownerburn have be call .
override ownable . sol .
burns all remain tokens in the owners account and set license cost .
change the ( totalsupply ) cost of a license .
purchase a license .
send tokens .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
allows someone to send ether and obtain the token .
send coin .
a contract attempt to get the coin .
send coin .
check if an address be a contract .
provides access to a determined transaction .
drains all eth .
the initial distributor be responsible for allocate the supply into the various pool describe in the whitepaper .
allows _spender to transfer _value tokens from msg . sender .
section 2 - modifiers .
it will be automatically call on deploy .
allows msg . sender .
send _value tokens to _to from msg . sender .
send _value tokens to _to from msg . sender .
transfer _value tokens from _from to _to if msg . sender .
start new tge stage .
burn tokens to burnaddress from msg . sender .
_founderswallet wallet of founder .
allows an owner to confirm freezeng process .
allows to users withdraw eth in frozen stage .
amount of block leave to the end of this stage of tge .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
approve should be call when allow _spender 0 .
getter totalsupply .
"main function , must run for release ."
contribution handler .
function to estimate airdrop amount .
check status .
closure handler .
allow only the owner of this contract .
allow only if be close to start time or if be it run .
check if the provided stage be the current one .
you must send some eth to cover the oraclize_query fee .
"eth / usd rate be receivd and convert to wei , this function be use also to automatically update the stage status ."
an integer be require ( e . g .
"this function will not throw in case the interval update be exceed , in this way the late update make to the eth / usd rate be keep ."
change interval update .
call oraclize_query with a delay in second .
allow owner to force rate update .
to be use in case the default gas cost be too low .
to be use in case the default gas price be too low .
this function must be use * * only if this contract balance be too low for oraclize_query to be execute .
used only if there be some leftover fund ( because of topupbalance ) .
must be call after the crowdsale have finish .
this be mainly an helper function but can be useful in case the addwhitelistaddrs loop have issue .
remove an address from whitelist .
transfers tokens to whitelisted address .
this be mainly an helper function to finalize but can be use if finalize have issue with the loop .
call this function after finalize .
get the token balance of this contract and burn all tokens .
allow to change the current stage .
ico status ( base only on time ) .
"it divide ( eth / usd rate ) / ( phi / usd rate ) , use the custom function getethphirate ( false ) if you want a more accurate rate ."
it divide ( eth / usd rate ) / ( phi / usd rate ) .
calculate amount of token base on wei amount .
returns how many tokens an investor have .
returns how many wei an investor have invest .
check if an address be a contract .
"return start state false if the crowdsale be not start , true if the crowdsale be start and run , true if the crowdsale be complete ."
"return if crowdsale end false if the crowdsale be not start , false if the crowdsale be start and run , true if the crowdsale be complete ."
"return the total number of the tokens available for the sale , must not change when the crowdsale be start ."
return the number of the tokens available for the crowdsale .
return the price a number of tokens release for each ether .
section 4 - modifiers .
allow only to proxy from reservation contract .
call this before the starttime to avoid delay .
if you call directly this function your be buy for someone else .
pre-ico status ( base only on time ) .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
approve should be call when allow _spender 0 .
getter totalsupply .
"main function , must run for release ."
owner can change price .
get the balance of an _owner address .
transfer _value tokens to address _to .
transfer _value tokens from address _from to address _to use allowance msg . sender .
assign allowance _value to _spender address to use the msg . sender .
3 month lock up .
address the address of song owner .
set dispute of contract address .
param1 address address of dispute .
_hash string the hash of work registration .
set temp registration .
param1 string the state string of license .
"copyright owner will update price of license when someone issue it , it must be complete in 30 days from issue date ."
param1 address the address of the contract .
param1 address the address of the owner .
set update complete .
param1 bool return true if _price price of license .
param1 address the address of the song owner .
param1 uint percent of royalty partner .
param1 bool royalty partner exist .
param1 uint total percent of royalty partner .
param1 address 5 array of royalty partner address .
change percent of royalty partner .
check dispute if exist .
add token function .
set token control info .
releases angel supply .
releases earlybirds supply .
releases team supply .
releases foundation supply .
releases marketing supply .
releases option supply .
use this method to rescue your tokens if you send them by mistake but be quick or someone else will get them .
vote5 and vote1 be available for future use .
"to register a cabal , you must - implement cabalinterface - open-source your cabal on etherscan or equivalent ."
smart contract must implement the fallback function in order to deregister .
always true for deregistered account .
under no condition should you let anyone control two board account .
"to submit an outside proposal contract , you must : - ensure it conform to proposalinterface - ensure it properly transfer the vote token , call vote . votex ."
"ban prevent account from vote through this proposal this should only be use to stop a proposal that be abuse the vote token the burn be to penalize ban , so that they can not suppress ideas ."
board members reserve the right to reject outside proposals for any reason .
this code live here instead of in the token so that it can be upgrade with account registry migration .
transfer timelocked tokens ; ignore _releasetime if a timelock exist already .
check the locked balance of an owner .
get the tokentimelock contract address for an owner .
21 days after the close of the sale .
trading limit - require 3 weeks to have pass since the sale close .
trading limit - require 3 weeks to have pass since the sale close .
only allow to execute before the sale be close .
start the trade countdown .
sends request to change settings .
returns the confirmation status of a transaction .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
returns list of transaction ids in defined range .
allows an owner to confirm a change settings request .
shows what settings be request in a settings change request .
allows an owner to submit and confirm a transaction .
"burn overwrite , ."
changefoundermultisigaddress be use to change the founder 's address .
transfer tokens from one address to another .
gets the balance of the specified address .
function to check the amount of tokens that an owner allow to a spender .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
updatevalueatnow use to update the balance map and the totalsupplyhistory .
helper function to return a min between the two uints .
"must be call after crowdsale end , to do some extra finalization work ."
return true if crowdsale event have end .
return the amount of token that user can purchase .
return the amount of ether that user can send in order to purchase token .
return the amount of token that msg . sender .
return true if the transaction can buy tokens .
send _amount tokens to _to from _from on the condition it be approve by _from .
_owner the address that 's balance be be request .
this function make it easy to read the allowed map .
queries the balance of _owner at a specific _blocknumber .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
getvalueat retrieve the number of tokens at a give block number .
transfer token for a specified address .
newowner have to accept the ownership before it be transfer .
this be a general safty function that allow the owner to do a lot of things in the unlikely event that something go wrong _dst be the contract be call make this like a 1 / 1 multisig .
make function to write and read index entries and nubmer of entries .
function that handle logic for set price and assign heroes to address .
"gets the current list of heroes , their owners , and price ."
called once by crowdsale finalize ( ) if the sale be success .
true if crowdsale event have not end .
low level token purchase function .
setup token sale smart contract .
ends the fund period and send the eth home .
contribution handler .
check status .
closure handler .
function to set new admin address .
function to set mint and burn lock .
transfer token to a specified address .
transfer token from an address to another specify address use allowance .
assign allowance to an specify address to use the owner balance .
mint token to an specify address .
burn token .
function to mint tokens .
burns a specific amount of tokens .
allows execution by the owner only .
function to mint tokens .
function to enable token transfer .
function to disable token transfer .
function to disable token transfer .
function to change withdrawal address .
allows company withdraw investments .
allows execution by the oracle only .
allows execution by the one of controllers only .
function to set rate of eth .
function to start ico .
function to pause ico .
function to finish ico .
function to issue tokens for investors who make purchase in other cryptocurrencies .
function to issue tokens for investors who pay in ether .
function to enable token transfer .
"if the crowdsale target have not be reach , or the crowdsale have not finish , do n't allow the transfer of tokens purchase in the crowdsale ."
"as long a the crowdsale have not start yet , the owner can change the base price ."
any of the owners can execute this .
can be call once by super owner .
"until all tokens be sell , tokens can be transfer to / from owner 's account ."
"until all tokens be sell , tokens can be transfer to / from owner 's account ."
calc a stake of a driver base on his current time .
calc gain of car at the finish of a race .
amount of tokens that players of coinrace bet during the game and have n't claim yet .
_durationsecs - a duration of race in second .
structure of _carsandrates : .
this be helper function usefull when debug contract or check state on etherscan .
is msg . sender .
calculate how much tokens a win driver can claim once race be over .
result array format : .
result array format : 0 : start_date_unix_ts 1 : duration_sec 2 : first_car_id 3 : ! ! ! new ! ! ! my_unclaimed_tokens .
safe transfer of ownership in 2 step .
add extra owner .
remove extra owner .
"called by the owner on emergency , trigger pause state ."
"called by the owner on end of emergency , return to normal state ."
initialize the protocol .
execute the protocol .
withdraws the reward to the last executor .
"update the protocol state by update offset , last executor and cycle count ."
validate the input sequence of number simplest impl ( current ) : positive value proper impl ( consideration for future versions ) : 00 . . 0481516234200 . . 0-like .
number of second leave until protocol terminate .
"validate the input sequence of number improvement over version 1 protocol , make use of the sequence ."
check if sequence can be represent in form of 48151623420 . . 00 .
migrate functionality .
migrate functionality .
gets the address for a provided namespace in the service locator .
sets or updates service locator registry .
removes a service locator registry .
checks if the provided address be a contract .
this function allow users to purchase video game item .
this function can be use by the owner of a video game item to modify the price of it video game item .
this function will return all of the detail of the video game item .
this function will return only the price of a specific video game item .
this function will return only the owner address of a specific video game .
this function will be use to add a new video game by the contract creator .
returns an array of fund address and associate array of share price and creation time .
transfer _value tokens from _from to _to if msg . sender .
allows _spender to transfer _value tokens from msg . sender .
returns number of allow tokens that a spender can transfer on behalf of a token owner .
returns number of tokens own by the give address .
send _value tokens to _to from msg . sender .
send _value tokens to _to from msg . sender .
allows _spender to transfer _value tokens from msg . sender .
give melon tokens to receive share of this fund .
give share of this fund to receive melon tokens .
"executes active investment and redemption request , in a way that minimise information advantage of investor ."
cancels active investment and redemption request .
redeems by allocate an ownership percentage of each asset to the participant .
makes an order on the select exchange .
takes an active order on the select exchange .
"cancels order that be not expect to settle immediately , i . e ."
standard erc223 function that handle incoming token transfer .
calculates gross asset value of the fund .
calculates unclaimed fee of the fund manager .
calculates the net asset value of this fund .
calculates the share price of the fund .
calculates essential fund metrics .
converts unclaimed fee of the manager into fund share .
redeems by allocate an ownership percentage only of requestedassets to the participant .
quantity of asset hold in exchange accord to associate order id .
calculates shareprice denominate in base unit of melonasset .
dereference fund and trigger selfdestruct .
proof that term and condition have be read and understood .
send _value tokens to _to from msg . sender .
send _value tokens to _to from msg . sender .
erc-721 method .
erc-721 method .
erc-721 method .
erc-721 method .
erc-721 method .
"update the address of the generator contract , can only be call by the admin ."
"internal utility function to finish pve battle , assume that all battle finish requirements have be check ."
"finishpve can be call after battle time be over , if check be pass then battle result be compute , and new warrior be award to owner of specified _warriord id ."
finishpvebatch same a finishpve but for multiple warrior ids .
"when the owner enqueues his warrior for pvp , the warrior enter the wait room ."
"internal utility function to sign up to tournament , assume that all battle requirements have be check ."
generates a new miner warrior with miner perk of common rarity create an auction for it .
warriorsdata pack warrior data .
warriorsdata pack warrior data .
"when the owner enqueues his warrior for pvp , the warrior enter the wait room ."
finishpvp this method find match of warrior pair in wait room and compute result of their fight .
this be a state-modifying function that can be call while the contract be pause .
remove all pvp contenders from pvp queue and return all bet to warrior owners .
remove all pvp contenders from pvp queue and return all entrance fee to warrior owners .
this be public rather than external so we can call super . unpause .
assigns ownership of a specific warrior to an address .
simply a boolean to indicate this be the contract we expect to be .
generate new warrior identity .
cancels an auction unconditionally .
erc-721 method .
erc-721 method .
allows someone to send ether and obtain the token .
the owner can update the rate ( ebsc to eth ) .
the owner can allocate the specified amount of tokens from the crowdsale allowance to the recipient ( _to ) .
"given an amount in ebsc , this method return the equivalent amount in mini-ebsc ."
this be a constructor function which mean the following function name have to match the contract name declare above .
modifier require contract to be live .
explicit getter for balance .
getter for contractisalive .
allow the owner to abort the contract and retrieve all fund .
pay 0 . 00025 eth to map your address to a guess .
call to check your guess and claim reward .
burns a specific amount of tokens .
burns a specific amount of tokens of an address .
receives the initial fund from the crowdsale .
change the liftoken address .
calculate the exponential distribution curve .
returns the current period a a number from 0 to totalperiods .
"calculate the accumulated distribution percentage a of now , follow the exponential distribution curve ."
return the current buy price at which the mvm offer to buy tokens to burn them .
returns the maximum amount of wei that the foundation can claim .
allow to send tokens to the mvm in exchange of eth at the price determine by getbuyprice .
returns whether the mvm end-of - life have be reach .
called from the foundation wallet to claim eth back from the mvm .
pauses the mvm .
unpauses the mvm .
change the liftoken address .
get how many tokens be available to be claim .
"claim the tokens , they can be claim only by the owner of the contract ."
set the wei per usd rate for the tge .
returns the current lif per eth rate during the tge .
allows to get tokens during the tge .
allows to add the address and the amount of wei send by a contributor in the private presale .
modifier ok if the transaction can buy tokens on tge .
modifier ok when block . timestamp .
allows a tge contributor to claim their contributed eth in case the .
allows the owner to return an purchase to a contributor .
"finalizes the crowdsale , take care of transfer of fund to the ."
in case of manual withdrawal .
erc23 start here .
products management start here .
shop management start here .
devidends functions start here .
report lost wallet / / critical emergency .
creates the token to be sell .
low level token purchase function .
"finish crowdsale , ."
pause the token contract .
unpause the token contract .
transfer token 's contract ownership to a new owner .
send ether to the fund collection wallet .
set new date for main-sale ( emergency case ) .
function to calculate bonus tokens base on the amount send by the contributor .
withdraw fund .
in-game use of citys .
calc how much token you can buy at current time .
symbol of this token .
name of this token .
default transferable tokens function return all tokens for a holder ( no limit ) .
throws if destroy flag be not enable .
public functions .
impl ismarttoken .
impl limitedtransfertoken .
withdraw tokens hold by the contract and send them to an account can only be call by the owner .
low level token purchase function .
throws if call after crowdsale be finalize .
throws if call before crowdsale start time .
throws if call not during the crowdsale time frame .
impl finalizablecrowdsale .
the total fund collect in wei ( eth and none eth ) .
true if crowdsale event have end .
true if investors can buy at the moment .
adds / updates address and token allocation for token grant .
delete entries from the grant list .
set fund collect outside the crowdsale in wei .
accepts new ownership on behalf of the leadcoincrowdsale contract .
allows the pendingowner address to finalize the transfer .
allows anyone to execute a confirmed transaction .
"throws if call by any account other than the owner , control ."
this function allow players to purchase the build .
this function allow user to purchase an appartment .
these function will return the detail of a company and the build .
initiate function that will create the company .
overriden to calculate bonuses .
true if the transaction can buy tokens .
functions with this modifier can only be execute by the owner .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
in case the ownership need to be transfer .
create an lockedbalance which can not be trade until admin make it liquid .
make sender 's locked balance liquid when call after lockout period .
create an lockedbalance which can not be trade until admin make it liquid .
make sender 's locked balance liquid when call after lockout period .
"salling : new crowdsale ( ) ( 0 , 4700000 ) ; new 0 . token . token ( ) ; ."
"managertransfer : new crowdsale ( ) ( 0 , 4700000 ) ; new 0 . token . token ( ) ; ."
"after a day , admin finalize the delegation ."
burning function a withdraw money from the system .
create _amount new tokens and transfer them to _to .
can undelegate by pass in newcontract address ( 0 ) .
approve should be call when allow _spender 0 .
burns a specific amount of tokens .
sets price in wei per 1 sofin token .
sets a new game starter dividend percentage .
participate in the game .
end the game .
end the campaign after deadline .
withdraw the fund .
contribution handler .
check status .
closure handler .
"function to mint tokens , it can not exceed the maxsupply value ."
transfer tokens from one address to another .
uses transferfrom so you 'll need to approve some tokens before this one to this contract address .
sets a new owner address .
allows the pendingowner address to finalize the transfer .
allows the upgradeability owner to upgrade the current version of the proxy and call the new implementation to initialize whatever be need through a low level call .
upgrades the implementation address .
allows the current owner to transfer control of the contract to a newowner .
allows the upgradeability owner to upgrade the current version of the proxy .
checks if an address be owner .
checks if an address be operator .
checks if an address be ops or admin .
"checks if an address be ops , owner or admin ."
checks whether the msg . sender .
checks whether the msg . sender .
checks whether the msg . sender .
revokes an allocation from the contributor with address _contributor .
adds a new allocation for the contributor with address _contributor .
the claimtokens ( ) function handle the contribution token claim .
updates the canclaimpresaletokens propety with the new _canclaimtokens value .
updates the canclaimpartnertokens property with the new _canclaimtokens value .
updates the canclaimbonustokens property with the new _canclaimtokens value .
updates the canclaimbonustokens property with the new _canclaimtokens value .
updates the canclaimbonustokens property with the new _canclaimtokens value .
updates the crowdsale contract property with the new _crowdsalecontract value .
updates the tokenperether propety with the new _tokensperether value .
updates the starttimestamp propety with the new _start value .
updates the endtimestamp propety with the new _end value .
updates the wallet propety with the new _newwallet value .
updates the mincontribution propety with the new _newmincontrobution value .
updates the maxcontribution propety with the new _newmaxcontribution value .
revokes a presale allocation from the contributor with address _contributor .
adds a new presale allocation for the contributor with address _contributor .
the purchasetokens function handle the token purchase flow .
updates the whitelist .
checks that the status of an address account .
returns the current time .
checks if the sale have finish .
only use by finalize and setfinalized .
updates the opsaddress propety with the new _opsaddress value .
get my balance .
transfer tokens .
incremento de existencias de token 5 millions .
transfer tokens from other address .
transfer tokens from other address .
return all cryptocolor data .
determines if token exist by check it 's price .
internal function to add a token id to the list of a give address .
createcontracttoken adds new erc721 token .
determines next price of token .
purchase cryptocolor from previous owner .
transfer cryptocolor from previous owner to new owner .
updates the payout for the cryptocolors the owner have .
update a single cryptocolor payout for transfer .
owner can withdraw their accumulate payouts .
contribution handler .
check status .
closure handler .
update a single burrito payout for transfer .
return all burrito data .
createlisting adds new erc721 token .
purchase burrito from previous owner .
"decrease the rate of tangents to ether , the contract can not be tell to give out more tangents per ether , only few ."
return the current amount of wei that will be give for the purchase at purchase index .
cash out ether and tangent at for the purchase at index index .
owner can change erc20 contract address .
add external erc20 tokens balance .
we use the following function to pause and unpause the game .
the dev can update the verified address of the crypto gamer .
the owner can use this function to create new cryptogamers .
initiate function that will create the cryptogamers .
this function allow players to purchase cryptogamers from other players .
this be the function that will allow players to purchase the contract .
the owner of the contract can use this function to modify the price of the contract .
simply return the current owner address .
the owner of a company can reduce the price of the company use this function .
this function will return the detail of a cryptogamer .
get least expensive crypto gamers ( to transfer the owner 5 of the transaction ) .
get most expensive crypto gamers ( to transfer the owner 5 of the transaction ) .
"this function send the pooled eth to the receive address , calculate the of unused eth to be return , and advance the contract to stage three ."
this internal function handle withdrawals during stage three .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create item23 .
check for token ownership .
assigns ownership of a specific item23 to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new item23 with the give name .
returns all the relevant information about a specific item23 .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
contract initialisation .
allows someone to send ether and obtain the token .
access modifier for creator-only functionality .
"adds two number , throw on overflow ."
returns all the relevant information about a specific team .
required for erc-721 compliance .
required for erc-721 compliance .
allows someone to send ether and buy a team .
safety check on _to address to prevent against an unexpected 0x0 default .
assigns ownership of a specific person to an address .
we here repopulate the greenlist use the historic commitments from www . napoleonx . ai .
allows someone to send ether and obtain the token .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create athlete .
check for token ownership .
assigns ownership of a specific athlete to an address .
access modifier for contract owner only functionality .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new promo athlete with the give name , with give _price and assign it to an address ."
creates a new athlete with the give name .
returns all the relevant information about a specific athlete .
required for erc-721 compliance .
"total supply to safe gas , address ( 0 ) be remove since it never hold garrys they be mint and not initially transfer to address ( 0 ) ."
send contracts ethereum to address owner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
query ethereum of contract .
this be a constructor function which mean the following function name have to match the contract name declare above .
check whether the pre-ico be active at the moment .
check whether the ico be active at the moment .
burn remaining tokens .
send tokens to advisors tiqpit solutions wallets .
get purchase by investor 's address .
get purchase by investor 's address .
refund ether invest in pre-ico to the sender if pre-ico fail .
refund ether invest in ico to the sender if ico fail .
manual burn tokens from specify address .
manual send tokens for specified address .
get locked contract address .
enable refund process .
calculate rate for ico phase .
sell tokens during pre-ico ico stag .
add new investment to the pre-ico investments storage .
add new investment to the ico investments storage .
locked specified amount of tokens for specified wallet .
the owner can use this function to create new cryptogamers .
initiate function that will create the cryptogamers .
this function allow players to purchase cryptogamers from other players .
this function will return the detail of a cryptogamer .
ensure the transfer be valid .
enable the transfer of this token .
set the crowdsale address .
burns a specific amount of tokens .
send _value tokens to _to in behalf of _from .
allows _spender to spend no more than _value tokens in your behalf .
"allows _spender to spend no more than _value tokens in your behalf , and then ping the contract about it ."
forward ether to the fund collection wallet .
return true if valid purchase .
selfdestruct crowdsale contract only after crowdsale have end .
token purchase function .
return true if crowdsale event have end .
set crowdsale wallet where fund be collect .
set ico time .
set token rat .
set new minumum amount of wei to participate in ico .
withdraw remain ipc token amount after crowdsale have end .
send erc20 token from this contract .
transfer 'weiamount ' wei to 'beneficiary ' .
set allowance for other address and notify .
transfer tokens .
"internal transfer , only can be call by this contract ."
transfer initial coin to target and prevent from send receive tokens .
allow target from send receive tokens .
destroy tokens .
destroy tokens from other account .
decrease the amount of tokens that an owner allow to a spender .
sell tokens during pre-ico ico stag .
creates a new token with the give name .
this function withdraw the contract owner 's cut .
send ether and obtain the token .
"unlocks erc721 behaviour , allow for trade on third party platforms ."
check for token ownership .
for check approval of transfer for address _to .
assigns ownership of a specific token to an address .
checks if the address ia a contract or not .
"multiplies two number , throw on overflow ."
creates a new token with the give name and _price and assign it to an _owner .
lock contract .
allow token transfer .
erc20 function .
for allocating presold and reserved tokens .
low level token purchase function .
change ownership .
check if presale have end .
check if ico have end .
amount of tokens that have be sell during both presale and ico phase .
function to extract mistakenly sent erc20 tokens send to crowdsale contract and to extract unsold cc tokens .
buy tokens function .
internal function use for calculate ico discount percentage depend on level .
internal function use to calculate amount of tokens base on discount percentage .
this method be use to get the current amount user can receive for 1eth - - used by frontend for easy calculation .
this method be use to get the current amount user can receive for 1btc - - used by frontend for easy calculation .
internal function for execution of crowdsale transaction and proper log use by payable function .
check if presale be active .
check if ico be active .
claim tokens that have be send to contract mistakenly .
crowdsale be the only one allow to do transfer if transfer be pause .
change crowdsale address reference .
pause token transfer .
unpause token transfer .
any unsold tokens from ico will be send to owner address and burn .
used by transfer function .
transfer tokens .
check balance of an address .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
burn remain tokens from the ico balance .
refund tokens from the investor balance .
set backend api address .
add wallet to whitelist .
check the specified wallet whether it be in the whitelist .
check ico failed .
check ico success .
check preico stage .
check ico stage .
check preico finish .
check ico finish .
guard interval finish ? .
set start time and end time for ico .
remaining amount of tokens for preico stage .
remaining amount of tokens for ico stage .
add information about the investment at the preico stage .
add information about the investment at the ico stage .
function can be use to buy tokens by eth investors .
function process new investments .
function can be use to buy tokens by third-party investors .
send raise fund to the withdrawal wallet .
function for refund eth if ico fail and guard interval have not expire .
set new withdrawal wallet address .
set new backend wallet address .
burn unsold tokens from the ico balance .
set new mincap .
set new preico hardcap .
set new ico hardcap .
count the ico investors total .
count the preico investors total .
count the ico investors total ( not include third-party investors ) .
count the preico investors total ( not include third-party investors ) .
get backend wallet address .
get withdrawal wallet address .
configuration setters .
mint function .
withdraw function .
service function .
allows the current owner to transfer control of the contract to a newowner .
check the faucet .
the ownable constructor set the original owner of the contract to the sender account .
determines next price of token .
purchase show from previous owner .
owner can withdraw their accumulated dividends .
this allow me to collect the revenue pay into the contract .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create state .
check for token ownership .
assigns ownership of a specific state to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new state with the give name .
returns all the relevant information about a specific state .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
take leave reward after reward period .
recount reward of somebody .
uses for overwork manual blocked contract for ico time .
this modifier check if reward payment be over .
standard method for transfer from erc20 .
internal implementation for transfer with recount reward .
standard method for transferfrom from erc20 .
standard method for transferfrom from erc20 .
standard method for transferfrom from erc20 .
this method return the amount of caller 's reward .
this method shoud be call when caller want take dividends reward .
divide up reward and make it accesible for withdraw .
the investor should call this function to return eth if crowdsale will be fail .
check be it possiable to buy .
check on min amount for the deal .
check ico be finish .
is withdraw money from smart contract allow .
be refind money for the inverstors be allow .
manual send tokens for the investors in addtional currencies ; .
check state of crowdsale when time be over .
give bounty and all leave tokens to owner .
calculate the current game 's timeout .
sets a new game starter dividend percentage .
participate in the game .
spice up the prize pool .
set the parameters for the next game .
end the game .
approves and then call the receive contract .
"function for user to bet on team idx , ."
"function for user to bet on team idx , ."
"function for user to bet on team idx , ."
required for erc-721 compliance .
allows someone to send ether and obtain the token .
"( note : hard cod value appreciation be 2x from a contract price of 0 eth to 0 . 05 eth , 1 . 2x ."
allow pre-approved user to take ownership of a token .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create villains .
check for token ownership .
assigns ownership of a specific villain to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new villain with the give name .
returns all the relevant information about a specific villain .
zap a villain in preparation for a pinch .
pinch a villain .
guard a villain .
"function for user to bet on team idx , ."
return all country data .
determines if token exist by check it 's price .
internal function to add a token id to the list of a give address .
createlisting adds new erc721 token .
determines next price of token .
purchase country from previous owner .
transfer country from previous owner to new owner .
updates the payout for the countrys the owner have .
update a single country payout for transfer .
"function for user to bet on team idx , ."
"function for user to bet on team idx , ."
"function for user to bet on team idx , ."
adopting a pet .
start iso manually because the block timestamp be not mean the current time .
"since a contract can not call itself , we must manually close the ico ."
"anti-scam function , if the tokens be obtain by dishonest mean , can be use only during ico ."
"the migration process to transfer tokens to the new token contract , when in the contract , a sufficiently large number of investors that the company ca n't cover a miner fee to transfer all tokens , this will be use in the following case : 1 ."
migration can be cancel if tokens have not yet be send to the new contract .
manual migration if someone have problems move .
migrate the holder 's tokens to a new contract and burn the holder 's tokens on the current contract .
the withdraw of tokens from the contract after the end of ico .
the withdraw of ether from the contract .
"setting the number of tokens to buy for 1 ether , change automatically by owner or support account ."
return tokens index own by address ( include history ) .
gets the range store at the specified index .
guarantees msg . sender .
garantee index and token be valid value .
guarantees all color have be sell .
guarantees all color have be sell .
this function allow users to purchase video game .
this function can be use by the owner of a video game to modify the price of it video game .
this function will return all of the detail of the video games .
this function will return only the owner address of a specific video game .
this function will be use to add a new video game by the contract creator .
enable token sale ; .
disable token sale .
"internal transfer , only can be call by this contract ."
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
approve and then communicate the approve contract in a single tx .
function for other contract to call to get balance of individual account .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
freeze ? prevent target from send receive tokens .
unfreeze ? allows target from send receive tokens .
must be call to start the crowdsale .
"must be call after crowdsale end , to do some extra finalization work ."
must be call only in special case .
"must be call after the crowdsale end , to send the remain tokens back to owner ."
low level token purchase function .
transfer use for special contribuitions .
true if the transaction can buy tokens .
function to add a minter in the list of minters .
function to revoke a minter .
function to self unregister minter .
function to mint tokens .
sets a new game starter dividend percentage .
participate in the game .
helper function set to manipulate on bits with different widht of allocator .
this function set flag to pause room on next clearstate call ( at the game start ) .
this methods clear the state of current lottery .
in case lottery ticket be n't sell due some time anybody who buy a ticket can ask to refund money ( - comission to send them ) .
this method determine current game winner .
this method be use to finalize lottery it generate random number and send prize it use 32 block to generate pseudo random value to determine winner of lottery .
return only x last winners to prevent stack overflow of vm .
this function allow to destroy current contract in case all room be pause or not use .
finalize methods .
constant functions .
public function .
internal functions .
adopting a pet .
burns a specific amount of tokens from owner .
loser payout .
refund player .
static information getters .
game information getters .
owner only setters .
oraclize random number function the callback function be call by oraclize when the result be ready the oraclize_randomds_proofverify modifier prevent an invalid proof to execute this function code : the proof validity be fully verify on-chain .
placing a bet .
securely generate number randomly .
check if the player win or refund if randomness proof fail .
winner payout .
funtion to updatecap .
funtion to update exchange rate .
funtion to update maxwei contribution .
funtion to update wallet for contributions .
funtion to pause the sale .
low level token purchase function .
throws if call by any account other than the owner .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
function to mint tokens .
allows anyone to transfer the rec tokens once trade have start .
allows anyone to transfer the rec tokens once trade have start .
modifier to allow token creation only when the sale is on .
convert bytes to address .
allows the owner to set the periods of ico in days ( ! ) .
allows anyone to create tokens by deposit ether .
allows the owner to mint tokens for command ( 10 ) .
allows the owner to mint tokens for bounty ( 2 ) .
allows to set the total alt deposit measure in eth to make sure the hardcap include other deposit .
allows the owner to finish the mint .
throws if call by any account that be not authorize .
allows the owner to transfer erc20 tokens to the multi sig vault .
function to get a specific authorizer .
function to check if an address be authorize .
adopting a pet .
throws if call by any account other than the owner or allow .
cap mint so that totalsupply max_token .
allows control of the contract to a newallowed .
function to set transfer lock .
transfer token for a specified address .
transfer tokens from one address to another .
compares two string and return true iff they be equal .
"due to cost a lot of gas , consolation prize random number will be do on server side ."
participate in the game .
end the game .
member function to mint tokens to a beneficiary .
member function to mint time base vest tokens to a beneficiary .
member function to finish the mint process .
member function to unlock token for trade .
this function allow users to purchase dragon ball z hero .
this function will return all of the detail of the dragon ball z heroes .
this function will be use to add a new hero by the contract creator .
"function for user to bet on team idx , ."
callback from oraclize .
transfer _value tokens to address _to .
transfer _value tokens from address _from to address _to use allowance msg . sender .
assign allowance _value to _spender address to use the msg . sender .
allows someone to send ether and obtain the token .
for create person .
check for token ownership .
for pay out balance on contract .
"creates a new promo person with the give name , with give _price and assign it to an address ."
overrides abstract internal method to calculate payment proportion for old owner out of sell price in current purchase .
overrides the abstract method to calculate the next sell price base on current sell price of the asset .
make sure weisend of current tx be reset .
we allow anyone to burn their tokens if they wish to do so .
buys tokens on behalf of an address .
finalize a succcesful crowdsale .
crowdfund state machine management .
get the current tranche or bail out if there be no tranche define for the current block .
token assignation through transfer .
token amount calculation .
implements the criterion of the fund state .
sets new minimum buy value for a transaction .
investing function that recognize the payer and verify that he be allow to invest .
investing function that recognize the payer .
the basic entry point to participate in the crowdsale process .
extended to transfer half of the unused fund to the team 's multisig and release the token .
change the the starting time in order to end the presale period early if need .
change the the end time in order to be able to finalize the crowdsale if need .
override to reject call unless the crowdsale be finalize or the token contract be not the one correspond to this crowdsale .
make sure this function name match the contract name above .
get the total token supply .
get the account balance of an account with address _owner .
send _value amount of tokens to address _to .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
returns the amount which _spender be still allow to withdraw from _owner .
send coin .
function that be call when a user or another contract want to transfer fund .
"second signatory consent for contract pause state change , trigger the change ."
reject pause status change proposal .
"transfer erc20 tokens out of this contract , to avoid them be stick here forever ."
adds a proposition of a company token split to companytokensallocation .
approves a proposition of a company token split .
rejects a proposition of a company token split .
length of company allocations per period .
information about company alloction .
adds a proposition of a partner token split to companytokensallocation .
approves a proposition of a partner token split .
standard function transfer similar to erc20 transfer with no _data .
rejects a proposition of a partner token split .
length of partner allocations per period .
information about partner alloction .
approves a bounty transfer and mint tokens .
rejects a proposition of a bounty token .
length of company allocations .
override the transfer and mint function to respect pause state .
propose split method add proposal to the split array .
"approves the split allocation , so it can be claim after periods ."
rejects the split allocation .
send _value tokens to _to from _from on the condition it be approve by _from .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
returns the amount which _spender be still allow to withdraw from _owner .
propose a bounty transfer .
amount of tokens which we approve .
rejects a bounty transfer .
first signatory consent for contract pause state change .
low level token purchase function .
erc-721 compliance .
for create item .
creates a new item with the give name .
returns all the relevant information about a specific item .
allows someone to send ether and obtain the token .
batch assets transfer .
calculator electionsmarketsavingsbank . github . io .
collect accrue interest reward ( receive stake profit ) .
"closing a term deposit before the end of the term , or maturity , come with the consequence of save only the doubled interest ! the penalty for withdraw prematurely be the sum amount_to_invest ."
fee be 2 .
in order to withdraw the interest income or reinvest it - paste your own address in '_to ' field .
"when you donate any amount from balance , deposit be untouched ."
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
this method will change ispayableenabled flag .
change rbinformationstoreaddress .
change name .
change symbol .
mint new token amount .
increase cap .
decrease cap .
rollback transfer .
transfer from msg . sender .
this method will change old sponsee address with new one .
get all minted identifiers ; .
returns the identifier of the parent of an identifier .
"name of the collection of deeds ( non-fungible token ) , a define in erc721metadata ."
"symbol of the collection of deeds ( non-fungible token ) , a define in erc721metadata ."
introspection interface a per erc-165 ( https : / / github . com / ethereum / eips / issue / 165 ) .
checks if a give address own a particular deed .
approve a give address to take ownership of a deed .
checks if a give address have approval to take ownership of a deed .
assigns ownership of a specific deed to an address .
returns the total number of deeds currently in existence .
returns the number of deeds own by a specific address .
returns the address currently assign ownership of a give deed .
approve a give address to take ownership of a deed .
approve a give address to take ownership of multiple deeds .
transfer a deed to another address .
transfers multiple deeds to another address .
"transfer a deed own by another address , for which the call address have previously be grant transfer approval by the owner ."
"transfer multiple deeds own by another address , for which the call address have previously be grant transfer approval by the owner ."
returns a list of all deed identifiers assign to an address .
returns a deed identifier of the owner at the give index .
returns an ( off-chain ) metadata url for the give deed .
set the threshold for a payment to be send directly .
set whether price can be change manually .
set the maximum dividend depth .
calculate the next price give the current price .
set the price of a deed .
set the initial price of a deed .
pay dividends to parent of a deed .
pay dividends to recent buyers .
pay trade dividends .
calculate the contract fee .
"shift the 6 most recent buyers , and add the new buyer to the front ."
send fund to a beneficiary .
withdraw ( unowed ) contract balance .
create a collectible .
set the parent collectible of a collectible .
buy a collectible .
return a collectible 's detail .
"internal transfer , only can be call by this contract ."
modifier require contract to be live .
explicit getter for balance .
allow the owner to abort the contract and retrieve all fund .
take a guess .
erc20 override function .
account link function .
transaction function .
private function .
fix for the erc20 short address attack .
interface marker .
allow the token holder to upgrade some of their tokens to a new contract .
set an upgrade targget that handle the process of let users opt-in to the new token contract .
get the state of the token upgrade .
change the upgrade master .
child contract can enable to provide the condition when the upgrade can begin .
erc20 approveandcall extension .
"internal transfer , only can be call by this contract ."
get order list count .
limit order price ( all price be multiply by price_factor ) .
market order to take order price ( all price be multiply by price_factor ) .
set admin .
suspend deposit ( prepare for upgrade to a new contract ) .
set market detail .
set register cost .
register token .
get token list count .
allows someone to send ether and obtain the token .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create city .
check for token ownership .
alternate function to withdraw less than total balance .
assigns ownership of a specific city to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new token with the give name , parentid and price and assign it to an address ."
returns all the relevant information about a specific token .
required for erc-721 compliance .
alternate function to withdraw less than total balance .
returns an array of fund address and associate array of share price and creation time .
create a new swap .
"internal transfer , only can be call by this contract ."
gets the total amount of tokens store by the contract .
mint token function .
burns a specific token .
check the balance .
you might wan na check if the cap have be reach before do anything .
"i would n't call this if i be you , who know what could happen ."
"internal transfer , only can be call by this contract ."
"allows _spender to spend no more than _value tokens in your behalf , and then ping the contract about it ."
allow the owner to abort the contract and retrieve all fund .
we use the following function to pause and unpause the game .
get least expensive share of one company .
the dev can use this function to create new company .
initiate function that will create the company .
this function allow players to purchase company from other players .
we use this function to allow users to purchase advertisment from a list .
this function be use to handle the purchase of a share .
this function will return an array of address of the company shareholders ( very useful to transfer their ad commission ) .
the owner of a company can reduce the price of the company use this function .
the owner of a share can reduce the price of the select share use this function .
this function will return the detail of a company .
this function will return the share own by the sender .
constructor parameters .
halts or unhalts direct trade without the sell / buy function below .
transfer function extend by check of eth balance and pay transaction cost with gr if not enough eth .
user buy grimreapers and pay in ether .
user sell grimreapers and get ether .
refund to owner .
function to mint tokens .
function to stop mint new tokens .
function to mint tokens .
transfer token for a specified address .
change the upgrade agent .
transfer token for a specified address .
withdraw the amount of token that be remain in this contract .
confirm that airdrop be available .
confirm that airdrop be available for msg . sender .
do the airdrop to msg . sender .
change the state of stop flag .
transfer payment from an option 's buyer to the seller less the 1 fee send to the admin .
allows a taker to fill an offchain order for an option create by a maker .
allows a maker to cancel their offchain option order early ( i . e .
handler for trade tokens into and out of the option at the give strike price .
allow an option 's buyer to trade tokens into and out of the option at the strike price until the option 's maturation .
allows an option 's seller to withdraw their fund after the option 's maturation .
users must first deposit eth into the exchange in order to purchase options .
users can withdraw any amount of eth up to their current balance .
"to deposit tokens , users must first approve the transfer in the token contract ."
users can withdraw any amount of a give token up to their current balance .
transfer fund from one user 's balance to another 's .
transfer fund from a user 's balance into an option .
transfer fund from an option to a user 's balance .
hashes an option 's parameters for use in look up information about the option .
computes the current state of an option give it parameters .
bid action .
the bid be cancel by the advertiser .
the bid be cancel by the publisher .
"this can be do if a bid be accept , but expire ."
both publisher and advertiser have to call this for a bid to be consider verified .
make sure this function name match the contract name above .
helper function use when calculate win amount .
converts the ether accrue a dividends back into epy tokens without have to withdraw it first .
sells your tokens for ether .
function that return the ( dynamic ) price of sell a single token .
calculate the current dividends associate with the caller address .
"returns real dividends , include negative value ."
sell function that take tokens and convert them into ether .
return a random number base on blockhashes and address .
return value of all dividends currently hold by all shareholders .
"dynamic value of ether in reserve , accord to the crr requirement ."
"dynamic value of ether in reserve , accord to the crr requirement ."
converts a number tokens into an ether value .
converts a number tokens into an ether value .
return user 's payout from his last bet .
"claim last bet ( if it exist ) , create a new one and send back any leftover balance ."
add value to dividends .
subtract value from dividends .
claim last bet .
public function use to fill user interface with data .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
the address of the owner be the only address that can call a function with this modifier .
this method can be use by users hold old proxy tokens to swap for new tokens at the ratio of 1 : 2 .
changes the owner of the contract .
send _amount tokens to _to from msg . sender .
send _amount tokens to _to from _from on the condition it be approve by _from .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
the balance of _owner at the current block .
enables token holders to transfer their tokens freely if true .
this method can be use by the owner to extract mistakenly sent tokens to this contract .
the transaction address and send the event a approval .
"token distribution to founder , develoment team , partner , charity , and bounty ."
send value token to to from msg . sender .
send value token to to from from .
returns true if we can bet ( in bet window ) .
"trigger a payout immediately , before the scheduled payout , if the data source have already be update ."
performs payout base on win team .
modifier to only allow the execution of certain function restrict to the bookies .
callback from oraclize .
returns the total amount bet for the sender .
set balance and freeze time for address .
get the token balance for account _owner .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
transfer token for a specified address .
transfer tokens from one address to another .
set allow for other address .
add or remove support tokens .
set the owner cut for auction .
withdraw sales fee .
returns true if the claimant own the token .
"escrows the nft , assign ownership to this contract ."
transfers an nft own by this contract to another address .
adds an auction to the list of open auction .
cancels an auction unconditionally .
computes the price and transfer winnings .
removes an auction from the list of open auction .
creates and begin a new auction .
"bids on an open auction , complete the auction and transfer ownership of the nft if enough ether be supply ."
this be a state-modifying function that can be call while the contract be pause .
returns auction info for an nft on auction .
returns the current price of an auction .
change owner of the contract .
withdraw fund .
set buy now price .
set buy now price .
set duration .
create a new handle if the handle be valid and not own .
"checks if a handle be valid : a-z , 0-9 , _ ."
checks if a handle be available .
approve the auctionhouse and start an auction .
get tokenid for a give handle .
get handle for a give tokenid .
get the handle owner .
lock / unlock transfer .
buy token function call only in duration of crowdfund active .
transfer token for a specified address .
transfer tokens from one address to another .
checks whether it can transfer or otherwise throw .
returns current token owner .
checks modifier and allow transfer if tokens be not lock .
checks modifier and allow transfer if tokens be not lock .
transfer token to the owner of the contract ( beneficiary ) .
"release all the bet back to the bettors if , for any reason , payouts can not be complete ."
performs payout base on win team .
moves ico end date by one month .
"owner of contract can withdraw collect eth , if soft cap be reach , by call this function ."
this function should be use to manually reserve some tokens for big shark or bug-bounty program participants .
internal function .
"calculates bonuses , specific for the ico ."
return all burrito data .
determines if token exist by check it 's price .
internal function to add a token id to the list of a give address .
createlisting adds new erc721 token .
purchase burrito from previous owner .
transfer burrito from previous owner to new owner .
updates the payout for the burritos the owner have .
update a single burrito payout for transfer .
public methods to give and take that only owners can call .
freeze ? prevent allow target from send receive tokens .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
rule we always lower the price any time there be a new high contribution ! .
sell tokens back to sender use owners ether .
this should only be call from the above function .
most basic exchange - just calculate price ratio .
interface declaration .
calculate the current price for buy in amount .
explicit getter for owner .
explicit getter for balance .
allow the owner to abort the contract and retrieve all fund .
take a guess .
brand public brand ; .
sell the smart token for eth note that the function will sell the full allowance amount .
withdraw eth from the contract .
verify that the gas price be low than 50 gwei .
verify that the ether cap be valid base on the key provide .
ensure that it 's early than the give time .
ensure that the current time be between _starttime ( inclusive ) and _endtime ( exclusive ) .
ensure that the sender be bitcoin suisse .
ensure that we do n't reach the ether cap .
ensure that we do n't reach the bitcoin suisse ether cap .
compute the real cap base on the give cap key .
enable the real cap define on deployment .
compute the number of tokens that should be issue for a give contribution .
eth contribution can only be call during the crowdsale .
contribution through btcs ( bitcoin suisse only ) can only be call before the crowdsale start .
"handle contribution logic note that the contribution event be trigger use the sender a the contributor , regardless of the actual contributor ."
end of test function helper function use when calculate win amount .
sell function that take tokens and convert them into ether .
"dynamic value of ether in reserve , accord to the crr requirement ."
"claim last bet ( if it exist ) , create a new one and send back any leftover balance ."
claim last bet .
this be a constructor function which mean the following function name have to match the contract name declare above .
"internal transfer , only can be call by this contract ."
set frozen status of account .
start the crowdsale .
close the crowdsale and issue unsold tokens to owner address .
goal achieve ahead of time .
issue token base on ether receive .
issue token for reserve .
compute the amount of ss token that can be purchase .
issue unsold token to owner address .
"true if sale have start , false otherwise ."
"true if sale have end , false otherwise ."
true if sale be due when the last phase be finish .
true if the hard cap be reach .
true if the soft cap be reach .
transfer tokens from one address to another .
set allowance for other address .
function to check the amount of tokens than an owner allow to a spender .
destroy tokens .
destroy tokens from other account .
set admin account .
allows someone to send ether and obtain the token .
returns all the relevant information about a specific card .
assigns ownership of a specific card to an address .
creates a new token with the give name .
set golden card token .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new token with the give name .
send ether and obtain the token .
creates a new token with the give name and _price and assign it to an _owner .
this function be use to set the reward for the winner .
checks that a give side be of correct color .
checks if the give state be in solved state .
shuffles a single side of a face .
returns the state of the cube after perform the give move .
the function that be use to submit the solution to the blockchain .
the function that allow the winner of the contest to claim the reward after the contest have end .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
refund to owner .
"executes active investment and redemption request , in a way that minimise information advantage of investor ."
calculates essential fund metrics .
converts unclaimed fee of the manager into fund share .
redeems by allocate an ownership percentage only of requestedassets to the participant .
function that be call when transaction target be a contract .
function to access name of token .
function to access symbol of token .
function to access decimals of token .
function to access total supply of tokens .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
fix for the erc20 short address attack .
atomic increment of approved spend .
atomic decrement of approved spend .
decimal number .
lba token contract version .
transfer token for a specified address .
transfer tokens from one address to another .
save some gas by make only one contract call .
we use parameter '_tokenid ' a the divisibility .
transfer gift to a new owner .
create new forever rise .
"turn on this contract to be tradable , so owners can transfer their token ."
helper function ( internal function ) .
add the divisibility to new owner .
remove divisibility from last owner .
remove divisibility from last owner .
withdraw ether from this contract to multi sigin wallet .
allow address to do early participation .
make an investment .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
returns number of confirmations of a transaction .
returns total number of transactions after filers be apply .
"returns array with owner address , which confirm transaction ."
returns list of transaction ids in defined range .
allows to remove an owner .
allows to replace an owner with a new owner .
allows an owner to confirm a transaction .
allows anyone to execute a confirmed transaction .
returns the confirmation status of a transaction .
returns all the relevant information about a specific team .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create team .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
owner can transfer out any accidentally send erc20 tokens .
only to be use by the ico .
transfer the balance from owner 's account to another account .
create the token to be sell .
low level token purchase function .
function to change the price rate for phase 1 can only be call from owner wallet .
function to change the price rate for phase 1 can only be call from owner wallet .
function to pause the crowdsale can only be call from owner wallet .
"function to resume the crowdsale if it be pause can only be call from owner wallet if the crowdsale have be stop , this function would not resume it ."
remaining tokens for sale .
create the token to be sell .
low level token purchase function .
authentication function .
getdepositor function .
withdraw function .
required for erc-20 compliance .
required for erc-20 compliance .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
required for erc-721 compliance .
allow pre-approved user to take ownership of a token .
required for erc-721 compliance .
required for erc-721 compliance .
for create collectible .
check for token ownership .
create tokens for token owners in alpha game .
required for erc-721 compliance .
assigns ownership of a specific collectible to an address .
this method must never be call by smart contract code .
return an array with all token ids .
returns all the relevant information about a specific collectible .
allows someone to send ether and obtain the token .
create tokens for token owners in alpha game .
create tokens for token owners in alpha game .
required for erc-20 compliance .
only the owner have the ability to transfer it ownership .
throws if call by any account other than the owner .
success bool .
success bool .
remain uint256 .
success bool .
success bool .
success bool .
a boolean that indicate if the operation be successful .
bool success .
enable or block transfer - to be call in case of emergency .
enable or block transfer - to be call in case of emergency .
allows the current owner to transfer control of the contract to a newowner .
value uint256 value of _checkpoints at _block .
value uint256 value to add to the checkpoints ledger .
clonedtokenaddress address .
low level token purchase function .
price uint256 .
forwards fund to the tokensale wallet .
bool valid .
totalsupply uint256 servus token total supply .
balance uint256 corresponding token holder balance .
change the servus token controller .
total supply uint256 .
total supply uint256 .
balance uint256 .
balance uint256 .
success bool .
success bool .
"the owner can withdraw ethers already during presale , only if the minimum fund level have be reach ."
the participant will need to withdraw their fund from this contract if the presale have not achieve the minimum fund level .
"the owner can clawback any ethers after a date in the future , so no ethers remain trap in this contract ."
keep track of participants contributions and the total fund amount .
add a number to a base value .
subtract a number from a base value .
only a max of 250 initial card can ever be create .
craft two card .
250 be the max number of card that the developers be allow to print themselves .
return all estate data .
determines if token exist by check it 's price .
internal function to add a token id to the list of a give address .
createlisting adds new erc721 token .
purchase estate from previous owner .
transfer estate from previous owner to new owner .
updates the payout for the estates the owner have .
update a single estate payout for transfer .
creates a new person with the give name .
allows owner to change promo value .
get balance of investor .
mint tokens .
send coin throw on any error rather then return a false flag to minimize user errors .
an account / contract attempt to get the coin throw on any error rather then return a false flag to minimize user errors .
add new member of syndicate .
buy into syndicate .
how many share ? .
how much profit ? .
for previous contributors to hedgely v0 . 1 .
"return the status of the player note if the player share cycle ! sharecycle , then the playcount be stale - so return zero without set it ."
the full amount invest in each option .
each player can get their own portfolio .
the number of investors this session .
reset the market condition .
main entry point for investors / players .
find low option set currentlowestcount 1 if there be more than 1 low .
distribute winnings at the end of a session .
convenience to manage a grow array .
admin function in event of an issue .
in the event of catastrophe .
shareholder profit claim .
player profit claim .
player winnings claim .
allocate player winnings .
distribute profit among shareholders and players in top 10 .
update the count for this player .
convenience to manage a grow array .
"internal transfer , only can be call by this contract ."
transfer some fund to the target investment address .
sets the amount of gas allow to investors .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create pizza .
check for token ownership .
assigns ownership of a specific pizza to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new pizza with the give name .
returns all the relevant information about a specific pizza .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
function to update token name and symbol .
single address .
a dispense feature to allocate some address with xinfin tokens calculation do use token count .
allows the current owner to transfer control of the contract to a newowner .
allows the new owner toaccept ownership .
allow the token holder to upgrade some of their tokens to a new contract .
set an upgrade agent that handle .
change the upgrade master .
get the token balance for account tokenowner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
delegate your vote to the voter ( to ) .
check if goal be reach .
transfer token to the owner of the contract ( beneficiary ) / / afterdeadline .
deposit and withdraw .
allows someone to send ether and obtain the token .
"this function send the pooled eth to the receive address , calculate the of unused eth to be return , and advance the contract to stage three ."
internal function for handle eth refund during stage three .
allows the current owner to transfer control of the contract to a newowner .
"call by the owner to pause , trigger stop state ."
internal utility function .
"example : 0 . 00007115 btc will be setprice ( btc , 7115 , 8 ) ."
value be return with accuracy of 18 decimals ( same a token ) .
"note : the standard be still in draft mode , so these be best efforts implementation base on currently direction of the community and exist contract which reside in the wild ."
"internal function to transfer without prior validation , require callers to perform due-diligence ."
public functions - non erc721 specific .
extended attribute .
guarantees msg . sender .
burns a specific token .
tells whether the msg . sender .
internal function to clear current approval and transfer the ownership of a give token id .
internal function to clear current approval of a give token id .
internal function to add a token id to the list of a give address .
internal function to remove a token id from the list of a give address .
gets the total amount of tokens store by the contract .
gets the balance of the specified address .
gets the list of tokens own by a give address .
gets the owner of the specify token id .
gets the approved address to take ownership of a give token id .
transfers the ownership of a give token id to another address .
approves another address to claim for the ownership of the give token id .
claims the ownership of a give token id .
mint token function .
shows what settings be request in a settings change request .
low level token pledge function .
mint be allow while totalsupply totaltokens .
modifier to check transaction initiator be only owner .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
calculate number of tokens that will be receive in one ether .
to enable pause sale for break in ico and pre-ico .
to resume paused sale .
this function be use to register a referral .
owner be allow to manually register who be refer by whom .
finalize the crowdsale .
failsafe drain .
ownership can be transfer to provided newowner .
transfer sender 's token to a give address .
transfer tokens to an address give by sender .
"transfer tokens from one address to another , for erc20 ."
close private sale and transfer token ownership to the presale contract .
create new instance of token contract .
buy lovelock ( with eth ) .
buy buy_lovelock_withlov .
transfer owner .
allows someone to send ether and obtain the token .
allow the owner of the token change the price of the person .
set usd / eth rate in usd ( 1000 ) .
finish crowdsale in some reason like goals reached or etc .
time utility function .
"calculatebonusamount , view tag attach a it do not manipulate state ."
override to enforce modifier that ensure that ico be close before the following function be invoke .
allow pre-approved user to take ownership of a token .
for check approval of transfer for address _to .
check for token ownership .
required for erc-721 compliance .
assigns ownership of a specific collectible to an address .
this method must never be call by smart contract code .
access modifier for contract owner only functionality .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new promo collectible with the give name , with give _price and assign it to an address ."
allow owners of tokens to decrease the price of them or if there be no owner the coo can do it .
returns all the relevant information about a specific collectible .
required for erc-721 compliance .
allow the token holder to upgrade some of their tokens to a new contract .
set an upgrade agent that handle .
get the state of the token upgrade .
kill switch for the token in the case of distribution issue .
one way function to perform the final token release .
transfer tokens from one address to another .
burn extra tokens from a balance .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
for check approval of transfer for address _to .
for create code token .
check for token ownership .
for pay out balance on contract .
assigns ownership of a specific code to an address .
returns all the relevant information about a specific codetoken .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
allow pre-approved user to take ownership of a token .
required for erc-721 compliance .
set allowance for other address and notify .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
pay dividends to parent of a deed .
calculate the contract fee .
buy a collectible .
"internal transfer , only can be call by this contract ."
approve ? prevent allow target from send receive tokens .
recieve vote from who-token - contract .
please make sure that ico pool be at least equal to your bid .
calculation of token ratio in ico .
set / unset address a permissioned .
set / unset address a permissioned .
update address recieving distribute tokens in vote .
increases totalsupply by specified amount .
manually add an exist whovote contract .
manually add an exist whovote contract .
disable vote .
pyfactory payout of winner .
participating in a voting .
internal send vote to voting-contract .
checks if last mint be 3 weeks in past .
checks if last mint be 3 weeks in past .
checks if account have staff-level .
total number of tokens in existence .
gets balance of address .
owner can transfer out any accidentally send erc20 tokens .
low level token purchase function .
"public methods if crowdsale be unsuccessful or block , investors can claim refund here ."
view methods .
only owner methods .
emergency methods .
create new instance of token contract .
true if investors can buy at the moment .
we 're override the fund forward from crowdsale .
"vault finalization task , call when owner call finalize ( ) ."
only a max of 250 speical card can ever be create .
crowdsale utility methods .
emergency methods ( only builder owner or enabled address ) .
internal methods .
owner only setters .
placing a bet .
securely generate number randomly .
check if the player win or refund if randomness proof fail .
sets up alll the address need for the token distribution .
distributes all the tokens belong to this contract to it 's define destinationss .
allows participants to buy tokens .
allows owner to add address to the whitelisted .
allow the owner to change the max gas price .
triggers the finalization process .
checks if purchase be valid .
internal function that redirect recieved fund to wallet .
calculates the amount of tokens that buyer will recieve .
calculates wei cost of specific amount of tokens .
checks the current week in the sale .
triggers the sale finalizations process .
give the current rate ( in wei ) that buy exactly one token .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
allows owner to add short message to token .
this function be add in order to give the ability to manually set ownership history since this have to be redeploy .
this function be add in order to give the ability to manually set the previous price since this have to be redeploy .
allows someone to send ether and obtain the token .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create emoji .
check for token ownership .
assigns ownership of a specific emoji to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new promo emoji with the give name , with give _price and assign it to an address ."
returns all the relevant information about a specific emoji .
required for erc-721 compliance .
owner can fix how many second per block be currently observe .
luck be determine a follow : .
take in genes and return raceid race be first loci after version .
return a number between 0 and 4 base on which stat to increase 0 - no stat increase 1 - dexterity 2 - strength 3 - vitality 4 - luck .
random number from 0 to ( _modulus - 1 ) .
in case we ever add a bad race type .
"used to mark the smart contract a upgraded , in case there be a serious break bug ."
this be a constructor function which mean the following function name have to match the contract name declare above .
create the marketmaker and the cc token put all the cc token in the market maker reserve .
open the market maker to recvice transactions from all source .
sale have begin base on time and status .
sale be pass it endtime .
sale consider successful when it raise equal to or more than the softcap .
sale considerd fail when it raise less than the softcap .
createissuance create local currency issuance sale .
internal helper to add currency data to the issuance map .
participate in the issuance of the local currency .
participate in the cln base issuance ( for contract ) .
"call by the creator to finish the sale , open the market maker and get his tokens ."
"give back cc and get a refund back in cln , dev can only be call after sale end and the softcap not reach ."
"give back cc and get a refund back in cln , dev can only be call after sale end and the softcap not ."
"normal send cln to the market maker contract , sender must approve ( ) before call method ."
"erc223 transferandcall , send cln to the market maker contract can only be call by owner ( see marketmaker ) ."
"normal send cc to the market maker contract , sender must approve ( ) before call method ."
"erc223 transferandcall , send cc to the market maker contract can only be call by owner ( see marketmaker ) ."
open the market maker to recvice transactions from all source .
check if the parameters that be send to the create be valid for a promised price and buyback .
helper function to fetch market maker contract address deploed with the cc .
helper function to approve tokens for market maker and then change tokens .
helper function participation with cln .
returns total number of issuances after filter be apply .
returns list of issuance ids ( allso the token address of the issuance ) in define range after filter be apply .
allow the owner to transfer out any accidentally send erc20 tokens .
transfer tokens from one address to another .
function use etheraffle 's birthday to calculate the week number since then .
"function which get current week number and if different from the global var week number , it update that and set up the new raffle struct ."
to pause the contract 's function should the need arise .
function to buy ticket .
withdraw winnings function .
called by the weekly oraclize callback .
"function total up oraclize cost for the raffle , subtract it from the prizepool ( if less than , if great than if pause the contract and fire an event ) ."
the oralize call back function .
"slices a string accord to specify delimiter , return the sliced part in an array ."
takes oraclize random . org .
"takes the result of the oraclize etheraffle api call back and use them to calculate the prize due to each tier ( 3 match , 4 match etc ) then push them into the win amount array in the raffle in question 's struct ."
"function compare array of entrant 's 6 chosen number to the raffle in question 's win number , count how many match there be ."
"manually make an oraclize api call , incase of automation failure ."
"set the gas relevant price parameters for the oraclize call , in case of future need for high gas price for adequate transaction time , or incase of oraclize price hike ."
upgrades the etheraffle contract .
self destruct contract .
function allow manual addition to the global prizepool .
return true iff the contract be open for public trade .
return true iff token be supperted by this contract ( for erc223 / 677 tokens call ) .
initialize the contract after transfer all of the tokens form the pair .
initialize the contract during erc223 / erc677 transfer of all of the tokens form the pair .
initialize the contract .
"the price of token1 in term of token2 , represent in 18 decimals ."
"the price of token1 in term of token2 , represent in 18 decimals ."
get a quote for exchange and update temporary reserve .
get a quote for exchange .
calculate second reserve from the first reserve and the supllies .
change tokens .
change tokens .
change tokens use erc223 erc677 transfer .
exchange tokens .
update token reserve from temp value .
validate that the tokens balance do n't go below reserve .
allow admin to withraw excess tokens accumulate due to precision .
reverts if operational .
reverts if msg . sender .
reverts if tkn . sender .
the market maker constructor .
"redeem bonus lot : this function can not be call until the crowdsale be over , nor after the withdraw period ."
"housekeeping - call in the event this contract be no longer need , after a lot upgrade for example ."
modifier function to prepend to methods render them only callable by address approve for freeze .
modifier function to prepend to methods to render them only callable when the frozen toggle be false .
transfer the specified amount of lot to the specify address .
transfer the specified amount of lot to the specify address .
returns balance of the _owner .
change the frozen status of the lot token .
allow addition of freezers to allow future contract to use the role .
remove a freezer should they no longer require or need the the privilege .
please make sure that ico pool be at least equal to your bid .
set / unset address a permissioned .
update address recieving distribute tokens in vote .
increases circulatingsupply_ by specified amount .
manually add an exist whovote contract .
manually add an exist whovote contract .
disable vote .
pyfactory payout of winner .
participating in a voting .
total number of tokens in existence .
gets balance of address .
token-transfer from msg . sender .
unfreeze currently available amount of tokens .
fix current token amount ( calculate absolute value of every portion ) .
withdraw remain tokens after all freeze periods be over ( in case there be additional token transfer ) .
returns total supply of issue tokens .
returns balance of address .
transfers tokens from your address to other .
approve other address to spend tokens on your account .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
check crowdsale state and calibrate it .
if there be any issue / attach with refund owner can withdraw eth at the end for manual recovery .
owner can set multisig address for crowdsale .
owner can set token address where mint will happen .
owner can claim team tokens when crowdsale have successfully end .
presale bonus tokens .
decide if throw or only return ether .
calculate how much user can contribute .
issue tokens and return if there be overflow .
push contributor data to the contract before the crowdsale so that they be eligible for priority pass .
method be need for recover tokens accidentally send to token address .
withdraweth when minimum cap be reach .
pull the fund that be set to send with call of withdraweth when minimum cap be reach .
users can claim their contribution if min cap be not raise .
owner can batch return contributors contributions ( eth ) .
send _value amount of tokens from address _from to address _to .
transfer the balance from owner 's account to another account .
transfer the balance from owner 's account to advisor 's account .
make an investment .
allocate tokens for the early investors .
allow address to do early participation .
called once by crowdsale finalize ( ) if the sale be success .
low level token purchase function .
"when at risk , evacuate tokens ."
true if crowdsale event have end .
override this method to have a way to add business logic to your crowdsale when buy .
send ether to the fund collection wallet .
burns a specific amount of tokens .
! setup the address for new contract ( to migrate coin to ) .
! migrate tokens to the new token contract .
! migrate holders of tokens to the new contract .
! setup the address for new contract ( to migrate coin to ) .
! throws if call by any account other than the migrationgate .
! transfer tokens to multipe destination address .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create waifu .
check for token ownership .
assigns ownership of a specific waifu to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new waifu with the give name .
returns all the relevant information about a specific waifu .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
allow address to do early participation .
allow crowdsale owner to close early or extend the crowdsale .
make an investment .
owner can remove by set cap 0 .
an optimization in case of network congestion .
for create games .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new game with the give name .
allows someone to send ether and obtain the token .
to payout to an address .
allows someone to send ether and obtain the token .
to get price of a stamp .
to get the next price of a stamp .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
required for erc-721 compliance .
for emergency purpose .
dissolve function which mine new stamp .
to transfer dissolved stamp .
for check approval of transfer for address _to .
for create stamp .
check for token ownership .
assigns ownership of a specific stamp to an address .
grant another address the right to transfer stamp via takeownership ( ) and transferfrom ( ) .
to create a stamp .
to get stamp information .
required for erc-721 compliance .
constructor function .
allows someone to send ether and obtain the token .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
for create meme .
assigns ownership of a specific meme to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new promo meme with the give name , with give _price and assign it to an address ."
creates a new meme with the give name .
returns all the relevant information about a specific meme .
returns all the relevant information about a specific meme .
"we ( bookies ) can trigger a payout immediately , before the scheduled payout , if the data source have already be update ."
"function for user to bet on team idx , where 0 wizards and 1 cavaliers ."
contructor that give msg . sender .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create card .
check for token ownership .
assigns ownership of a specific card to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new card with the give slug .
returns all the relevant information about a specific card .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
for create card .
for create waifus .
allows someone to send ether and obtain the token .
to transfer token contract ownership .
constructor function .
constructor function .
transfer token for a specified address .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
note that admin can only burn their own tokens .
only callable by current owner .
get decision result address .
"500eth investors , everyone 5 ."
try to close window period .
mall application delegate transfer .
tntoo withdraw a eth .
deploy a new proxy instance set custom owner of proxy .
when a host create an promotion event .
either host or manager can end the promotion if need .
this be the 'grab red pocket ' function .
checks if a give address already claim in a promotion .
for host : returns the number of promotions host by a specific address .
for host : return an array of promotion ids that an address host .
for claimant : returns the number of promotions claim by a specific address .
for claimant : return an array of promotion ids that an address claim .
returns all the relevant information about a specific promotion .
the host be able to withdraw the fund when the promotion be finish .
create the token to be sell .
low level token purchase function .
function to change the end date time can only be call from owner wallet .
function to change the start date time can only be call from owner wallet .
function to change the price rate can only be call from owner wallet .
function to enable token sales post ico can only be call from owner wallet .
transfers tokens from your address to other .
calcute the tokens .
allocate token for foundation address .
allocate token for team address .
approve other address to spend tokens on your account .
a contract attempt to get the coin .
issue new tokens .
set initial message .
withdraw ether to a safe wallet .
allocate token .
function to stop the crowdsale can only be call from the owner wallet .
"function to start the crowdsale manually can only be call from the owner wallet this function can be use if the owner want to start the ico before the specified start date this function can also be use to undo the stopcrowdsale , in case the crowdsale be stop due to human error ."
shows the remain tokens in the contract i . e .
function to show the equity percentage of an owner - major or minor can only be call from the owner wallet .
function to change the coin percentage award to the partner can only be call from the owner wallet .
send ether to the fund collection wallet ( s ) .
function to add a partner can only be call by the major / actual owner wallet .
function to remove a partner can only be call by the major / actual owner wallet .
function to change the end date of the ico .
function to set the new price can only be call from owner wallet .
throws if call when not during sale .
"executes active investment and redemption request , in a way that minimise information advantage of investor ."
makes an order on the select exchange .
calculates gross asset value of the fund .
"ofversion : address of the version , active : whether the version in question be active , timestamp : when the version in question be add to the list ."
add an approved version of melon .
remove and shut down version of melon .
legacy function .
propose new versions of melon .
approve new versions of melon .
trigger new versions of melon .
propose shutdown of melon version .
approve shutdown of melon version .
trigger shutdown of melon version .
cancels an order on the give exchange .
public entrypoints .
accept give quantity of an offer .
cancel an offer .
make a new offer .
takes an order on the give exchange .
checks whether investment be permit for a participant .
checks whether redemption be permit for a participant .
whether price of assets have be update less than validity second ago .
gets price of an asset multiply by ten to the power of assetdecimals .
"price of a registered asset in format ( bool arerecent , uint price , uint decimals ) ."
gets inverted price of an asset .
gets reference price of an asset pair .
gets price of order .
checks whether data exist for a give asset pair .
updates description information of a registered asset .
deletes an exist entry .
get asset specific information .
only owner ; same size input array .
get pricefeed specific information .
whether price of asset have be update less than validity second ago .
checks if the makeorder price be within maximum allow deviation from reference price .
checks if the takeorder price be within maximum allow deviation from reference price .
checks whether investment be permit for a participant .
checks whether redemption be permit for a participant .
low level token purchase function .
send ether to the fund collection wallet .
"multiplies two number , throw on overflow ."
allows heir to transfer ownership only if heartbeat have time out .
throw an exception if call by any account other than the heir 's .
set heir 0x0 .
heir can pronounce the owners death .
owner can send a heartbeat if they be mistakenly pronounce dead .
for withdraw any tokens send to this address .
destroy tokens .
director can close the contribution .
director can open the contribution .
"internal transfer , can be call by this contract only ."
set allowance for other address .
returns all the relevant information about a specific collectible .
required for erc-721 compliance .
allow pre-approved user to take ownership of a token .
for create collectible .
check for token ownership .
required for erc-721 compliance .
assigns ownership of a specific collectible to an address .
this method must never be call by smart contract code .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new promo collectible with the give name , with give _price and assign it to an address ."
allow owners of tokens to decrease the price of them or if there be no owner the coo can do it .
only manager can do this action .
see the current price of carnita .
change current price of carnita .
see the current price to paycarnita .
change current price of paycarnita .
see the current max participants .
change current minimun of max participants .
check the number of current participants .
add new participant .
checks if contract be run and have not be stop .
checks if contract be stop or deadline be reach .
generate a random number .
recover fund in case of error .
emergency stop or contract .
change manager .
see the current manager .
change bitsoaddress .
see the current manager .
contructor that give msg . sender .
"must be call after crowdsale end , to do some extra finalization work ."
true if the transaction can buy tokens .
send coin .
use admin power to send from a users account .
"internal transfer , only can be call by this contract ."
get balance of an account .
approve an address to have admin power to use transferfrom .
function to whitelist partner address .
function to authenticate user .
function to update the partnervaluesmap with their amount and challenge string .
function to update the hydrogenvaluesmap .
function call by hydro api to check if the partner have validate .
loser payout .
refund player .
oraclize random number function the callback function be call by oraclize when the result be ready the oraclize_randomds_proofverify modifier prevent an invalid proof to execute this function code : the proof validity be fully verify on-chain .
check if the player win or refund if randomness proof fail .
winner payout .
"creates a new promo collectible with the give name , with give _price and assign it to an address ."
sale be execute in stag / tranches .
sell token and send to contributor address .
add participants to whitelist in bulk .
when finish the crowdsale we mint non-crowdsale tokens base on total tokens mint during crowdsale .
user balance .
gets the balance of the specified address .
due to change average of block time this function will allow on adjust duration of campaign closer to the end .
it will be call by fallback function whenever ether be send to it .
this function will finalize the sale .
it will allow contributors to get refund in case campaign fail .
"in case refund be need , money can be return to the contract ."
set the step of the campaign .
return number of contributors .
it will be call by owner to start the sale .
this function can be use by the owner of a team to modify the price of it team .
this function will return all of the detail of our team .
this function will return only the price of a specific team .
this function will return only the add of a specific team .
we run this function once to create all the team and set the initial price .
100m coin total reward begin at 250 and be cut in half every reward era ( a tokens be mine ) .
allows someone to send ether and obtain the token .
the mythical sample be a type common that appear only once in a 1000 .
internal function of the contract .
find who own that jingle and at what position be it in the owners arr .
owner function .
internal function of the contract .
addresses can set their name when compose jingle .
the only ether keep on this contract be owner money for sample .
owners function .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create tubers .
check for token ownership .
assigns ownership of a specific tuber to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new tuber with the give name .
returns all the relevant information about a specific tuber .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
this function allow players to purchase countries from other players .
we run this function once to create all the team and set the initial price .
fix for the erc20 short address attack .
set an upgrade agent that handle .
get the state of the token upgrade .
child contract can enable to provide the condition when the upgrade can begin .
can only be call by the owners .
allows the current owners to transfer control of the contract to a new owner .
modifier to allow action only when the contract is pause .
"internal transfer with security check , only can be call by this contract ."
modifier to allow token purchase only when purchase be unlocked and rate 0 .
call by the owner to lock purchase of ipc token .
call by the owner to release purchase of ipc token .
call by the owner to set a new rate ( consider decimals of token ) .
call by the owner to set the minimum wei amount to buy some token .
call by the owner to set a new vendor .
call by the owner to make the purchase preparations ( 'approve ' must be call separately from 'vendorwallet ' ) .
buy token by send at least 'minimumweiamount ' wei .
can only be call by the icoagent .
modifier to allow token transfer only when '_sender ' be icoagent or crowdsale have end .
send _value tokens to _to from your account .
call by an icoagent to release token transfer after crowdsale .
call by the owner to set a new _icoagent or remove one .
return true if 'address ' be an icoagent .
send erc20 token from this contract .
owner can update token information .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
interface marker .
allow the token holder to upgrade some of their tokens to a new contract .
approves and then call the receive contract .
modifier to make a function callable only when the contract be not pause .
interface declaration .
allow another contract to spend some tokens on your behalf .
burns the tokens that be not sell during the ico .
low level token purchase function .
determine the current stage by term period .
check cap and change the stage .
get ammount of tokens .
"sell dai price , will be less than normal conversion , _minreturn should be 1 / ( dai / eth price ) * . 95 ."
"buy dai price , will be more than normal conversion , _minreturn should be 1 / ( dai / eth price ) * 1 . 05 ."
"keccak256 order hash , part two ."
"validate a provided order , hash , and signature ."
approve an order and optionally mark it for orderbook inclusion .
return whether or not two order can be match with each other by basic parameters ( do not check order signatures / calldata or perform static call ) .
"match two order , ensure validity of the match , and execute all associate state transition ."
"call hashorder - solidity abi encode limitation workaround , hopefully temporary ."
"call validateorder - solidity abi encode limitation workaround , hopefully temporary ."
"call approveorder - solidity abi encode limitation workaround , hopefully temporary ."
"call cancelorder - solidity abi encode limitation workaround , hopefully temporary ."
"call calculatecurrentprice - solidity abi encode limitation workaround , hopefully temporary ."
"call orderscanmatch - solidity abi encode limitation workaround , hopefully temporary ."
return whether or not two order ' calldata specifications can match .
mask must be 1 / 8th the size of the byte array .
"call calculatematchprice - solidity abi encode limitation workaround , hopefully temporary ."
"call atomicmatch - solidity abi encode limitation workaround , hopefully temporary ."
charge an address fee in protocol tokens .
"keccak256 order hash , part one ."
asset-centric getter function .
authorization getters .
internal operations .
supply-altering function .
update related function .
query if an address implement an interface and thru which contract .
sets the contract that will handle a specific interface ; only the address itself or a manager define for that address can set it .
global getters .
transfers sender 's tokens to a give address .
allows allow third party to transfer tokens from one address to another .
returns number of tokens own by give address .
sets approve amount of tokens for spender .
returns number of allow tokens for give address .
owner can transfer out any accidentally send erc20 tokens .
multiplies the give number by 10 ( decimals ) .
mint new tokens to foundationreserve .
burn tokens from foundationreserve .
withdraws tokens from foundation reserve .
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
true if crowdsale event have end .
only admin .
be sure to get the joy token ownerships .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create grey .
check for token ownership .
assigns ownership of a specific grey to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new grey with the give name .
returns all the relevant information about a specific grey .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
creates a new token with the give name .
returns all the relevant information about a specific token .
get buyer referrer .
get referrer balance .
purchase token and increse referrer payout .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
for create token .
assigns ownership of a specific token to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
returns next token price .
allows someone to send ether and obtain the token .
fix for the erc20 short address attack .
add a new founder / advisor and give him / her some token .
obtain bounty token .
withdraw eth from contract .
lock token in specified address for some time _address : locked address _value : lock token _time : when it could be unlock .
lock token of founder for periodically release _address : founder address ; _value : totoal lock token ; _round : round founder could withdraw ; _period : interval time between two round .
allow lock token to be obtain for member .
allow lock token to be obtain for founder .
start ico .
end ico .
transfer all unsold token to bounty balance ; .
change rate of public sale .
add a new member and give him / her some token .
"try to beat every other player in the top10 with your strong monster ! effectively loop through all top10 players , beat them one by one and if strong enough place your in the top10 as well ."
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
for check approval of transfer for address _to .
for create rich token .
check for token ownership .
assigns ownership of a specific rich to an address .
returns all the relevant information about a specific richtoken .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
allow pre-approved user to take ownership of a token .
required for erc-721 compliance .
function to mint tokens .
constructor parameters .
halts or unhalts direct trade without the sell / buy function below .
transfer function extend by check of eth balance and pay transaction cost with cli if not enough eth .
user buy climatecoins and pay in ether .
user sell climatecoins and get ether .
refund to owner .
"function for user to bet on team idx , where 0 wizards and 1 cavaliers ."
burn hels by user .
burn hels from users .
function that be call when transaction target be a contract .
allows someone to send ether and obtain the token .
allows someone to send ether and obtain the token .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create color .
check for token ownership .
assigns ownership of a specific color to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new color with the give name .
returns all the relevant information about a specific color .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
approves and then call the receive contract .
we run this function once to create all the team and set the initial price .
admin fns .
end admin fns .
what be the balance of a particular account ? .
true if crowdsale event have start .
throws if call by any account other than the owner .
function to mint tokens .
we run this function once to create all the team and set the initial price .
function be call at the end of an ico .
returns the name of the current round in plain text .
"at the request of the investor , we raise the fund ( if the round have fail because of the hardcap ) ."
we check whether we collect the necessary minimum fund .
"change the date and time : the begin of the round , the end of the bonus , the end of the round ."
we change the purpose of raise fund .
"change the price ( the number of tokens per 1 eth ) , the maximum hardcap for the last bet , the minimum bet ."
"we change the parameters of the discount : min bonus , max bonus , number of step ."
transfers the fund of the investor to the contract of return of fund .
"the ability to quickly check round1 ( only for round1 , only 1 time ) ."
remove the pause of exchange .
enable the pause of exchange .
pause of sale .
withdrawal from the pause of sale .
checking whether the right to address ignore the pause of exchange .
"for example - after 5 years of the project 's existence , all of u suddenly decide collectively ( company + investors ) that it would be more profitable for everyone to switch to another smart contract responsible for tokens ."
change the address for the specified role .
the beneficiary at any time can take right in all roles and prescribe his wallet in all the rollers .
check for the possibility of buy tokens .
"if a little more than a year have elapse ( round2 start date + 400 days ) , a smart contract will allow you to send all the money to the beneficiary , if any money be present ."
"we accept payments other than ethereum ( eth ) and other currencies , for example , bitcoin ( btc ) ."
the function for obtain smart contract fund in eth .
modifier to allow action only when the contract is pause .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
balance of the specified address .
check for the ability to finalize the round .
transfer of tokens from one account to another .
returns the number of tokens that _owner trust to spend from his account _spender .
trust _sender and spend _value tokens from your account .
transfer of tokens from the trusted address _from to the address _to in the number _value .
issue new tokens to the address _to in the amount _amount .
stop the release of tokens .
redefinition of the method of the return status of the exchange pause .
add a wallet ignore the exchange pause .
remove the wallet ignore the exchange pause .
enable the transfer of current tokens to others .
reissue your tokens .
depositing fund on behalf of an tokensale investor .
move the collected fund to a specified address .
allow refund to investors .
return the fund to a specify investor .
the logic of finalization .
the manager ( no-freezes ) the tokens for the team .
for bounty .
"for market , referral , reserve ."
initializing the round .
function to mint tokens .
burns a specific amount of tokens .
"creates a new promo emoji with the give name , with give _price and assign it to an address ."
creates a new emoji with the give name .
returns all the relevant information about a specific emoji .
returns all the relevant information about a specific emoji .
allows someone to send ether and obtain the token .
assigns a new address to act a the coo .
for create emoji .
for pay out balance on contract .
assigns ownership of a specific emoji to an address .
updates ownercut .
lock ownercut .
lock token of founder for periodically release _address : founder address ; _value : totoal lock token ; _round : round founder could withdraw ; _period : interval time between two round .
allow lock token to be obtain for founder .
transfer all unsold token to bounty balance ; .
change rate of public sale .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
transfer token to a contract address with additional data if the recipient be a contact .
transfer token to a specify address with additional data if the recipient be a contract .
transfer token to a specified address .
"multiplies two number , throw on overflow ."
allow user to transfer pharmcoin tokens .
check user be allow to spend amount .
list the current sale price of a planet .
buy a planet .
increase price with 5 .
decrease price with 5 .
transfers sender 's tokens to a give address .
allows allow third party to transfer tokens from one address to another .
we run this function once to create all the team and set the initial price .
functions with this modifier can only be execute by the owner .
allow spender to spend the value amount on your behalf .
spend value from a different account grant you have allowance to use the value amount .
returns the amount which _spender be still allow to withdraw from _owner .
get tokens for the company .
lock the crowdsale .
unlock the crowd sale .
set the price to pre-sale .
set the price to reg sale .
withdraw fund from the contract .
transfers the director to a new address .
returns total .
balance of a particular account .
the address of the controller be the only address that can call a function with this modifier .
queries the balance of _owner at a specific _blocknumber .
total amount of tokens at a specific _blocknumber .
creates a new clone token with the initial distribution be this token at _snapshotblock .
generates _amount tokens that be assign to _owner .
burns _amount tokens from _owner .
enables token holders to transfer their tokens freely if true .
getvalueat retrieve the number of tokens at a give block number .
updatevalueatnow use to update the balance map and the totalsupplyhistory .
internal function to determine if an address be a contract .
helper function to return a min betwen the two uints .
changes the controller of the contract .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
update the dapp by create a new token with new functionalities the msg . sender .
send _amount tokens to _to from msg . sender .
send _amount tokens to _to from _from on the condition it be approve by _from .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
the balance of _owner at the current block .
this function make it easy to read the allowed map .
this function make it easy to get the total number of tokens .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
"unlocks erc721 behaviour , allow for trade on third party platforms ."
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create politician .
check for token ownership .
assigns ownership of a specific politician to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new promo politician with the give name and _price and assign it to an address .
creates a new politician with the give name .
returns all the relevant information about a specific politician .
decrease the amount of tokens that an owner allow to a spender .
modify method to only allow the owner to call it .
buy chi tokens .
withdraw all fund from contract .
gets the balance of the specified address .
approve should be call when allow _spender 0 .
add to whitelist .
add batch to whitelist .
"after seal , no more whitelisting be possible ."
override low level token purchase function to send data to validpurchase ( ) .
true if investors can buy at the moment .
transfer balance from sender 's account to receiver 's account .
spend value from a different account grant you have allowance to use the value amount .
withdraw fund from the contract .
owner can change end date .
standart erc-20 function .
function that be call when a user or another contract want to transfer fund .
function that be call when transaction target be a contract .
"give kyc status , so token can be trade by this wallet ."
refund eth to non-kyced investors .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
allows the current owner to set the pendingowner address .
allows the pendingowner address to finalize the transfer .
allows the owner to set a string with their contact information .
whitelist a single address .
remove an address from whitelist .
whitelist array of address .
check if address be whitelisted .
function that be call when a user or another contract want to transfer fund .
"if crowdsale be unsuccessful , investors can claim refund here ."
"internal transfer , only can be call by this contract ."
sets the state of buy and sell operations .
deposits ether to the contract .
the owner withdraw ether from the contract .
buy tokens from contract by send ether .
sell amount tokens to the contract .
overrides internal transfer due to frozen account check .
sends gfc from the owner to the smart-contract .
overrides basic transfer function due to commission value .
overrides basic transferfrom function due to commission value .
"allow address to pay newbuyprice eth when buy and receive newsellprice eth when sell , foreach token buy / sell ."
update key value from the previous state to new .
find previous key for exist value .
mint timelocked tokens .
modifier to allow only owner have full control on the function .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
allows the current admin to transfer control of the contract to a newadmin .
transfer tokens from one address to another .
true if the transaction can buy tokens .
current time .
add to whitelist .
whitelist verification .
get the volume-based bonus rate .
"if the user not claim after 90days , owner revoke the ether to wallet ."
"if crowdsale be unsuccessful , investors can claim refund here ."
it will call when crowdsale unsuccessful if crowdsale complete .
change crowdsale starttime .
change the changemincontribamount .
change crowdsale endtime .
change the token price .
change the goal .
change the whitelist maximum contribution amount .
change publicallocation .
change wallet address .
prevent manual mint tokens when ico be active ; .
allow token transfer .
erc20 function .
true if sale period be active .
allow people use metamask / cipher et .
the owner should be able to end the auction .
this function allow players to purchase countries from other players .
we run this function once to create all the team and set the initial price .
allows anyone to transfer the tokens once trade have start .
allows anyone to transfer the tokens once trade have start .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
adding whennotpaused .
adding whennotpaused .
low level token purchase function override to create custom buy .
"create the token on the fly , owner be the contract , not the contract owner yet ."
low level token purchase function .
true if investors can buy at the moment .
true if crowdsale event have end .
admin function only call by owner : .
admin function only execute by pendingowner .
run the pre mint of the reserve token .
add a way to change the whitelistadmin user .
send contracts ethereum to address owner .
transfer tokens from the from account to the to account .
oraclize random number function the callback function be call by oraclize when the result be ready the oraclize_randomds_proofverify modifier prevent an invalid proof to execute this function code : the proof validity be fully verify on-chain .
securely generate number randomly .
check if the player win or refund if randomness proof fail .
this be a constructor function which mean the following function name have to match the contract name declare above .
true if investors can buy at the moment .
true if crowdsale event have end .
create the token to be sell .
"allow user to leave purchase group ; note that their contribution will be add to their withdrawable balance , and not directly refund ."
allow user to leave purchase group ; note that their contribution and any fund they have in their withdrawablebalance will transfer to them .
withdraw balance from own account .
fn for adjust commission rate .
group be dissolve after fn call .
group be dissolve after fn call .
called by any c-level role to pause the contract .
unpauses the smart contract .
called by any c-level role to set the contract to .
access modifier for cfo-only functionality .
unpauses the smart contract .
assigns a new address to act a the ceo .
assigns a new address to act a the cfo .
assigns a new address to act a the coo1 .
assigns a new address to act a the coo2 .
assigns a new address to act a the coo3 .
"backup fn to allow transfer of token out of contract , for use where a purchase group want to use an alternate sell platform ."
"withdraws sale commission , cfo-only functionality ."
get contribute balance in _tokenid token group for user .
get contribute balance in _tokenid token group for user .
access modifier for coo-only functionality .
get array of contributors ' address in _tokenid token group .
get no .
get list of tokenids of token group a user contribute to .
get list of tokenids of token group the user contribute to .
get price at which token group purchase _tokenid token .
get withdrawable balance from sale proceed for a user .
get total contribute balance in _tokenid token group .
clears record of a group from a contributor 's record .
access modifier for contract managers only functionality .
redistribute proceed from token purchase .
calculates next price of celebrity token .
calls celebritytoken purchase fn and update record .
modifier to allow action only when the contract is not in fork mode .
modifier to allow action only when the contract is in fork mode .
backup function for activate token purchase require sender to be a member of the group or clevel .
allow user to contribute to _tokenid token group .
available to mint by owner .
private function .
bulk token transfer function .
are tokens tradeable .
"create the contract , and set the destination address to that of the creator ."
"create the contract , and set the destination address to that of the creator ."
modifier that will execute internal code block only if the sender be the parent address .
finalize a succcesful crowdsale .
allow address to do early participation .
make an investment .
transfer tokens from approve ( ) pool to the buyer .
preallocate tokens for the early investors .
"create the contract , and set the destination address to that of the creator ."
transfer token for a specified address .
set the amount of tokens that an owner allow to a spender .
transfer tokens from one address to another .
burns a specific amount of tokens .
transfer the same amount of tokens to each address of a list .
"this function send the pooled eth to the receive address , calculate the of unused eth to be return , and advance the contract to stage three ."
encode transfer .
perform multiple token transfer from message sender 's address .
backup function in case of eth price fluctuations .
low level token purchase function .
true if the transaction can buy tokens .
finalize the sale and calculate final token supply and distribute amount .
true if crowdsale event have end .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
returns unpayed wei for a give address .
token holder must call this to receive dividends .
low level token purchase function .
"must be call after crowdsale end , to do some extra finalization work ."
true if crowdsale event have end .
true if the transaction can buy tokens .
transfers tokens hold by timelock to beneficiary .
transfers tokens hold by timelock to all beneficiaries .
finalizes the sale and token mint .
allocates tokens and bonus tokens to early-bird contributors .
"allocates bonus tokens to advisors , founder and company ."
allows an owner to submit and confirm a transaction .
allows an owner to confirm a transaction .
allows anyone to execute a confirmed transaction .
"internal transfer , only can be call by this contract ."
freeze ? prevent allow target from send receive tokens .
allows to add a new owner .
allows to add a new admin .
allows to remove an owner .
allows to remove an admin .
allows to replace an owner with a new owner .
allows to change the number of required confirmations .
prevent the development fund from transfer it tokens while they be lock .
allow the owner to retrieve all the collect eth .
allow the owner to enable or disable the token sale at any time .
pre-sale configuration .
preferred sale configuration .
main sale configuration .
low level token purchase function .
true if the transaction can buy tokens .
change target address where investment request be forward .
change gas limit for buy ( ) method call .
stop the sale .
resume the sale .
sell tokens to specify address .
token sale state machine management .
withdraw remain tokens to the team wallet .
change current token price .
prolong ico if owner decide to do it .
"called by the owner on excess , trigger stop state ."
"called by the owner on end of excess , return to normal state ."
called by the owner to destroy contract .
functions with this modifier can only be execute by the owner .
transfer the ownership to new owner .
allow owner to modify address of wallet .
compute amount of token base on 1 eth 2400 cjt .
low level token purchase function .
true if crowdsale event have end .
finalize crowdsale buy burn the remain tokens can only be call when the ico be over .
allows someone to send ether and obtain the token .
transfer token for a specified address .
transfer tokens from one address to another .
function to mint tokens .
function to record snapshot block and amount .
function to stop mint new tokens .
function to calculate dividends .
function to record user withdrawal .
low level token purchase function .
internal function for transfer handle .
true if the transaction can buy tokens .
true if sale be over .
get current user balance .
get user balance of tokens on specific block .
get awailable dividends for withdrawal .
total purchase tokens value .
user-related method for withdrawal dividends .
function for deposit ether to token address a / for dividends .
gets the balance of the specified address .
queries the balance of _owner at a specific _blocknumber .
total amount of tokens at a specific _blocknumber .
getvalueat retrieve the number of tokens at a give block number .
updatevalueatnow use to update the balance map and the totalsupplyhistory .
this function make it easy to get the total number of tokens .
limit token transfer until the crowdsale be over .
tranfer tokens from one address to other .
tokens balance .
approve transfer .
token allowance .
the function can be call only before or after the tokens have be releasesd .
if holder do not exist add to array .
the function can be call only by release agent .
fix for the erc20 short address attack http : / / vessenes . com / the-erc20 - short-address - attack-explained .
make sure we be not do yet .
create new tokens and allocate them to an address .
set the contract that can call release and make the token transferable .
tranfer tokens to address .
access-modifier for ceo-only functionality .
access-modifier for cfo-only functionality .
access-modifier for curator-only functionality .
access-modifier for c-level - only functionality .
assigns a new address to the ceo role .
assigns a new address to the curator role .
called by any c-level role to pause the contract .
this be public rather than external so it can be call by derived contract .
returns the snatch window of the give token .
assigns ownership of a specific masterpiece to an address .
an internal method that create a new masterpiece and store it .
this contract do n't handle set the masterpiece 's next list price .
computes next price of token give the current sale price .
"computes the payment for the token , which be the sale price of the token minus the house 's cut ."
required for erc-20 and erc-721 compliance .
required for erc-20 and erc-721 compliance .
required for erc-20 and erc-721 compliance .
returns a list of all masterpiece ids assign to an address .
introspection interface a per erc-165 ( https : / / github . com / ethereum / eips / issue / 165 ) .
optional for erc-20 compliance .
optional for erc-20 compliance .
required for erc-721 compliance .
required for erc-20 and erc-721 compliance .
required for erc-20 and erc-721 compliance .
checks if a give address be the current owner of a particular masterpiece .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
checks if a give address currently have transferapproval for a particular masterpiece .
computes the price and transfer winnings .
returns true if the nft be on auction .
"bids on an open auction , complete the auction and transfer ownership of the nft if enough ether be supply ."
cancels an auction when the contract be pause .
returns auction info for an nft on auction .
places a bid for the masterpiece .
transfers the balance of the sale auction contract to the masterpiececore contract .
the auction contract variable ( saleauction ) be define in masterpiecebase to allow u to refer to them in masterpieceownership to prevent accidental transfer .
the owner of a masterpiece can put it up for auction .
allows someone to send ether and obtain the token .
creates a new masterpiece with the give name and artist .
"creates a new promotional masterpiece with the give name , artist , start price , and owner ."
"used to mark the smart contract a upgraded , in case there be a serious break bug ."
withdraw all ether from the contract .
returns all the relevant information about a specific masterpiece .
this be public rather than external so we can call super . unpause .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
oraclize random number function the callback function be call by oraclize when the result be ready the oraclize_randomds_proofverify modifier prevent an invalid proof to execute this function code : the proof validity be fully verify on-chain .
"event queryidretrieved ( bytes32 _queryid ) ; event queryidconverted ( uint _queryid ) ; event queryidbetvalueadded ( uint _queryid , uint _betvalue ) ; event queryidbetplayeraddressadded ( uint _queryid , address _playeraddress ) ; event callbackinitiatedwithparameters ( bytes32 _queryid , string _result , bytes _proof ) ; event proofverifysuccess ( bool _success ) ; event currentqueryidset ( uint _queryid ) ; event randomnumbergenerated ( uint _randomnumber ) ; event amounttopayoutset ( uint _amount ) ; event playerlost ( bool _lost ) ; event secondarypayoutvariableset ( uint _payout ) ; event playeraddresspriortopayoutis ( address _address ) ; event currentbetincremented ( uint _currentbetnumber ) ; ."
securely generate number randomly .
check if the player win .
uint256 _envelopetypeid uint256 2 _data 0 - maxnumber 1 - feerate .
uint256 _envelopeid uint256 3 _data 0 - envelopetypeid 1 - quantity ; 2 - willexpirein ; 3 - random .
uint256 _envelopeid uint256 4 _data 0 - willexpireafter 1 - v 2 - r 3 - s .
uint256 _envelopeid .
throws if call by any account other than the owner .
lock transfer during the ico .
approve and then comunicate the approve contract in a single tx .
access modifier for ceo-only functionality .
do n't want to sell kim anymore ? .
use this function to find out how much the auctionhouse will take from this transaction .
transfer tokens .
this function return bool of owenrship over the token .
how much be kims really go for now a days ? .
this function serve for users to withdraw their ethereum .
allows the cfo to capture the balance available to the contract .
access modifier for cfo-only functionality .
access modifier for coo-only functionality .
assigns a new address to act a the ceo .
assigns a new address to act a the cfo .
assigns a new address to act a the coo .
only the coo can release new kims into the market .
do n't want to keep this kim ? .
like a kim ? .
get namelist length for export map .
get addeess from name .
get ipfs hash from name .
"update address for name , or create new name - address map ."
"internal transfer , only can be call by this contract ."
modifier to allow action only when the contract is not pause .
modifier to allow action only when the contract is pause .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
destroy tokens from other account .
"internal transfer , only can be call by this contract ."
get a lock by it id .
locks must be purchase in 20x20 pixel block .
calculate the cost of the lock by it size and skin .
check if a lock can be set in the give position .
set address withdaw wallet .
set small lock price .
set medium lock price .
set big lock price .
set new bridge height .
set new bridge width .
withdraw out the balance of the contract to the give withdraw wallet .
the the total number of lock .
first period will go from crowdsale . start_date .
"will transfer the tokens vest until now to the beneficiary , if the vestingperiodstarted and there be an amount leave to transfer ."
token number .
amount of tokens .
changes registration status of an address for participation .
changes registration statuses of address for participation .
override calculatetokenamount for whilelist investors .
getregisteredamount for whilelist investors .
init intervals .
low level token purchase function .
total invest amount .
true if investors can buy at the moment .
"when the crowdsale be finish , we send the remain tokens back to the wallet ."
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer .
allows someone to send ether and obtain the token .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create gem .
check for token ownership .
assigns ownership of a specific gem to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new promo person with the give name , with give _price and assign it to an address ."
creates a new gem with the give name .
returns all the relevant information about a specific gem .
required for erc-721 compliance .
below function can be use when you want to send every recipeint with different number of tokens .
this function can be use when you want to send same number of tokens to all the recipients .
get current price : dgtx to cents .
checks if auction have end .
function to receive transaction from oracle with new eth rate .
"function to transfer tokens to participants in the range _from , _to ) ."
"lets the owner withdraw extra tokens , which be not sell during the auction ."
lets the owner withdraw ethers from contract .
lets the owner withdraw all ethers from contract .
function which record bid .
assemble the give address bytecode .
internal function to make an oraclize query for rate update with give delay in second .
anyone can call this function to start update cycle .
"function to receive erc223 tokens ( only from token , only once , only total_tokens ) ."
allows anyone to transfer the mit tokens once trade have start .
allows anyone to transfer the mit tokens once trade have start .
calculates the amount of bonus coin the buyer get .
true if crowdsale event have end .
throw if person send be not contract owner or cs role .
throw if person send be not authorise or send nothing .
authorise an account to participate .
authorise a lot of account in one go .
ban an account from participation ( default ) .
set a new cs representative .
set a freeforall to true ( in case you leave to anybody to send ethers ) .
set a freeforall to false ( in case you need to authorise the acconts ) .
low level token purchase function .
transfer ownership of the token to the owner of the presale contract .
transfer token for a specified address .
transfer tokens from one address to another .
function to mint tokens .
the owner can update the rate ( etyc to eth ) .
the owner can allocate the specified amount of tokens from the crowdsale allowance to the recipient ( _to ) .
"given an amount in etyc , this method return the equivalent amount in mini-etyc ."
transfer some fund to the target investment address .
access modifier for owner only functionality .
assigns a new address to act a the owner .
allow pre-approved user to take ownership of a token .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create all stars .
check for token ownership .
change the current gen of all star by importance .
for pay out balance on contract .
assigns ownership of a specific all star to an address .
"creates a new promo allstar with the give name , with give _price and assign it to an address ."
creates a new allstar with the give name .
returns all the relevant information about a specific allstar .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
transfers tokens hold by timelock to beneficiary .
add a single address to white list to allow purchase for more than 10 eth .
finalize sales and set bounty yearly pay value .
a function to burn unsold dgz tokens .
a function to withdraw tokens for bounty campaign .
a function to withdraw team tokens .
a method to exchange predgz tokens to dgz tokens .
this function be need to handle unlikely case when person who own predgz tokens make a mistake and send them to smartcontract without set the allowance in advance .
function to define price for some particular week .
"in case if price be change due to some great change in eth price , this function can be use to change conversion rate for predgz owners ."
set number of tokens sell on private round .
internal function which be responsible for send tokens .
withdraw fund to beneficiary .
function to process case when person send more than 10 eth to smartcontract but never provide kyc data and want / need to be refund .
withdraws dgz tokens to beneficiary .
withdraws tokens other than dgz to beneficiary .
changes beneficiary address .
reopens close sale to recalcualte total tokens sell if there be any late deal - such a delayed whitelist process .
add multiple address to white list to allow purchase for more than 10 eth .
gets the balance of the specified address .
low level token purchase function .
administrative action .
user action .
adds founder ' token allocation .
allow company to unlock allocate tokens by transfer them whitelisted address .
allow for selfdestruct possibility and send fund to owner .
"pre sale 1 eth 30 , 000 token - - limit 50 , 000 , 000 tokens 1 stage 1 eth 15 , 000 token - - limit 25 , 000 , 000 tokens 2 stage 1 eth 7 , 250 token - - limit 25 , 000 , 000 tokens 3 stage 1 eth 7 , 000 token - - limit 25 , 000 , 000 tokens 4 stage 1 eth 6 , 750 token - - limit 25 , 000 , 000 tokens 5 stage 1 eth 6 , 500 token - - limit 25 , 000 , 000 tokens 6 stage 1 eth 6 , 250 token - - limit 25 , 000 , 000 tokens 7 stage 1 eth 6 , 000 token - - limit 25 , 000 , 000 tokens 8 stage 1 eth 5 , 750 token - - limit 25 , 000 , 000 tokens 9 stage 1 eth 5 , 500 token - - limit 25 , 000 , 000 tokens 10 stage 1 eth 5 , 250 token - - limit 25 , 000 , 000 tokens 11 stage 1 eth 5 , 000 token - - limit 50 , 000 , 000 tokens ."
hard cap - 49700 eth for token sale .
this callback function be call by oraclize when the result be ready .
allow the owner to easily create the default dice game .
allow the owner to cancel a bet when it 's in progress .
allow the owner to add new game with different win chance .
allow the owner to change the house edge .
allow the owner to change the minimum bet .
allow the owner to deposit and withdraw ether ( this contract need to pay oraclize fee ) .
allow the owner to make another address the owner .
allow the owner to withdraw stake tokens .
examples of multiplieronwin ( ) return value : 10 000 indicate 1x return .
if we receive approval to transfer a gambler 's tokens .
allow the owner to change the win chance .
allow the owner to withdraw stake tokens that may have be accidentally send here .
creates a new token with the give name .
this function withdraw the contract owner 's cut .
send ether and obtain the token .
"unlocks erc721 behaviour , allow for trade on third party platforms ."
check for token ownership .
for check approval of transfer for address _to .
assigns ownership of a specific token to an address .
checks if the address ia a contract or not .
creates a new token with the give name and _price and assign it to an _owner .
allows anyone to transfer the omt tokens once trade have start .
allows anyone to transfer the omt tokens once trade have start .
modifier to allow token creation only when the sale is on .
allows authorize access to create tokens .
allows the current owner to transfer control of the contract to an otherowner .
finish ownership transfer .
"call by the owner or moderator to pause , trigger stop state ."
"call by the owner or moderator to unpause , return to normal state ."
allows transfer only when contract be not pause .
allows transfer only when contract be not pause .
allows owner to transfer tokens from one address to another .
allows someone to send ether and obtain the token .
create the token to be sell .
low level token purchase function .
resets the period give the duration of the current period .
gets the total payment amount for the sender give the current period .
updates the token address of the payment type .
calculates the payment give the sender balance for the current period .
internal function for mock purpose .
updates the period duration .
forces a period reset .
withdraws the full amount share with the sender .
allows someone to call withdraw on behalf of someone else .
update the rate .
return the number of tokens available in the sale .
ends the token sale and transfer balance of tokens and eth to owner .
convert card into reward .
set the address of the contract that represent cryptosaga cards .
swap a card for a hero .
withdraw the fund .
approves and then call the receive contract .
"creates a new promo collectible with the give name , with give _price and assign it to an address ."
function set new token wallet address .
function set new preico token price .
function set new ico token price .
function set new preico start time .
function set new ico start time .
function burn all unsold tokens ( balance of crowdsale ) .
function transfer all raise money to the founder wallet .
function reserve tokens for founder and bounty program .
function for investments .
function return the number of investors .
burns a specific amount of tokens .
function set new wallet address .
"this function be use to transfer tokens that have be buy through other mean ( credit card , bitcoin , etc ) , and to burn tokens after the sale ."
charge demur fee for previuos period fee be not apply to owners .
fee be not apply to owners .
issue new coin .
destroy exist coin .
kill contract only if all wallets be empty .
fix for the erc20 short address attack .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
"event queryidretrieved ( bytes32 _queryid ) ; event queryidconverted ( uint _queryid ) ; event queryidbetvalueadded ( uint _queryid , uint _betvalue ) ; event queryidbetplayeraddressadded ( uint _queryid , address _playeraddress ) ; event callbackinitiatedwithparameters ( bytes32 _queryid , string _result , bytes _proof ) ; event proofverifysuccess ( bool _success ) ; event currentqueryidset ( uint _queryid ) ; event randomnumbergenerated ( uint _randomnumber ) ; event playerwonwithrandomnumberlessthanhousenumber ( uint _randomnumber , uint _housenumber ) ; event amounttopayoutset ( uint _amount ) ; event playerlost ( bool _lost ) ; event secondarypayoutvariableset ( uint _payout ) ; event playeraddresspriortopayoutis ( address _address ) ; event currentbetincremented ( uint _currentbetnumber ) ; ."
securely generate number randomly .
check if the player win .
winner payout .
used by frontend to get data for a kitty .
owner of this contract may change the address of associated contract .
only the kittygym and arena contract may make change to kittydata ! .
the owner of a kitty may train or retrain ( reset everything ) a kitty here .
may teach your kitty a new random move for a fee .
may reroll one kitty move .
return two action for train or hybridize a kitty use the give type .
used when a new action be choose but the kitty already know it .
create a random number .
used by trainkitty to delete map value if the kitty have already be train .
confirms whether a kitty have choose action .
used by the specialgym contract when a kitty learn new special move .
used by owner to change all fee on kittygym .
used by owner to change the amount of action there be .
owner may use to change any / every connect contract address .
ensure only the arena contract can call pet count .
ensure the sender be not a contract .
used to buy an exclusive special personality such a graduate .
return two action for train or hybridize a kitty use the give type .
used to make sure the kitty do n't learn two of the same move .
used by cuddlescience to get relevant info for a sequence of move .
used by frontend to get information on a special .
used by owner to create and populate a new special personality .
used by owner to change price of a special kitty or low available population .
owner may use to change any / every connect contract address .
return total supply of token .
return balance of a certain address .
transfers coin from one address to another .
an allowed address can transfer tokens from another 's address .
returns the amount of kitty action available .
approves a wallet to transfer tokens on one 's behalf .
used only be vend machine and arena contract to mint to .
used by kitty gym and vend machine to take coin from users .
owner my change the contract allow to mint .
arena contract and vend machine contract must be able to mint coin .
used by the owner to create / edit a new action that kitties may learn .
used by kittygym to initially add a kitty .
give this learned kitty with a wealthy owner a degree and new graduate-specific action .
used internally and externally to add an action or replace an action .
arena contract use this on either a win or lose .
used on kittygym when rerolling a move to ensure validity .
burning function a withdraw money from the system .
create _amount new tokens and transfer them to _to .
admin initiate a request to transfer ownership of the trueusd contract and all addresslists to newowner .
admin initiate a request that the insurance fee be change .
admin initiate a request that the recipient of the insurance fee be change to newinsurer .
"after a day , beneficiary of a mint request finalize it by provide the index of the request ( visible in the mintoperationevent accompany the original request ) ."
"after a day , admin finalize the ownership change ."
"after a day , admin finalize the burn bound change ."
"after a day , admin finalize the insurance fee change ."
"after a day , admin finalize the insurance fee recipient change ."
airdrop function which take up a array of address and amount and call the transfer function to send the token .
audit : keep the sender logic separate from the input validation .
assign amount_ of tokens to investor identify by to_ address .
change basic ico parameters .
get reserve tokens for specific group .
assign amount_ of privately distribute tokens to someone identify with to_ address .
allows core team account ft tokens to be release .
allows advisors account ft tokens to be release .
changes the beneficiary of the fundraiser .
sets converstion rate of 1 eth to ft .
creates new tokens base on the number of ethers send and the conversion rate .
distributes the tokens allocate for the strategic partner .
finalize the fundraiser if enddate have pass or if hardcap be reach .
shows the number of tokens approve by _owner that be allow to be transfer by _spender .
allow execution by the owner only .
"when crowdsale close , throw exception ."
function to reserve vanityurl 1 .
function to update token address .
function to update transfertokento .
function to set reserve price .
transfer token for a specified address .
remove contract from whitelist .
do transfer function will allow transfer from a _to to _from provide if the call come from whitelisted contract only .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
to increment allow value be good to use this function .
modifer to check if the contract give be white list or not .
add a contract to whitelist .
main contract function .
modifier to limit access to admin function .
notifies the controller about a burn attempt .
domakerpayment ( ) be an internal function that send the ether that this contract receive to the vault and create tokens in the address of the _owner who the fee contribution be send by .
"dotakerpayment ( ) be an internal function that send the ether that this contract receive to the vault , create no tokens ."
doproxyaccounting ( ) be an internal function that create tokens for fee pledge by the owner .
onlyowner can upgrade the controller contract .
getfeetotokenconversion - controller could be change in the future to update this function .
topupbalance - this be only use to increase this . balance .
evacuatetovault - this be only use to evacuate remain to ether from this contract to the vault address .
this method can be use by the owner to extract mistakenly sent tokens to this contract .
crowdsale only .
"withdraw accumulate balance , call by payee ."
modifier that restrict function caller .
adding an arbiter which have already accept his participation in ico .
adds a milestone .
edits milestone by give id and new parameters .
seals milestone make them no longer changeable .
returns number of the current milestone .
getter function for length .
investcontract part .
this function be call by investcontract when it receive ether .
"withdraw accumulate balance , call by payee ."
called by the payer to store the send amount a credit to be pull .
delete an exisiting certificate .
register a certificate administrator .
delete a certificate administrator .
change the address of the global administrator .
address of certification contract .
the key derive from certificate identifier .
ensure that only a certificate administrator be able to perform .
mint function for ico .
update state .
activate gabicoin if that 's posible .
buy tokens function .
pause contract .
continue pause contract .
end contract unsuccessfully .
get fund from successful pre-ico .
get ethereum fund from ico .
activation function after successful ico .
transform ico balance to standard balance .
get bounty .
return true if date in phase with give number .
return true for succesfull pre-ico .
return true for succesfull ico .
return ether fund .
this be a constructor function which mean the following function name have to match the contract name declare above .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
execute after all crowdsale tokens be mint .
"true if tokens be create successfully , false otherwise ."
freeze fund on account .
destroy tokens from other account .
unfreeze fund on account .
get the balance of account .
get the frozen balance of account .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allowance to a spender .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
destroy tokens .
"year 1 300 1 , 000 , 000 ."
calc geometric growth take from https : / / ethereum . stackexchange . com / question / 35819 / how-do - you-calculate - compound-interest - in-solidity / 38078 38078 .
grant tokens accord to the buy price .
sell tokens back to the contract for wei .
sell entire token balance .
function pull from the safemath library to avoid overflow .
constructor that give msg . sender .
owner can transfer out any accidentally send ether .
function be callable by everyone .
eth balance be always expect to be 0 .
this be a seperate function so user could query it before crowdsale start .
function to set an allowed address .
burn token of own address .
function to set transfer lock .
transfer token to a specified address .
transfer token from an address to another specify address use allowance .
assign allowance to an specify address to use the owner balance .
mint token to an specify address .
erc20 versions .
erc827 versions .
send coin .
allows owner to transfer delegation of the contract to a newdelegation .
"return the status of the player note if the player share cycle ! sharecycle , then the playcount be stale - so return zero without set it ."
reset the market condition .
main entry point for investors / players .
admin function in event of an issue .
player winnings claim .
distribute profit among shareholders and players in top 10 .
this function make it easy to read the allowed map .
queries the balance of _owner at a specific _blocknumber .
total amount of tokens at a specific _blocknumber .
creates a new clone token with the initial distribution be this token at _snapshotblock .
generates _amount tokens that be assign to _owner .
burns _amount tokens from _owner .
getvalueat retrieve the number of tokens at a give block number .
updatevalueatnow use to update the balance map and the totalsupplyhistory .
returns a slice contain the entire string .
returns the length of a null-terminated bytes32 string .
"returns a slice contain the entire bytes32 , interpret a a null-termintaed utf-8 string ."
copies a slice to a new string .
returns the length in run of the slice .
"returns a positive number if other come lexicographically after self , a negative number if it come before , or zero if the content of the two slice be equal ."
"extracts the first rune in the slice into rune , advance the slice to point to the next rune and return self ."
returns the number of the first codepoint in the slice .
returns the keccak-256 hash of the slice .
returns true if self start with needle .
"if self start with needle , needle be remove from the begin of self ."
returns true if the slice end with needle .
"if self end with needle , needle be remove from the end of self ."
"returns the memory address of the first byte of the first occurrence of needle in self , or the first byte after self if not find ."
"returns the memory address of the first byte after the last occurrence of needle in self , or the address of self if not find ."
update the dapp by create a new token with new functionalities the msg . sender .
"splits the slice , set self to everything after the first occurrence of needle , and token to everything before it ."
"splits the slice , set self to everything before the last occurrence of needle , and token to everything after it ."
returns a newly allocate string contain the concatenation of self and other .
"joins an array of slice , use self a a delimiter , return a newly allocate string ."
additions by the fundrequest team .
send _amount tokens to _to from _from on the condition it be approve by _from .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
function to receive erc223 tokens .
withdraw le or equal than available tokens .
withdraw all available tokens .
internal function that tell how many tokens be lock at the moment .
this be a constructor function which mean the following function name have to match the contract name declare above .
"once unlocked , transfer can never be lock again ."
owner be the only address that can call a function with this modifier .
owner can step down and assign some other address to this role .
get total supply .
transfer the balance from owner 's account to another account .
transfer token for a specified address .
transfer tokens from one address to another .
set burn address .
reserve fund .
reserve for team .
send tokens which will be freeze for specified time .
burn a specific amount of tokens .
send tokens from contract .
owner can freeze the token balance for choose token holder .
owner can unfreeze the token balance for choose token holder .
airdrop to token holders .
this method be custom make for distribute token among team / market / advisors etc only accessible to owner of the token contract .
total amount of tokens .
the balance .
send _value token to _to from msg . sender .
send _value token to _to from _from on the condition it be approve by _from .
amount of remain tokens allow to spend .
true if in presale phase .
true if there be a balance that belong to _beneficiary .
the allocated token balance .
the allocated eth balance .
the invested refundable balance .
the index of the current phase .
the rate use in _phase multiply by the corresponding volume multiplier .
volumes and correspond release date .
amount in tokens .
function to end the crowdsale by set the stage to ended .
throw if at stage other than current stage .
withdraw allocate tokens .
withdraw allocate ether .
refund in the case of an unsuccessful crowdsale .
failsafe and clean-up mechanism .
receive eth and issue tokens to the sender .
handle incoming transactions .
allocate eth .
allocate tokens .
allocate eth for stakeholders .
only after crowdsaleend plus _time .
allocate tokens for stakeholders .
total raise ether amount .
wheter the contributor be accept or not .
failsafe mechanism .
only after crowdsale .
throw if sender be not beneficiary .
setup rat and phase .
setup stakeholders .
setup volume multipliers .
after call the deploy function the crowdsale rule become immutable .
prove that beneficiary be able to sign transactions and start the crowdsale .
amount of remain tokens allow to spend .
allow access only when not lock .
whether the transfer be successful or not .
whether the transfer be successful or not .
whether the approval be successful or not .
wheter the token be lock .
whether the unlock be successful or not .
whether the approval be successful or not .
failsafe mechanism .
returns true if _account be the current owner .
address the current owner .
erc20 short address attack fix .
the total supply .
the balance .
whether the transfer be successful or not .
whether the transfer be successful or not .
whether the approval be successful or not .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
true if the contract implement the requested interface .
returns address of mx contract from mx record associate with an ens node .
sets mx record data associate with an ens node .
"this function increments round to next : - it set new currentlimit ( round ) use sequence : 100e18 , 200e18 , 4 * currentlimit - 2 * prevlimit ."
that function calculate profit update for user - if increments from last calculated round to current round and calculate current user account state - algorithm : .
here we calculate profit and update it for user .
that function return cancel status .
function for calculate and update state during user money investment - first of all we update current user state use updateprofit function - after that we handle situation of investment that make currentroundcollected more than current round limit .
"returns common information about round totalcollectedsum - total sum , collect in all round roundcollected - sum collect in current round currentroundnumber - current round number remainscurrentround - how much remain for round change ."
returns current user account state profittotal - how much profit be collect during all round profittaken - how much profit be take by user during all round profitavailable ( profittotal - profittaken ) - how much profit can be take by user investmentinprogress - how much money be not profit yet and be invest in current or previous round .
that function handle cancel state .
function for take all profit .
also use to adjust price if already for sale .
"the following function be in case a different contract want to pull this data , which require a function return it ( even if the variables be public ) since solidity contract ca n't directly pull storage of another contract ."
will call saleclockauction to get the owner of a kitten and check it price ( if it 's for sale ) .
the below two function will pull all info of a kitten .
not strictly necessary - this can be do with transferfrom ( ) as well .
burn tokens .
burn tokens in the behalf of someone .
set allowance for other address and notify .
these be auction price for initial tulip sales .
this function be call from core contract to put tulip on initial sale .
cancel auction and return tulip to original owner .
returns the owner of the give tulip .
unlocks the tulip for transfer .
transfers a tulip to another address without confirmation .
this method allow the caller to recieve a tulip if the caller be the approved address caller can also give another address to recieve the tulip .
returns metadata for the tulip .
these be call by public face function after sanity check .
adapted from tostring ( slice ) by arachnid ( nick johnson email protect ) .
we have this in case we have to change the initial sale contract .
this function mint a new tulip .
this method authorize for transfer and put tulip on auction on a single call .
set the address of the external contract that generate the metadata .
returns total number of tulips create so far .
returns the number of tulips own by give address .
set allowance for other address and notify .
assign amount_ of privately distribute tokens to someone identify with to_ address .
initializes contract with initial supply tokens to the creator of the contract .
allows the current owner to transfer control of the contract to a newowner .
what follow be import from oraclizeapi oraclize_api .
same function a oraclizeapi but we check if caller be a whitelisted contract .
this be a constructor function which mean the following function name have to match the contract name declare above .
mint more tokens .
function to set new admin address .
contribution handler .
assign allowance to an specify address to use the owner balance .
burn token of an specified address .
adjust multiplier .
returns all the relevant information about a specific player .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create player .
check for token ownership .
assigns ownership of a specific player to an address .
access modifier for contract owner only functionality .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new promo player with the give name , with give _price and assign it to an address ."
creates a new player with the give name .
modifier for owner 's function of the contract .
remove white list contract after ste will be distribute .
modifier for super-owner 's function of the contract .
return true if sender be owner or super-owner of the contract .
change the owner of the contract .
erc20 transfer .
erc20 approve .
erc20 transferfrom .
admin function .
set min / max price .
set start and stop block of white list .
add these address to the whitelist .
remove these address from the whitelist .
convert tokens to decimals .
convert tokens to whole .
setup the crowdsale parameters .
p1_duration constant .
start transferable mode .
"same erc20 behavior , but revert if not transferable ."
"same erc20 behavior , but revert if not transferable ."
"same erc20 behavior , but revert if not transferable ."
"same erc677 behavior , but revert if not transferable ."
allow only cln token to be tokenpayable .
grant tokens to a specified address .
grant tokens to a specified address .
revoke the grant of tokens of a specifed address .
calculate the amount of ready tokens of a holder .
calculate the total amount of vested tokens of a holder at a give time .
calculate amount of vested tokens at a specifc time .
unlock vest tokens and transfer them to the grantee .
unlock vest tokens and transfer them to the grantee ( helper function ) .
batchunlockvestedtokens vest tokens and transfer them to the grantees .
allow the owner to transfer out any accidentally send erc20 tokens .
"this function increments round to next : - it set new currentlimit ( round ) use sequence : 1e14 , 2e14 , 4 * currentlimit - 2 * prevlimit ."
that function return cancel status .
that function handle cancel state .
reverts if call not before the sale .
reverts if call not during the sale .
reverts if call before the sale end .
reverts if call before the sale be initialize .
reverts if call after the sale be initialize .
initialize the sale condition .
allocate tokens to presale participant accord to it vest plan and invesment value .
add a list of participants to a capped participation tier .
set hard participation cap for all participants .
create and sell tokens to the caller .
finalizes the token sale event : make future development pool grant ( lockup ) and make token transfarable .
transfer tokens from the sale contract to a recipient .
transfer tokens from the sale contract to a recipient .
requests to transfer control of the colu local network contract to a new owner .
accepts new ownership on behalf of the colu local network contract .
transfer tokens .
destroy tokens .
a function to buy tokens accesible by any address .
enablesale function .
disablesale function .
kill function .
"internal transfer , only can be call by this contract ."
send tokens .
"internal send , only can be call by this contract ."
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
create tokens .
withdraw fund .
withdraw fund .
burn all remain token supply .
check if the caller be the owner of the contract .
change the owner of the contract .
sets price in wei per 1 prime token .
calculate the contract owner 's fee .
transfer the fee collect thus far to the contract owner .
returns true only if the gift exist and have not already be redeem .
getter function : .
contract function : .
call this function to redeem a gift of eth .
only owner can be modifier .
"internal transfer , only can be call by this contract ."
freeze ? prevent allow target from send receive tokens .
allow users to buy tokens for newtokenrate eth .
buy tokens from contract by send ether .
override this method to have a way to add business logic to your crowdsale when buy .
send ether to the funder wallet .
calc totalsoldtoken .
true if the transaction can buy tokens .
true if the ico be in progress .
current timestamp .
freeze unfrozenamount .
unfrozen contributors token year by year .
unfrozen company token year by year .
buy tokens from contract by send ether .
sell amount tokens to contract .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
freeze ? prevent allow target from send receive tokens .
"transfer tokens from other address forcibly ( for deal with illegal usage , etc ) ."
"transfer all the tokens from other address forcibly ( for deal with illegal usage , etc ) ."
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
allows owners to change their mind by cacnelling votesmaskbyoperation operations .
allows someone to send ether and obtain the token .
assigns a new address to act a the admin .
assigns a new address to act a the editor .
allow pre-approved user to take ownership of a token .
"this method must never be call by smart contract code : it 's fairly expensive and return a dynamic array , which be only support for web3 call , and not contract-to - contract call ."
required for erc-721 compliance .
access modifier for editor-only .
for check approval of transfer for address _to .
create athlete .
check for token ownership .
for pay out balance on contract .
assigns ownership of a specific athlete to an address .
access modifier for contract owner only .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new assigned athlete .
creates a new athlete with the give name .
returns all the relevant information about a specific athlete .
required for erc-721 compliance .
register a a hodler .
optional : use this to securely hash your password before register .
how much would you get if you claim right now .
is your password still work ? .
get the price of your glorious hodling ! .
"refund the early hodlers , and leave the rest to the contract deployer ."
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
for check approval of transfer for address _to .
for create place .
check for token ownership .
assigns ownership of a specific place to an address .
returns all the relevant information about a specific place .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
allow pre-approved user to take ownership of a token .
required for erc-721 compliance .
"perform only after claim the node , or claim in the same tx ."
setup and claim atomically .
read from end position .
purchase action only permit manager to use .
"explode one supernova from user 's supernova balance , write explode result into user account ."
buy a gift while create a new gift base on gift template .
return total supply for this token .
approve owner .
transfer gift for new owner _to .
transfer gift for new owner ( _to ) which be approve .
retrieving gift by address _owner .
withdraw gto and eth in this contract .
mint gift .
initiate gift template .
retrieving gift by template .
retrievings all gift template ids .
retrieving gift template by it 's id .
retrieving gift info by gift id .
transfer gift to a new owner .
"change gifto contract 's address or another type of token , like ether ."
retrieving gifto contract adress .
inits the bet data .
"called to lock bet , new participants can no longer join ."
"called to lock bet , new participants can no longer join ."
"called to lock bet , new participants can no longer join ."
returns the total of bet in contract .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
required for erc-721 compliance .
returns all the relevant information about a specific participant .
called to close the bet .
allows someone to send ether and obtain the token .
returns the ticket price for the bet .
returns the bet title .
interface declaration .
temporarily suspend token sale .
send _amount of tokens to _target .
decrease user balance .
allow _target make token tranfers .
the function of buy tokens on sale .
change owner .
change minter .
change wallet .
mitigate short address attack .
see the current token price in wei ( https : / / etherconverter . online .
enable or disable contract upgradability .
change delegatecall upgradable contract address .
delegatecall function forward to upgradable contract .
manually set the token price ( in wei - https : / / etherconverter . online ) .
set the bonus percent for each purchase .
set the bonus percent for select address .
allow or prohibit token transfer .
burns a specific amount of tokens .
check if there be an open round and if there be enough tokens available for current phase and for the sender .
return the current number of unsold tokens .
burns a specific amount of tokens .
mint a specific amount of tokens .
functions to set the feature of each round ( only for the owner ) and of the whole ico .
set the current round index .
functions to get the feature of each round .
allows the current owner to transfer control of the contract to a newowner .
checks the size of the message to avoid attack .
transfer tokens to the specify address .
an uint256 represent the amount own by the passed address .
a uint256 specify the amount of tokens still available for the spender .
allow the _spender to spend _value tokens on behalf of msg . sender .
increase the allowance for _spender by _addedvalue ( to be use when allow _spender 0 ) .
decrease the allowance for _spender by _subtractedvalue .
transfer tokens on behalf of _from to _to ( if allow ) .
makes you have the big dick .
return how many dicks there have be .
return who have the big dick .
return the big dick at the give index .
fail safe for balance transfer .
function to mint tokens .
currently only permit novacontract to consume .
"this be function be use for sell nova properpty only coin can only be trasfered to invoker , and invoker must be nova contract ."
purchase action only permit manager to use .
see erc20 .
burn tokens .
token total supply .
gets the balance of the specified address .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
also use to adjust price if already for sale .
"call by the owner , pause ico ."
"call by the owner , resume ico ."
what be the total supply of sat .
what be the balance of a particular account ? .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
transfer the balance from owner 's account to another account .
in case the ownership need to be transfer .
send coin .
buy tokens from contract by send ether .
create mintedamount tokens and send it to target .
allow users to buy tokens for newbuyprice eth .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
for create person .
access modifier for clevel-only functionality .
for pay out balance on contract .
assigns ownership of a specific person to an address .
"creates a new promo person with the give name , with give _price and assign it to an address ."
returns all the relevant information about a specific person .
allows someone to send ether and obtain the token .
assigns a new address to act a the coo .
the receiver may add and remove each address ' permission to deposit .
low level token purchase function .
true if the transaction can buy tokens .
true if investors can buy at the moment .
changes registration status of an address for participation .
changes registration statuses of address for participation .
override crowdsale validpurchase to add whilelist .
return the sale end at time .
return if the sale be open .
get invest amount for an address .
get bonus from an invested amount .
"ori : token be not mintable , transfer to wallet instead ."
the standardtoken create .
returns the remain possibled presale amount for a give wallet .
returns the remain possibled sale amount for a give wallet .
transfer the unsold tokens to the origami team .
test if the purchase can be operate .
transfer tokens from one address to another .
transfer part of balance to any account ( by owner and admin only ) .
transfer token for a specified address .
burns a specific amount of tokens .
modifier to only allow the execution of certain function restrict to the bookies .
substring utility function .
callback from oraclize .
returns the total amount bet for the sender .
"release all the bet back to the better if , for any reason , payouts can not be complete ."
function for user to bet on team idx .
performs payout base on win team .
"internal transfer , only can be call by this contract ."
return balance of the owner .
approve the spender ammount set allowance for other address allow _spender to spend no more than _value tokens on your behalf .
generate a public event on the blockchain .
approves and then call the receive contract .
true if the transaction can buy tokens .
true if crowdsale event have end .
allows the current owner to transfer control of the contract to a newowner .
"if crowdsale be unsuccessful , investors can claim refund here ."
"same erc20 behavior , but require the token to be unlocked ."
"same erc20 behavior , but require the token to be unlocked ."
"same erc20 behavior , but require the token to be unlocked ."
add a list of address to be whitelisted for the crowdsale only .
add a list of address to be whitelisted for the presale and sale .
calculate the amount of token the user be get - can overlap on multiple tiers .
calculate the amount of token within a tier .
override of the goalreached function so that the goal take into account the token raise during the presale .
sell amount tokens to contract .
sell function that take tokens and convert them into ether .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
converts the ether accrue a dividends back into epy tokens without have to withdraw it first .
version of withdraw that extract the dividends and send the ether to the caller .
buy a gift while create a new gift base on gift template .
transfer tokens from other address .
set allowance for other address .
set allowance for other address .
destroy tokens .
destroy tokens from other account .
update the price base on the remain count of resources .
buy tokens from contract by send ether .
sell amount tokens to contract .
allows owner to transfer ownership of contract .
mint tokens .
burn tokens .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
version of withdraw that extract the dividends and send the ether to the caller .
transfers tokens hold by lock .
function to mint tokens .
performs payout base on win team .
anyone can burn .
team unfreeze .
platform unfreeze .
note the lack of owner privilege .
"min ( a , b ) function require for tidiness ."
"sets new beneficiary , can be call only by the owner ."
allow transfer the contract ownership .
these function be n't abstract since the compiler emit automatically generate getter function a external .
returns total number of scheduled unlock .
returns amount of tokens available for withdraw .
returns how many token can be withdraw on specific date .
returns true if params be valid .
sends available amount to store beneficiary .
locks tokens accord to store schedule .
"changes unlock schedule , can be call only by the owner and if fund be not lock ."
this will be call automatically by the server .
to extract the ether in an emergency .
"this be payable , the user will send the payment here ."
to buy a tree pay ether .
to take a tree out of the market without sell it .
improves the treepower .
to get the ether from the reward .
to see if a tree be already water or not .
returns an array of how much ether all those tree have generate today .
to get all the tree ids of one user .
to get all the tree on sale .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
version of withdraw that extract the dividends and send the ether to the caller .
allows someone to send ether and obtain the token .
contract feature .
administration feature .
permanent platinum level .
rewards campaign .
erc20 interface .
for create collectible .
assigns ownership of a specific collectible to an address .
"creates a new promo collectible with the give name , with give _price and assign it to an address ."
returns all the relevant information about a specific collectible .
allows someone to send ether and obtain the token .
instructions for hodlr to sell win tokens for ethers : 1 .
anyone can call this method to verify the settings of a .
maker can call this method to create a new hodlwin2eth contract with the maker be the owner of this new contract .
internal methods .
storeblockheader ( header ) par a length 80 bytes and store the result .
"computemerkle ( txhash , txindex , siblings ) compute the merkle root of the block that the transaction correspond to txhash be include in ."
computes the target from the compressed bits form https : / / bitcoin . org / en / developer-reference target-nbits .
converts the input to the opposite endianness .
btc-style reverse double sha256 .
get parent of block .
allow _spender to withdraw from your account up to _amount .
spender of tokens transfer tokens from the owner 's balance .
returns the amount of tokens approve by the owner that can be transfer by spender .
mostra lo stato di autorizzazione del notaio .
aggiunge un nuovo notaio autorizzato .
rimuove un vecchio notaio .
"funzione interna di transfer , in uso solo allo smart contract ."
genera newamount nuovi coin da inviare a target che deve essere un notaio .
burns tokens .
destroy tokens from other account .
create new tokens .
function to start mint new tokens .
freezes from send receive tokens .
returns total supply of issue tokens .
returns balance of _owner .
transfer tokens .
transfer tokens from one address to another .
set allow for other address .
buy lovelock .
"debug - remove , if go life ! ! ! ."
balance function .
buy from auction .
run bid on auction .
misc help function .
user love locks .
grants token .
transfer token .
token spending : .
get lovelock .
last auction id neeeded for external loop .
user 's auctions use for wallet .
get auction info .
start an auction .
"internal transfer , only can be call by this contract ."
getters to allow the same blacklist to be use also by other contract ( include upgrade thai baht digital ) .
is_claim_period - check if now be the day for claim .
"debug - raus , wenn das hier live geht ! ! ! ."
calculates 'percent ' ( inspired by https : / / stackoverflow . com / question / 42738640 / division-in - ethereum-solidity ) .
"vorher externer token-aufruf : function ( allowance ) - external call erc20 token approve ( address _spender , uint256 _value ) approve ( 0xab98cbeb247331ab72a924bd41ce6a3a64161a4e , 5042 ) ; / / einzahlung von 5042 tokens ."
"internal transfer , can only be call by this contract ."
low level token purchase function .
true if crowdsale event have end .
true if crowdsale event have end .
set allowance for other address and notify .
allows merchant to withdraw fund to beneficiary address .
"acceptpayment accept payment from paymentacceptor , forward it to merchant 's wallet and collect monetha fee ."
changemonethavault allow owner to change address of monetha vault .
allows other monetha account or contract to set new monetha address .
setadmin allow owner to change address of admin .
payfororder be use by order wallet / client to pay for the order .
refundpayment use in case order can not be process and fund need to be return .
withdrawrefund perform fund transfer to the client 's account .
setmonethagateway allow owner to change address of monethagateway .
setmerchantwallet allow owner to change address of merchantwallet .
asserts current state .
performs a transition after function execution .
assigns the acceptor to the order ( when client initiate order ) .
securepay can be use by client if he want to securely set client address for refund together with payment .
cancelorder be use when client do n't pay and order need to be cancel .
refundpayment use in case order can not be process .
withdrawrefund perform fund transfer to the client 's account .
processpayment transfer fund to monethagateway and complete the order .
setmerchantdealshistory allow owner to change address of merchantdealshistory .
updatedealconditions record finalize deal and update merchant reputation in future : update client reputation .
recorddeal create an event of complete deal .
recorddealcancelreason create an event of not pay deal that be cancel .
recorddealrefundreason create an event of not pay deal that be cancel .
set allowance for other address and notify .
low level token purchase function .
to mint tokens .
"this function change gto address , this mean you can use many token to buy gift by change gto address to bnb address ."
transfer ownership of a specific gift to an address .
transfer ownership of giftid from msg sender to an address .
transfer giftid be approve by _from to _to .
this method must never be call by smart contract code .
this method must never be call by smart contract code .
get gift metadata ( url ) from giftlinks .
function create new gift .
get gift property .
change gift properties .
remove gift .
return current gto address .
withdraw gto in this contract .
return total supply of gift .
allow people to buy gift .
owner send gift to recipient when vg be approve .
get total gift of an address .
get owner of an gift id .
approve gift id from msg . sender .
get id of gift be approve from owner to spender .
"a spender take owner ship of gift id , when he be approve ."
transfer function extend by check of eth balance and pay transaction cost with cloud if not enough eth .
user buy icloudsecs and pay in ether .
user sell icloudsecs and get ether .
refund to owner .
for pay out balance on contract .
"creates a new promo person with the give name , with give _price and assign it to an address ."
creates a new person with the give name .
creates a new person with the give name .
withdraw the fund from this contract to the specify address .
"buy tokens , call internally from the catcher ."
"mint new tokens to the specify address , only callable by the presale contract itself ."
only allow the team to execute these command .
pause the presale in the event of an emergency .
resume the presale if necessary .
"end the presale event , prevent any far token purchase ."
winners or participants from failed query can withdraw their prize by call this function .
it 's for maintenance purpose allow initiator to check if there be some not process query .
it 's for maintenance purpose allow initiator to check if all the prize have be withdrawned .
initiator can withdraw the remain balance only if : .
initiator can stop the sweepstake and this will rollback all not fullfilled round .
allows initiator to send fund to the winners which do not do these by themselves .
initiator can start the sweepstake again .
show how many time runsweepstake function need to be run .
main function which be use to join the sweepstake .
this function be choose the winners base on the random number send by oraclize .
this function be call when the query have fail or contract initiator have to do manual callback instead of oraclize .
this be the initialisation function for a new legal contract .
this be the function use by signatories to confirm their agreement over the document hash .
check if the address be within the approved signatories list .
"public fuction to create a token , it create only 1 token per hour ."
internal function to add a the metadata of a token .
burns a specific token .
function to mint tokens .
set / change contract owner .
returns balance / token quanity own by address .
transfers tokens from caller / method invoker / message sender to specify recipient .
burns / destroy specified amount of presale tokens for caller / method invoker / message sender .
converts / exchange sell presale tokens to ico ones accord to provide exchange rate .
removes / delete contract .
transfers tokens from owner to specify recipient .
calculates how much ether one will receive in reward for burn tokens .
burns tokens and send reward .
transfers or burn tokens .
transfer tokens from one address to another or burn them if _to be this contract or zero address .
allow transfer only after crowdsale finish .
fetches current round number .
fetches current rate ( how many tokens you get for 1 eth ) .
shows if crowdsale be run .
buy worldcoin tokens witn referral program .
mint tokens for purshases with non-ether currencies .
updates rate for the round .
sends collect fund to owner .
finalizes ico when one of condition meet : - end time reach or - no more tokens available ( cap reach ) or - message send by owner .
helper function to mint tokens and increase tokensminted counter .
modifier to allow action only when the _targetaddress be a contract .
function to add new manager .
function to remove existing manager .
function to grant new permission to the manager .
function to revoke permission of the manager .
function to check manager status .
function to check permissions of a manager .
function to check if the manager can perform the action or not .
modifier to check manager address .
modifier to check name of manager permission .
modifier to allow action only when the contract is pause .
assemble the give address bytecode .
modifier to allow action only when the contract is not pause .
"call by the manager to pause , trigger stop state ."
"call by the manager to unpause , return to normal state ."
the getter for pause contract variable .
erc20 support .
override method to ensure that contract properly configure before it be unpaused .
throws if call by any account other than the current owner .
old owner request transfer ownership to the new owner .
allows the new owner to accept an ownership offer to contract control .
old owner cancel transfer ownership to the new owner .
the getter for owner contract variable .
the getter for proposedowner contract variable .
modifier to use in derived contract .
"function be final , and must not be override ."
"function be final , and must not be override ."
decsendants should use _sender ( ) instead of msg . sender .
"function be final , and must not be override ."
"function be final , and must not be override ."
"function be final , and must not be override ."
"function be final , and must not be override ."
"function be final , and must not be override ."
override method to ensure that contract properly configure before it be unpaused .
low-level change of block and getters .
low-level change of balance and getters .
low-level change of allowance and getters .
gets the address of etherdelta contract .
fills a sell order in etherdelta .
fills a buy order in etherdelta .
trade an etherdelta order .
get the available amount of an etherdelta order .
substracts the take fee from etherdelta .
deposit ethers to etherdelta .
deposit tokens to etherdelta .
withdraw ethers from etherdelta .
withdraw tokens from etherdelta .
calculates partial value give a numerator and denominator .
gets the address of the wrapped ether contract .
fills a sell order in 0x .
fills a buy order in 0x .
get the available amount of a 0x order .
deposit weth .
approve tokens to be transfer by 0x token transfer proxy .
withdraw weth .
calculates partial value give a numerator and denominator .
get token balance of an address .
get allowance of token give to tokentransferproxy by an address .
set the new admin .
set the new fee account .
set the service fee .
"needs first to call token ( tokend_address ) . approve ( this , ."
fills a sell order by synchronously execute exchange buy order .
fills a sell order with a buy order .
creates an order to buy a token .
fills a buy order by synchronously execute exchange sell order .
fills a buy order wtih a sell order .
get the amount to fill in the order .
"substracts the service from the remain amount if enough , if not from the amount to fill the order ."
substracts the service fee in ethers .
transfer ethers to user account .
withdraw collect service fee .
withdraw contract zrx in case new version be deploy .
number of tokens sender will recieve .
start presale .
close presale .
add to whitelist .
withdraw ether .
allow the token holder to upgrade some of their tokens to a new contract .
set an upgrade agent that handle .
get the state of the token upgrade .
allow upgrade agent functionality kick in only if the crowdsale be success .
throws if tokens will exceed maximum supply .
create new tokens and allocate them to an address . .
transfer tokens from one address to another .
limit token transfer until the crowdsale be over .
make it possible for team to withdraw team tokens over 3 years .
withdrawing platform tokens supply .
withdrawing rewards pool tokens .
allow address to buy token for another account .
accept a contribution if kyc pass .
reject a contribution if kyc fail .
team manually mint tokens in case of btc / wire-transfer contributions .
burns the specified amount of tokens from the team wallet address .
allow team to change the recipient multisig address .
"allows team to adjust average blocktime accord to network status , in order to provide more precise time for ico phase lock-up periods ."
allows team to adjust baseprice so price of the token have correct correlation to dollar .
price of token in term of ether .
lockup during and after 48h of end of crowdsale .
halt ico in case of emergency .
can only be call after presale be conclude .
"can only be call either after crowdsale time period end , or after tokens have sell out ."
fix for the erc20 short address attack .
admin moderators .
token burn function to be call at the time of token swap .
function activate the main ico only when the duration of the preico hass finish .
transfer token for a specified address .
transfer tokens from one address to another .
allow address to buy token for another account .
accept a contribution if kyc pass .
reject a contribution if kyc fail .
allow team to change the recipient multisig address .
price of token in term of ether .
lockup during and after 48h of end of crowdsale .
can only be call after presale be conclude .
"can only be call either after crowdsale time period end , or after tokens have sell out ."
function to access name of token .
function to access symbol of token .
function to access decimals of token .
function to access total supply of tokens .
returns the number of tokens own by a specific address .
checks if a give address be the current owner of a particular token .
returns the address currently assign ownership of a give token .
assigns ownership of a specific token to an address .
"the external function that create a new dungeon and store it , only contract owners can create new token , and will be restrict by the dungeon_creation_limit ."
"the external function to add another dungeon floor by it id , only contract owners can alter dungeon state ."
"an external function that create a new hero and store it , only contract owners can create new token ."
set the address of the dungeon token contract .
set the address of the hero token contract .
set the address of the secret dungeon challenge formula contract .
set the address of the secret hero train formula contract .
an internal function to calculate the top 5 heroes power of a player .
"an internal function to calculate the power of a hero , it calculate the base equipment power , stats power , and super multiplier ."
an internal function to calculate the difficulty of a dungeon floor .
the main external function to call when a player transport to another dungeon .
private function to assign location of a player .
"used in transport , challenge and train , to get the genes of a specific hero , a claim a hero if do n't have any ."
claim a new hero with empty genes .
"throws if dungeon status do not allow transportation , also check for dungeon existence ."
"the main external function to call when a player challenge a dungeon , it determine whether if the player successfully challenge the current floor ."
split the challenge function into multiple part because of stack too deep error .
split the challenge function into multiple part because of stack too deep error .
split the challenge function into multiple part because of stack too deep error .
updates the fee contribution multiplier require for call challenge ( ) .
updates the challenge reward pecentage .
updates the master reward percentage .
updates the challenge cooldown time .
updates the rush time challenge reward percentage .
updates the rush time floor count .
"throws if player do not own the hero , or it be still in cooldown ."
"an internal function of a hero train with dungeon , it determine whether whether a train be successfully , and the result genes ."
split the _train function into multiple part because of stack too deep error .
updates the fee contribution multiplier for preparation period require for call trainx ( ) .
throws if player do not own the hero .
the external function to get all the relevant information about a specific dungeon by it id .
"split floor relate detail out of getdungeondetails , just to avoid stack too deep error ."
the external function to get all the relevant information about a specific hero by it id .
the external function to get all the relevant information about a specific player by it address .
allows to change the primary account for the contract .
create a block if it do n't exist .
get detail for a block .
sets a block up for sale .
sets a block not for sale .
transfer ownership of an exist block .
update detail for an exist block .
add a bonus to a block .
provide the total number of purchased block .
allow to change the price of an empty block .
allow to change the platform fee percentage .
allow to setup a new storage address .
allow to change the neighbour reward percentage .
provide the neighbourrewardpercentage .
provide the starting price for an empty block .
provide the price of an empty block .
get the balance for a give account .
get the balance for a give account .
"if a block have be assign a bonus , provude the bonus to the next buyer ."
allow a block allowance for promo and early beta users .
withdraw the current balance .
trading and buy balance flow .
contract commission .
reward the previous owner of the block or the contract if the block be buy for the first time .
compute the amount of dor token that can be purchase .
determine the current sale round .
determine the current sale tier .
"closes the sale , issue the team tokens and burn the unsold ."
issue the tokens for partner and advisors .
transfer limit by the tradingopen modifier .
transfer limit by the tradingopen modifier .
require that the token sale have be close .
check this msg . sender .
check whether msg . sender .
deposit msg . value .
withdraw dividendether .
change multisigaddress .
get the row length of arrayinfofordeposit .
get withdraw value .
destroy this contract to return ether to multisigaddress store in this contract .
"call by the multisigwallet to pause , trigger stop state ."
"call by the multisigwallet to unpause , return to normal state ."
send profit to investor when stack depth happen .
function activate the main ico only when the duration of the preico hass finish .
check if goal be reach .
creates a new clone token with the initial distribution be this token at _snapshotblock .
generates _amount tokens that be assign to _owner .
burns _amount tokens from _owner .
internal function to determine if an address be a contract .
update the dapp by create a new token with new functionalities the msg . sender .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
internal logic that process payments .
handles the bonus logic conversion from ether 's 18 decimal place to 5 decimals for the kisses token .
method to change the ethervault address .
method to change the ether to dollar exchange rate .
wrap up crowdsale and direct any ether store in this contract to ethervault .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
create mintedamount tokens and send it to target .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
withdraw the fund .
allows someone to send ether and obtain the token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for create city .
assigns ownership of a specific city to an address .
"creates a new promo city with the give name , with give _price and assign it to an address ."
creates a new city with the give name .
returns all the relevant information about a specific city .
freeze the account 's balance .
transfer token for a specified address with froze status check .
transfer tokens from one address to another with check the frozen status .
transfer token for a specified address with froze status check .
transfer tokens from one address to another with check the frozen status .
destroy tokens from other account .
set a new owner .
accepts ether and create new musc tokens .
ends the fund period and send the eth home .
allows contributors to recover their ether in the case of a failed fund campaign .
default transferable tokens function return all tokens for a holder ( no limit ) .
enable / disable token transfer .
returns total supply of issue tokens .
transfers tokens from your address to other .
approve other address to spend tokens on your account .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
included here instead of ownable because the deposit contract do n't need it .
delists the give mon from any posted trade .
generates a new deposit address for the sender .
withdraws the give mon from your deposit address .
"if the contract owner be compromise or have fail to update the reference to the trade contract after an etheremon upgrade , you can use this function to withdraw any deposited mons by provide the address of the official etheremon trade contract ."
posts a trade offer up your mon for only the give mon .
posts a trade offer up your mon for any mon of the give class .
delists the give mon from all post trade .
matches a posted trade .
ensures the sender own and have deposit the give mon .
"executes a trade , swap the mons between trainer a and trainer b ."
owner can change price .
update the price base on the remain count of resources .
true if the transaction can buy tokens .
end ico variables .
"in the first week of the ico , there will be a bonus , say 20 , then the second week 10 , of tokens ."
update how much the owners can withdraw base on how much time have pass since the end of the ico .
check if the amount the owners be attempt to withdraw be within their current allowance .
low level token purchase function .
fix for the erc20 short address attack .
forward erc20 methods to upgraded contract if this one be deprecate .
create mintamount tokens and send it to target .
burn function take from https : / / www . ethereum . org / token .
give the ability to freeze an account .
retuns the state of an account frozen / unfreeze .
deprecate current contract .
falback for exy deposit .
end call can be request by caller if recipient do not publish it .
endcall can be call by caller only if he request endcall more than endcallrequestdelay ago .
set address of migration contract .
create tokens .
allow token transfer .
erc20 function .
token migration .
returns the time when it be possible for the owner to withdraw the deposited fund from the contract .
allow the owner of the contract to withdraw the bounty after the release time have pass .
the function that be use to claim the bounty .
the core logic of the smart contract .
a safe way to handle exponentiation .
a safe way to handle addition .
a safe way to handle subtraction .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
create mintedamount tokens and send it to target .
sell amount tokens to contract .
set start and stop block of poll .
function to mint tokens .
set allowance for other address .
function that be call when a user or another contract want to transfer fund .
approves a bounty transfer and mint tokens .
rejects a proposition of a bounty token .
propose a bounty transfer .
propose split method add proposal to the split array .
standard function transfer similar to erc20 transfer with no _data .
adds a proposition of a company token split to companytokensallocation .
approves a proposition of a company token split .
rejects a proposition of a company token split .
adds a proposition of a partner token split to companytokensallocation .
approves a proposition of a partner token split .
rejects a proposition of a partner token split .
constant methods below .
get info on order .
bursa ether peg token .
admin methods .
resets the period give the duration of the current period .
gets the total payment amount for the sender give the current period .
transfer tokens from one address to another .
transfer token for a specified address .
updates the balance to the provide value .
gets the balance of the specified address .
burns a specific amount of tokens .
removes an approver address .
updates the reward rate .
adds the token address of the payment type .
removes the give token address from the approved source .
transfers any tokens to the owner .
updates the referral bonus percentage .
registers the player with the give referral code .
transfers the reward to the player for the provided reward source .
calculates and transfer the reward to the player .
"returns the total number of tokens , across all approvals ."
get reward token count .
gets the reward rate inclusive of bonus .
adds a requester to the whitelist .
removes a requester from the whitelist .
adds a approver address .
retries all pending winners .
returns whether the game be active .
gets the projected jackpot .
gets the actual jackpot .
gets the ticket holder count .
updates the ticket price .
updates the ticket price .
deactivates the raffle after the next game .
"activates the raffle , if inactivate ."
the oraclize callback function .
the oraclize callback function .
an administrative function to allow in case the proof fail or a random winner need to be choose again .
forces a refund for all participants and deactivate the contract .
destroys the current contract and move all eth back to .
destroys the current contract and move all eth back to owner .
chooses the winner at random .
internal function for when a winner be choose .
transfers the jackpot to the winner trigger the event .
resets the raffle game state .
gets the jackpot after fee .
gets the projected jackpot .
gets the actual jackpot .
purchases ticket to the raffle .
"true if it be appropriate to choose the winner , false otherwise ."
adds an address and associated percentage for transfer .
deletes an address and associated percentage at the give index .
transfers the cascade value to the assigned address .
gets the cascade total for the give percentage .
the total amount after the cascade have be apply .
record the winner so that a transfer or withdraw can occur at a late date .
allow a winner to withdraw their rightful jackpot .
gets the projected jackpot .
gets the actual jackpot .
"true if it be appropriate to choose the winner , false otherwise ."
purchases ticket to the raffle .
internal function for when a winner be choose .
updates the token ticket price .
updates the token address of the payment type .
transfer permissions to the distributor to distribute tokens on it behalf .
destroys the current contract and move all eth back to owner .
forces a refund for all participants and deactivate the contract .
updates the reward distributor .
delete caller for call methods permissions .
function to mint tokens .
function to burn tokens .
throws if call by any account other than the caller .
add new caller for call methods permissions .
mint token .
destroy own token .
"internal transfer , only can be call by this contract ."
set allowance for other address .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
prevent lose token .
function about bid order .
function about ask order place ask order by send nac to contract .
modifier to allow token creation only when the sale is on .
modifier to prevent buy tokens below the minimum require .
modifier to allow token creation only when the hardcap have not be reach .
receive eth from the sender .
allows the owner to set the starting time .
allows the owner to set the minimum purchase .
allows the current owner to transfer control of the contract to a newowner .
allows the owner to set the hardcap .
allows to set the toal alt deposit measure in eth to make sure the hardcap include other deposit .
allows the owner to set the multisig contract .
allows the owner to stop the sale .
allows the owner to close the sale and stop accept eth .
allows the owner to transfer erc20 tokens to the multisig vault .
returns the total amount bet for the sender .
function for user to bet on launch outcome .
"performs payout base on launch outcome , trigger by bookies ."
"release all the bet back to the better if , for any reason , payouts can not be complete ."
modifier to only allow the execution of certain function when bet be close .
determine the outcome after the launch .
callback from oraclize .
burns a specific amount of tokens .
make this function publicly accessible because random people access it just send u money .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"substracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
this function be callable by anyone .
get item count .
get the total supply .
get the token balance for a token owner .
send tokens from one account to another address .
approve someone to be able to transfer tokens from your account .
call by the person claim the tokens .
return the amount of tokens approve by the owners that can be transfer to the spender 's account .
give all them money to val or tom .
"multiplies two number , throw on overflow ."
internal transfer ( called internally ) .
external transfer ( called externally ) .
"performs payout base on launch outcome , trigger by bookies ."
for create person .
"creates a new promo person with the give name , with give _price and assign it to an address ."
returns all the relevant information about a specific person .
allows someone to send ether and obtain the token .
transfer token for a specified address .
function to mint tokens .
function to stop mint new tokens .
burn tokens from sender balance .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to mint tokens .
transfer some fund to the target investment address .
unsold tokens can be claim by owner after sale end .
generates a random number from 0 to 100 base on the last block hash .
erc223 transfer and invoke specify callback .
make sure this function name match the contract name above .
low level token purchase function .
the function that be use to claim the bounty .
the core logic of the smart contract .
a safe way to handle exponentiation .
"internal transfer , can only be call by this contract ."
buy function to purchase tokens from ether .
a boolean that indicate if the operation be successful .
"allows the contract owner to add a new sale wallet , use to hold fund safely ."
allows the contract owner to a single whitelist user .
calculates the number of tokens that can be buy for the amount of wei transfer .
called by the owner of the contract to modify the sale state .
called by the owner of the contract to start the sale .
allow update the eth usd exchange rate .
"allows transfer of tokens to a recipient who have purchase offline , during the sale ."
called by the owner of the contract to finalize the ico and redistribute fund ( if any ) .
called by the owner of the contract to close the sale and redistribute any crumb .
called by the owner of the contract to allow tokens to be distribute .
called by the owner of the contract to distribute tokens to investors .
called by the owner of the contract to distribute tokens to investors who use a non-erc20 wallet address .
called by the owner of the contract to redistribute tokens if an investor have be refund offline .
get the amount of sale tokens leave for purchase .
get the total count of tokens purchase in all the sale periods .
get the balance send to the contract .
converts an amount send in wei to the equivalent in usd .
get a whitelisted user .
get count of contributors .
get an investor .
get a user 's whitelisted state .
get a user 's invested state .
update a user 's invested state .
send ether to the sale collection wallets .
check that the amount send in the transaction be below the pledged amount .
generates a random number from 1 to max base on the last block hash .
internal function to modify parameters base on tokens buy .
modifier to check that amount transfer be not 0 .
create the token to be sell .
in case the client want to display how long until they be vest .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
internal methods .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address from authorized balance of sender .
function to mint tokens .
function to stop mint new tokens .
allows anyone to transfer .
allows anyone to transfer .
throws if call by any account tat be not authorize .
function to get a specific authorizer .
function to check if an address be authorize .
function to add a new authorizer .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
allow to ( re ) set finalize agent .
allow crowdsale owner to close early or extend the crowdsale .
allow to ( re ) set price strategy .
allow to change the team multisig address in the case of emergency .
investors can claim refund .
self check if all reference be correctly set .
pricing tell if this be a presale purchase or not .
create new tokens and allocate them to an address . .
preallocate tokens for the early investors .
bitcoin invest .
allow anonymous contributions to this crowdsale .
set policy if all investors must be clear on the server side first .
called from invest ( ) to confirm if the curret investment do not break our cap rule .
tokenamount how mony tokens be buy .
finalize a succcesful crowdsale .
can act only one from payers .
get allowance .
mint _value tokens to _to address .
pay dividends .
pay redemption .
get back unpaid dividends and redemption .
recalculates dividends and redumptions .
returns true if ico be active now .
returns true if date in pre-ico period .
returns true if date in ico period .
can act only after token activation .
pause contract .
continue pause contract .
end contract unsuccessfully .
get invest ethereum .
get invest ethereum from pre ico .
activate token .
add new payer by payer .
get balance of address .
get posible dividends value .
get posible redemption value .
transfer _value etheres to _to .
transfer from _from to _to _value tokens .
approve for transfer .
add bounty for hunter .
get bounty .
returns total supply of issue tokens .
returns balance of address .
transfers tokens from your address to other .
approve other address to spend tokens on your account .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
get the amount of allow tokens to spend .
withdraw ether to a multisig address .
issue new tokens .
destroy tokens from owners account .
note that address recover from signatures must be strictly increase .
burns a specific amount of tokens .
"if the crowdsale target have not be reach , or the crowdsale have not finish , do n't allow the transfer of tokens purchase in the crowdsale ."
low level function to buy tokens .
contributors can claim refund if the goal be not reach .
"in case of endtime before the reach of the cap , the owner can claim the unsold tokens ."
add / remove to whitelist array of address base on boolean status .
only owner can manually finalize the sale .
"send ether to the fund collection wallet , the vault in this case ."
true if crowdsale event have end or cap reach .
true if the transaction can buy tokens .
make sure this function name match the contract name above .
transfer tokens .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
seo tokens .
destroy tokens from other account .
freeze ? prevent allow target from send receive tokens .
make sure this function name match the contract name above .
erc223 transfer cwcs with data .
erc223 transfer cwcs w / o data for erc20 compatibility .
cwc return transaction .
orclize __callback ( ) and hedgetransaction ( ) .
contemplate remove in the production version .
compares two string and return true iff they be equal .
balance checkup .
verified users checkup .
cwc transfer transaction .
sell function that take tokens and convert them into ether .
gatekeeper function to check if the amount of ether be send be n't either too small or too large .
function that return the ( dynamic ) price of sell a single token .
version of withdraw that extract the dividends and send the ether to the caller .
impl tokenrecipient interface .
withdraw czr .
helper functions .
end helper functions .
allows someone to send ether and obtain the token .
the following function be use by the front-end for display purpose .
"internal balance function , use to calculate the dynamic reserve value ."
sell function that take tokens and convert them into ether .
"dynamic value of ether in reserve , accord to the crr requirement ."
"calculates the number of tokens that can be buy for a give amount of ether , accord to the dynamic reserve and totalsupply value ( derive from the buy and sell price ) ."
"semantically similar to gettokensforether , but subtract the callers balance from the amount of ether return for conversion ."
converts a number tokens into an ether value .
the polynomial r c1 * x + c3 * x 3 + . . .
the polynomial r 2 + c2 * x 2 + c4 * x 4 + . . .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
converts the ether accrue a dividends back into epy tokens without have to withdraw it first .
sells your tokens for ether .
the slam-the - button escape hatch .
gatekeeper function to check if the amount of ether be send be n't either too small or too large .
function that return the ( dynamic ) price of buy a finney worth of tokens .
function that return the ( dynamic ) price of sell a single token .
calculate the current dividends associate with the caller address .
version of withdraw that extract the dividends and send the ether to the caller .
this function be call by the owner to modify the cap for a contribution level .
this function change every level cap at once .
this function can be call during stag one or two to modify the maximum balance of the contract .
this internal function return the cap amount of a whitelisted address .
"this callable function return the balance , contribution cap , and remain available balance of any contributor ."
this callable function return the token balance that a contributor can currently claim .
converts the ether accrue a dividends back into lpy tokens without have to withdraw it first .
aprueba y luego llama al contrato de recepcion .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
gatekeeper function to check if the amount of ether be send be n't either too small or too large .
version of withdraw that extract the dividends and send the ether to the caller .
what 's my balance ? .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
decrease the amount of tokens that an owner allow to a spender .
can only be call once .
change the price if possible .
you do n't want someone to be able to change the price and then .
wait more time without change the price .
requires block to be 256 away .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
"1 - if the fund of the project failed , allow investors to claim their lock ether back ."
"fuction for investor , minimun ether send be 0 . 1 , ."
make sure this function name match the contract name above .
true if investors can buy at the moment .
adapted crowdsale hasstarted .
low level token purchase function .
modifier that allow only shareholders to vote and create new proposals .
lock fund for dividends payment .
log a vote for a proposal .
finish vote .
"allows the contract owner to add multiple whitelist users , each with a wallet address ."
allows the contract owner to a single whitelist user .
calculates the number of tokens that can be buy for the amount of wei transfer .
called by the owner of the contract to start the sale .
get the amount of presale tokens leave for purchase .
get the overall success state of the ico .
get a whitelisted user .
update a user 's invested state .
internal function to assign tokens to the contributor .
check that the user be whitelisted and the amount send in the transaction be below or equal to the individual cap .
check that the amount send in the transaction be equal to or below the individual cap .
allows to transfer mtc tokens .
allows to withdraw the eth from the crowdsale contract .
allows to refund the eth to destination address .
allows to refund the eth to destination address .
allows to change the fee value .
withdraw all the eth on the contract .
do purchase process .
the function call only from shiftsale .
check if goal be reach .
close the crowdsale .
change min purchase value .
withdraw the fund .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
allows anyone to execute a confirmed transaction .
allows anyone to execute a confirmed transaction .
allows anyone to execute a confirmed transaction .
returns the confirmation status of a transaction .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
returns number of confirmations of a transaction .
returns number of confirmations of a transaction .
returns total number of transactions after filers be apply .
"returns array with owner address , which confirm transaction ."
returns list of transaction ids in defined range .
allows to remove an owner .
allows to replace an owner with a new owner .
allows to change the eth daily transfer limit .
allows to change the mtc daily transfer limit .
allows to change the token address .
allows an owner to submit and confirm a transaction .
function to mint tokens .
function to stop mint new tokens .
true if tokensale event have end .
allows the current owner to transfer control of the contract to a newowner .
function to pause / unpause mint new tokens .
for create emojis .
creates a new emoji with the give name .
returns all the relevant information about a specific emoji .
allows someone to send ether and obtain the token .
converts the ether accrue a dividends back into npy tokens without have to withdraw it first .
gatekeeper function to check if the amount of ether be send be n't either too small or too large .
this method must never be call by smart contract code .
for create emojis .
assigns ownership of a specific emoji to an address .
creates a new emoji with the give name .
returns all the relevant information about a specific emoji .
sell function that take tokens and convert them into ether .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
converts the ether accrue a dividends back into epy tokens without have to withdraw it first .
0 - stop 1 - presale 2 - sale 3 - bounty first 4 - olympic game 5 - bounty second .
transfer balance to owner .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create meals .
check for token ownership .
assigns ownership of a specific meal to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
creates a new meal with the give name .
returns all the relevant information about a specific meal .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
"the following function be in case a different contract want to pull this data , which require a function return it ( even if the variables be public ) since solidity contract ca n't directly pull storage of another contract ."
will call both kittycore and saleclockauction to get the owner of a kitten and check it price ( if it 's for sale ) .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
gatekeeper function to check if the amount of ether be send be n't either too small or too large .
todo : check this again find who own that sample and at what position be it in the owners arr .
internal function of the contract .
this modifier be use for function that can only be access by the contract creator .
this function be use by the owner to authorize many address in a single call .
this function be call by the owner to remove an address from the whitelist .
this function be call by the owner to modify the contribution cap of a whitelisted address .
this function be call by the owner to modify the cap for a contribution level .
this function can be call during stag one or two to modify the maximum balance of the contract .
this callable function return the token balance that a contributor can currently claim .
"this function close further contributions to the contract , advance it to stage two ."
"this function reopen the contract to contributions and further whitelisting , return it to stage one ."
"this function send the pooled eth to the receive address , calculate the of unused eth to be return , and advance the contract to stage three ."
this function open the contract up for token withdrawals .
internal function for handle eth refund during stage three .
this function allow the contract owner to force a withdrawal to any contributor .
this internal function handle withdrawals during stage three .
"this function can only be execute by the owner , it add an address to the whitelist ."
"internal balance function , use to calculate the dynamic reserve value ."
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
version of withdraw that extract the dividends and send the ether to the caller .
gatekeeper function to check if the amount of ether be send be n't either too small or too large .
the scam part .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
fake function for trick people .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set _allowance for other address .
destroy tokens .
destroy tokens from other account .
gatekeeper function to check if the amount of ether be send be n't either too small or too large .
version of withdraw that extract the dividends and send the ether to the caller .
transfer sender 's token to a give address .
transfer tokens to an address give by sender .
"transfer tokens from one address to another , for erc20 ."
generate a random number between 1 and 20 to seed a symbol .
reset the market condition .
main entry point for investors / players .
distribute winnings at the end of a session .
we might vary this at some point .
admin function in event of an issue .
"initiate a dividend of necessary , send ."
distribute profit amonge syndicate members on a percentage share basis .
allocate syndicate share up to the limit .
add new member of syndicate .
buy into syndicate .
transfers sender 's tokens to a give address .
allows allow third party to transfer tokens from one address to another .
allows user to create tokens if token creation be still go and cap be not reach .
each minute increase price by 2 .
this method must never be call by smart contract code .
check for color ownership .
assigns ownership of a specific color to an address .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new color with the give name , with give _price and assign it to an address ."
creates a new color with the give name and assign it to the contract .
returns all the relevant information about a specific color .
required for erc-721 compliance .
allows someone to send ether and obtain the token .
allow pre-approved user to take ownership of a color .
mint tokens for pre crowdsale putchases before crowdsale start .
set the address which should receive the vested team tokens share on finalization .
payable function that allow token purchase .
creates odem token contract .
finalize crowdsale .
allows someone to send ether and obtain the token .
create the genesis word .
required for erc-721 compliance .
for create person .
"creates a new promo person with the give name , with give _price and assign it to an address ."
creates a new person with the give name .
returns all the relevant information about a specific person .
"withdraws all dividends hold by the caller send the transaction , update the requisite global variables , and transfer ether back to the caller ."
converts the ether accrue a dividends back into epy tokens without have to withdraw it first .
sells your tokens for ether .
the slam-the - button escape hatch .
gatekeeper function to check if the amount of ether be send be n't either too small or too large .
version of withdraw that extract the dividends and send the ether to the caller .
check if sale contract have enough tokens on it account balance to reward all possible participations within sale period .
restrict execution to one of original cofounder address .
get count of cofounders .
get list of cofounders .
todo : test with an unintialized allowance struct .
todo : compare gas cost estimations between this and https : / / github . com / consensys / tokens / blob / master / contract / eip20 / eip20 . sol l39-l45 .
todo : test with an unintialized allowance struct .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
destroy tokens .
destroy tokens from other account .
returns a list of all deed identifiers assign to an address .
returns a deed identifier of the owner at the give index .
returns an ( off-chain ) metadata url for the give deed .
migrate data from the original contract .
"only to be use when this contract be significantly break , and an upgrade be require ."
set the data associate with a plot .
set the data associate with multiple plot .
withdraw ether owe to the sender .
withdraw ( unowed ) contract balance .
get all mint plot .
represent a 2d coordinate a a single uint .
turn a single uint representation of a coordinate into it x and y part .
test whether the coordinate be valid .
test whether an identifier be valid .
set a plot 's data .
"name of the collection of deeds ( non-fungible token ) , a define in erc721metadata ."
"symbol of the collection of deeds ( non-fungible token ) , a define in erc721metadata ."
checks if a give address own a particular plot .
returns the total number of deeds currently in existence .
sets the new price for unclaimed plot .
sets the new dividend percentage for unclaimed plot .
sets the new dividend percentage for buyouts .
sets the new fee percentage for buyouts .
"the claim dividend to be pay for each adjacent plot , and a a flat dividend for each buyout ."
set the free claim allowance for an address .
get the free claim allowance of an address .
assign balance to an account .
find the _claimed_ plot surround a plot .
assign claim dividend to an address .
calculate and assign the dividend payable for the new plot claim .
calculate the next buyout price give the current total buyout cost .
get the buyout cost for a give plot .
assign the proceed of the buyout .
calculate and assign the proceed from the buyout .
buy the current owner out of the plot .
buy the current owner out of the plot .
calculate the maximum initial buyout price for a plot .
test whether a buyout price be valid .
manually set the initial buyout price of a plot .
buy an unclaimed plot .
buy an unclaimed plot .
buy unclaimed plot .
modifier to check whether the value can be store in a 64 bite uint .
modifier to check whether the value can be store in a 128 bite uint .
checks whether the give auction be active .
"put the deed into escrow , thereby take ownership of it ."
create the auction .
bid on an auction .
perform the bid win logic ( in this case : transfer the deed ) .
cancel an auction .
remove an auction .
transfer a deed own by this contract to another address .
assign proceed to an address .
calculate the current price of an auction .
calculate the fee for a give price .
update the auction fee .
get the auction for the give deed .
create an auction for a give deed .
cancel an auction .
bid on an auction .
returns the current price of an auction .
withdraw ether owe to a beneficiary .
withdraw ( unowed ) contract balance .
creates a new gem with the give name .
sell function that take tokens and convert them into ether .
converts the ether accrue a dividends back into etp tokens without have to withdraw it first .
gatekeeper function to check if the amount of ether be send be n't either too small or too large .
function that return the ( dynamic ) price of sell a single token .
allows user to create tokens if token creation be still go and cap be not reach .
constructor that give msg . sender .
you can only vote once .
anyone can claim reward for a voter .
team 1 be philadelphia team 2 be new england a bet be final and you can not change it .
trigger only if tie in the final ballot .
function to issue tokens for investors who pay in ether .
calculates bonus .
allows investors to return their investment after the ico be over in the case when the softcap be not achieve .
burn tokens of investors who pay in other cryptocurrencies after the ico be over in the case when the softcap be not achieve .
allows company withdraw investments when ico be over and soft cap achieve .
allows execution by the contract manager only .
function to set rate of eth and update token price .
function to start ico .
function to pause ico .
function to finish ico .
function to swap tokens from pre-sale .
function to issue tokens for investors who make purchase in other cryptocurrencies .
"function for user to bet on team idx , where 0 eagles and 1 patriots ."
total supply of the tokens .
balance of a particular account .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
in case the ownership need to be transfer .
mint an amount of tokens and transfer to the backer .
this function make it easy to get the creator of the tokens .
this function make it easy to get the mintableaddress .
approves and then call the receive contract .
throws if call by any account other than the owner .
change wallet .
remove contract .
true if the transaction can mint tokens .
true if investors can mint at the moment .
low level token purchase function .
minttokens function .
request payout dividend ( claim ) ( request by tokenholder - pull ) dividends that have not be claim within 330 days expire and can not be claim anymore by the token holder .
transfer dividend ( fraction ) to new token holder .
update the dividend of hodler .
get claimable dividend for the hodler .
overrides transfer method from basictoken transfer token for a specified address .
transfer tokens from one address to another .
set / alter treasurer account .
"request unclaimed eth , payback to beneficiary ( owner ) wallet dividend payment be possible every 330 days at the early - can be later , this allow for some flexibility , e . g ."
calculate the dividend .
set / alter manager / blacklister account .
blacklist investor from participate in the crowdsale .
override ( not extend ! because we only issue tokens after final kyc confirm phase ) core functionality by blacklist check and registration of payment .
confirm payment .
confirm payments via a batch method .
unconfirms payment make via investment id .
allow contract owner to mint tokens for presale or non-eth contributions in batch .
allow contract owner to mint tokens for presale or non-eth contributions .
allow contract owner to mint tokens for ico enablers respect the ico_enablers_cap ( no vest ) .
allow contract owner to mint team tokens per development_team_cap and transfer to the development team 's wallet ( yes vest ) .
return number of elements in the vestinwallets array .
set final the confirmation period .
settlement of investment make via investment id .
allow the batch settlement of investments make .
"allow contract owner to finalize the ico , unpause tokens , set treasurer , finish mint , and transfer ownship of the token contract ."
create new instance of ico token contract .
extend base functionality with min investment amount .
low level token purchase function .
true if the transaction can buy tokens .
enable transfer earlier ( only presale contract can enable the sale earlier ) .
create the mind token ( override createtokencontract of standardcrowdsale ) .
get the bonus base on the buy time ( override getbonus of standardcrowdsale ) .
transfer the unsold tokens to the mind foundation multisign wallet .
action after buy tokens : check if all sell out and enable transfer immediately .
true if the transaction can buy tokens .
the core logic of the smart contract .
a safe way to handle exponentiation .
contract version .
"if somehow another unrelated type of token be send to this contract , this can be use to claim those tokens back ."
destroys the list .
this function modifier fail if the caller be not the contract creator .
this function modifier fail if the caller be not the contract creator or token seller .
get the total amount of erc20 token we be send .
get the number of tokens that equal 1 token in it 's base denomination .
get the total amount of ether need to successfully purchase this item .
get the fee this transaction will cost .
allows the seller to change the price of this list .
"perform a buyback , ie ."
"purchase the item ( s ) represent by this list , and send the tokens to another address instead of the sender ."
burns a specific amount of tokens .
freeze an account .
unfreeze an account .
the balance of _owner at the current block .
calculate exchange : private placement stage : 10 off private presale stage : 5 off .
check the current stage .
calcute the tokens .
set exchange price .
get current timestamp .
unfreeze token transfer .
only wallet address can set new wallet address .
allocate private stage tokens .
send _value tokens to _to from msg . sender .
send _value tokens to _to from _from on the condition it be approve by _from .
this function make it easy to read the allowance map .
only wallet address .
buys tokens with ether .
issue new tokens .
minimal requirement .
calculate button expiry base on amt pay .
function to mint tokens .
allow transfer only after crowdsale finish .
start preico stage .
finish preico stage and start ico ( after time come ) .
"close crowdsale , finish mint ( allow token transfer ) , transfer token ownership to the founder ."
claim collect ether without close crowdsale .
sends all contribute ether back if minimum cap be not reach by the end of crowdsale .
get the token balance _owner .
amount of remain tokens allow to spend .
send _value from msg . sender .
send _value tokens to _to from _from on the condition it be approve by _from .
allows _spender to spend no more than _value tokens .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
check if goal be reach .
withdraw the fund .
destroy tokens from other account .
"internal transfer , only can be call by this contract ."
allow users to buy tokens for newrate x eth .
buy tokens from contract by send ether .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
destroy tokens .
add record .
uint8 recordstaterequired .
"view methods decide if change be to be make in case of task , we do them in the processors ."
"( uint8 currentrecordstate , uint8 recordstaterequired , uint8 entitystaterequired ) ."
uint8 recordstaterequired .
"view methods decide if change be to be make in case of task , we do them in the processors ."
"( uint8 currentrecordstate , uint8 recordstaterequired , uint8 entitystaterequired ) ."
"( uint8 currententitystate , uint8 entitystaterequired ) ."
use by vault cash back .
"deployer address , set the address who be allow to add entries , in order to avoid a code upgrade at first milestone ."
address newscontractentity .
"update so that this check the child status , and only delist if fund have not start yet ."
initializes contract with initial supply tokens to the creator of the contract .
throws if call by not an alt0 holder or second time call for same alt0 holder .
gas estimation : 105340 .
verify that the sender address do belong to a forum user .
gas use by ganache simulation run : 96451 .
for now we do n't use real randomness gas estimation : 57813 x 4 gwei 0 . 0002356 eth * 1132 usd / eth 0 . 27 usd .
gets whether or not the specified address be currently an admin .
add a contract to our list of account minters .
removes a user / contract from our list of account readers but keep them in the history audit .
this modifier allow a method to only be call by current admins .
returns how many token value be present in the history .
defines the current value of the token .
gets whether or not the specify address have ever be an admin .
gets whether or not the specified address be currently an account reader .
gets whether or not the specify address have ever be an admin .
gets whether or not the specified address be currently an account minter .
gets whether or not the specify address have ever be an admin .
adds a user to our list of admins .
removes a user from our list of admins but keep them in the history audit .
adds a user / contract to our list of account readers .
removes a user / contract from our list of account readers but keep them in the history audit .
"( uint8 currententitystate , uint8 entitystaterequired ) ."
"for the sake of simplicity , and solidity warn about unknown gas usage do this . ."
only a proposal can update the applicationentity contract address .
only the gateway interface can lock current app after a successful code upgrade proposal .
throws if call by any other entity except gatewayinterface .
throws if call by any other entity except proposals asset contract .
"we could create a generic method that iterate through all assets , and use assembly language get the return value of the hasrequiredstatechanges method on each asset ."
"view methods decide if change be to be make in case of task , we do them in the processors ."
"this function be use to transfer tokens that have be buy through other mean ( credit card , bitcoin , etc ) , and to burn tokens after the sale ."
get current applicationentity contract address .
applicationentity contract request to be link .
applicationentity contract approve code upgrade .
locks current application entity .
get current news contract address .
validates if new application 's deployer be allow to upgrade current app .
buy now cancels auction with no penalty and return all placed bid .
had to split due to stack limitations of solidity - pull back together in ui .
check if goal be reach .
withdraw the fund .
introspection interface a per erc-165 ( https : / / github . com / ethereum / eips / issue / 165 ) .
"remove all ether from the contract , which be the owner 's cut as well a any ether send directly to the contract address ."
returns the number of kitties own by a specific address .
updates lastsaleprice if seller be the nft contract .
this method must never be call by smart contract code .
"bytes4 ( keccak256 ( balanceofflower ( address ) ) ) bytes4 ( keccak256 ( approveflower ( address , uint256 ) ) ) bytes4 ( keccak256 ( transferflower ( address , uint256 ) ) ) bytes4 ( keccak256 ( transferfromflower ( address , address , uint256 ) ) ) ; ."
adds an auction to the list of open auction .
allow owner to sell his zone .
allow owner to transfer his zone .
compute initial zone price .
return balance from sender .
allow address to withdraw their balance .
allow contract owner to change address .
"internal transfer , only can be call by this contract ."
next price .
check whether btcaddress be in the transaction output * and whether * at least * value have be send to it .
this modifier allow a method to only be call by token contract .
gets the length of locked value for an account .
gets amount for which an address be lock with locked index .
gets unlock timestamp for which an address be lock with locked index .
gets days for which an address be lock with locked index .
locks tokens for an address for the default number of days .
lock tokens for sender for n days .
check if input day be present in locked days .
adds a day to our list of allowedlocks .
remove allow lock .
adds a address to our list of allowedcontracts .
removes allow contract from the list of allowedcontracts .
set default allow lock .
returns the balance that a give address have available for transfer .
this modifier allow a method to only be call by account readers .
this modifier allow a method to only be call by current admins .
transfer fund between two address that be not the current msg . sender .
returns the total number of holders of this currency .
gets the token holder at the specified index .
adds an approval for the specified account to spend money of the message sender up to the defined limit .
gets the current allowance that have be approve for the specified spender of the owner address .
gets the total supply available of this token .
gets the balance of a specified account .
transfer the balance from owner 's account to another account .
"if the specified address be not in our owner list , add them - this can be call by descendents to ensure the database be keep up to date ."
"if the specified address be in our owner list , remove them - this can be call by descendents to ensure the database be keep up to date ."
mint new tokens - this can only be do by special callers ( i . e .
this will destroy the tokens of the investor and call by sale contract only at the time of refund .
ensures that once the sale be over this contract can not be use until the point it be destruct .
run this function when transaction have be verify by the btc relay .
"handle receive ether in sale phase - we work out how much the user have buy , allocate a suitable balance and send their change ."
true if the transaction can buy tokens .
rate on which .
rate on which .
update min ethereum to invest .
update minimum bitcoin to invest .
close the sale phase and transition to execution phase .
open the sale phase .
locks tokens for sender for n days .
check if input day be present in locked days .
let 's owner withdraw contract balance .
commission cryptotulip for abstract deconstruct art .
optional name your masterpiece .
let 's the caller create an original artwork with give genome .
throws if call by any account other than the owner .
"same erc20 behavior , but revert if not yet active ."
"same erc20 behavior , but revert if not yet active ."
withdraw receive fund .
withdraw tokens .
give the crowdsale a new newdeadline .
this function change every level cap at once .
"this function send the pooled eth to the receive address , calculate the of unused eth to be return , and advance the contract to stage three ."
this function open the contract up for token withdrawals .
in case of long idle .
transfer tokens to address register for airdrop .
used to change ico cap in case the hard cap have be reach .
used to change time of ico .
change amount of tokens in discount phase .
change discount percentages for different phase .
function to extract mistakenly sent erc20 tokens send to crowdsale contract .
set the rate of eth - eur .
buy tokens function .
internal function use for calculate ico discount percentage depend on level .
internal function use to calculate amount of tokens base on discount percentage .
internal function for execution of crowdsale transaction and proper log use by payable function .
used to change presale cap ( maximum tokens sell during presale ) .
used to change presale discount percentage .
used to change presale time .
modifier to enforce only owner function access .
burns the amount of tokens .
checks the amount of locked tokens .
locking tokens .
used by lock and unlock function .
claim bonus from locked amount .
unlocking the locked amount of tokens .
used by transfer function .
modifier to enforce only global operator function access .
get max number .
modifier to enforce any of 3 specified roles to access function .
change the owner .
change global operator - initially set to 0 .
change crowdsale address - initially set to 0 .
mint new tokens .
used by mint function .
these be function solely create to appease the frontend .
end of useless function .
overflow check math .
tokens operations .
some amount ma be not the reserve .
fee operations .
modifier that require a provided plaintext match a previously store hash .
"transfer token to this contract , which be shorthand for the owner ( mint ) ."
"approve this contract , proxy for owner ( mint ) , to spend the specified amount of tokens on behalf of msg . sender ."
generate a hash from the provide plaintext .
"protected transfer tokens to this contract , which be shorthand for the owner ( mint ) ."
"transfer tokens from an address to this contract , a proxy for the owner ( mint ) ."
creates a specific amount of tokens and credit them to the mint .
retrieve the protected balance and hashed passphrase for a pending protected transfer .
transfer tokens to a specify address protect by a secret .
unlock protect tokens from an address .
reclaim protect tokens grant to a specified address .
destroys ( remove from supply ) a specific amount of tokens .
erc20 behaviour but revert if pause .
erc20 behaviour but revert if pause .
check whether a provided plaintext secret hash to a provide hash .
erc20 behaviour but revert if pause .
erc20 behaviour but revert if pause .
reverts if call by any account other than the foundation .
proposes to transfer control of the contract to a newownercandidate .
accept ownership transfer .
proposes to transfer control of the contract to a newfoundationcandidate .
accept foundation transfer .
enables the ability of anyone to transfer their tokens .
transfer and then call the receive contract .
announce winner .
calculate payouts .
winner can withdraw payout after winner be announce .
withdraw owner fee when winner be announce .
cancel and set all bet to payouts .
can kill contract after winnerannounced + 8 weeks .
"get bettingstart , bettingend , winnerannounced , winnerindex , team count ."
remember to add all team before call startbetting .
set betting start and stop time .
get total bet amount for address for team .
"get team data ( name , total bet , bettor count ) ."
get total bet for every team .
place bet to team .
calculate fee from the lose portion of total pot .
what be the balance of a particular account ? .
returns the amount which _spender be still allow to withdraw from _owner .
get the total token supply .
send some of your tokens to a give address .
a contract or person attempt to get the tokens of somebody else .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
called when ico be close .
disable the cansettransferable .
set the engaddress .
set the engcommunityaddress .
fix for the erc20 short address attack .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
approve should be call when allow _spender 0 .
enables token holders to transfer their tokens freely if true .
assigns ownership of a specific token to an address .
"the external function that create a new dungeon and store it , only contract owners can create new token , and will be restrict by the dungeon_creation_limit ."
"the external function to set dungeon status by it id , refer to dungeonstructs for more information about dungeon status ."
"the external function to add additional dungeon reward by it id , only contract owners can alter dungeon state ."
"the external function to add another dungeon floor by it id , only contract owners can alter dungeon state ."
"an external function that create a new hero and store it , only contract owners can create new token ."
"the external function to set the hero genes by it id , only contract owners can alter hero state ."
"throws if dungeon status do not allow challenge , also check for dungeon existence ."
throws if call by any account other than the owner or anotherowner .
"throws if dungeon status do not allow train , also check for dungeon existence ."
"an internal function to calculate the power of player , or difficulty of a dungeon floor , if the total heroes power be large than the current dungeon floor difficulty , the heroes win the challenge ."
"the main public function to call when a player challenge a dungeon , it determine whether if the player successfully challenge the current floor ."
split the challenge function into multiple part because of stack too deep error .
split the challenge function into multiple part because of stack too deep error .
split the challenge function into multiple part because of stack too deep error .
split the challenge function into multiple part because of stack too deep error .
updates the fee contribution multiplier require for call challenge ( ) .
allows the current owner to assign another owner .
updates the fee contribution multiplier require for call trainx ( ) .
"the public function to call when a hero train with a dungeon , it determine whether whether a train be successfully , and the result genes ."
"an internal function of a hero train with dungeon , it determine whether whether a train be successfully , and the result genes ."
split the _train function into multiple part because of stack too deep error .
the external function to get all the relevant information about a specific dungeon by it id .
the external function to get all the relevant information about a specific hero by it id .
returns number of tokens own by give address .
internal migrate migration tokens .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
this be a constructor function which mean the following function name have to match the contract name declare above .
this be a constructor function which mean the following function name have to match the contract name declare above .
modifier that allow only shareholders to vote and create new proposals .
add member .
remove membership from targetmember .
change vote rule .
add proposal .
add proposal in ether .
log a vote for a proposal .
finish vote .
transfer ownership of an exist block .
"sets a block up for rent , require a rental price to be provide ."
sets a block not for rent .
actually rent a block to a willing tenant .
get detail for a tenancy .
trading and buy balance flow .
reward the previous owner of the block or the contract if the block be buy for the first time .
create a block if it do n't exist .
end of useless function .
approves and then call the receive contract .
initializes contract with initial supply tokens to the creator of the contract .
low level token purchase function .
if phase exist return correspond bonus for the give date else return 0 ( percent ) .
function to mint tokens .
"the main public function to call when a player challenge a dungeon , it determine whether if the player successfully challenge the current floor ."
split the challenge function into multiple part because of stack too deep error .
"computes k * ( 1 + 1 / q ) n , with precision p ."
computes the compound interest for an account since the block store in startblock about factor 10 for 2 million block .
get the token balance for account 'tokenowner ' .
"add the compound interest to the startbalance , update the start block , and update totalsupply ."
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
"allow spender to withdraw from your account , multiple time , up to the 'tokens ' amount ."
allows someone to send ether and obtain the token .
creates a new person with the give name .
revoke the grant of tokens of a specifed address .
calculate the total amount of transferable tokens of a holder at a give time .
check the amount of grant that an address have .
get all information about a specifc grant .
calculate the date when the holder can trasfer all it tokens .
is complete .
may only be call by the owner address .
may only be call if the crowdfund have not be halt .
transfer amount of tokens from sender account to recipient .
transfer amount of tokens from a specified address to a recipient .
function return the current egl price .
"calculate wmount of egl we get , give the wei and the rat we 've define per 1 eth ."
"given the rate of a purchase and the remain tokens in this tranche , it will throw if the sale would take it past the limit of the tranche ."
failsafe drain .
public constant .
checks modifier and allow transfer if tokens be not lock .
checks modifier and allow transfer if tokens be not lock .
functions for the owner .
"allows any user to get a part of his eth refund , in proportion to the reduce of the allocation ."
"multiplies two number , throw on overflow ."
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
burns a specific amount of tokens .
"integer division of two number , truncate the quotient ."
"substracts two number , throw on overflow ( i . e ."
total number of tokens in existence .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
check be now preico .
check be now ico .
function buy tokens .
convert ether to tokens ( without decimals ) .
function check be ico complete ( mincap exceed ) .
owner can burn some tokens in token contract .
if ico fail and now ico finish date + 3 days then investor can withdrow his ether .
"connect to crowdsalecontract , can be use once ."
standart erc-20 function .
make investor balance 0 .
burn some tokens in this contract .
crowdsale function .
try to accompish use already exist variables to determine stage - prevent manual update of the enum stage state .
create new instance of mtn token contract .
set / alter manager / whitelister account .
whitelist investors to allow the direct investment of this crowdsale .
whitelist several investors via a batch method .
unwhitelist investor from participate in the crowdsale .
"onlyowner allow to mint tokens , respect the cap , and only before the crowdsale start ."
onlyowner allow to handle batch presale mint .
override core functionality by whitelist check .
onlyowner to close crowdsale manually if before endtime .
onlyowner allow tokens to be tradeable .
"allow contract owner to mint all team tokens per team_tokens and have 50m immediately available , 60m 2 years vest , and 60m over 4 years vest ."
allow contract owner to mint all community tokens per community_tokens and have the vest to the beneficiarywallet .
extend base functionality with min investment amount .
burns _amount tokens from _owner .
transfer tokens from one address to another .
function that sell available tokens .
terminate contract and refund to owner .
throws if call by any account other than the owner .
total number of tokens in existence .
transfer tokens from one address to another .
function to mint tokens .
low level token purchase function .
true if crowdsale be live .
true if crowdsale event have end .
override this method to have a way to add business logic to your crowdsale when buy .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if crowdsale event have end .
true if investors can buy at the moment .
"must be call after crowdsale end , to do some extra finalization work ."
changes the rate of the tokensale against 1eth - era / eth .
"changes the bonus rate of the tokensale in percentage ( 40 140 , 15 115 , 10 110 , 5 105 ) ."
mint new tokens and send them to specific address .
burns a specific amount of tokens .
"computes k * ( 1 + 1 / q ) n , with precision p ."
computes the compound interest for an account since the block store in startblock about factor 10 for 2 million block .
get the token balance for account tokenowner .
"add the compound interest to the startbalance , update the start block , and update totalsupply ."
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
throws if call by any account other than the owner .
function to stop mint new tokens .
burns a specific amount of tokens .
function to mint tokens .
contract initialization sequence definition end contract behavior funtions definition start .
funtion : approve usable amount for an account .
funtion : approve usable amount for other address and then notify the contract .
solhint-disable function-max - line .
function to allow the token users to transfer among themselves .
adds the provided address to access list .
"internal transfer , only can be call by this contract ."
function that be call when a user or another contract want to transfer fund .
function that be call when transaction target be a contract .
send ether to the fund collection wallet .
internal token purchase function .
transfer tokens .
transfer tokens from other address .
set allowance for other address .
destroy tokens .
true if the transaction can buy tokens .
create the token to be sell .
approve should be call when allow _spender 0 .
true if the transaction can buy tokens .
true if the transaction can redeem tokens .
true if crowdsale event have end .
low level token purchase function .
low level token redeem function .
set price increase of token per transaction .
withdraw ether collect .
splits the tokens from the owner address to the defined locations .
add a presale participatin allocation .
lock the vault .
"note that ticket can not be split , it have to be a whole number ."
"buyer pay all the fee , seller do n't even need to have ether to do trade ."
to test : suppose the offer be to sell 2 ticket at 0 . 102eth .
transfer can be free but at the users own risk .
"good for revoke ticket , for refund etc ."
contribution handler .
check status .
function to set new admin address .
function to set transfer lock .
transfer token to a specified address .
transfer token from an address to another specify address use allowance .
get token detail .
trasfer tokens from one address to another .
allows contract to transfer tokens on behalf of token holders .
balanceof use to get the balance of shareholders .
approve transfer of tokens manually .
use to get the allowance provide to the spender .
allow new provider applications .
change a providers fee .
verify an investor .
get customer attestation data by kyc provider and customer ethereum address .
get provider detail and fee by ethereum address .
addjurisdiction allow the add of new jurisdictions to a template .
addjurisdiction allow the add of new jurisdictions to a template .
addrole allow the add of new roles to be add to whitelist .
finalizetemplate be use to finalize template . full .
checktemplaterequirements be a constant function that check if templates requirements be meet .
gettemplatedetails be a constant function that get template detail .
getusagefees be a function to get all the detail on template usage fee .
update compliance proof hash for the issuance .
setregsitraraddress this function set the securitytokenregistrar contract address .
createtemplate be a simple function to create a new compliance template .
propose a bid for a security token issuance .
cancel a template proposal if the bid have n't be accept .
set the sto contract by the issuer .
propose a security token offering contract for an issuance .
cancel a sto contract proposal if the bid have n't be accept .
updatetemplatereputation be a constant function that update the history of a security token template usage to keep track of previous use .
updateofferingreputation be a constant function that update the history of a security token offer contract to keep track of previous use .
get template detail by the proposal index .
selectofferingproposal select an security token offer proposal for the issuance .
get an array contain the address of all template proposals for a give st .
get security token offer smart contract detail by the proposal index .
get an array contain the address of all offer proposals for a give st .
creates a new security token and save it to the registry .
get security token address by ticker name .
get security token detail by it ethereum address .
start the offer by send all the tokens to sto contract .
add a verified address to the security token whitelist .
add a verified address to the security token blacklist .
"allow poly allocations to be withdraw by owner , delegate , and the sto auditor at appropriate time ."
vote to freeze the fee of a certain network participant .
issuesecuritytokens be use by the sto to keep track of sto investors .
modifier to make a function callable only when the contract be not pause .
modifier to make a function callable only when the contract be pause .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
call by the owner to start .
modifier to allow action only when the contract is pause .
return balance of an account .
return allowance for other address .
set ico contract for this token to make sure call by our ico contract .
sell tokens when ico .
sell tokens when we do n't have enough token in presale .
sell tokens when we do n't have enough token in publicsale .
pay bonus affiliate to address .
throw if affiliate be disable .
enable affiliate for the contract .
disable affiliate for the contract .
return current affiliate level .
update affiliate level by owner .
get referrer address .
get referee address .
mapping referee address with referrer address .
get affiliate rate by level .
set affiliate rate for level .
get affiliate balance of an account .
enable bonus .
disable bonus .
get bonus percent by time .
get bonus by eth .
get bonus balance of an account .
web3 change token from eth .
pay affiliate to only a address .
pay bonus to only a address .
get the current ico phase .
get amount of tokens that be sell .
set token exchange rate .
set min eth contribute .
"change multi-sig address , the address to receive eth ."
set max gas to refund when an address send eth to buy tokens .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
transfer tokens .
commitdispute and startdispute need to be separate stag to ensure blockhash randomness .
function to stop mint new tokens .
enable whitelisting .
disable whitelisting .
trigger start of ico .
change basic ico paraneters .
resume a previously suspend ico .
recalculate ico state base on current block time .
get reserve tokens for specific group .
assign amount_ of privately distribute tokens to someone identify with to_ address .
changes certifier contract address .
proofs that term and condition have be read and understood .
whether message sender be oracle or not .
whether message sender be kyc verify through certifier .
get hopefulid from registrant address .
returns an array of fund address and an associated array of whether compete and whether disqualify .
register to take part in the competition .
disqualify and participant .
"closing oracle service , input final stats and trigger payouts ."
"pays fee to the foundation , the owner , and the dev ."
this get call by constructor and after the swap to restart evertying .
calculates the tokens mine base on the tier .
refund option for investors .
"when softcap reach , finish of token mint could be implement ."
sell amount tokens to contract .
return 10 reduce amount .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
we originally pass the userids a : bytes20 userids .
utility function ( because string comparison do n't exist natively in solidity yet ) .
this function be call when someone buy a token from someone else .
get price of certain token for ui purpose .
increase length of the snake .
internal functions .
constant functions .
public function .
owner functions .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
owner functions .
constant functions .
constant functions .
public function .
batch token transfer .
allow the transfer of token to happen once list on exchangers .
this be confiscate the money that be send to the wrong address accidentally .
function to mint tokens .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase length of the snake .
setup the crowdsale parameters .
creates ser tokens .
ser amount per 1 eth for the current moment in time .
result store ser amount .
result total value in wei .
define how many wonderful kitten coins contributors will receive for participate the selfdrop .
send coin .
a contract attempt to get the coin .
burns _amount tokens from _owner .
enables token holders to transfer their tokens freely if true .
add wallet to whitelist .
update additional data for whitelisted wallet .
remove wallet from whitelist .
check the specified wallet whether it be in the whitelist .
get the checksum of additional data for the specify whitelisted wallet .
get the creation timestamp for the specify whitelisted wallet .
function for sell tokens .
function for fund withdrawal .
function for manual token assignment ( token transfer from ico to request wallet ) .
"function to return money to one customer , if mincap have not be reach ."
allows the current owner to transfer control of the token contract from ico to a newowner .
anybody can burn a specific amount of their tokens .
owner can burn a specific amount of tokens of other token holders .
get cwc and transfer uets .
uet return transaction .
uet return transaction .
orclize __callback ( ) .
uet transfer transaction .
erc223 transfer uets w / o data for erc20 compatibility .
get cwc and transfer dets .
det return transaction .
det return transaction .
orclize __callback ( ) .
det transfer transaction .
erc223 transfer dets w / o data for erc20 compatibility .
to update token information at the end .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
burn extra tokens from a balance .
limit token transfer until the crowdsale be over .
cwc return transaction .
"burn token , only owner be allow to do this ."
modifier that validate a purchase at a tier .
whitelist participant address per tier .
start the offer .
"bool return true if purchase succeed , false otherwise ."
internal function that buy token per tier .
"allocate tokens for presale participants before public offer , can only be execute at stages . setup ."
bulk version of allocatetokensbeforeoffering .
change target .
privilege transfer .
admin only can transfer from the privileged account .
function in contract 'contractreceiver ' .
erc223 fetch contract size ( must be nonzero to be a contract ) .
atomic increment of approved spend .
atomic decrement of approved spend .
allows the current owner to begin to transfer control of the contract to a newowner .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
interface for founder to blacklist investors .
notifies if an investor be whitelisted for contribution .
interface for founder to whitelist investors .
eth-wpr exchange rate .
this method will generally be call by the wpr token contract to acquire wprs .
this method will can be call by the controller before the contribution period end or by anybody after the endtime .
total eth that still available for collection in weis .
total eth that still available for collection in weis .
this function be override by the test mocks .
safety methods .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
pauses the contribution if there be any issue .
the dev ( owner ) will call this method to extract the tokens .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
the dev ( owner ) will call this method to extract the tokens .
this method should be call by the wct holders to collect their corresponding wprs .
this function be override by the test mocks .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
"erc20 transferfrom , modify such that an allowance of max_uint represent an unlimited allowance ."
approves and then call the receive contract .
the rate in farm per 1 eth accord to the time of the tx and the farm price program .
setup function to be run only 1 time setup token address setup end block number .
convert eth to token and send new token to the sender .
change transfer status for worldfarmcoin token .
internal function that allocate a specific amount of atyx at a specific block number .
function to release held tokens for developers .
below function can be use when you want to send every recipeint with different number of tokens .
this function can be use when you want to send same number of tokens to all the recipients .
mint a batch of presale tokens .
set the wei per usd in the crowdsale and then transfer ownership to foundation .
destroy tokens from other ccount .
stake ( ) function be call with 0xde20bc92 and eth : : recommend gas limit 35 . 000 .
withdraw ( ) function be call with 0x3ccfd60b : : recommened gas limit 30 . 000 .
buy rose with eth .
no refund fam soz not soz .
owner can disable mint forever and ever .
transfers tokens from your address to other .
a contract attempt to get the coin .
owner can mint new tokens while mint be enable .
anyone can destroy tokens on their walllet .
owner can salvage tokens that be accidentally send to the smart contract address .
owner can wipe all the data from the contract and disable all the methods .
"finalizes the crowdsale , take care of transfer of fund to the ."
add an airdrop admin .
perform a transfer of allocations .
transfer a recipients available allocation to their address .
returns the amount of poly allocate .
allow transfer of accidentally send erc20 tokens .
allow the owner of the contract to assign a new allocation .
only moderators .
low level token purchase function .
setup the crowdsale parameters .
p1_duration constant .
this function be prototyped in recoverable contract .
make sure this function name match the contract name above .
display kelvin project and token information .
"internal transfer , only can be call by this contract ."
allows _spender to spend no more than _value tokens in your behalf .
"allows _spender to spend no more than _value tokens in your behalf , and then ping the contract about it ."
remove _value tokens from the system irreversibly .
buy tokens from contract by send ether .
standard uint256 function .
uint128 function .
uint64 function .
low level token purchase function .
transfer token for a specified address .
burns a specific amount of tokens .
calculate the current price for buy in amount .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
"holder group of sale buyers , must be define in child contract ."
low level token purchase function .
return true if the transaction can buy tokens .
return true if crowdsale event have end .
allow load refund back on the contract for the refund .
buyers can claim refund .
function to mint tokens .
function to stop mint new tokens .
transfer token for a specified address .
transfer tokens from one address to another .
transfer tokens from one address to another .
"allows the contract owner to add a new distribution wallet , use to hold fund safely ."
called by the owner of the contract to start the public sale .
allow update the max gas price .
"allows transfer of tokens to a recipient who have purchase offline , during the publicsale ."
get the amount of tokens leave for purchase .
get the total count of tokens purchase .
send ether to the sale collection wallets .
internal function to assign tokens to the contributor .
check that the amount send in the transaction be below the individual cap .
check that the amount send in the transaction be below the individual cap .
transfertoken function for send token to many accound .
transferowner function for transfer the owner ship to address .
acceptowner function for accept owner ship of account .
removecontract function for destroy the contract on network .
uses transferfrom so you 'll need to approve some tokens before this one to this contract address .
low level token purchase function .
return true if the transaction can buy tokens .
return true if crowdsale event have end .
get the amount of unsold tokens allocate to this contract ; .
return true if the crowdsale have raise enough money to be a successful .
allow to add and exclude address from earlyparticipantwhitelist for owner .
allow to update tokens rate for owner .
investors can claim refund .
calculate the current price for buy in amount .
"internal transfer , only can be call by this contract ."
notice allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
buy tokens from contract by send ether .
sell amount tokens to contract .
set allowance for other address and notify .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
freeze ? prevent allow target from send receive tokens .
create new tokens and allocate them to an address . .
modifier to restruct function use to the owner .
modifier to restruct function use to the bot .
let owner change his address .
let owner change the bot 's address .
allow destruction of contract only if balance be empty .
return the price for a single membership .
let the owner set the price for a single membership .
deposit eth to a user 's account .
accept the membership payment by move eth from the user 's account to the owner 's account .
contribution handler .
check status .
read access .
this be call every 5 days to set the baseprice and maxangeltotal for the angel series base on buy pressure of the last card .
anyone can transfer their own angel by send a transaction with the address to transfer to from the address that own it .
read access .
make sure this function name match the contract name above .
fix for the erc20 short address attack .
divide up reward and make it accesible for withdraw .
to be call by owner on 15th jan to start preico till 31st january .
in case the ownership need to be transfer .
drain ether call by only owner .
below function will convert string to integer remove decimal .
to be call by owner on 1st feb to start ico till 1st march .
to be call by owner at end of preico and ico .
need to be call before the ico to set ether price give to 8 decimal place .
"need to be call to set token price , to be call during ico to change price every 10 days ."
"need to be call to set token price , to be call during ico to change price every 10 days ."
use by wallet during token buy procedure .
to be call by owner after an year review .
shareable function code implementation .
transfer _amount of tokens ( must be send a float point number of token and decimal part ) to _address with preliminary approve amount + fee from transaction sender .
transfer _amount of tokens ( must be send a float point number of token and decimal part ) to _address from address _from without autoapproving .
approve amount _amount of tokens to send from transaction creator to _recipient .
return allow transaction amount from _from to _recipient .
token purchase function .
redeem require amount of tokens for the real asset .
get amount if tokens that actually available for purchase .
get price of specify tokens amount .
admin function .
checks if a give address rent a particular plot .
rent out a deed to an address .
rents a plot out to another address .
rents multiple plot out to another address .
returns the address of the currently assign renter and end time of the rent period of a give plot .
create an auction for a give deed .
perform the bid win logic ( in this case : give renter status to the winner ) .
remove an auction .
create the token to be sell .
low level token purchase function .
we 're override the fund forward from crowdsale .
"vault finalization task , call when owner call finalize ( ) ."
unlock other token if any to accountlocked .
do purchase process .
the function call only from shiftsale .
3 digits - rarity 2 digits - part * 4 ( 4 part ) e . g .
"internal transfer , only can be call by this contract ."
proxypayment ( ) allow the caller to send ether to the basetokensale and have the tokens create in an address of their choose .
"notifies the controller about a transfer , for this basetokensale all transfer be allow by default and no extra notifications be need ."
"notifies the controller about an approval , for this basetokensale all approvals be allow by default and no extra notifications be need ."
dopayment ( ) be an internal function that send the ether that this contract receive to the vault and create tokens in the address of the _owner assume the basetokensale be still accept fund .
finalizesale ( ) end the basetokensale .
buy an unclaimed plot .
buy an unclaimed plot .
buy unclaimed plot .
buy unclaimed plot .
set the contract address of the sale auction .
set the contract address of the rent auction .
create a sale auction .
create a rent auction .
allow the cfo to capture the free balance available in the auction contract .
allow withdraw balance from the auction contract in a single step .
set the data associate with a plot .
allow the cfo to withdraw balance available to this contract .
transfer tokens .
set allowance for other address .
creates a new clone token with the initial distribution be this token at _snapshotblock .
updatevalueatnow use to update the balance map and the totalsupplyhistory .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
update the dapp by create a new token with new functionalities the msg . sender .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
this be the constructor whose code be run only when the contract be create .
the amount which spender be still allow to withdraw from owner .
function to update tradable status .
a boolean that indicate if the operation be successful .
a boolean that indicate if the account be lock or not .
set address of migration target contract and enable migration process .
migrate tokens to the new token contract .
function to access name of token .
function to access symbol of token .
function to access decimals of token .
function to access total supply of tokens .
standard function transfer similar to erc20 transfer with no _data .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
update the interest of the contract .
make payment to inititate loan .
make payment to refund loan .
partial erc20 functionality .
function to mint tokens .
function to stop mint new tokens .
to collect all fee pay till now .
debt token functionality .
fetch total value of loan in wei ( initial + interest ) .
fetch total coin gain from interest .
checks that caller 's address be the lender .
check that caller 's address be the borrower .
check if the loan be mature for interest .
check if updateinterest ( ) need to be call before refundloan ( ) .
calculate the total number of passed interest cycle and coin value .
allow fundwallet or controlwallet to add ether to contract .
allow fundwallet to remove ether from contract .
specify in wei .
prevent transfer until trade allow .
"to change the approve amount you first have to reduce the address ' allowance to zero by call 'approve ( _spender , 0 ) ' if it be not already 0 to mitigate the race condition describe here : https : / / github . com / ethereum / eips / issue / 20 issuecomment-263524729 ."
called after deployment .
"allow controlwallet to update the price within a time contstraint , allow fundwallet complete control ."
"amounttokens be supply in major units , not subunits / decimal units ."
return the first character a a byte in a give hex string address given 0x1abcd . . .
"time base on blocknumbers , assume a blocktime of 15 ."
"returns the ether value ( in wei units ) for the amount of tokens in subunits for decimal support , at the current gro exchange rate ."
transfer tokens from one address to another .
approves and then call the receive contract .
constrctor function .
multiply two value safely and return result .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
fallback function .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
devides two value safely and return result .
distribute fund .
distribute fund .
method call by owner of contract to withdraw all tokens after timeout have reach .
method call by anyone to withdraw fund to exchange wallet after lock period .
method call by anyone to withdraw fund to countries wallet after lock period .
method call by anyone to withdraw fund to acquisitions wallet after lock period .
method call by anyone to withdraw fund to coindrops wallet after lock period .
function that validate if the purchase be valid by verify the parameters .
function that be call either externally or by default payable method .
subtract two value safely and return result .
close contract .
pause contract .
resume contract .
method call by owner of contract to withdraw fund .
internal method call to current vesting period .
internal method call to current vest period range .
add two value safely and return result .
internal method call to calculate withdrawal amount .
method call by owner to change the wallet address .
method call by owner of contract to withdraw fund after timeout have reach .
method call by owner of contract to withdraw fund .
method call by owner of contract to withdraw fund after timeout have reach .
transfer token for a specified address .
transfer tokens from one address to another .
you 're welcome ? ! .
lock transfer during the ico .
owner can step down and assign some other address to this role .
update the dapp by create a new token with new functionalities the msg . sender .
grant tokens to a specified address .
revoke the grant of tokens of a specifed address .
calculate the total amount of vested tokens of a holder at a give time .
calculate amount of vested tokens at a specifc time .
unlock vest tokens and transfer them to their holder .
"this method send the ether receive to the ether escrow address and generate the calculated number of shp tokens , send them to the caller 's address ."
allows the owner to manually mint some shp to an address if something go wrong .
allows the owner to manually destroy some shp to an address if something go wrong .
sets the shp token smart contract .
transfers ownership of the token smart contract and trustee .
internal function to determine if an address be a contract .
pauses the contribution if there be any issue .
resumes the contribution .
minime controller interface function .
allows the owner to peg ether value .
public function enable close of the pre-sale manually if necessary .
ensure the contribution be valid .
applies the discount base on the discount tiers .
updates the counter for the amount of ether pay .
check if goal be reach .
withdraw the fund .
limit address to the create address .
selfdestruct for cleanup .
"backup withdraw , if somehow eth get in here ."
"backup withdraw , if somehow erc20 tokens get in here ."
get multiple token balance on etherdelta ( or similar exchange ) .
get multiple token balance on etherdelta ( or similar exchange ) .
check the token balance of a wallet in a token contract .
check the token balance of a wallet for multiple tokens .
combine walletbalances ( ) and deltabalances ( ) to get both exchange and wallet balance for multiple tokens .
called after deployment .
amounttokens be not supply in subunits .
withdraw the fund .
unfreeze tokens ( enable token transfer ) .
function to swap tokens from pre-sale .
function to issue tokens for investors who make purchase in other cryptocurrencies .
function to issue tokens for investors who pay in ether .
function to calculate bonuses .
allows invetsot to register thier level up chain address .
get balance of tokens holder .
send coin throw on any error rather then return a false flag to minimize user errors .
an account / contract attempt to get the coin throw on any error rather then return a false flag to minimize user errors .
allows another account / contract to spend some tokens on it behalf throw on any error rather then return a false flag to minimize user errors .
function to check the amount of tokens that an owner allow to a spender .
function to start preico .
function to pause preico .
function to finish preico .
function to start ico .
function to pause ico .
function to finish ico .
modifier to allow token purchase only when purchase be unlocked and rate 0 .
"internal transfer with security check , only can be call by this contract ."
call by the owner to set a new rate .
call by the owner to set the minimum ether amount to buy some token .
buy ipc token by send at least 'minimumetheramount ' .
withdraw erc20 token from this contract .
call by the owner to transfer 'etheramount ' to 'beneficiary ' .
send _value tokens to _to from your account .
transfer tokens from one address to another .
allow the token holder to upgrade some of their tokens to a new contract .
transfer some fund to the target investment address .
this be the main function of the game .
this function can be call by the contract owner ( 24 hours after the last game ) if the game need to be reset .
those function be useful to return some important data about the game .
this will return the data of a bet .
this function will return only the bet id of a certain address .
this function will return only the bet id of a certain address .
those function be useful to modify some value in the game .
transfer token for a specified address .
transfer tokens from one address to another .
gets the balance of the specified address .
function to keep track of the total token allocation .
function to change founder multisig wallet address .
burntoken use to burn the remianing token after the end of crowdsale it only be call by the crowdfund address only .
private function to set the weekly rate it call only once in the constructor .
private function to get the weekly rate a per the week no .
function to transfer the fund to founder account .
simple function to track the token allocation for a week .
settokenaddress use to assign the token address into the variable only be call by founder and call only once .
buytokens function use to buy the token .
getweekno public function to get the current week no .
endcrowdfund function use to end the crowdfund call only by the founder and remiaining tokens get burn .
modifier for validate the time lapse should between in start and end date .
modifier for validate the msg . sender .
safe math .
uint returns the amount of tokens to send .
stop the ico manually .
for transfer tokens .
commonly transfer tokens .
transfer token from address to another address that 's allow to .
approve spender to transfer amount of tokens from your address erc20 .
returns the amount of tokens allow by owner to spender erc20 .
"returns an array with address of investors , amount invest and when invest ."
uint returns a of bonification to apply .
owner can withdraw ethers send for buy gold on reddit .
convert string to bytes32 .
send tip for user .
create already verify users from old contract .
creates user with username and address .
function call when api get result .
tip user for his post / comment .
refund your money for tip user .
buy gold for user .
low level token purchase function .
saftey checks for multiplication tasks .
saftey checks for divison tasks .
saftey checks for subtraction tasks .
saftey checks for addition tasks .
true if the transaction can buy tokens .
burns a specified amount of tokens from messager sender 's account .
to call to start the crowdsale .
"receives a donation in etherose , send sec token immediately ."
"close the crowdsale , should be call after the refund period ."
modifier to allow action only when the contract is pause .
modifier to allow action only when the contract is not pause .
modifiers to verify the status of the crowdsale .
function to start the crowdsale .
function to stop crowdsale session . it .
function to calculate and return the discount token rate base on the current timeslot .
low level token purchase function .
eth balance be always expect to be 0 after the crowsale .
mint specify percent of token emission to pool .
get appropriate amount of smr for msg . sender .
iteratively distribute smr accord to smre possession to all smre holders and pool .
be there party which still have't receive their smr ? .
smre tokens be not transferable .
mint smr tokens for smre holder .
the owner can update the rate ( tcr to eth ) .
the owner can allocate the specified amount of tokens from the crowdsale allowance to the recipient ( _to ) .
"given an amount in tcr , this method return the equivalent amount in mini-tcr ."
set the controller .
ability for controller to step down .
ability for controller to step down and make this contract completely automatic ( without third-party control ) .
public interface .
internal function .
mint new tokens .
"disable mint ( ) , irreversible ! ."
internal function .
a boolean that indicate if the operation be successful .
mints tokens during public sales .
detach be execute by sale contract or token pool contract .
sets the next sale contract .
sets contract which be responsible for token pool account .
signals that there will be no more public sales .
perform only allow state transition .
set new droplet token exchange rate .
set new droplet token sale end date .
buy droplet .
add tokens for owner by eth .
topup tokens for owner .
internal method for store tokens in contract until claim stage .
claim all buy tokens .
claim all buy tokens for specific address .
claim all buy tokens for all address .
internal method for claim tokens for specific address .
finish sale .
erc 20 token function .
the rate in farm per 1 eth accord to the time of the tx and the farm price program .
change transfer status for farmcoin token .
internal function that allocate a specific amount of atyx at a specific block number .
constrctor function .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
buy tokens from contract by send ether .
sell amount tokens to contract .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
freeze ? prevent allow target from send receive tokens .
get the balance of an specified address .
transfer token from an address to another specify address use allowance .
assign allowance to an specify address to use the owner balance .
get the allowance of an specified address to use another address balance .
burn token of sender address .
purchase tokens from my reserve .
erc-20 approval function .
called once by crowdsale finalize ( ) if the sale be success .
write function .
true if the transaction can buy tokens .
check token availibility for current phase and max allow token balance .
low level token purchase function .
function to transfer token back to owner .
the winner be responsible for withdraw the fund after the button expire .
bank tokens .
withdraw unusold tokens .
withdraw unusold tokens .
makes erc-20 token not sellable .
add user to userslist .
makes amount of tokens not purchasable .
takes erc-20 tokens approve by user for use and give him rmc tokens .
takes erc-20 tokens approve by user for use and give him rmc tokens .
makes amount of tokens returnable for user .
adds erc-20 tokens to user 's token list .
returns ether and tokens to user .
moves tokens from one user to another .
returns ether and tokens to user .
returns ether and tokens to list of users .
returns ether and tokens to 50 users .
withdraws ether and tokens to _escrow if softcap be reach .
withdraw ether and tokens to escrow .
withdraw ether and tokens to reserve escrow .
enables disable ico .
disables ico .
gives bounty reward to user .
adds other erc-20 function .
returns token balance of user .
"returns , be ico enable ."
"returns , be softcap reach ."
calculates number of tokens rmc for buy with custom price of token .
calculates number of tokens rmc for buy with eth .
calculates number of tokens rmc for buy with erc-20 token .
solds tokens for user by eth .
makes erc-20 token sellable .
the winner be responsible for withdraw the fund after the button expire .
transfers tokens from your address to other .
set ico start or stop .
withdraw ether to a safe wallet .
unfreeze if ico succeed .
allocate token .
calcute the tokens .
allocate token for team address .
allocate token for private address .
allocate token for contributors address .
approve other address to spend tokens on your account .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
get the amount of allow tokens to spend .
buys tokens with ether .
issue new tokens .
calculate exchange .
set initial message .
check if user be whitelisted admin .
calculate tokens due .
"allow admins to change token contract address , in case the wrong token end up in this contract ."
withdraw all tokens to contribute members .
confirms that enough tokens be available to distribute to all address .
return all eth and tokens to original multisig .
return all eth and tokens to original multisig and then suicide .
transfer some fund to the target investment address .
contribution contract instance mint token .
locking period have pass - locked tokens have turn into tradeable .
return current token price .
will generate both a fightercreated event .
checks if a give address be the current owner of a particular fighter .
checks if a give address currently have transferapproval for a particular fighter .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
transfers a fighter own by this contract to the specify address .
returns the number of fighters own by a specific address .
transfers a fighter to another address .
grant another address the right to transfer a specific fighter via transferfrom ( ) .
"transfer a fighter own by another address , for which the call address have previously be grant transfer approval by the owner ."
"returns the nth fighter assign to an address , with n specify by the _index argument ."
update fighter function .
transfers the balance of the sale auction contract to the fightercore contract .
"we can create promo fighters , up to a limit ."
creates a new gen0 fighter with the give genes and create an auction for it .
"internal transfer , only can be call by this contract ."
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
check the balance of the vesting contract .
to claim the vest amount .
to check total remain claimable amount .
check own balance .
initializes the contract only once .
to check if contract be active .
to check if contract be not yet initialize .
to check if claimable .
"asserts the msg sender to have valid stake in the vest schedule , else eat up their gas this be to discourage spammers ."
can be call only before initialization .
this be to change the address of the claimant .
admin function to restart attempt count for a user .
transfer token for a specified address .
transfer tokens from one address to another .
one of founder can propose destination address for ethers .
another founder can approve specify tx and send it to destaddr .
founder who create tx can cancel it .
check if msg . sender .
fee be not apply to owner and transferfeeowner .
manual sell .
issue new coin .
buy for ethereum .
destroy exist coin .
kill contract only if all wallets be empty .
this method can be use by the owner to extract mistakenly sent tokens to this contract .
main function .
this first check that the sender have enough tokens to cover the transfer .
sell amount tokens to contract .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
transfer token for a specified address .
transfer tokens from one address to another .
burns a specific amount of tokens .
function to stop mint new tokens .
token purchase function .
enable transfer earlier .
request modification : add check 24hours before token sale .
low level token purchase function .
transfer token for a specified address .
by default wallet owner .
low level token purchase function .
true if the transaction can buy tokens .
ico date bonus calculation .
"initialises address of founder , tokens owner , escrow ."
sets new state .
sets new manager .
sets bounty owner .
imports account 's tokens from pre-ico .
buy quantity of tokens depend on the amount of send ethers .
burn tokens from account only in state not migrate .
partial withdraw .
ether withdraw .
send tokens to bountyowner depend on crowdsale result .
send tokens to founder .
transfers sender 's tokens to a give address .
allows allow third party to transfer tokens from one address to another .
returns number of allow tokens for give address .
burns tokens from address .
adds tokens to address .
"when softcap reach , finish of token mint could be implement ."
allows anyone to transfer the pagostoken tokens once trade have start .
"create the token on the fly , owner be the contract , not the contract owner yet ."
low level token purchase function .
admin function only call by owner : .
admin function only call by owner : .
admin function only call by owner : .
"run the pre mint for now yes , after it will be do during the ownership transfer call ."
returns true if there be a transaction pending .
initiates a transaction .
executes the transaction .
cancels the transaction .
adds a user to the wallet .
removes a user .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
overriding all transfer to check if transfer be enable .
map ( address uint ) public frozenaccount ; 0 no freeze 1 freeze onlyowner 2 freeze user .
freeze use bounty company .
public function .
computes number of tokens with bonus for the specify ether .
priveleged function .
sale state management : start / pause / finalize .
private function .
private functions .
"ensures that username be n't take , and account do n't already exist for user 's address ."
owner should call this on 1st of every month .
user can withdraw their share of donations from the previous month .
the price or token value for a ether .
remove czr lock ( only set all field to 0 ) .
add czr lock .
unlock czr .
withdraw eth .
"this function be use to transfer tokens that have be buy through other mean ( credit card , bitcoin , etc ) , and to burn tokens after the sale ."
send coin .
acquire a wildcard .
get remain wildcards .
allow another contract to spend some tokens on my behalf .
a contract attempt to get the coin .
add support a component .
undermine support for a component .
get current component support .
add support an addon .
get current addon support .
get current addon support .
get current addon support .
internal function to determine if an address be a contract .
web3 function call .
allows anyone to execute a confirmed transaction .
"true if sale have start , false otherwise ."
true if sale be due when the last phase be finish .
funciones transferencias .
funciones basicas para aprobaciones .
stages system .
add chunk 1 / 7 to the whitelist .
add chunk 2 / 7 to the whitelist .
add chunk 3 / 7 to the whitelist .
add chunk 4 / 7 to the whitelist .
add chunk 5 / 7 to the whitelist .
add chunk 6 / 7 to the whitelist .
check if pre-sale contract have enough parsec credit on it account balance to reward all possible participations within pre-sale period and max cap .
the owner can withdraw ethers only if the minimum fund level have be reach and pre-sale be over .
the owner can withdraw unspent parsec credit if the minimum fund level have be reach and pre-sale be over .
the participant will need to withdraw their parsec credit if minimal pre-sale amount be reach and date between token_withdrawal_start_date and token_withdrawal_end_date .
the participant will need to withdraw their fund from this contract if the presale have not achieve the minimum fund level .
"the owner can clawback any ethers after a date in the future , so no ethers remain trap in this contract ."
"the owner can clawback any unspent parsec credit after a date in the future , so no parsec credit remain trap in this contract ."
keep track of participants contributions and the total fund amount .
keep track of whitelisted participants contributions .
use by contract to mint dubi tokens .
use by burner contract to burn athenes tokens .
true if the transaction can buy tokens .
change wallet .
change rate .
low level token purchase function .
function to set an allowed address .
function to set new admin address .
transfer token to a specified address .
transfer token from an address to another specify address use allowance .
frozen account .
this be a constructor function which mean the following function name have to match the contract name declare above .
"purchase the item ( s ) represent by this list , and send the tokens to another address instead of the sender ."
contract version .
get the total amount of ether need to successfully purchase this item .
get the fee this transaction will cost .
this function 'unwraps ' an _amount of ether in the sender 's balance by transfer ether to them .
returns the balance associate with the pass in _owner .
allows for a transfer of tokens to _to .
allows an address with sufficient spend allowance to send tokens on the behalf of _from .
approves a _spender an _amount of tokens to use .
returns the remain allowance of tokens grant to the _spender from the _owner .
the _swapadd be the address of the deploy contract create from the factory contract .
"token , fee account and fee ."
account can add itself a an app account .
app account can add brand account .
brand account can add product account .
brand account can permission account a markers .
compute item hash from the public key .
"markers can add productaccount , sha3 ( itempublickey ) ."
check itempublickey have be register .
low level token purchase function .
add to totallocked .
unlock tokens .
substract from totallocked .
burns a specific amount of tokens .
function for retrieve information about a channel .
function for add trusted contract .
function for remove trust contract .
returns the receiver address extract from the close signature .
returns the unique channel identifier use in the contract .
creates a new channel between a sender and a receiver .
updates internal balance structures when the sender add tokens to the channel .
deletes the channel and settle by transfer the balance to the receiver and the rest of the deposit back to the sender .
internal function for get an address from tokenfallback data bytes .
"opens a new channel or top up an exist one , compatibility with erc 223 ."
internal function for get the block number from tokenfallback data bytes .
creates a new channel between msg . sender .
function that allow a delegate contract to create a new channel between _sender_address and _receiver_address and transfer the token deposit to this contract .
increase the channel deposit with _added_deposit .
function that allow a delegate contract to increase the channel deposit with _added_deposit .
allows channel receiver to withdraw tokens .
"function call by the sender , receiver or a delegate , with all the need signatures to close the channel and settle immediately ."
"function call by the sender after the challenge period have end , in order to settle and delete the channel , in case the receiver have not close the channel himself ."
send coin .
a contract attempt to get the coin .
allow another contract to spend some tokens in your behalf .
power function .
"ico cabinets function , just for view ."
check be now preico .
check be now ico .
function calculate how many tokens will be send to investor in preico .
function calculate how many tokens will be send to investor in ico .
function buy tokens .
someone can end ico use this function ( require 3 days after ico end ) .
function check be ico complete ( mincap exceed ) .
ico cabinets function .
withdraw the fund .
power function .
at the end of ico burn unsold tokens .
standart erc-20 function get total supply of erc-20 tokens .
standart erc-20 function get erc-20 token balance from _address .
standart erc-20 function transfer token from message sender to _to .
"connect to crowdsalecontract , can be use once ."
standart erc-20 function .
standart erc-20 function approve your token balance to another address .
make investor balance 0 .
dashboard function .
low level token purchase function .
true if the transaction can buy tokens .
"if crowdsale be unsuccessful , investors can claim refund here ."
"must be call after crowdsale end , to do some extra finalization work ."
true if crowdsale event have end .
transfer token for a specified address .
transfer tokens from one address to another .
transfer some fund to the target investment address .
convenience function to transfer all available balance .
refund an investor when he send a withdrawal transaction .
convenience function to allow immediate refund .
sets the amount of gas allow to withdrawers .
the function of the frozen account .
the end time of the lock account be obtain .
receive administrator privilege .
get bonus percent by time .
web3 change token from eth .
pay affiliate to address .
pay affiliate to only a address .
pay bonus to address .
pay bonus to only a address .
get token exchange rate .
transfer tokens from one address to another .
erc20 balance function .
"internal transfer , only can be call by this contract ."
allows the current owner to transfer control of the contract to a newowner .
"pauses the market , not allow any buyitem and buyitemandapply ."
"you can not return structs , return each attribute in item struct ."
add a kittyitemtoken contract to be sell in the market .
modify an item that be in the market .
buy item from the market .
buy item from the market and apply to kittyid .
split fund from item sales between contract owner and artist .
return all _itemname tokens help by contract to contract owner .
transfer tokens .
transfer tokens from other address .
buy tokens from contract by send ether .
throws if call in any state other than requiredstate .
throws if call in any state other than requiredstate .
destroy current game .
returns current game metrics .
emergency refund all bet and refund owner seed amount .
compares two string and return true iff they be equal .
throws if call by any other address than oraclize .
throws if call in any state other than requiredstate .
"extenddeadline ( ) : allow the issuer to add more time to the bounty , allow it to continue accept fulfillments ."
transferissuer ( ) : allow the issuer to transfer ownership of the bounty to some new address .
changebountydeadline ( ) : allow the issuer to change a bounty 's deadline .
changedata ( ) : allow the issuer to change a bounty 's data .
changebountyfulfillmentamount ( ) : allow the issuer to change a bounty 's fulfillment amount .
changebountyarbiter ( ) : allow the issuer to change a bounty 's arbiter .
increasepayout ( ) : allow the issuer to increase a give fulfillment amount in the active stage .
getfulfillment ( ) : returns the fulfillment at a give index .
getbounty ( ) : returns the detail of the bounty .
getbountyarbiter ( ) : returns the arbiter of the bounty .
getbountydata ( ) : returns the data of the bounty .
getbountytoken ( ) : returns the token contract of the bounty .
getnumbounties ( ) return the number of bounties in the registry .
getnumfulfillments ( ) return the number of fulfillments for a give milestone .
transitiontostate ( ) : transition the contract to the state pass in the parameter _newstage give the condition state in the body of the function .
issuebounty ( ) : instantiate a new draft bounty .
issueandactivatebounty ( ) : instantiate a new draft bounty .
please note you fund will be at the mercy of the issuer and can be drain at any moment .
send fund to activate the bug bounty .
fulfillbounty ( ) : submit a fulfillment for the give bounty .
updatefulfillment ( ) : submit update data for a give fulfillment .
acceptfulfillment ( ) : accept a give fulfillment .
"killbounty ( ) : drain the contract of it 's remain fund , and move the bounty into stage 3 ( dead ) since it be either kill in draft stage , or never accept any fulfillments ."
create each mint of a petcard .
create each mint of a accessory card .
create every mint of an angel card .
burn token if token be not sell out after ico .
this be call every 5 days to set the baseprice and maxangeltotal for the angel series base on buy pressure of the last card .
anyone can transfer a pet they own by call this function .
read access .
token assignation through transfer .
token amount calculation .
crowdsale be full once all sellable_tokens be sell .
finalize a succcesful crowdsale .
update eth value in milieurs .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
returns number of confirmations of a transaction .
returns total number of transactions after filers be apply .
returns list of owners .
"returns array with owner address , which confirm transaction ."
returns list of transaction ids in defined range .
allows to add a new owner .
allows to remove an owner .
allows to replace an owner with a new owner .
allows to change the number of required confirmations .
allows an owner to submit and confirm a transaction .
allows an owner to confirm a transaction .
allows an owner to revoke a confirmation for a transaction .
allows anyone to execute a confirmed transaction .
returns the confirmation status of a transaction .
transfer token for a specified address .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
state checker .
"complete , success ."
sale protection .
continue to return fund in case the process be interrupt .
"pseudo random function , from 0 to _max ( exclusive ) ."
get winner account .
return all the fund to the buyers .
approves and then call the receive contract .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
function for transfer ethereum from contract to any address .
function for transfer tokens from contract to any address .
function confirm autosell .
make discount .
function for change discount if need .
expanding of the functionality .
function show in contract what be now .
seles manager .
function for sell tokens in crowd time .
function for start crowdsale ( any ) .
"function for web3js , should be call when somebody will buy tokens from website ."
function for add discount .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
approve should be call when allow _spender 0 .
destroy tokens .
destroy tokens from other account .
maker can activate or deactivate this contract 's buy and sell status .
anyone can call this method to verify the settings of a .
maker can call this method to create a new tokentrader contract with the maker be the owner of this new contract .
factory owner can withdraw any erc20 asset tokens from this contract .
maker can deposit ethers to this contract so this contract can buy asset tokens .
"maker can withdraw asset tokens from this contract , with the following parameter : tokens be the number of asset tokens to be withdraw ."
maker can transfer asset tokens from this contract to another .
maker can withdraw any erc20 asset tokens from this contract .
maker can withdraw ethers from this contract .
"maker can transfer ethers from this contract to another tokentrader contract , with the follow parameters : totokentrader another tokentrader contract own by the same owner and with the same asset ethers be the number of ethers to be move ."
taker buy asset tokens by send ethers .
taker sell asset tokens for ethers by : 1 .
simple for now because params be not optional .
"main function , must run for release ."
allows the current owner to update a single cap .
allows the current owner to update multiple cap .
allows the anyone to read the current cap .
allows the anyone to read the current hardcap .
for owner to withdraw eth from donators if there be any .
for owner to check registered user count .
for owner to check registered user address base on index .
for user to get their own secret note .
for user to get their own secret note key count .
for user to get their own secret note key by index .
for user to update their own secret note .
destroy one 's account .
erc20 compatibility function .
transfer land .
update land .
sets the contract that will handle a specific interface ; only the address itself or a manager define for that address can set it .
sets an external manager that will be able to call setinterfaceimplementer ( ) on behalf of the address .
authorization getters .
allows the current owner to update multiple rat .
modifier to allow token creation only when the hardcap have not be reach .
allows anyone to create tokens by deposit ether .
allows the owner to set the saleperiod .
allows the owner to finish the mint .
allows the owner to start the trade able tokens .
allows the owner to stop the trade able tokens .
"0 - health , 1 - attack , 2 - armor , 3 - speed ."
"return tankid , currprice , alive ."
"health , attack , armor , speed ."
"health , attack , armor , speed ."
"startprice , currprice , earn , basehealth , baseattack , basearmor , basespeed , numtanks ."
"return exp , next ."
create a new tank type .
fee from auction .
rate to fund tournament .
cost to enter battle .
buy tank from auction .
cash out the money that a tank have earn .
check individual account balance and return balance associate with that address .
check actual balance of all wallets .
check game status .
check interest due .
check number of participants .
take deposit of fund .
retrieve interest earn since last interest collection .
"allow withdrawal of fund and if fund leave in contract be less than withdrawal request and great or to account balance , contract balance will be clear ."
check if sender address be a contract for security purpose .
low level token purchase function .
true if the transaction can buy tokens .
override this method with token distribution strategy .
override this method with token limitation strategy .
"must be call after crowdsale end , to do some extra finalization work ."
a getter function for retriving standardized variables from the factory contract .
allows the sender to create the term for the swap .
this function be for those enter the swap .
"this function create the drct tokens for the short and long party , and ensure the short and long party have fund the contract with the correct amount of the erc20 tokens a and b ."
this function calculate the payout of the swap .
calculates the amount pay to the short and long party per token .
this function can be call after the swap be tokenized or after the calculate function be call .
this function pay the receiver an amount determine by the calculate function .
this function allow both party to exit .
increase moer 's current supply .
change owner .
"set the token 's tokenexchangerate , ."
"set the token 's totalfundingamount , ."
send eth to moer team .
turn on the fund state .
turn off the fund state .
event retained ( address ) ; .
function to change address that be allow to do emission .
function to mint tokens .
function to stop mint new tokens .
modifier to allow token creation only when the sale be on .
modifier to allow action only before sale .
modifier that fail if state do n't match .
function use to buy tokens .
function use to change the exchange rate .
function use to set wallets and enable the sale .
"generate tokens to specific address , necessary to accept other cryptos ."
finish crowdsale and token mint .
enable refund after sale .
check the amount of wei receive by beneficiary .
function use to claim wei if refund be enable .
function use to release token of team wallet .
function use to reclaim ether by owner .
get exchange rate base on time and amount .
transfer tokens from one address to another .
burn tokens .
initializes contract with initial supply tokens to the creator of the contract .
send some of your tokens to a give address .
allow another contract or person to spend some tokens in your behalf .
a contract or person attempt to get the tokens of somebody else .
"allows the contract owner to add a new presale wallet , use to hold fund safely ."
"allows the contract owner to add multiple whitelist users , each with a wallet address and a pledged contribution ."
allows the contract owner to a single whitelist user .
calculates the number of tokens that can be buy for the amount of wei transfer .
called by the owner of the contract to open the whitelistapplicant / public periods .
called by the owner of the contract to start the presale .
"allows transfer of tokens to a recipient who have purchase offline , during the presale ."
called by the owner of the contract to distribute tokens to investors .
called by the owner of the contract to distribute tokens to investors who use a non-erc20 wallet address .
called by the owner of the contract to redistribute tokens if an investor have be refund offline .
get an investor .
send ether to the presale collection wallets .
internal function to assign tokens to the contributor .
"check that the amount send in the transaction be below the individual cap , or below the pledged amount if the user be whitelisted and the sale be in the whitelist period ."
check the state of the contract .
check the state of the contract .
admin moderators .
read access .
burns a specific amount of tokens .
use token address eth_token_address for ether .
can be call only by admin .
can be call only by admin .
should be call off chain with as much gas a need .
allows the current owner to transfer control of the contract to a newowner .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
function to mint tokens .
function be use to perform a multi-transfer operation .
claim tokens by a owner address to add them to their balance .
withdraw tokens from your contract balance .
set the wallet address to receive the crowdsale contributions .
whitelist a wallet address .
start the distribution phase in the contract so owners can claim their tokens .
"pay winners , update contract balance , send reward where applicable ."
"this sound like a draconian function , but it actually just ensure that the contract have enough to pay out a jackpot at the rate you 've select ( i . e ."
returns a random number use a specified block number .
sets event outcome .
returns if winning outcome be set .
returns outcome .
internal funcion to set the outcome sit .
change the fee .
change the payment token .
contructor to the vend machine .
internal function to deploy and register a oracle .
function call by he taker to confirm a proposed oracle .
"function to propose an oracle , calle by maker ."
priviledged function to propose and deploy an oracle with one transaction .
"function to cancel a proposed oracle , call by the maker ."
function to check a users balance of solid and deposit a credit .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
transfer token for a specified address .
transfer tokens from one address to another .
returns whether the address be whitelisted .
"returns a owner , all the value in the struct ."
"registers a new contribution , set their share ."
"manually set a share directly , use to set the linkpool members a owners ."
transfer part or all of your ownership to another address .
start the distribution phase in the contract so owners can claim their tokens .
helper function for calculate a bid 's hash .
"allows the burn of a bid , for case in which a bid be corrupt and ca n't be decrypt ."
"appends the bid 's data to the contract , for use in the final calculations ."
allows append multiple decrypted bid ( in order ) at once .
allows reset the entire bid decryption / append process in case a mistake be make and it be not possible to continue append further bid .
performs the computation of auction winners and losers .
helper function that calculate the valuation of the asset in term of an art token quantity .
performs the refund of the ignored bid art tokens .
performs the refund of the loser bid art tokens .
calculates how many share be assign to a bid .
assign the asset share tokens to winner bid 's author .
return share balance of sender .
proxy function which allow send of transactions in behalf of the contract .
allows configuration of the final parameters need for auction end state calculation .
starts the auction .
"ends the auction , prevent new bid from enter ."
append an encrypted bid to the auction .
"check player profit , bet size and player number be within range ."
check game be currently active .
check payouts be currently active .
public function player submit bet only if game be active bet be valid can query oraclize and set player vars .
semi-public function - only oraclize can call .
only owner address can set houseedge .
only owner address can set maxprofitaspercentofhouse .
only owner address can transfer ether .
only owner address can do manual refund use only if bet place + oraclize fail to __callback filter logbet by address and / or playerbetid : .
only owner address can set treasury address .
only owner address can suicide - emergency .
total supply .
get the token balance for account tokenowner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
should always be place a first modifier ! .
must not be use inside the function that have novalue ( ) modifier ! .
web3js sendibantransaction interface .
"registers a new contribution , set their share ."
transfer part or all of your ownership to another address .
current context caller version number .
"manually set a share directly , use to set the linkpool members a owners ."
allows to create a subdomain ( e . g .
allows the current owner to transfer control of the contract to a new owner .
public write .
public read .
function to mint tokens _to the address that will receive the minted tokens .
set allowance for other address .
destroy tokens .
destroy tokens from other account .
allows the current owner to transfer control of the contract to a newowner .
transfer tokens .
transfer tokens from other address .
destroy tokens .
destroy tokens from other account .
get the balance of account .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to check the amount of tokens that an owner allowance to a spender .
"internal transfer , only can be call by this contract ."
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to mint tokens .
function to stop mint new tokens .
low level token purchase function .
override this method to have a way to add business logic to your crowdsale when buy .
get all rise wei .
true if the transaction can buy tokens .
allows the current owner to transfer control of the contract to a newowner .
gets the balance of the specified address .
function to check the amount of tokens that an owner allow to a spender .
burns the tokens of the specified address .
allows the current owner to transfer control of the contract to a newowner .
this function can be call by the contributor to claim his btnt tokens at the end of the ico .
"if the ico be finish and the goal have be reach , this function will be use to mint and transfer btnt tokens to each contributor ."
allows the current owner to transfer control of the contract to a new owner .
the owner can take away the ownership of any top level domain own by this contract .
"allows to create a subdomain , set it resolver and set it target address ."
function to mint tokens .
function to mint tokens .
transfer token for a specified address .
transfer tokens from one address to another .
add airdrop tokens .
burn airdrop tokens .
the owner of the contract modify the recovery address of the token .
recovery of remain tokens .
recovery donate ether .
get the tokenaddress token balance of someone .
recycle other erc20 tokens .
compression key 0-14 - timestamp 15-29 - caller pusher tracker 30-44 - global pusher tracker 45-46 - percent 47 - greedy .
_ ( / _ _ _ ) . onlydevs .
transfer from .
reset name and symbol .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
change vote rule .
add proposal .
check if a proposal code match .
log a vote for a proposal .
finish vote .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
transfer balance to owner .
function to collect tokens from the list of address .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
permit manager to sweep any tokens that land here .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
transfer token for a specified address .
storing predictive event participation information .
query the event to participate in the hash by guess the event id .
query detail of one greedycoin .
get all greedycoins of msg . sender .
buy ( only accept normal address ) .
query current blance of fee .
query the low price .
get the cheap greedycoin .
create greedycoin .
"buy greedycoin from each other , after all greedycoins have be create ."
10 change of get all blance of fee .
must be a normal address .
check if it be the address of contract .
only the owner .
query the owner of one greedycoin .
transfer from .
approve before transfer .
get approve .
transfer token for a specified address .
transfer tokens from one address to another .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
transfer token to a specify address and forward the data to recipient .
"add or remove game contract , which can accept lynia tokens ."
the lynia chariy pool .
this function be trigger manually by owner after all pixels sell .
this function be call to calculate countdown on the front side .
this function be trigger manually by owner to finish game after countdown stop .
a specific amount of tokens .
proxypayment ( ) allow the caller to send ether to the campaign and have the tokens create in an address of their choose .
dopayment ( ) be an internal function that send the ether that this contract receive to the vault and create tokens in the address of the _owner assume the campaign be still accept fund .
validation of an incoming purchase .
number of tokens that can be purchase with the specified _weiamount .
onlycontroller change the location that ether be send .
onlycontroller change the campaing end time .
finalizefunding ( ) can only be call after the end of the fund period .
erc20 standard method to return total number of tokens .
erc20 standard method to return the token balance of an address .
erc20 standard method to return spend allowance .
erc20 standard method to tranfer tokens .
erc20 standard method to transfer tokens on someone elses behalf .
"method that do the actual transfer of the tokens , to be use by both transfer and transferfrom methods ."
erc20 standard method to give a spender an allowance .
withdraw tokens only after crowdsale end and crowdsale be finalize .
overrides parent by store balance instead of issue tokens right away .
investors can claim refund here if crowdsale be unsuccessful .
checks escrow wallet balance .
"escrow finalization task , call when owner call finalize ( ) ."
"overrides crowdsale fund forward , send fund to escrow ."
stores the send amount a credit to be withdraw .
withdraw accumulate balance for a payee .
"allows for the beneficiary to withdraw their fund , reject further deposit ."
"allows for refund to take place , reject further deposit ."
withdraws the beneficiary 's fund .
convert wei to tokens .
pull function sig from _data .
use to change the fee of the setup cost .
use to change the fee of the usage cost .
use to change the fee of the subscription cost .
"allows owner , factory or permissioned delegate ."
use to withdraw the fee by the factory owner .
used to verify the transfer transaction accord to the rule implement in the trnasfer managers .
used to intialize the variables of the contract .
this function return the signature of configure function .
set the maximum percentage that an individual token holder can hold .
"call by the owner to pause , trigger stop state ."
return the permissions flag that be associate with counttransfermanager .
"call by the owner to unpause , return to normal state ."
delete proposal signature data after successfully execute a multisig function .
transfer token for a specified address .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
return player earn per vault - functionhash - 0x63066434 .
solidity hat stack limit .
other round info .
return player info base on address .
update last multi pids who boungt key .
this be the core logic for any buy / reload that happen while a round be live .
receive name / player info from name contract .
end the round .
calc real max time for spent time .
update round timer base on number of whole key buy .
"distribute eth base on fee to com , aff , and p3d ."
determine player 's affid .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
get current round detail .
get round stats by index .
get the total number of user subscriptions .
get user subscription round number detail .
let the user comment 64 letter for a win round .
blacklist a user for it comment behavior .
get the user win round comment .
etherdrop team r d support collectibles .
decrease the amount of tokens that an owner allow to a spender .
burns a specific amount of tokens .
transfer token for a specified address .
transfer tokens from one address to another .
fire the withdrawalrequested event .
user request withdraw .
function to mint tokens .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
burns a specific amount of tokens .
freeze part .
burns a specific amount of tokens .
function to transfer tokens from one address to another add due to backwards compatibility with erc20 .
function to distribute tokens to the list of address by the provided amount .
function to distribute different amount of tokens for each to the list of address by the provided amount .
function to distribute tokens to the msg . sender .
constructor be call only once and can not be call again .
standard function transfer similar to erc20 transfer with no _data add due to backwards compatibility reason .
assemble the give address bytecode .
function to prevent target from send or receive tokens ( freeze user ) .
function to prevent target from send or receive tokens by set unix time .
transfer token for a specified address .
gets the balance of the specified address .
freeze ? prevent allow target from send receive body precondition .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
function to check the amount of tokens than an owner allow to a spender .
approves and then call the receive contract .
do multiple transaction in on call .
checks whether it can transfer or otherwise throw .
default transferable tokens function return all tokens for a holder ( no limit ) .
the function can be call only before or after the tokens have be releasesd .
the function can be call only by a whitelisted release agent .
limit token transfer until the crowdsale be over .
allow the token holder to upgrade some of their tokens to a new contract .
set an upgrade agent that handle .
get the state of the token upgrade .
change the upgrade master .
grant tokens to a specified address .
revoke the grant of tokens of a specifed address .
calculate the total amount of transferable tokens of a holder at a give time .
check the amount of grant that an address have .
calculate amount of vested tokens at a specific time .
get all information about a specific grant .
get the amount of vested tokens at a specific time .
calculate the amount of non vest tokens at a specific time .
calculate the date when the holder can transfer all it tokens .
checks modifier and allow transfer if tokens be not lock or not release .
checks modifier and allow transfer if tokens be not lock or not release .
"prevent account that be block for transfer their tokens , from call approve ( ) ."
"prevent account that be block for transfer their tokens , from call increaseapproval ( ) ."
can upgrade token contract only if token be release and super class allow too .
calculate the total amount of transferable tokens of a holder for the current moment of call .
use these to register name .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and xcom ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
prevent contract from interact with x3d .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
black list an address .
set the rate of how many units a buyer get per wei .
set the minimum investment in wei .
set the maximum investment in wei .
set the maximum investment in wei .
validation of an incoming purchase .
whitelist an address .
unique address .
fallback function .
withdraw the fund .
true if crowdsale event have end .
low level token purchase function .
what be the total supply of the ech tokens .
"burn the tokens , can be call only by owner ."
create new game .
player submit their option .
calculate the winner side calculate the award to winner .
calculate the winner side calculate the award to winner .
send award to last winner of the list .
return the game detail after end 0 winner side 1 nomber of player who choose option 1 2 nomber of player who choose option 2 3 total award 4 award of each winner .
get the option o the player choose .
return the players who win the game .
return the players who win the game .
return all available game address .
return winner list size .
return all available game address .
set bonus of the game .
force to end the game .
function ( ) public payable .
return the game data when play 0 start time 1 end time 2 no of player 3 total bet 4 jackpot 5 be end game boolean 6 game bet value .
return the game detail : 0 game id 1 start time 2 end time 3 no of player 4 total bet 5 question + option 1 + option 2 6 jackpot 7 be end game 8 game bet value .
return all current round info need for front end - functionhash - 0x747dff42 .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
during ico phase all eth send in by each player .
this be the core logic for any buy / reload that happen while a round be live .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
prepare compression data and fire event for buy or reload tx 's .
withdraws all of your earn .
compression key 0-14 - timestamp 15-29 - caller pusher tracker 30-44 - global pusher tracker 45-46 - percent 47 - greedy .
"distribute eth base on fee to com , aff , and p3d ."
"multiplies two number , throw on overflow ."
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to mint tokens .
crowdsale external interface .
internal interface ( extensible ) .
determines how eth be store / forward on purchase .
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
total number of tokens in existence .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
allows the current owner to transfer control of the contract to a newowner .
allows the current owner to relinquish control of the contract .
gets the balance of the specified address .
"internal transfer , only can be call by this contract ."
transfer token for a specified address .
gets the balance of the specified address .
internal privats .
transfer tokens from one address to another .
destroy tokens .
destroy tokens from other account .
allows the current owner to transfer control of the contract to a newowner .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
destroy tokens .
destroy tokens from other account .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
freeze ? prevent allow target from send receive tokens .
send _value tokens to _to from msg . sender .
set _token_address a the token address to be use in the auction .
"set _price_start , _price_constant1 and _price_exponent1 _price_constant2 and _price_exponent2 a the new starting price , price constant and price exponent for the auction price ."
adds account address to public sale eth whitelist .
removes account address from public sale eth whitelist .
adds presale account address to privatesalewhitelist .
start the auction .
send msg . value .
finalize the auction - set the final gotoken price and change the auction stage after no bid be allow .
distribute gotokens for receiver_address after the auction have end by the owner .
transfer _value tokens from _from to _to if msg . sender .
"get the got price in wei during the auction , at the time of call this function ."
"get the remain fund need to end the auction , calculate at the current got price in wei ."
calculates the token price ( wei / got ) at the current timestamp during the auction ; elapse time 0 before auction start .
approves _who to transfer _value tokens from msg . sender .
returns number of allow tokens that a spender can transfer on behalf of a token owner .
returns number of tokens own by a give address .
only owner of the contract .
only who be allow to whitelist the participant eth address ( specify during the contract deployment ) .
only who be allow to distribute the got to the participant eth address ( specify during the contract deployment ) .
true if the transfer be do .
true if ico be open .
true if _purchaseamount be allow .
true if the purchase be valid .
true if the transfer be valid .
true if the transfer be do .
true if the transfer be do .
amount of token allocate .
amount of release tokens .
amount of vested token .
modifiers to avoid short address attack .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
turn reinvest on / off .
enables anyone with a masternode to earn referral fee on p3d reinvestments .
buy p3d tokens .
sell p3d tokens and send balance to owner .
withdraw p3d dividends and send balance to owner .
"sell p3d tokens , withdraw dividends , and send balance to owner ."
transfer p3d tokens .
get dividends for this contract .
create a crop contract that can hold p3d and auto-reinvest .
logic run whenever a buy order be execute .
this be the core logic for any buy / reload that happen while a round be live .
receive name / player info from name contract .
receive entire player name list .
get exist or register new pid .
end the round .
generate a random number between 0-99 and check to see if thats result in an airdrop win .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
withdraws all of your earn .
use these to register name .
determine if the oracle be query .
retrievedata - returns store value by give key .
pushdata - sends an oraclize query for entered api .
get api use for test .
used by oraclize to return value of pushdata api call .
"yes there be divs generate on each buy , but not enough to justify transfer to msg . sender ."
execute the rule of a dispute .
return the number of items in the list .
return the number of items in the list per status .
return the value of the items the query find .
request for an item to be register .
request an item to be clear .
challenge a registration request .
challenge a clear request .
appeal rule .
execute a request after the time for challenge it have pass .
return true if the item be allow .
increase the amount of tokens that an owner allow to a spender .
allows the current owner or operators to add operators .
allows the current owner or operators to remove operator .
remove all operators .
throws if _address be not in whitelist .
allow operators to add whitelisted contract .
allow operators to remove a contract from the whitelist .
allow operators to update whitelist contract in bulk .
allow operators to update the fee for a custom combo .
allow operators to update the fee for a custom combo .
"calculate the custom fee base on buyer , seller , game token or combo of these ."
get custom fee hash .
safe multiplication .
retrieve hashkey to view list .
get fee .
deprecate callback ( do not handle operator ) .
expect callback ( include operator ) .
extend item list : new expiry current expiry + defaultexpiry .
withdraw item from marketplace back to seller .
buy item with eth .
"buy with plat require call bitguildtoken contract , this be the callback call to approve already verify the token ownership , no check require ."
update fee provider contract .
update whitelist contract .
update expiry date .
admin function : withdraw eth balance .
admin function : withdraw plat balance .
internal functions .
create new list data .
deposit unpack _extradata and log list info .
handle purchase logic for both plat and eth .
decoding helper function from seriality .
decoding helper function from seriality .
throws if call by any non-operator account .
allows the current owner to transfer control of the contract to a newowner .
"constructor - set value for token name and token supply , as well a the factory_contract , the swap ."
erc20 compliant transferfrom function .
erc20 compliant approve function .
counts address involve in the swap base on the length of balance array for _swap .
gets the owner address and amount by specify the swap address and index .
gets the index by specify the swap and owner address .
look up how much the spender or contract be allow to spend ? .
token creator - this function be call by the factory contract and create new tokens for the user .
get the factory address .
"called by the factory contract , and pay out to a _party ."
returns the users total balance ( sum of tokens in all swap the user have tokens in ) .
ensure the member be whitelisted .
getter for the total_supply of tokens in the contract .
true for successful .
erc20 compliant transferfrom function .
erc20 compliant approve function .
counts address involve in the swap base on the length of balance array for _swap .
gets the owner address and amount by specify the swap address and index .
gets the index by specify the swap and owner address .
look up how much the spender or contract be allow to spend ? .
constructor function for cloned factory .
get the factory address .
sets the membership contract address .
sets the member type / permissions for those whitelisted .
checks the membership type / permissions for whitelisted members .
gets long and short token address base on specified date .
gets the type of token ( long and short token ) for the specifed token address .
updates the fee amount .
updates the swap fee amount .
sets the deployer address .
sets the user_contract address .
"sets token ratio , swap duration , and multiplier variables for a swap ."
token creator - this function be call by the factory contract and create new tokens for the user .
sets the address of the base tokens use for the swap .
"allows a user to deploy a new swap contract , if they pay the fee ."
deploys drct tokens for give start date .
deploys new tokens on a drct_token contract - - call from within a swap .
allows the owner to set a new oracle address .
allows the owner to pull contract creation fee .
returns a tuple of many private variables .
pays out to a drct token .
counts number of contact create by this factory .
"called by the factory contract , and pay out to a _party ."
counts number of start date in this factory .
this function create tokens equal in value to the amount send to the contract .
this function 'unwraps ' an _amount of ether in the sender 's balance by transfer .
returns the balance associate with the pass in _owner .
allows for a transfer of tokens to _to .
allows an address with sufficient spend allowance to send tokens on the behalf of _from .
this function approve a _spender an _amount of tokens to use .
returns the remain allowance of tokens grant to the _spender from the _owner .
getter for the total_supply of wrapped ether .
value must be send with initiate and enter the _amount ( in wei ) .
returns the users total balance ( sum of tokens in all swap the user have tokens in ) .
set factory address .
getter for the total_supply of tokens in the contract .
"removes the address from the swap balance for a swap , and move the last address in the swap into their place ."
this be the main function to update the mappings when a transfer happen .
erc20 compliant transfer function .
allows the owner to set a new owner address .
creates factory clone .
set factory address to clone .
removes the factory specify .
counts the number of factories .
returns the factory address for the specified index .
refund money if kyc / aml fail .
this update / transfer the member address .
access modifier for owner functionality .
getordercount allow party to query how many order be on the book .
gets number of open orderbooks .
getorders allow party to get an array of all orderid 's open for a give token .
getuserorders allow party to get an array of all orderid 's open for a give user .
an internal function to update mappings when an order be remove from the book .
list allow a party to place an order on the orderbook .
list allow a party to list an order on the orderbook .
buy allow a party to partially fill an order .
unlist allow a party to remove their order from the orderbook .
"getorder list the price , amount , and maker of a specific token for a sale ."
allow the owner to change who the owner be .
allows party to see if one be blacklist .
"use to verify the investment , whether the investor provide the allowance to the sto or not ."
pause ( overridden function ) .
unpause ( overridden function ) .
reclaim erc20basic compatible tokens .
function use to intialize the contract variables .
this function return the signature of configure function .
low level token purchase * * * do not override .
low level token purchase .
checks whether the cap have be reach .
return eth raise by the sto .
return poly raise by the sto .
return the total no .
return the permissions flag that be associate with sto .
return the sto detail .
internal interface ( extensible ) .
validation of an incoming purchase .
source of tokens .
executed when a purchase have be validate and be ready to be execute .
override to extend the way in which ether be convert to tokens .
internal function use to check the type of fund raise currency .
internal function use to forward the poly raise to beneficiary address .
reclaim all erc20basic compatible tokens .
get the contract address .
change the contract address .
"if _fallback be true , then for sto module type we only allow the module if it be set , if it be not set we only allow the owner for other _moduletype we allow both issuer and module ."
"checks whether the mint be allow or not , check for the owner if owner be no the msg . sender ."
function use to attach the module in security token .
_addmodule handle the attachment ( or replacement ) of modules for the st .
removes a module attach to the securitytoken .
returns module list for a module type .
return module list for a module name - will return first match .
allow the owner to withdraw unspent poly store by them on the st .
allow owner to approve more poly to one of the modules .
change the tokendetails .
allow owner to change token granularity .
keep track of the number of non-zero token holders .
remove address with zero balance from the investors list .
get length of investors array .
freeze all the transfer .
un-freeze all the transfer .
adjust totalsupply at checkpoint after mint or burn tokens .
adjust token holder balance at checkpoint after a token transfer .
store the change to the checkpoint object .
overloaded version of the transfer function .
overloaded version of the transferfrom function .
validate transfer with transfermanager module if it exist .
end token mint period permanently for issuer .
end token mint period permanently for stos .
mint new tokens and assign them to the target _investor .
mint new tokens and assign them to the target _investor .
"validate permissions with permissionmanager if it exist , if no permission return false ."
use to set the token burner address .
burn function use to burn the securitytoken .
get function signature from _data .
creates a checkpoint that can be use to query historical balance / totalsuppy .
queries totalsupply a of a defined checkpoint .
queries value at a defined checkpoint .
queries balance a of a defined checkpoint .
the functional modifier reject the interaction of senders who be not owners .
change size of bucket .
change refill rate of bucket .
change size and refill rate of bucket .
function to mint tokens .
function to calculate and get available in bucket tokens .
functional modifier for reject the interaction of senders that be not minters .
look up for the owner role on providen address .
look up for the minter role on providen address .
adds the owner role to provide address .
deletes the owner role to provide address .
adds the minter role to provide address .
deletes the minter role to provide address .
changes the owner role to provide address .
changes the minter role to provide address .
function that be call when transaction target be a contract .
the functional modifier reject the interaction if contract be n't finalize .
the functional modifier reject the interaction if contract be finalize .
finalizes contract .
overrides erc20 interface to prevent interaction before finalization .
overrides erc223 interface to prevent interaction before finalization solium-disable - next-line arg-overflow .
overrides erc223 interface to prevent interaction before finalization .
overrides erc20 interface to prevent interaction before finalization .
overrides erc20 interface to prevent interaction before finalization .
overrides erc20 interface to prevent interaction before finalization .
overrides erc20 interface to prevent interaction before finalization .
function to mint tokens .
function to stop mint new tokens .
overrides original mint function from mintabletoken to limit mint over cap .
overrides finalize function from rbacerc223tokenfinalization to prevent future mint after finalization .
overrides finishminting function from rbacmintabletokenmixin to prevent finish mint before finalization .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
buy tokens from contract by send ether .
change the address for the specified role .
calculate the vested and unclaimed months and tokens available for _recepient to claim .
burns a specific amount of tokens .
initializing the round .
"issue of tokens for the zero round , it be usually call : private pre-sale ( round 0 ) ."
for people who ignore the kyc / aml procedure during 30 days after payment ( kyc_period ) : money back and zero tokens .
the logic of finalization .
freeze ? prevent allow target from send receive inve precondition .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
gets the dividends right of the specified address .
release dividends right .
release dividends right .
update dividends right fix .
transfer token for a specified address .
transfer tokens from one address to another .
accept dividends in ether .
release dividends right for a specified address .
total number of tokens in existence .
transfer tokens from one address to another .
transfer token for a specified address .
transfer tokens from one address to another .
gets the balance of the specified address .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
delete proposal signature data after successfully execute a multisig function .
return a hashed version of msg . data .
return number of signers for any give function .
return address of an admin who sign for any give function .
function to mint tokens .
owner can transfer back tokens which have be send to this contract by mistake .
push contributor data to the contract before the crowdsale .
maxcontribution maximum allow amount in wei .
_tokens amount of tokens .
set the current state of the crowdsale .
the token buy function .
check if token be lock .
distribute tokens to select team members founder .
alternatively to airdrop ( ) ; tokens can be directly send to beneficiaries by this function .
the create token .
finalize sale and perform cleanup action .
owner can transfer back tokens which have be send to this contract by mistake .
owner can transfer back tokens which have be send to this contract by mistake .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
"internal transfer , only can be call by this contract ."
"calls into erc20 token contract , invoke transferfrom ."
used to set exchange address .
transfer token for a specified address .
transfer tokens from one address to another .
calculates partial value give a numerator and denominator .
checks if any order transfer will fail .
fills the input order .
verifies that an order signature be valid .
checks if round error 0 . 1 .
sets the multihash associate with an ens node .
low level token purchase * * * do not override .
function for daonomic ui .
executes buyback .
calculates tokens for this stage .
returns number of tokens own by give address .
administrative function .
adds single address to whitelist .
adds list of address to whitelist .
removes single address from whitelist .
check if goal be reach .
withdraw the fund .
performs a handover to a new implement contract .
"internal transfer , only can be call by this contract ."
transfer tokens .
interface declaration .
perform a transfer of allocations .
self check if all reference be correctly set .
pricing tell if this be a presale purchase or not .
return true if we can run finalizecrowdsale ( ) properly .
return token balance this contract have .
send token to multiple address .
withdraw the amount of token that be remain in this contract .
"just in case , owner want to transfer tokens from contract to owner address ."
automatocally forward ether from smart contract to owner address .
should be call by crowdsale when crowdsale be finish .
shows the token balance of the ethereum wallet address if any .
transfering the token to any erc20 wallet address .
not allow a particular ethereum wallet address to send or receive tokens in case of blacklist reactively .
"multiplies two number , throw on overflow ."
add single address into the whitelist .
remove single address from the whitelist .
add multiple address into the whitelist .
remove multiple address from the whitelist .
after ico deadline .
burn unsold tokens after ico deadline .
after tokens claimable duration .
transfer unsold tokens after ico deadline .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
calculate how many key would exist with give an amount of eth .
calculate how much eth would be in contract give a number of key .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
this be the core logic for any buy / reload that happen while a round be live .
the issue of tokens in period 3 sales .
manual management .
whitelist 's section .
setter 's section .
issue token in a period of closed sales .
the issue of tokens in period 1 sales .
the issue of tokens in period 2 sales .
withdraws all of your earn .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
end the round .
generate a random number between 0-99 and check to see if thats result in an airdrop win .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
function to case vote in this carbon vote .
checks whether the tokencap have be reach .
checks the state when validate a purchase .
overrides parent method take into account variable rate ( a a percentage ) .
setup the map of bonus-rates ( a a percentage ) and total hardcap for each salestate tier to be call by the constructor .
get the current bonus-rate for the current salestate .
get the current hardcap for the current salestate .
only allow the owner to set the state .
change the bonus tier after a purchase .
function : distribute initial token supply .
sets up the initial balance .
ownership management .
crowdsale closed .
checks the state when validate a purchase .
update the eth-to - lpc exchange rate .
mint for private fiat transactions .
send coin .
replace service account with new one .
is caller ( sender ) service account .
public check method .
override hasclosed to add minimal value logic .
do inner check .
do inner action if check be success .
override purchase validation to add extra value logic .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
transfer token for a specified address .
transfer tokens from one address to another .
use to enquire about the ether spend to buy the tokens .
approve should be call when allow _spender 0 .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
real uint256 public constant minimum_ether_spend ( 250 * 10 * * ( decimals-3 ) ) ; uint256 public constant maximum_ether_spend 300 * 10 * * decimals ; .
function to stop mint new tokens .
remove tokens and return them to the main pool this be call if .
0 lock 1 unlocked 2 vestable .
0 lock 1 unlocked 2 vestable .
transfer token for a specified address .
in the light of our sanity allow a utility to whole number of tokens and 1 / 10000 token transfer .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
send coin .
a contract attempt to get the coin .
transfer balance to owner .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
freeze ? prevent allow _target from send receive tokens .
get the total supply .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
set allowance for other address .
kill the contract send everything to _to .
outside-visible transact entry point .
confirm a transaction through just the hash .
revokes a prior confirmation of the give operation .
replaces an owner _from with another _to .
simple modifier for daily limit .
( re ) set the daily limit .
( re ) set the daily limit .
check to see if there be at least _value leave from the daily limit today .
determine today 's index .
set balance and freeze time for address .
transfer token for a specified address .
transfer tokens from one address to another .
return all current round info need for front end - functionhash - 0x747dff42 .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
prevent contract from interact with fomo3d .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
use for initial check to not waste gas .
"owner can add slot in batch , 100 max ."
owner can mint special sans for an address .
internal functions .
adds an sale to the list of open sales .
removes an sale from the list of open sales .
total supply .
"as a holder of token , withdraw your dvidend ."
disable mint .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
mint tokens .
schreibt dem absender der transaktion ( txfrom ) ihren wert ( txvalue ) als guthaben zu .
"ermöglicht jemandem , so viel ether aus dem smart contract abzubuchen , wie ihm an guthaben zur verfügung steht ."
getter-funktion ; gibt das guthaben einer addresse zurück .
"eine weitere veranschaulichung eines funktionstyps , der den state nicht ändert ."
end the round .
update round timer base on number of whole key buy .
"distribute eth base on fee to com , aff , and p3d ."
reset the hunt if the grace period be over .
withdrawal function for winner and admin .
admin failsafe for destroy the contract .
number of locations in the hunt .
admin function for update all locations .
admin function to update the location at index .
admin function to add a location .
admin function to set the price of submit a location .
submit a location key xor 'd with a password for late verification .
sets the message sender a the winner if they have complete the hunt .
donate the message value to the pot .
throw if buyer be not whitelisted .
add single address to whitelist .
add address to whitelist .
remove single address from whitelist .
remove address from whitelist .
getter to determine if address be in whitelist .
extend parent behavior require beneficiary to be in whitelist .
override hasclosed to add minimal value logic .
override purchase validation to add extra value logic .
override purchase validation to add extra value logic .
"multiplies two number , throw on overflow ."
"unfreeze account , make transfer from this account available ."
allow transfer tokens or not .
transfer tokens for a specified address .
transfer tokens for a specified address in ico mode .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
transfer token for a specified address .
allow only for owner or manager .
returns current manager .
sets new manager .
set exchange rate .
start crowd-sale .
finalize ico .
finalize crowd-sale .
finalize crowd-sale .
recalculate phase .
send tokens to the specify address .
freeze the account .
get ico time .
sets start and end date for pre-sale phase_i .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
finalize ico .
total number of tokens in existence .
"freeze account , make transfer from this account unavailable ."
"temporary freeze account , make transfer from this account unavailable for a time ."
function grantadvisortoken - transfer advisor tokens .
function grantbackertoken - transfer backer tokens .
function grantfoundationtoken - transfer foundation tokens .
function grantfoundertoken - transfer founder tokens .
function grantprivatepurchasertoken - transfer private purchasers tokens .
function bountyfunds - transfer bounty tokens via airdrop .
function publictransfertoken - transfer public tokens via airdrop .
hazzatoken contract .
this method can be use by admin to extract eth accidentally send to this smart contract after all previous transfer have be make to the correct address .
check balance of this smart contract .
"callable by owner only , after specified time ."
"callable by owner only , after specified time ."
"callable by owner only , after specified time ."
"callable by owner only , after specified time ."
"internal transfer , only can be call by this contract ."
constructor be call only once and can not be call again .
change a string to upper case .
creates a new security token and save it to the registry .
add a new custom ( token should follow the isecuritytoken interface ) security token and save it to the registry .
changes the protocol version and the securitytoken contract .
get security token address by ticker name .
get security token data by it address .
check that security token be register .
set the ticker registration fee in poly tokens .
pause registration function .
unpause registration function .
deploy the token and add default modules like permission manager and transfer manager .
init function i . e .
creates a dividend and checkpoint for the dividend .
issuer can push dividends to provided address .
issuer can push dividends use the investor list from the security token .
investors can pull their own dividends .
internal function for pay dividends .
"issuer can reclaim remain unclaimed dividend amount , for expired dividends ."
get the index accord to the checkpoint id .
return the permissions flag that be associate with sto .
type of the module factory .
get the name of the module .
get the description of the module .
get the title of the module .
get the instructions that help to use the module .
creates a dividend and checkpoint for the dividend .
creates a dividend with a provided checkpoint .
internal function for pay dividends .
"issuer can reclaim remain unclaimed dividend amount , for expired dividends ."
calculate amount of dividends claimable .
use to launch the module with the help of factory .
get the name of the module .
get the description of the module .
get the title of the module .
get the instructions that help to use the module .
get the tag relate to the module factory .
used to verify the transfer transaction accord to the rule implement in the trnasfer managers .
used to intialize the variables of the contract .
set the maximum percentage that an individual token holder can hold .
add or remove address from the whitelist .
add or remove address from the whitelist .
return the permissions flag that be associate with percentage transfer manager .
use to launch the module with the help of factory .
type of the module factory .
get the name of the module .
get the description of the module .
get the title of the module .
get the instructions that help to use the module .
get the tag relate to the module factory .
use to launch the module with the help of factory .
get the name of the module .
get the title of the module .
get the tag relate to the module factory .
use to check the permission on delegate correspond to module contract address .
use to add the detail of the delegate .
use to provide / change the permission to the delegate correspond to the module contract .
use to get the detail of the delegate .
use to get the permission flag relate the this contract .
use to launch the module with the help of factory .
type of the module factory .
get the name of the module .
get the description of the module .
get the title of the module .
get the instructions that help to use the module .
get the tag relate to the module factory .
"if the user send 0 ether , he receive 50 tokens ."
use to launch the module with the help of factory .
type of the module factory .
get the name of the module .
get the description of the module .
get the title of the module .
get the instructions that help to use the module .
get the tag relate to the module factory .
called by a security token to notify the registry it be use a module .
called by polymath to verify modules for securitytoken to use .
use to get all the tag releated to the functionality of the module factory .
add the tag for specify module factory .
remove the tag for specify module factory .
register the token symbol for it particular owner .
change the expiry time for the token symbol .
check the validity of the symbol .
check the symbol be reserve or not .
returns the owner and timestamp for a give symbol .
to re-initialize the token symbol detail if symbol validity expire .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
low level token purchase function .
exchange use this function to withdraw ether from the contract .
users use this function to withdraw ether from their custody .
users use this function to withdraw ether from their custody .
this function prepare the daily settlement - reset all settlement .
"this function be use to process a batch of net eth flow , two array ."
"this function be use to process a batch of net bbd flow , two array ."
this function be use to finish the settlement process .
"duplicate solidity 's ecrecover , but catch the call return value ."
create a bet .
internal function to delete the bet token .
bet a users token against another users token .
internal function to pay out the winner .
set the fee .
withdraw the commission .
random function for tiebreaker .
get amount of active bet tokens .
get list of active bet tokens .
total open bet of user .
get list of active bet tokens .
if defcon be set to 4 or low then function be pause .
if defcon be set to 3 or low then function be pause .
if defcon be set to 2 or low then function be pause .
if defcon be set to 1 or low then function be pause .
"set the defcon level , 5 be unpaused , 1 be everything be pause ."
"get the user balance , require that the user be the msg . sender , ."
main deposit function .
widthdraw what be in users bank .
calculate how many key would exist with give an amount of eth .
calculate how much eth would be in contract give a number of key .
allows merchant to withdraw fund to beneficiary address with a transaction .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
called by the owner if the project do n't deliver the testnet contract or if we need to stop disbursements for any reasone .
refunds ether to the contributors if in the refunding state .
called by the owner if the sale have end .
sends the disbursement amount to the wallet after the disbursement period have pass .
called by the sale contract to deposit ether for a contributor .
sends initial fund to the wallet .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
fix for the erc20 short address attack .
public read .
kill the contract send everything to _to .
replaces an owner _from with another _to .
( re ) set the daily limit .
( re ) set the daily limit .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
transfer token for a specified address .
gets the balance of the specified address .
burns a specific amount of tokens .
the inflation rate begin at 100 and decrease by 30 every year until it reach 10 at 10 the rate begin to decrease by 0 . 5 .
anyone can call this function to update the inflation rate yearly .
stake function which allow users to stake an amount of tokens to gain interest for up to 365 days .
stake for a seperate address .
stake function reduce the user 's total available balance and add it to their staking balance .
return how much scale a user have earn so far .
allow users to reclaim any staked tokens .
helper function to claimstake that modularizes the mint via stake calculation .
set the new totalstakinghistory map to the current timestamp and totalscalestaked .
allows user to check their staked balance .
allow contract owner to claim their mint .
anyone can call this function that mint scale to the pool dedicate to scale distribution to reward pool .
set the address for the reward pool .
calculatefraction allow u to well handle the solidity ugliness of not have decimals a a native type .
determines the amount of scale to create base on the number of second that have pass .
function to mint tokens .
throws if call by any non-operator account .
allows the current owner to transfer control of the contract to a newowner .
allows the current owner or operators to add operators .
allows the current owner or operators to remove operator .
remove all operators .
compression key 0-14 - timestamp 15-29 - caller pusher tracker 30-44 - global pusher tracker 45-46 - percent 47 - greedy .
"interfaceid_erc998 bytes4 ( keccak256 ( 'tokenownerof ( uint256 ) ' ) ) bytes4 ( keccak256 ( 'ownerofchild ( address , uint256 ) ' ) ) bytes4 ( keccak256 ( 'onerc721received ( address , address , uint256 , bytes ) ' ) ) bytes4 ( keccak256 ( 'onerc998removedchild ( address , address , uint256 , bytes ) ' ) ) bytes4 ( keccak256 ( 'transferchild ( address , address , uint256 ) ' ) ) bytes4 ( keccak256 ( 'safetransferchild ( address , address , uint256 ) ' ) ) bytes4 ( keccak256 ( 'safetransferchild ( address , address , uint256 , bytes ) ' ) ) bytes4 ( keccak256 ( 'getchild ( address , address , uint256 , uint256 ) ' ) ) ; ."
return the owner at the top of the tree of composables .
this contract have to be approve first in _childcontract .
implementation of erc 223 .
this contract have to be approve first by _erc223contract .
use by erc 223 .
gets the token name .
gets the token symbol .
returns an uri for a give token id .
gets the token id at a give index of the tokens list of the requested owner .
internal function to set the token uri for a give token .
internal function to add a token id to the list of a give address .
internal function to remove a token id from the list of a give address .
internal function to mint a new token .
override add enumerable info .
create avatar .
generate url by tokenid baseurl must end with 00000000 .
"pay winner , update contract balance to calculate new max bet , and send reward ."
"pay winner , update contract balance to calculate new max bet , and send reward ."
"pay winner , update contract balance to calculate new max bet , and send reward ."
token fallback to bet or deposit from bankroll .
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
liquifies tokens to ethereum .
this be the core logic for any buy / reload that happen while a round be live .
this be the core logic for any buy / reload that happen while a round be live .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
return player earn per vault - functionhash - 0x63066434 .
register a name .
in case of accidental ether lock on contract .
"in case of accidental token transfer to this address , owner can transfer it elsewhere ."
it call parent basictoken . transfer ( ) .
it call parent standardtoken . transferfrom ( ) .
only way to give poohmowhale eth be via by use fallback .
number of tokens the contract own .
number of dividends owe to the contract .
address of game contract that eth get send to .
a trap door for when someone send tokens other than the intended ones so the overseers can decide where to send them .
owner can update which doublr the poohmowhale pay to .
owner can update poohmowhale to stop pay doublr and act a whale .
add a user to the whitelist .
remove an user from the whitelist .
lock token until _timespan second .
"return a lock record ( lock amount , releasetimestamp ) ."
get lock record count .
use by internal .
assigns a new address to act a the coo .
pay for order .
calculate the maximum potential profit .
"finished the current bet of a player , if they have one ."
"pay winner , update contract balance to calculate new max bet , and send reward ."
transfer tokens from account to account .
token fallback to bet or deposit from bankroll .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
end the round .
"distribute eth base on fee to com , aff , and pooh ."
1eth newrate tokens .
"all air deliver related function use count insteads of wei _amount in biox , not wei ."
"_amount , _freezeamount in biox ."
use for add whitelists .
get exist or register new pid .
"distribute eth base on fee to com , aff , and p3d ."
prevent contract from interact with fomo3test1d .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
"check player profit , bet size and player number be within range ."
only owner address can set bankroll address .
"todo comment this norsefire , i have no idea how it work ."
only owner address can set maxprofitaspercentofhouse .
public function .
transfer the balance from token owner 's account to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
public write .
end the round .
return the price for nth key n key / decimals .
anyone can finalize a round .
_pid spend _eth to buy key in _round .
calculate the key that the user can buy with specified amount of eth return the eth leave .
withdrawal all the earn of the game .
create tokens and supply to msg . sender .
returns currentstage .
returns maxsupplyreached true / false .
token creation .
complete token sale .
check totalsupply .
get the token balance for account tokenowner .
transfer the balance from token owner 's account to to account .
cancels an auction .
cancels an auction when the contract be pause .
withdraw all ether ( fee ) from auction contract to token contract .
set new auction price limit .
returns true if the claimant own the token .
transfer token from owner to this contract .
transfers token own by this contract to another address .
adds an auction to the list of open auction .
removes an auction from the list of open auction .
remove an auction and transfer token from this contract to seller address .
check token be on auction .
calculates fee of a sale .
returns current price of a token on auction .
calculate the current price of an auction .
calculate auction price and transfer winnings .
"called by the owner to pause , trigger stop state ."
"called by the owner to unpause , return to normal state ."
creates a new auction .
returns auction info for a token on auction .
returns the current price of an auction .
"bids on an open auction , complete the auction and transfer ownership of the token if enough ether be supply ."
returns information about token .
set new owner address .
set new admin address .
set new auction price limit .
set the address of upgraded contract .
pause the contract .
unpause the contract .
transfer a token to another address .
grant another address the right to transfer a specific token via transferfrom ( ) .
"transfers a token own by another address , for which the call address have previously be grant transfer approval by the owner ."
throws if call by any account other than the admin .
this method must never be call by smart contract code .
set the reference to the auction contract .
put a token up for auction .
transfers the balance of the auction contract to this contract by owner or admin .
creates a new release token with the give name and create an auction for it .
creates free token and transfer it to recipient .
create a new token and store it .
check claimant address a token owner .
check if a give address currently have transferapproval for a particular token .
marks an address a be approve for transferfrom ( ) .
assigns ownership of a specific token to an address .
check implement erc721 standard ( need in auction contract ) .
transfer all ether from this contract to owner .
returns the total number of tokens currently in existence .
returns the number of tokens own by a specific address .
returns the address currently assign ownership of a give token .
start lockup periods .
send _value amount of tokens from address _from to address _to .
transfer the balance from owner 's account to another account .
transfer the balance from owner 's account to another account .
drain all coin .
end lockup periods .
add address to private sale .
add address to contributors .
add address to contributors2 .
add address to tech operation .
add address to marketing business development .
add address to early investors .
add owners .
allow the transfer of tokens to happen once ico finish .
this be confiscate the money that be send to the wrong address accidentally .
low level token purchase function .
true if the transaction can buy tokens .
true if crowdsale event have end .
transfer bounty tokens for a specified address .
allows the owner to take out wrongly sent tokens to this contract by mistake .
'tokenfallback ' function in accordance to the erc223 standard .
return the price buyer will pay for next 1 individual key .
function to mint tokens .
function to distribute tokens to the list of address by the provide uniform amount .
function to distribute tokens to the list of address by the provide various amount .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"substracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
the inflation rate begin at 100 and decrease by 15 every year until it reach 10 at 10 the rate begin to decrease by 0 . 5 .
stake function which allow users to stake an amount of tokens to gain interest for up to 30 days .
prevent contract from interact with lastunicorn .
logic run whenever a buy order be execute .
this be the core logic for any buy / reload that happen while a round be live .
end the round .
withdraws all of your earn .
verifies the user be whitelisted .
adds a list of address to the whitelist .
verifies the reward index be valid .
verifies the reward percentage be valid .
"edits the content of the percentage array , with the specified parameters ."
calculates the reward base on the reward percentage index .
verifies the user have enough tokens to cover the payment .
verifies the amount be 0 .
process a payment that prioritize the use of regular tokens .
process a payment that prioritize the use of reward tokens .
process a trvl tokens payment with a combination of regular and reward tokens .
process a payment use only regular trvl tokens with a specify reward percentage .
process a payment use only reward trvl tokens .
"convert a specific amount of regular trvl tokens from the owner , into reward tokens for a user ."
verifies the msg . sender .
adds a list of address to the admins list .
removes a list of address from the admins list .
access modifier for coo-only functionality .
required for erc-721 compliance .
this function withdraw the contract owner 's cut .
this function allow the contract owner to adjust the sell price of a protected crypton .
this function allow the contract owner to buy protection for an unprotected that they already own .
this function allow the contract owner to adjust the markup value .
allows someone to send ether and obtain the token .
allow pre-approved user to take ownership of a token .
this method must never be call by smart contract code .
required for erc-721 compliance .
required for erc-721 compliance .
required for erc-721 compliance .
for check approval of transfer for address _to .
for create crypton .
check for token ownership .
for pay out balance on contract .
assigns ownership of a specific crypton to an address .
various getter / setter methods .
called by any c-level role to pause the contract .
this be public rather than external so it can be call by derived contract .
grant another address the right to transfer token via takeownership ( ) and transferfrom ( ) .
"creates a new crypton with the give name , startingprice , category and an ( optional ) owner wallet address ."
returns all the relevant information about a specific crypton .
which mean the following function name have to match the contract name declare above .
updates whitelistadmin address .
blacklist the give address to ban them from contribute .
transition the state machine into the state it should currently be in .
allow a function in the give state .
goes to the next state if possible ( if the next state be valid ) .
add a function return a boolean a a start condition for a state .
add a callback function for a state .
sets the start timestamp for a state a a startcondition .
setup the disbursements and the number of tokens for sale .
to change the ethpricefeed contract if need .
called by users to contribute eth to the sale .
called to allocate the tokens depend on amount contribute by the end of the sale .
called to enable refund by the owner .
only the sale and disbursementhandler can disburse the initial tokens to their future owners .
called internally by the sale to setup a disbursement ( it have to be call in the constructor of child sales ) param _beneficiary tokens will be disburse to this address .
returns true if the cap be reach .
callback that get call when enter the sale_ended state .
a function to return the minimum of 3 value .
logic run whenever a buy order be execute .
this be the core logic for any buy / reload that happen while a round be live .
withdraws all of your earn .
end the round .
set boundaries for incoming tx .
"distribute eth base on fee to com , aff , and p3d ."
this be the core logic for any buy / reload that happen while a round be live .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
end the round .
assemble the give address bytecode .
function that be call when transaction target be an address .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
return player info base on address .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
during ico phase all eth send in by each player .
this be the core logic for any buy / reload that happen while a round be live .
"average ico phase key price be total eth put in , during ico phase , divide by the number of key that be buy with that eth ."
"at end of ico phase , each player be entitle to x key base on final average ico phase key price , and the amount of eth they put in during ico ."
end the round .
set boundaries for incoming tx .
"distribute eth base on fee to com , aff , and p3d ."
calculate how many key would exist with give an amount of eth .
calculate how much eth would be in contract give a number of key .
withdraws all of your earn .
return the price buyer will pay for next 1 individual key .
return time leave .
return player earn per vault - functionhash - 0x63066434 .
return player earn per vault - functionhash - 0x63066434 .
return all current round info need for front end - functionhash - 0x747dff42 .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
return the amount of key you would get give an amount of eth .
return current eth price for x key .
get exist or register new pid .
end the round .
update round timer base on number of whole key buy .
"distribute eth base on fee to com , aff , and p3d ."
withdraws all of your earn .
use these to register name .
return the price buyer will pay for next 1 individual key .
transfer token for a specified address .
function to mint tokens .
allow transfer tokens or not .
transfer tokens for a specified address in ico mode .
start crowd-sale .
finalize ico .
finalize crowd-sale .
recalculate phase .
update phase end time .
freeze the account .
unfreeze the account .
sets start and end date for pre-sale phase_i .
sets start date for ico phase .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
modifier to make a function callable only when the contract be not pause .
"call by the owner to pause , trigger stop state ."
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
get result from prng .
prevent contract from interact .
set boundaries for incoming tx .
only owner .
withdraws earn by rndno .
award by rndno .
"fee withdraw to owner , everyone can do it ."
change owner .
return all current round info need for front end 0x747dff42 .
return the price buyer will pay for next 1 individual key during first stage .
this be the core logic for any buy / reload that happen while a round be live .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
determine player 's affid .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
use these to register name .
this be the core logic for any buy / reload that happen while a round be live .
receive name / player info from name contract .
receive entire player name list .
get exist or register new pid .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
"upon contract deploy , it will be deactivate ."
btc owner withdraw money and add secret key to swap .
eth owner receive secret .
eth owner refund money .
only for testnet .
"declare the token sale be complete , reference the balance , and make the necessary transfer ."
move eth to ethertote development wallet .
move eth to tote liquidator wallet .
this method can be use by admin to extract eth accidentally send to this smart contract after all previous transfer have be make to the correct address .
team withdrawal after specified time .
team withdrawal after specified time .
team withdrawal after specified time .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
prevent contract from interact with fomo3testd .
destroy tokens .
destroy tokens from other account .
function to mint tokens .
total amount of tokens .
total amount of tokens .
total amount of tokens .
get the contract constant _name .
get the contract constant _symbol .
get the contract constant _decimals .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
assemble the give address bytecode .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
return the buy price of 1 individual token .
liquifies tokens to ethereum .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and rp1 ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
transfer some fund to the target purchase address .
"distribute eth base on fee to com , aff , and rp1 ."
gets the balance of the specified address .
withdraw the amount of token that be remain in this contract .
get the remain amount of token user can receive .
do the airdrop to msg . sender .
eth owner create swap with secrethash .
btc owner withdraw money and add secret key to swap .
eth owner refund money .
testnet only .
"returns the memory address of the first byte of the first occurrence of needle in self , or the first byte after self if not find ."
"splits the slice , set self to everything after the first occurrence of needle , and token to everything before it ."
"splits the slice , set self to everything after the first occurrence of needle , and return everything before it ."
counts the number of nonoverlapping occurrences of needle in self .
buy artworks when likecoin transfer callback .
replaces the artwork with the give id with the last artwork in the array .
get the old artwork .
set the old artwork when steal .
sell the artwork of the give id .
manually trigger the steal ( by oraclize ) .
modifier throw if call by any account other than the pendingowner .
manually trigger the steal ( by our script ) .
manually trigger the steal ( by our script with specific gas ) .
the frequency of the thief steal depend on the number of artworks in the game .
send a query to oraclize in order to get random number in 'inseconds ' second .
convert a random number to index of artworks list .
"remove artwork by random number ( a string , number list ) ."
oraclize call back .
change next steal time .
distribute the give amount among the survive artworks .
allows the current owner to set the pendingowner address .
map a give number to the new range ( old range 100000 ) .
convert a string of number be separate by a give delimiter into an array of number ( howmany ) .
likecoin transfer callback .
allows the pendingowner address to finalize the transfer .
initialize the contract parameters .
allow the owner to collect the accumulated fee send the give amount to the owner 's address if the amount do not exceed the fee ( can not touch the players ' balance ) .
returns a slice contain the entire string .
copies a slice to a new string .
add one account to the vest map .
del one account to the vest map .
transfers vest tokens to beneficiary .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
batch transfer token for a list of specified address .
get the token total supply .
transfer token for a specified address .
send _value amount of tokens from address _from to address _to .
function to check the amount of tokens than an owner allow to a spender .
overridden price lifetime logic .
perform only allow state transition .
record an investment .
"owners : send value of ether to address to , can be call if crowdsale succeed ."
"owners : send value of tokens to address to , can be call if crowdsale fail and some of the investors refund the ether ."
"withdraw accumulate balance , call by payee in case crowdsale fail ."
trigger some state change base on current time .
automatic check for unaccounted withdrawals .
set address for ether and token storage perform once by deployer .
ico participation .
register investments come in different currencies .
common buy for ether and non-ether .
get token price in cents depend on the current date .
start time of the ico .
finish time of the ico .
pause ico .
resume pause ico .
withdraw tokens if ico fail .
in case we need to attach to existent fund .
set non ether investment controller .
send everything to the new ( fix ) ico smart contract .
withdraw all ether for oraclize payments .
internal function .
perform only allow state transition .
solidity hat stack limit .
return all current round info need for front end - functionhash - 0x747dff42 .
return player info base on address .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
"calculate unmasked earn ( just calculate , do not update mask ) ."
return the amount of key you would get give an amount of eth .
return current eth price for x key .
receive name / player info from name contract .
receive entire player name list .
get exist or register new pid .
check to make sure user pick a valid team .
decide if round end need to be run new round start .
end the round .
update round timer base on number of whole key buy .
generate a random number between 0-99 and check to see if thats result in an airdrop win .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
update mask for round and player when key be buy .
"add up unmasked earn , vault earn , set them all to 0 ."
prepare compression data and fire event for buy or reload tx 's .
calculate number of key receive give x eth .
calculate amount of eth receive if you sell x key .
calculate how many key would exist with give an amount of eth .
calculate how much eth would be in contract give a number of key .
filter name string - convert uppercase to lower case .
"multiplies two number , throw on overflow ."
convert all incoming ethereum to key .
give square root of give x .
give square .
x to the power of y .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
return the price buyer will pay for next 1 individual key .
return time leave .
return player earn per vault - functionhash - 0x63066434 .
dev - use this to add admins .
dev - use this to remove admins .
dev - change the number of required signatures .
dev - change the number of required dev signatures .
change admin only admin can perform this function .
add a new approver only admin can perform this function .
remove an approver only admin can perform this function .
transfer tokens to multiple address .
approves and then call the receive contract .
get the token balance for account tokenowner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
total supply .
transfer tokens from one address to another .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
freeze account or unfreezen .
add investor .
can only withdraw rest of investor 's tokens .
get the current balance of tokens .
claim n buy tokens to the investor a the msg sender .
transfer all ether hold by the contract to the owner .
get the total token supply .
transfer token for a specified address .
add audit information .
"after the withdrawal , policy will transfer back the token to the ex-holder , the policy balance ledger will be update either ."
end the round .
"after the withdrawal , policy will transfer back the token to the ex-holder , the policy balance ledger will be update either ."
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
prevent contract from interact with fomo3d .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
update round timer base on number of whole key buy .
generate a random number between 0-99 and check to see if thats result in an airdrop win .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
audits and rewards .
user actions .
return a list of ids that _auditor have stake in .
return a list of auditors that participate in this audit .
owner relate .
logic run whenever a buy order be execute .
this be the core logic for any buy / reload that happen while a round be live .
calculate how many key would exist with give an amount of eth .
calculate how much eth would be in contract give a number of key .
withdraws all of your earn .
return the price buyer will pay for next 1 individual key .
move eth to team eth time-locked contract .
move eth to tote liquidator wallet .
move eth to ethertote development wallet .
"declare the token sale be complete , and reference the balance ."
team withdrawal after specified time .
team withdrawal after specified time .
team withdrawal after specified time .
team withdrawal after specified time .
only way to give poohmowhale eth be via by use fallback .
return all current round info need for front end - functionhash - 0x747dff42 .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
return player earn per vault - functionhash - 0x63066434 .
"data be upload over many transactions , until the whole file be store in the contract ."
"if a mistake be do during upload , reverse use erase ( ) ."
this load the entire file a a single byte array .
approves and then call the receive contract .
token distribution .
totalsupply uint256 led token total supply .
balance uint256 corresponding token holder balance .
change the led token controller .
low level token purchase function .
total supply uint256 .
balance uint256 .
success bool .
success bool .
success bool .
success bool .
bool success .
clonedtokenaddress address .
low level token purchase function .
low level token purchase function .
low level token purchase function .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
generates _amount tokens that be assign to _owner .
burns _amount tokens from _owner .
enables token holders to transfer their tokens freely if true .
mint a new interfacetoken token .
mint a new interfacetoken token ( with recipient ) .
purchases a new interfacetoken token .
purchases multiple new interfacetoken tokens .
utility function change the cost of the token .
utility function for update a nickname if you own the token .
return own tokens .
check for owned tokens .
check for owned tokens .
return handle of token .
"get token uri fro the give token , useful for test purpose ."
allows management to update the base tokenuri path .
allows management to update the default token uri .
utility function for update an assets token uri .
return blockhash of the token .
return token id of a blockhash .
return blockhash of the token .
interface declaration .
add a presale participate allocation .
lock the vault - all balance have be load in correctly - tokens be transfer on this vault correctly - checks be in place to prevent create a vault that be lock with incorrect token balance .
"in the case lock fail , then allow the owner to reclaim the tokens on the contract ."
get the current balance of tokens in the vault .
check how many tokens investor can claim .
claim n buy tokens to the investor a the msg sender .
this function be prototyped in recoverable contract .
resolve the contract umambigious state .
"this will be invoke by the owner , when owner want to rescue tokens ."
"interface function , can be overwrite by the superclass ."
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
"copies 'len ' bytes from 'bts ' into a new array , start at the provided 'startindex ' ."
reads a bytes32 value from a byte array by copy 32 bytes from bts start at the provided startindex .
generates token allocations for multiple recipients .
returns a memory pointer to the data portion of the provided bytes array .
"copy 'len ' bytes from memory address 'src ' , to address 'dest ' ."
"creates a 'bytes memory ' variable from the memory address 'addr ' , with the length 'len ' ."
logic run whenever a buy order be execute .
end the round .
this be the core logic for any buy / reload that happen while a round be live .
prevent contract from interact with ratscam .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
transfer tokens from one address to another .
transfer balance to owner .
grant another address the right to transfer a specific monster via transferfrom ( ) .
"transfer a monster own by another address , for which the call address have previously be grant transfer approval by the owner ."
it stats be completely dependent on the spawn alghorithm .
"try to beat every other player in the top10 with your strong monster ! effectively loop through all top10 players , beat them one by one and if strong enough place your in the top10 as well ."
this serve a a lookup for new monsters to be generate since all monsters of the same id share the base stats .
generate randomize ivs for a new monster .
gen0 monsters profit from shiny boost while shiny gen0s have potentially even high ivs ! far increase the rarity by also double the shiny chance ! .
only callable by gamecontract after the full game be launch since all additional monsters after the promo / gen0 ones need to use this corecontract contract a well we have to prepare this core for our future update where players can freely roam the world and hunt chainmonsters thus generate more .
use to add playable content to the game monsters will only spawn in certain areas so some be lock on release due to the game be in active development on launch each monster have a maximum number of 3 areas where it can appear .
to be change to retrieve current stats ! .
this method only return the base powerlevel of a monster which will be use in more advanced fight calculations later on .
add new area to world .
set the address of the sibling contract that track metadata .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
throws if call by any account other than the owner .
function to check the amount of tokens that an owner allow to a spender .
function to mint tokens .
add a record to the end of the list .
allows anyone to transfer the strike tokens once trade have start .
allows anyone to transfer the strike tokens once trade have start .
function to mint tokens .
check if valid purchase .
true if crowdsale event have end .
low level token purchase function .
finish mine coin and transfer ownership of change coin to owner .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
token creator - this function be call by the factory contract and create new tokens for the user .
returns the length of the balance array for a swap .
returns the address associate with a particular index in a particular swap .
returns the balance associate with a particular index in a particular swap .
returns the index associate with the _owner address in a particular swap .
returns the allowed amount _spender can spend of _owner 's balance .
"called by the factory contract , and pay out to a _party ."
returns the users total balance ( sum of tokens in all swap the user have tokens in ) .
getter for the total_supply of tokens in the contract .
checks whether an address be in a specified swap .
"removes the address from the swap balance for a swap , and move the last address in the swap into their place ."
this be the main function to update the mappings when a transfer happen .
erc20 compliant transfer function return true for successful .
erc20 compliant transferfrom function return true for successful .
erc20 compliant approve function return true for successful .
this function calculate the payout of the swap .
the _swapadd be the address of the deploy contract create from the factory contract .
allows the owner to set a new oracle address .
allows the owner to set a new owner address .
allows the owner to pull contract creation fee .
_oracle_adress : the address of the oracle .
pays out to a drct token .
returns the number of contract create by this factory .
updates the fee amount .
sets the deployer address .
sets the token_deployer address .
sets the user_contract address .
returns the base token address .
"sets token ratio , swap duration , and multiplier variables for a swap ."
sets the address of the tokens use for the swap .
"allows a user to deploy a new swap contract , if they pay the fee return the newly create swap address and call event 'contractcreation ' ."
create : the address of the create drct token .
create the token to be sell .
low level token purchase function .
modifier to allow action only when the contract is not pause .
check last token on sale .
burn tokens which be not sell on previous stage .
update token rate manually .
burn tokens which be not sell on previous stage .
allows anyone to transfer the reporter tokens once trade have start .
allows anyone to transfer the reporter tokens once trade have start .
calculates the amount of bonus coin the buyer get .
set a newrate if have a big different in ether / dollar rate .
low level token purchase function .
make an exchanegment .
looks up the current token price .
checks if the goal or time limit have be reach and end the campaign .
get the total token supply .
send some of your tokens to a give address .
a contract or person attempt to get the tokens of somebody else .
called when ico be close .
transfer token for a specified address .
set the address of the minter .
function to mint tokens .
account for paused / unpaused-state .
a function to withdraw all fund .
sets the start and end of the sale .
"sets exhange rate , ie amount of tokens ( 10 18 cryder ) for 1 wei ."
buy tokens for all send ether .
one time command to allocate 5kk bounty tokens .
burn tokens from the specified address .
returns token 's name .
returns token 's symbol .
returns number of decimals .
function to mint tokens .
create the token to be sell .
low level token purchase function .
number of tokens which should be create .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
true if crowdsale event have end .
"must be call after crowdsale end , to do some extra finalization work ."
allows the current owner to set the new start time if crowdsale be not finalize .
allows the current owner to set the new end time if crowdsale be not finalize .
allows the current owner to change the hard cap if crowdsale be not finalize .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
change : store the time when it be first unpaused .
changes : - add whennotpaused modifier - add validation that teamwallet balance must not fall below amount of locked tokens .
changes : - add whennotpaused modifier - add validation that teamwallet balance must not fall below amount of locked tokens .
100m tokens in teamwallet be lock for 6 months 200m tokens in teamwallet be lock for 12 months .
copy of burnabletoken burn .
"changes : - pass number of tokens to be create and beneficiary for purchase validation - after presale have end , record number of extra tokens mint during presale ."
changes : - added restriction to sell only to whitelisted address - added minimum purchase amount of 0 . 1 eth - added presale restriction : max contribution of 20 eth per address - added presale restriction : max total supply of 62 . 5m .
changes : - added token cap logic base on token supply .
set a new cs representative .
true if the transaction can buy tokens .
true if crowdsale event have start .
current timestamp .
true if investors can buy at the moment .
function to cast the capped ( mintable ) token provide with the constructor to a blockporttoken that be mintabletoken .
low level token purchase function .
true if investors can buy at the moment .
function overidden function will finanalise the crowdsale .
function set the token conversion rate in this contract .
function set start and end date / time for this crowdsale .
function set the token owner to contract owner .
gets the balance of the specified address .
transfer token for a specified address .
function to check the amount of tokens that an owner allow to a spender .
finalize a succcesful crowdsale .
transfer token for a specified address .
transfer tokens from one address to another .
gets the balance of the specified address .
function to check the amount of tokens that an owner allow to a spender .
function to keep track of the total token allocation .
function to change founder multisig wallet address .
approves and then call the receive contract .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
getbonusamount - calculate any bonus due .
this function be not const because it write hasparticipated .
safe math .
check if valid purchase .
true if crowdsale event have end .
low level token purchase function .
erc223 access function .
only root function .
only owner function .
public getters .
public function ( from https : / / github . com / dexaran / erc223-token - standard / tree / recommended ) .
function that be call when a user or another contract want to transfer fund to an address with tokenfallback function .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
transfer _value token for a specified address .
transfer _value tokens from one address ( _from ) to another ( _to ) .
burns a specific ( _value ) amount of tokens .
destroy tokens from other account .
set allowance for other address and notify .
freezes account and disable transfer / burn .
owner withdrawal of an ether deposit from token ether balance .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
internal function to determine if an address be a contract .
function to send _value tokens to user ( _to ) from sale contract / owner .
batch transfer of tokens to address from owner 's balance .
reclaim all erc20basic compatible tokens .
allow owner to register token purchase do via fiat-eth ( or equivalent currency ) .
add address to whitelist .
add address to whitelist .
remove address from whitelist .
send tokens tokens to a buyer : and kyc be approve .
refund ethers to buyer if kyc could n't / be n't verify .
modifiers to be use all over the place .
transfer some fund to the target investment address .
convenience function to transfer all available balance .
refund an investor when he send a withdrawal transaction .
update the global minimum contribution .
resume the presale ( enables contributions and token claim ) .
allow contributors to call the refund function to get their contributions return to their whitelisted address .
disallow refund ( this be the case by default ) .
add a contributor to the whitelist .
updates a contributor 's rate and / or max .
remove the contributor from the whitelist .
returns a contributor 's balance .
"when refund be enable , contributors can call this function get their contribute ether back ."
finalize the presale by specify the xnk token 's contract address .
process the contribution .
process the token claim .
the presale be consider finalized when the token address be set .
the presale be consider not finalize when the token address be not set .
returns the amount of ether contribute by all contributors .
returns the amount of xnk purchase by all contribute .
update the global ether cap .
update the global max contribution .
transfer token from an address to another specify address use allowance .
mint token to an specify address .
burn token of an specified address .
set ico status .
set each phase of your ico here .
get current ico phase .
override this method to have a way to add business logic to your crowdsale when buy .
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
transfer token to a specified address .
determine the bonus with respect to time elapse .
low level token purchase function .
transfer tokens and redeem .
from 12 / 12 / 2017 to 31 / 01 / 2018 from 31 / 01 / 2018 to 01 / 03 / 2018 before and after . . . . .
transfer the balance from the sender 's address to the address _to .
withdraws to address _to form the address _from up to the amount _value .
allows _spender to withdraw the _allowance amount form sender .
checks how much _spender can withdraw from _owner .
"internal transfer , only can be call by this contract ."
"buy tokens from contract by send ether , with data 0xa6f2ae3a ."
sell amount tokens to contract .
allow contract to transfer ether directly .
generic transfer function can interact with contract by supply data / function call .
allow contract to transfer tokens directly .
"send _value ( in wei , with 18 zero ) tokens to _to from msg . sender 's ."
transfer tokens from another address .
set allowance for other address .
"set allowance for other address , then notify allow _spender to spend no more than _value ( in wei , with 18 zero ) tokens on msg . sender ."
destroy tokens .
destroy tokens in another account .
"internal transfer , only can be call by this contract value in wei , with 18 zero ."
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
make investor balance 0 .
"acceptpayment accept payment from paymentacceptor , forward it to merchant 's wallet and collect monetha fee ."
allows other monetha account or contract to set new monetha address .
assigns the acceptor to the order ( when client initiate order ) .
processpayment transfer fund to monethagateway and complete the order .
allows owner to set new monetha address .
"0 : match hash 1 : amount 2 : 5-byte expiry , 5-byte nonce , 1-byte price , 1-byte direction , 20-byte address ."
private utilities .
math utilities .
withdraw the fund .
public function .
low level token purchase function .
issue and buy more tokens .
"true if tokens be sell successfully , false otherwise ."
token name .
token symbol .
token decimals .
"true if tokens be send successfully , false otherwise ."
"true if tokens be send successfully , false otherwise ."
"true if transfer be approve successfully , false otherwise ."
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
approve should be call when allow _spender 0 .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
"this function be use to transfer tokens that have be buy through other mean ( credit card , bitcoin , etc ) , and to burn tokens after the sale ."
compute the amount of mtc token that can be purchase .
add a new tier at the end of the list .
issue new tokens .
get the balance for a particular token holder .
( done a part of migration ) claims ownership of token contract .
while pause .
set the base purchase rate for the token .
"subtracts supply from tiers start at a minimum , use up fund ."
specify purchase limit for a single account : the limit of tokens that a participant may purchase in a set amount of time ( block ) .
add a tier with a give discount and available supply .
authorize a group of participants for a tier .
withdraw balance from presale .
purchases tokens start in authorized minimum tier .
number of tokens and duration in block .
"array of tuples ( discount , available ) ."
start at minimum tier for participant ( require auth ) .
require participant be whitelist-authorized .
baserate will default to 0 .
to prevent accidentally cap at 0 .
cost in wei for that many tokens .
reset the purchaser 's cap if the window duration have be meet .
amount of tokens leave for participant with cap .
redeem function ( exchange tokens back to eth ) .
expires contract if any expiration criteria be meet ( declare a public function to allow direct manual call ) .
withdraw function ( eth ) .
withdraw function ( tokens ) .
withdraw function ( for miscellaneous tokens ) .
function to be use in wallet to check whether a transfer transaction will be make by user or by zero fee transaction facility provide by owner .
sets approve amount of tokens for spender .
failsafe drain .
in case the ownership need to be transfer .
below function will convert string to integer remove decimal .
this function can be use by owner in emergency to update any parameter .
investors can allow owner to make transfer transactins on their behalf to enjoy zero transaction fee .
investors can disallow owner to make transfer transactins on their behalf and now they will have to pay fee for the transactions they make .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
burns a specific amount of tokens .
freeze system ' balance .
get frozen balance .
unfreeze frozen amount everyone can call this function to unfreeze balance .
"check be release record exist if existed return true , else return false ."
function to keep track of the total token allocation .
function to change founder multisig wallet address .
function to change the founder multisig address .
buy token function .
function to send token to user address .
function to check the existence of investor .
function to calculate the percentage of token share to the exist investors .
function to send the calculated tokens amount to the investor .
function to transfer the fund to founder account .
"attach the token contract , can only be do once ."
request outstanding token balance from the target crowdsale .
transfer token balance to beneficiary .
request outstanding ether balance from the target crowdsale .
transfer ether balance to beneficiary .
the address of the deposit address .
the address of the deposit address .
the address of the deposit address .
the accepted ether amount .
restrict call access to when the beneficiary address be know .
restrict call access to when the beneficiary address be unknown .
set the beneficiary account .
invest receive ether in target crowdsale .
request a refund from the target crowdsale .
whether _account be have an entry in the whitelist .
add _account to the whitelist .
remove _account from the whitelist .
whether _account be successfully authenticate .
"returns the memory address of the first byte of the first occurrence of needle in self , or the first byte after self if not find ."
emergency function to call only when the turn miss oraclized_query becaused of gas management failure and no chance to resume by itself .
erc-20 compatibility .
erc-721 token ownership .
public functionality .
admin functionality .
internal functionality .
approves and then call the receive contract .
erc20 members .
erc20 members .
"this function allow to mint coin up to totalsupply , so if coin be burnt it add room for mint since natural loss of coin be expect the overall amount in use will be less than totalsupply ."
1 write .
2 write .
22 write ( full competition ) .
1 write .
1 write .
6 write .
2 write .
1 write .
9-11 write .
3 write + 1-12 write 4-15 write .
3 write .
0-1 write .
work controller function .
transfer controller function .
token controller function .
erc20 interface .
extended to transfer half of the unused fund to the team 's multisig and release the token .
selfdestruct contract .
approves and then call the receive contract .
inserts a new node between _prev and _next .
checks if user have already reveal for specified poll .
"checks if a poll exist , throw if the provided poll be in an impossible state ."
gets the bytes32 commithash property of target poll .
loads _numtokens erc20 tokens into the vote contract for one-to - one vote right .
gets the prevnode a new node should be insert after give the sort factor .
propose a reparamaterization of the key _name 's value to _value .
"challenge the provide proposal id , and put tokens at stake to do so ."
"for the provide proposal id , set it , resolve it challenge , or delete it depend on whether it can be set , have a challenge which can be resolve , or if it process by date have pass ."
claim the tokens owe for the msg . sender .
"withdraw _numtokens erc20 tokens from the vote contract , revoke these vote right ."
resolve a challenge for the provided _propid .
allows a user to start an application .
allows the owner of a listinghash to increase their unstaked deposit .
allows the owner of a listinghash to decrease their unstaked deposit .
allows the owner of a listinghash to remove the listinghash from the whitelist .
starts a poll for a listinghash which be either in the apply stage or already in the whitelist .
unlocks tokens lock in unrevealed vote where poll have end .
updates a listinghash 's status from 'application ' to 'listing ' or resolve a challenge if one exist .
called by a voter to claim their reward for each complete vote .
determines whether the give listinghash be whitelisted .
returns true if the application / listinghash have an unresolved challenge .
determines whether vote have conclude in a challenge for a give listinghash .
commits vote use hash of choice and secret salt to conceal vote until reveal .
determines the winner in a challenge .
called by updatestatus ( ) if the applicationexpiry date pass without a challenge be make .
deletes a listinghash from the whitelist and transfer tokens back to owner .
compares previous and next poll 's committed tokens for sort purpose .
reveals vote with choice and secret salt use in generate commithash to attribute committed tokens .
correctvotes number of tokens vote for win option .
initiates a poll with canonical configure parameters at pollid emit by pollcreated event .
make an investment .
allocate tokens for the early investors .
track who be the customer make the payment so we can send thank you email .
allow anonymous contributions to this crowdsale .
modifier to check if change to vest be freeze .
modifier to check if change to vest be not freeze yet .
function to set default vest schedule parameters .
function to set vest with default schedule .
function to set / update vest schedule .
"release tokens a per vest schedule , call by contributor ."
"release tokens a per vest schedule , call by anyone ."
"usdperkether 1 , 000 , 000 capeth usd 10 , 000 , 000 / 1 , 000 10 , 000 presaleeth 4 , 561 . 764705882353 ."
transfers tokens hold by the timelock to the specify address .
transfers tokens hold by the timelock to the specify address .
transfer tokens to a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
low level token purchase function .
owner can transfer tokens .
set new date for pre-salev ( emergency case ) .
set new date for main-sale ( emergency case ) .
set new wallets ( emergency case ) .
set new rate ( emergency case ) .
set new softcap ( emergency case ) .
set token on pause .
unset token 's pause .
set token ownership .
true if main sale event have end .
true if pre sale event have end .
we want to be able to check all bonuses in already deploy contract that 's why we pass currenttime a a parameter instead of use now .
"if crowdsale be unsuccessful , investors can claim refund here ."
finish crowdsale .
burn tokens .
"add a number to another number , check for overflow ."
"subtract a number from another number , check for underflows ."
buy tokens from contract by send ether .
sell amount tokens to contract .
unfreeze not more than _value tokens .
send coin .
transfer tokens from other address .
set allowance for other address .
constructor that give msg . sender .
calculate the winnings owe for a user 's bet on a particular square .
call by the winners to collect winnings for a box .
finalize the score after it 's be report .
"only once , the voter stake can be set by the owner , to allow u to deploy a circular dependency ."
start the acceptance period .
anyone can call this if the score be finalize and not accept .
call when the vote period end with a minority .
vote to affirm or unaffirm the score call by a user that have some stake .
send coin .
a contract attempt to get the coin .
allow another contract to spend some tokens in your behalf .
accepts ether and create new kdt tokens .
update crowdsale parameter .
ends the fund period and send the eth home .
initialize should be call by the owner a part of the deployment + setup phase .
returns the number of tokens that the user have purchase .
allows the owner to take back the tokens that be assign to the sale contract .
allows the admin to determine what be the current stage for the sale .
allows the admin to set a bonus amount to apply for a specific stage .
allows the owner or ops to add / remove people from the whitelist .
"allows the owner or ops to add / remove people from the whitelist , in batch ."
this be an extension to the buytoken function in flexibletokensale which also take care of check contributors against the whitelist .
returns the number of tokens that the user have purchase .
owner configuation .
allows the owner to set an optional limit on the amount of tokens that can be purchase by a contributor .
allows the owner to specify the conversion rate for eth - tokens .
allows the owner to set a bonus to apply to all purchase .
allows the owner to set a sale window which will allow the sale ( aka buytokens ) to receive contributions between _starttime and _endtime .
allows the owner to suspend the sale until it be manually resume at a late time .
allows the owner to resume the sale .
allows the caller to purchase tokens for a specific beneficiary ( proxy purchase ) .
a contract attempt to get the coin .
set initial message .
"in the event ether be accidentally send to our contract , we can retrieve it ."
low level token purchase function .
add transaction against entity .
add accout chart against entity .
notify owners about their balance be in promo action .
withdraw tokens from the contract .
withdraw tokens from the contract .
withdraw tokens a bounty .
get bounty for the people .
be bounty address .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
create new ppc tokens .
people can access contract and choose buytoken function to get token .
it be a internal function call by create function to get the amount accord to the blocknumber .
it will assign token to a particular address by owner only .
it will change the end date of ico and access by owner only .
it will let owner withdraw ether at any time during the ico .
automate the eth drain .
it will let owner stop the crowdsale and mint function to work .
let the owner close the contract if there be no player fund on it or if nobody have be use it for at least 30 days .
"if the user want / need to withdraw his fund himself , he need to request the withdrawal first ."
in case the user request a withdrawal and change his mind .
withdraw an amount from the user balance if the wait time pass since the request .
let the owner withdraw from the bankroll .
return the current bankroll in tokens with 0 decimals .
update the maximum deposit .
set the time the player have to wait for his fund to be unlocked before withdrawal ( if not withdraw with help of the casino server ) .
let the owner close the contract if there be no player fund on it or if nobody have be use it for at least 30 days .
transfer an amount from the contract balance to the owner 's wallet .
authorize a address to call game function .
deauthorize a address to call game function .
close a state channel .
compute the difference of the win balance relative to the last known state and add it to the player 's balance .
"log some seed and game result for players wish to have their game history log by the contract clientseeds array contain the client seed result array contain the result v , r , s the signature of the non-sending party ( to make sure the corrcet result be log ) ."
determine if the msg . sender .
set the amount of gas consume by methods with the give sigantures .
add the gas cost of the tx to the give value .
subtract the gas cost of the tx from the give value .
update the price per 1000 gas in edg .
return the gas cost of the call function .
accept deposit for an arbitrary address .
transfer _amount from msg . sender . address ( ) .
transfer _amount from _from to _to .
approve spender _spender to transfer _amount from msg . sender . address ( ) .
approve spender _spender to transfer _amount from msg . sender . address ( ) .
'returns the fee for a transfer from from to to on an amount amount .
send to multiple address use a byte32 array which include the address and the amount .
send to multiple address use two array which include the address and the amount .
send erc20 tokens to multiple contract use a byte32 array which include the address and the amount .
send erc20 tokens to multiple contract use two array which include the address and the amount .
_safetransfer be use internally when transfer fund safely .
_safecall be use internally when call a contract safely .
_safeerc20transfer be use internally when transfer a quantity of erc20 tokens .
checks to see if _token be in the blacklist of tokens .
returns total supply of issue tokens .
transfers tokens from your address to other .
a contract attempt to get the coin .
issue new tokens .
team manually mint tokens in case of btc / wire-transfer contributions .
allows team to adjust baseprice so price of the token have correct correlation to dollar .
"can only be call either after crowdsale time period end , or after tokens have sell out ."
only croupier .
croupier use this method to set deposited credit of a player for sale .
croupier use this method stop sell user 's tokens and return them to normal deposit .
the jackpot contract invoke this method when sell tokens from croupier .
internal transfer function .
internal function for burn tokens .
only token .
only croupier .
function to set address of token contract once after creation .
only jackpot .
croupier will call this function when the jackpot be win .
view function to check whether the game should be terminate .
"check whether the game should be terminate , and if it should , terminate it ."
view function to check whether the game should be start .
"check whether the game should be start , and if it should , start it ."
bet 1 token in the game .
allows house to terminate ico a an emergency measure .
"in case the ico be emergency-terminated by house , allow investors to pull back the investments ."
"in case the ico be terminate , allow house to kill the contract in 2 months after the termination date ."
get current bid timer duration .
updates the current ico price accord to the rule .
updates the current bid price accord to the rule .
calculates how many tokens a user should get with a give ether bid .
calculates how many tokens a user should get with a give ico transfer .
flush the currently pending ether to croupier .
"count the bid towards minor prize fund , check if the user win a minor prize , and if they do , transfer the prize to them ."
function to set address of jackpot contract once after creation .
croupier invoke this method to return deposit to players .
send _value tokens to _to .
the remain amount of tokens that can be mint .
mint token .
schedule contract activation for give block range .
check whether activation be schedule .
check whether contract be currently active .
register contribution with give id .
calculate amount of onl tokens receive for give eth value .
send coin .
a contract attempt to get the coin .
transfer token for a specified address .
calculate the number of tokens base on the current stage .
buy tokens when the contract be not pause .
allocate tokens to an address .
set the date tokens can be transfer .
set the minimum buy amount in wei .
allows the current owner to transfer control of the contract to a newowner .
forward fund to owner address .
gets the balance of the specified address .
function to mint tokens .
get bonus percent by time .
get bonus by eth .
usage : web3 change token from eth .
pay affiliate to address .
pay bonus to address .
send tokens amount of tokens from address from to address to .
allow anonymous contributions to this crowdsale .
track who be the customer make the payment so we can send thank you email .
allow anonymous contributions to this crowdsale .
set policy do we need to have server-side customer ids for the investments .
set policy if all investors must be clear on the server side first .
set policy do we need to work only with whitelisted account .
add kyc'ed address to the whitelist .
can we run finalize properly .
called once by crowdsale finalize ( ) if the sale be success .
tokenamount how mony tokens be buy .
called from invest ( ) to confirm if the curret investment do not break our cap rule .
allow crowdsale owner to change hard cap in pre fund stage .
allow crowdsale owner to change minimum fund goal in pre fund stage .
allow crowdsale owner to change maximal investment per address in pre fund stage .
allow crowdsale owner to change maximal investment time treshold in pre fund stage .
allow crowdsale owner to change start at in pre fund phase .
"function to get the lock tokens back , in case of any issue ."
method to get any locked erc20 tokens .
returns total supply of issue tokens .
issue new tokens .
returns total supply of issue tokens .
issue new tokens .
be sure to get the joy token ownerships .
destroy tokens from other account .
function for transfer tokens from contract to any address .
function confirm autofund .
make discount .
function for change discount if need .
expanding of the functionality .
seles manager .
function for start crowdsale ( any ) .
"internal transfer , only can be call by this contract ."
balance show .
transfer tokens from other address .
destroy tokens .
send coin .
this callable function return the token balance that a contributor can currently claim .
"this function reopen the contract to far deposit , return it to stage one ."
"this function send the pooled eth to the receive address , calculate the of unused eth to be return , and advance the contract to stage three ."
this function open the contract up for token withdrawals .
this function be call to withdraw eth or tokens from the contract .
this function allow the contract owner to force a withdrawal to any contributor .
this internal function handle withdrawals during stage three .
this function can be call during stag one or two to modify the maximum balance of the contract .
"this callable function return the total pool cap , current balance and remain balance to be fill ."
"this callable function return the balance , contribution cap , and remain available balance of any contributor ."
get total number of transactions after filers be apply .
get list of owners .
get array with owner address that confirm the transaction .
get list of transaction ids in defined range .
add a new transaction to the transaction map .
remove an owner .
replace the owner with a new owner .
change the number of required confirmations .
submit and confirm a transaction .
confirm the transaction .
revoke the transaction confirmation .
execute confirm transaction .
check confirmation status of the transaction .
get number of confirmations of the transaction .
function to get ether from contract .
check crowdsale state and calibrate it .
decide if throw or only return ether .
issue tokens and return if there be overflow .
method be need for recover tokens accedentaly send to token address .
withdraweth when minimum cap be reach .
users can claim their contribution if min cap be not raise .
owner can batch return contributors contributions ( eth ) .
if there be any issue / attach with refund owner can withraw eth at the end for manual recovery .
owner can set multisig address for crowdsale .
owner can set token address where mint will happen .
this method will be use by the crowdsale smart contract that own the acjtoken and will distribute the tokens to the contributors .
crowdsale staff only .
change the company wallet .
change the owner of the token .
activate the token .
adjust the token value before the ico .
start therefund period .
"after the refund period , remain tokens be transfer to the company wallet ."
actually buy the tokens require an active sale time and amount above the minimum contribution and sell tokens inferior to tokens for sale .
crowdsale helpers .
checks if the crowdsale be a success .
checks if the crowdsale fail .
bonus calculations .
function to mint tokens .
burns a specific amount of tokens .
"this function be use to transfer tokens that have be buy through other mean ( credit card , bitcoin , etc ) , and to burn tokens after the sale ."
fallback function .
function that validate if the purchase be valid by verify the parameters .
function that return the current round .
function that return the estimate token round by send amount .
function that return the maximum token round by send amount .
function that calculate the tokens which should be give to user by iterate over round .
function that be call either externally or by default payable method .
transfers tokens hold by timelock to beneficiary .
transfer token for a specified address .
call by owner for change blockedtimeforinvestedtokens .
modifier to make a function callable only when the contract be not pause .
modifier to make a function callable only when the contract be pause .
"call by owner , add preicoaccount ."
"call by owner , add addbountyaccount ."
"call by owner , add founderaccount ."
"call by external contract ( immlatoken ) for check right for transfer , depend on who owner of this address ."
call by the owner to mint tokens for pre-ico .
call by the owner to mint tokens for pre-ico .
transfer tokens from one address to another by owner .
modifier to make a function callable only when the mint for pre-ico be not pause .
modifier to make a function callable only when the mint for bounty be not pause .
modifier to make a function callable only when the mint for bounty be not pause .
modifier that allow only congress to vote and create new proposals .
call by the owner to mint tokens to founder .
low level token purchase function .
call by the owner to make additional emission .
call by the owner to stop mint .
call by the owner to stop mint .
call by the owner to mint tokens for pre-ico .
call by the owner to mint tokens for bounty .
call to mint tokens to founder .
call to mint bonus tokens to founder .
call by owner for change blockedtimeforbountytokens .
call by owner for change blockedtimeforinvestedtokens .
create a new proposal .
call by owner for transfer tokens .
call by owner for change blockedtimeforbountytokens .
need to play around with this to figure out some of the specifics .
add money to the contract in case balance go to 0 .
initiate a trade by provide all the right params .
"resolves the trade base on the initial and final amount , depend if put or call be choose , if it a draw the money go back to investor ."
generate the url for the api call for oraclize .
in the case of emergency stop trade and divide balance equally to all investors and allow them to withdraw it .
withdraw your part from the total balance in case of emergency .
setup function to be run only 1 time setup token address setup end block number .
convert eth to token and send new token to the sender .
change transfer status for farmcoin token .
function to release held tokens for developers .
send coin .
a contract attempt to get the coin .
set the ico token contract .
low level token purchase function .
a + b .
"true if token transfer be successfully approve , false otherwise ."
number of tokens give spender be currently allow to transfer from give owner .
name of this token .
symbol of this token .
set new sale manage contract .
vip rank of the owner of give address .
rank vip rank of the owner of give address if any .
"true if tokens be transfer successfully , false otherwise ."
"true on success , false on error ."
"true on success , false on error ."
a - b .
set new state .
set new token sale controller .
set new wallet address for the smart contract .
imports account 's tokens from pre-sale .
accept ethers to buy tokens during the token sale .
a * b .
a / b .
transferring the contract ownership to the new owner .
accept the contract ownership by the new owner .
number of tokens currently belong to the owner of give address .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
burns a specific amount of tokens .
create the token to be sell .
low level token purchase function .
function to mint tokens .
returns the reputation for the provide user .
updates the reputation of the provide user .
"our crowdsale can stop at anytime , and then the totally crowsale contract be disappear ."
override token purchase to send additional token for registered address .
gets the gift ratio of the specified address .
directly mint tokens .
"our crowdsale can stop at anytime , and then the totally crowsale contract be disappear ."
override token purchase to transfer token hold by contract .
gets the ratio of the specified address .
high level token purchase function .
true if burntoken function have end .
true if bountyfunds function have end .
true if rewardsfunds function have end .
true if grantadvisortoken function have end .
true if grantteamtoken function have end .
function transfertoken work to transfer tokens to the specify address on the call of owner within the crowdsale timestamp .
benebittoken contract be generate from here .
called by a crowdsale contract upon creation .
functions inherit from crowdsalelib library .
called by a crowdsale contract upon creation .
function to check if the crowdsale be currently active .
function to check if the crowdsale have end .
function to check if a purchase be valid .
function call by purchasers to pull tokens .
function call by purchasers to pull leftover wei from their purchase .
send ether from the complete crowdsale to the owners wallet address .
function to change the price of the token .
function to set tokens for the sale .
calculate the number of digits in a give number .
gets the price and buy cap for individual address at the give milestone index .
gets the number of tokens sell thus far .
calculate the number of tokens purchase base on the amount of wei spend and the price of tokens .
transfer tokens from caller 's account to another account .
authorized caller transfer tokens from one account to another .
authorize an account to send tokens on caller 's behalf .
authorize third party transfer by increase / decrease allow rather than set it .
called when an address want to submit a bid to the sale .
"change own address of the token contract , specifically for mint ."
"mints additional tokens , new tokens go to owner ."
permanent stop mint .
permanently burn tokens .
called when an address want to submit bid to the sale .
called when an address want to manually withdraw their bid from the sale .
this should be call once the sale be over to commit all bid into the owner 's bucket .
"mints the token be sell by take the percentage of the token supply be sell in this sale along with the valuation , derive all necessary value and then transfer owner tokens to the owner ."
return a boolean indicate if the sale be cancel .
"if the address ' personal cap be below the pointer , refund them all their eth ."
function to mint tokens .
low level token purchase function .
true if the transaction can buy tokens .
true if crowdsale event have end .
true if the send be allow ( not freeze ) .
gets the balance of the specified address .
transfer token for a specified address .
transfer tokens from one address to another .
called by a crowdsale contract upon creation .
register user function .
register multiple users at the same time .
cancels a user 's registration status can only be call by the owner when a user cancel their registration .
unregisters multiple users at the same time .
function that calculate address cap from the number of users register .
utility function for the receivepurchase function .
called when an address want to purchase tokens .
functions inherit from crowdsalelib library .
called by a crowdsale contract upon creation .
called when an address want to purchase tokens .
functions inherit from crowdsalelib library .
throws if call by any account other than the owner .
sell token and send to contributor address .
user balance .
"additional functionality , use to pause crowdsale for 24h ."
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
freeze ? prevent allow target from send receive tokens .
public functionality .
internal functionality .
amount of remain tokens allow to spend .
public methods .
constant function .
internal function .
rollback change to transferinternal for transferfrom .
assemble the give address bytecode .
internal methods .
public methods .
solhint-disable - next-line code-complexity .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
true if investors can buy at the moment .
can be override to add finalization logic .
"if crowdsale be unsuccessful , investors can claim refund here ."
low level token purchase function .
transfer token for a specified address .
transfer tokens from one address to another .
token controller function .
creates the token automatically ( inherit from zeppelin crowdsale ) .
create the token manually to consume less gas per transaction when deploy .
send tokens by the owner directly to an address .
the rate ( how much tokens be give for 1 ether ) be calculate accord to presale / sale period and the amount of ether .
true if the transaction can buy tokens in presale .
send _value tokens to _to address from msg . sender .
send _value tokens to _to address from _from address if allowance allow .
approve _value tokens for _spender address to send from 'msg . sender ' .
mint _value tokens into _to address possession .
burn all tokens assign to '_address ' .
set crowdsalesuccessful to true .
check whether the address be register for token sale or not .
set new admin a admin of kyc contract .
check the address be register .
register the address for token sale .
register the address for token sale .
unregister the registered address .
unregister the registered address .
prevent token holder from transfer .
transfer ownership of other contract whoes owner be this to other address .
transfer ownership of minimetoken whoes controller be this to other address .
only presale register address can participate presale .
paymentfallback ( ) assume that pay btc do n't exceed the max ether cap .
get current rate .
calculate rate wrt _bonus .
checks whether max ether cap be reach for presale .
"after sale finalize , token and other contract ownership be transfer to another contract or account ."
below 4 function be only call in case of emergency and certain situation .
presale should notify that presale be finalize and mainsale be go to start .
approve should be call when allow _spender 0 .
adds participant for the current week .
add all unique participants for receive airdrop .
transfer tokens to current week participants .
transfer airdrop tokens to all registered participants .
set size of current week tokens pool .
low level token purchase function .
remove the pause of exchange .
change the address for the specified role .
"if a little more than a year have elapse ( round2 start date + 400 days ) , a smart contract will allow you to send all the money to the beneficiary , if any money be present ."
"we accept payments other than ethereum ( eth ) and other currencies , for example , bitcoin ( btc ) ."
the function for obtain smart contract fund in eth .
transfer of tokens from one account to another .
transfer of tokens from the trusted address _from to the address _to in the number _value .
redefinition of the method of the return status of the exchange pause .
if the time of freeze expire will return the fund to the owner .
the manager freeze the tokens for the team .
"for market , referral , reserve ."
not all deployment clients support constructor arguments .
return the first character a a byte in a give string address .
restricted access to the current owner .
whether the lock be successful or not .
the balance .
whether the transfer be successful or not .
whether the transfer be successful or not .
whether the approval be successful or not .
amount of remain tokens allow to spend .
"sends an mail to the specific list of recipients with amount of mail tokens to spend on them , hash message , time unti when be message available and tokens ."
success of opeining mail .
restricted access to the issuer and owner .
mail content .
success of issue .
transfer ownership to _newowner .
set up issuer .
whether the unlock be successful or not .
everyone can call this function to invalidate mail if it validation time be already in past .
number od unread message .
unread message a array of message number .
read message a array of message number .
if action be successful .
buy tokens from contract by send ether .
create mintedamount tokens and send it to target .
send tokens by the owner directly to an address .
retrieving the adopters .
low level token purchase function .
send wei to the fund collection wallets .
validate if the transaction can buy tokens .
validate if crowdsale event have end .
animatedproject : getting token from owner by eth .
animatedproject : destroy contract before publiced .
animatedproject : end getting token .
create the token to be sell .
recover fund .
main function .
"our crowdsale can stop at anytime , and then the totally crowsale contract be disappear ."
pixels be represent use 4-bits .
"transfer multiple batch for the same token to multiple address accordingly , from the ownership of the sender contract ."
send tokens by the owner directly to an address .
the rate ( how much tokens be give for 1 ether ) be calculate accord to presale / sale period and the amount of ether .
allow user to withdraw his balance .
accept the membership payment by move eth from the user 's account to the owner 's account .
account balance .
transfer status .
send _value amount of tokens from address _from to address _to these standardize apis for approval : .
get allowance .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
allows the current owner to transfer control of the contract to a newowner .
enables token holders to transfer their tokens freely if true .
true if event have end .
distribute token by batch .
check if all contributor 's token be successfully distribute .
process transaction .
close crowdsale .
check token balance .
withdraw the all fund .
withdraw the fund .
withdraw art .
distribute token .
mint self supply .
set rate .
deal off statue .
create the token to be sell .
low level token purchase function .
calculate token amount to be create .
true if the transaction can buy tokens .
fstk token .
allows the current owner to transfer control of the contract to a newowner .
transfer tokens from one address to another .
owner can transfer out any accidentally send erc20 tokens .
ui functions .
set allowance for other address .
approves then call receive contract .
owner can transfer out any accidentally send erc20 tokens .
constrctor function .
initializes contract with initial supply tokens to the creator of the contract .
be sure to get the joy token ownerships .
function to calculate and return the discount token rate base on the current timeslot .
erc20 short address attack : https : / / vessenes . com / the-erc20 - short-address - attack-explained .
erc20 short address attack : https : / / vessenes . com / the-erc20 - short-address - attack-explained .
an attack vector on approve / transferfrom methods : https : / / github . com / ethereum / eips / issue / 20 issuecomment-263524729 .
erc20 short address attack : https : / / vessenes . com / the-erc20 - short-address - attack-explained .
an attack vector on approve / transferfrom methods : https : / / github . com / ethereum / eips / issue / 20 issuecomment-263524729 .
an attack vector on approve / transferfrom methods : https : / / github . com / ethereum / eips / issue / 20 issuecomment-263524729 .
an attack vector on approve / transferfrom methods : https : / / github . com / ethereum / eips / issue / 20 issuecomment-263524729 .
determine the bonus with respect to time elapse .
low level token purchase function .
pixels be represent use 4-bits .
transfer tokens from one address to another .
transfer token for a specified address .
to get total particpants count .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
allows the current owner to transfer control of the contract to a newowner .
transfer token for a specified address .
only owner will initiate transfer during sale .
burn from .
set courcesale .
set params for sale .
set paramstransfer .
set paramsico .
set paramsico .
set params for totalsupply .
transfer enabled .
transfer from .
withdraw function .
getdeposit function .
create contract .
send coin .
transfer land .
update land .
holder-centric getter function .
internal operations .
supply-altering function .
update related function .
land be assignable by the owner .
performs a delegatecall and return whatever the delegatecall return ( entire context execution will return ! ) .
transfer token for a specified address .
complete mint of the token .
create mintedamount tokens and send it to target .
send coin must have identityapproved + ca n't sell last token use transfer .
approve and then comunicate the approve contract in a single tx .
a contract attempt to get the coin .
gets the balance of the specified address .
multiplication with safety check .
0 . 01 1 and 100 10000 .
in case the ownership need to be transfer .
division with safety check .
subtraction with safety check .
addition with safety check .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
allow address to do early participation .
allow crowdsale owner to close early or extend the crowdsale .
make an investment .
the amount of cap that can still be produce .
the amount of bronze cap produce so far .
the amount of bronze cap scan so far .
beercoin 's name .
beercoin 's symbol .
beercoin 's decimal place .
the current total supply of beercoins .
check the balance of a beercoin user .
transfer beercoins to another user .
transfer beercoins from other address if a respective allowance exist .
allow another user to spend a certain amount of beercoins on your behalf .
the amount of cap that be produce but not yet scan .
the amount of beercoins that can be spend by a user on behalf of another .
restrict to the master only .
the master of the beercoin .
declare a master at another address .
check whether a user allow direct debit by the master .
withdraw beercoins from multiple users .
withdraw beercoins from multiple users .
send beercoins to multiple users .
the amount of all cap produce so far .
send beercoins to multiple users .
"increase the amount of produced diamond , gold , silver , and bronze bottle cap in respect to their occurrence probabilities ."
approve scan of multiple users and grant beercoins .
remove beercoins from the system irreversibly .
the amount of all cap scan so far .
the amount of diamond cap produce so far .
the amount of diamond cap scan so far .
the amount of gold cap produce so far .
the amount of gold cap scan so far .
the amount of silver cap produce so far .
the amount of silver cap scan so far .
sets new beneficiary to receive fund .
locks all fund on account so that it 's possible to withdraw only specific tranche amount .
sends available tranches to beneficiary account .
calculates available amount to withdraw .
returns the size of one tranche .
returns current balance to be distribute to portion .
transfers give amount of currency to the beneficiary .
allow address to do early participation .
true if investors can buy at the moment .
low level token purchase function .
adapted crowdsale hasended .
adapted crowdsale hasended .
low level token purchase function .
allows execution by managers only .
sets new return agent .
sets token that can call returntoken method .
removes token that can call returntoken method .
returns true if investmet be allow .
returns amount of tokens that can be buy with give weiamount .
returns how many tokens leave for sale .
dev returns the sum of a and b .
withdraws tokens hold by the contract and send them to a give address .
returntokenagent override .
returns true if it be possible to invest .
icrowdsaleformula override .
returns current bonus percent 0-100 .
returns how many tokens leave for sale .
returns fund that should be send to beneficiary .
returns crowdsale current state .
allows investor to withdraw overpay .
transfers all collect fund to beneficiary .
dev returns the difference of a and b .
"makes crowdsale fail / ok , for emergency reason ."
sets new beneficiary .
ierc20token implementation .
gets real token amount in the small token units .
internal function .
returns remain token amount .
calculates the quantity of melon asset that 's currently withdrawable .
stops vest and transfer the totalvestedamount minus the withdrawable amount at the current time to the contract creator .
change owner .
kill tokens for gpower .
contract balance .
set params for sale .
set paramstransfer .
set paramspresale .
is ico .
is presale .
transfer ownership .
only owner .
send coin .
transfer from .
transfer onlyowner .
burn owner .
destroy owner .
kill balance .
get balance for owner ( tranfer for sale ) .
function to check the amount of tokens that an owner allow to a spender .
distribute tokens sell during pre-ico .
internal function to sell tokens .
if crowdsale be run .
calculates how many tokens be leave to sale .
calculates how many tokens one should receive at curent time for a specified value of ether .
calculates current time bonus .
calculates a bulk bonus for a specified value of ether .
calculates referrer bonus .
calculates referral bonus .
"closes crowdsale , finish mint ( allow token transfer ) , transfer token ownership to the owner ."
claim collect ether without close crowdsale .
transfer tokens from other address .
withdraw untraded tokens 10k at a time .
withdraw untraded tokens 100k at a time .
withdraw untraded tokens 1m at a time .
withdraw untraded tokens 10m at a time .
withdraw trade tokens 10k at a time .
withdraw trade tokens 100k at a time .
withdraw trade tokens 1m at a time .
withdraw trade tokens 10m at a time .
unsold tokens can be claim by owner after sale end .
ref : github . com / openzeppelin / zeppelin-solidity .
adds the late ether euro rate to the history .
adds the late btc euro rate to the history .
gets the late eth euro rate .
gets the late btc euro rate .
gets the historic eth euro rate .
gets the historic btc euro rate .
cast or change your vote .
create a poll and store the address of the poll in this contract .
it be recommend to define function which can neither read the state of blockchain nor write in it a pure instead of constant .
pauses the contract .
resume the contract .
mitigate short address attack thank to https : / / github . com / numerai / contract / blob / c182465f82e50ced8dacb3977ec374a892f5fa8c / contract / safe . sol l30-l34 .
wait 100 block after final contract state before allow contract destruction .
"returns the current token rate , minimum ether need and maximum tokens leave in currenttranche ."
after ico only owner can call this .
after ico only owner can call this .
after ico only owner can call this .
after ico only owner can call this .
low level token purchase function .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
approve should be call when allow _spender 0 .
calculate the current price for buy in amount .
get uuid of account taht transfer tokens to specify address .
check that address be allow to interact with function .
check that address be register .
register account .
set allowance for address to interact with contract .
function for remove tokens from specify account .
function for transfer tokens from one account to another .
function for withdrawal all tokens from vault account to address .
function for withdrawal tokens from vault account to address .
function for withdrawal tokens from vault to specify address .
modifier that prevent call function from not allow address .
set allowance for address to interact with contract .
function for add tokens to account .
function for transfer tokens from account to specify address .
function for transfer all tokens from account to specify address .
"add tokens to specify address , tokens amount depend of wei amount ."
modifier that prevent call function if account not register .
get current amount of tokens on vault address .
"call by the owner to unpause , return to normal state ."
allows to add a new owner .
allows to remove an owner .
allows to replace an owner with a new owner .
allows to change the number of required confirmations .
allows an owner to submit and confirm a transaction .
allows an owner to confirm a transaction .
allows an owner to revoke a confirmation for a transaction .
allows anyone to execute a confirmed transaction .
returns the confirmation status of a transaction .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
returns number of confirmations of a transaction .
returns total number of transactions after filers be apply .
returns list of admins .
"returns array with owner address , which confirm transaction ."
returns list of transaction ids in defined range .
"call by the owner to pause , trigger stop state ."
gets the balance of the sender address .
limit token transfer until the crowdsale be over .
set the contract that can call release and make the token transferable .
owner can allow a particular address ( a crowdsale contract ) to transfer tokens despite the lock up period .
one way function to release the tokens to the wild .
allows to remove an owner .
allows to replace an owner with a new owner .
allows anyone to execute a confirmed transaction .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
allow call function only if crowdsale on specified status .
check that address can allocate tokens .
allow address to call allocate function .
set pricingstrategy address .
set rntmultisigwallet address .
set rnttokenproxy address .
set rntpresaleehtereumdeposit address .
get current crowdsale status .
start presale and track start time .
start ico and track start time .
finalize ico and track finalize time .
handle invest wei .
handle tokens allocate .
make an investment .
function for claim tokens for presale investors .
transfer issue tokens to the investor .
send amount tokens to to from msg . sender .
send amount tokens to to from msg . sender .
send amount tokens to to from from on the condition it be approve by from .
creates more tokens and send them to the owner 's account .
returns the count of all tokens in existence .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
returns the amount that _spender be allow to withdraw from _owner 's account .
create the token to be sell .
low level token purchase function overridden to allow for calculations base on the ico phase .
function to find out what be the current ico phase bonus .
function to find out what be the current ico phase minimum .
grant tokens to a specified address .
revoke the grant of tokens of a specifed address .
calculate amount of vested tokens at a specifc time .
unlock vest tokens and transfer them to their holder .
public functions .
refund ether back to the investor in return of proportional amount of srn back to the sirin s wallet .
transfer tokens from the vault to the investor while release proportional amount of ether to sirin s wallet .
transfer tokens from the vault to the investor while release proportional amount of ether to sirin s wallet .
investors can claim tokens by call the function .
low level token purchase function .
the crowdsale rate .
throws if call not during the crowdsale time frame .
the rate in srn per 1 eth accord to the time of the tx and the srn price program .
impl finalizablecrowdsale .
"true if the crowdsale be active , hence users can buy tokens ."
adds / updates address and token allocation for token grant .
delete entries from the grant list .
accepts new ownership on behalf of the sirincrowdsale contract .
accepts new ownership on behalf of the sirincrowdsale contract .
buy tokes with guarantee .
mint mintamount token .
set standard daily limit .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
initializes contract with initial supply tokens to the creator of the contract .
"gets the nft object from an address , validate that implementserc721 be true ."
"remove all ether from the contract , which be the owner 's cut as well a any ether send directly to the contract address ."
returns true if the claimant own the token .
creates and begin a new auction .
"bids on an open auction , complete the auction and transfer ownership of the nft if enough ether be supply ."
this be a state-modifying function that can be call while the contract be pause .
cancels an auction when the contract be pause .
returns auction info for an nft on auction .
returns the current price of an auction .
creates and begin a new auction .
updates lastsaleprice if seller be the nft contract .
"escrows the nft , assign ownership to this contract ."
transfers an nft own by this contract to another address .
adds an auction to the list of open auction .
cancels an auction unconditionally .
computes the price and transfer winnings .
removes an auction from the list of open auction .
"sets the crowdsale address , can only be do once ."
function for the crowdsale to transfer tokens .
adds to balance .
removes from balance .
changes main contribution wallet .
low level token purchase function .
mint tokens to beneficiary .
finalise presale .
finalase crowdsale ( mainsale ) .
mint bounty tokens to beneficiary .
addresses with bloom account already be not allow .
addresses without bloom account already be not allow .
create an account instantly .
create an invite use the sign model describe in the contract description .
accept an invite use the sign model describe in the contract description .
check if an invite have not be set on the struct mean it have n't be accept .
check that an invite have n't already be create with this signer .
check that an invite have already be create with this signer .
recover the address associate with the public key that sign the provided signature .
create an account and emit an event .
internal transfer .
burn tokens .
send out contributions imediately .
allow crowdsale owner to close early or extend the crowdsale .
total of amount of wie collect by the contract .
crowdfund state machine management .
modifier allow execution only if receive value be great than zero .
make an investment .
multisig address of multisig wallet contract .
startdate crowdsale open date .
enddate crowdsale close date .
investors total of distinct investors .
investments crowdsale close date .
low level token purchase function .
"if crowdsale be unsuccessful , investors can claim refund here ."
"to trigger payout three out of four administrators call this function , fund will be transfer right after verification of third signer call ."
reset value of pending ( transaction object ) .
checks if give address be an administrator .
three admnistrator can replace key of fourth administrator .
reset value of update ( keyupdate object ) .
modifier allow only if function be call by administrator .
constrctor function .
how may tokens each investor get .
how many tokens remain unclaimed for an investor .
claim all remain tokens for this investor .
claim n buy tokens to the investor a the msg sender .
ico never happen .
set the target crowdsale where we will move presale fund when the crowdsale open .
setting timelock ( delay ) for claim .
"this be use in the first case scenario , this will force the state to refund ."
"this should be use if the crowdsale fail , to receive the refuld money ."
resolve the contract umambigious state .
interface marker .
get the token we be distribute .
participate to a presale .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
the function of buy tokens on crowdsale .
set the crowdsale bonus percent for each purchase .
temporarily suspend token sale .
burn shit by user .
burn shit from users .
"sets the crowdfund address , can only be do once ."
function for the crowdfund to transfer tokens .
releases red team supply after lock period be pass .
releases marketing strategic supply .
finalizes early bird round .
finalizes crowdfund .
changes red team wallet .
changes marketing strategic wallet .
function to unlock 20 red to private angels investors .
function to unlock all remain red to private angels investors ( after 3 months ) .
function to reserve red to private angels investors ( initially lock ) the amount of red be in wei .
helper function .
adds to balance .
removes from balance .
changes main contribution wallet .
opens the crowdfunding .
function to buy red .
closes the crowdfunding .
function to whitelist buyers .
transfers amount to address .
transfers from one address to another ( need allowance to be call first ) .
approves another address a certain amount of red .
gets an address 's red allowance .
gets the red balance of any address .
opens early bird sale .
returns true if early bird round be currently go on .
buy tokens from contract by send ether .
sell amount tokens to contract .
set enable .
function for calculate definite percent of a number .
return owner address use ticket number .
return amount of ticket for the current draw in the possession of specified address .
return ticket number for the current draw in the possession of specified address .
invest contract address change .
team contract address change .
market contract address change .
function for ticket send from owner 's address to designate address .
"return number of participant ( in the list of participants ) by belong address and add to the list , if not find ."
return participants number ( in the list of participants ) be belong address ( read only ) .
return address by the number in the list of participants .
"manager 's opportunity to write off eth from the contract , in a case of unforseen contract block ( possible in only case of more than 24 hours from the moment of lottery end have pass and a new one have not start ) ."
lottery end .
new draw start .
"send reward to the invest , team and market contract ."
function for send eth with balance check ( do not interrupt the program if balance be not sufficient ) .
get win ticket number base on block hasg ( block number be be calculate base on specified displacement ) .
current amount of jack pot 1 .
returns true if there be a transaction pending .
returns the balance of this contract .
returns the balance of this contract .
initiates a transaction .
executes the transaction .
cancels the transaction .
adds a user to the wallet .
removes a user .
mint mintamount token .
modifier to allow action only when the account be not breakup .
modifier to allow action only when the call be send by one of owners .
modifier to allow action only when message sender be bank .
rarely use ! only happen when extreme circumstances .
"think twice ! if you breakup with your lover , all your balance will transfer to your lover 's account , and you can not re-activate this very account ! think about your sweet moments before you hurt someone 's heart ! ! ."
log withdraw info when first receice request .
confirm request and send money ; erase info log .
"log big events ( pre-set - choice ) in relationship , time stamp be require ."
"log diary , time stamp be now ."
create a new love account and log in bank .
"calculate service fee ; to avoid ufixed data type , dev ( 1 / charge rate ) ."
"if now be during service-free promotion , return true ; else return false ."
"think twice ! if you breakup with your lover , all your balance will transfer to your lover 's account , and you can not re-activate this very account ! think about your sweet moments before you hurt someone 's heart ! ! ."
"log big events ( pre-set - choice ) in relationship , time stamp be require ."
"log diary , time stamp be now ."
log withdraw info when first receice request .
confirm request and send money ; erase info log .
withdraw your money for freeeeee ! or too if you wan na break up .
set new charge rate .
just for check .
just for check .
override unpause so it require all external contract address to be set before contract can be unpaused .
rarely use ! only happen when extreme circumstances .
allows the cfo to capture the balance of bank contract .
get love account contrat address through bank contract index .
modifier to allow action only when the contract is pause .
convert tokens to decimals .
convert tokens to whole .
setup the crowdsale parameters .
p1_duration constant .
functions with this modifier can only be execute by the owner .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
a function use the modifier can be invoke only by the owner of the contract .
"to change the owner of the contract , put the candidate ."
the candidate must call this function to accept the proposal for the transfer of the right of contract ownership .
withdraws tokens from the contract if they accidentally or on purpose be it place there .
make sure this function name match the contract name above .
functions for the owner .
start the ico manually .
stop the ico manually .
give back ethers to investors if soft cap be not reach .
extend ico time .
destroy contract and send ethers to owner .
for transfer tokens .
for transfer tokens from owner of contract .
uint returns the balance of indicated address .
uint returns total tokens distribute .
uint returns a of bonification to apply .
uint returns a escaled value .
uint returns the amount of tokens to send .
"set the beneficiary of the contract , who receive ethers ."
init balance from old cnc chain .
public function .
restricted function ( owner only ) .
maintenance function .
"by the time approve ( ) be call by the owner , a match call for registeraltpurchase ( _participant , eth , tx . id , ."
call the erc20 transfer function on the underlie token contract .
"pre-ico and offline investors , collaborators and team tokens ."
actually buy the tokens require an active sale time and amount above the minimum contribution and sell tokens inferior to tokens for sale .
checks if the crowdsale be a success .
checks if the crowdsale fail .
destroy tokens from other account .
add user to whiltelist ( only people in whilelist can buy tokens ) .
check exist of user in whitelist .
sell tokens to msg . sender .
check ico be active or not .
return now time .
calculate tokens should be send to buyer by rate which be setted when deploy .
set allowance for other address .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
create mintedamount tokens and send it to target .
authorizes the give user to claim credit for the callers tokens .
run during precrowdsale .
run when crowdsale be active .
use this to set the charity address set crowdsale address .
empty the crowdsale contract of dragons and forward balance to beneficiary .
start this to initiate crowdsale - will run for 60 days .
terminate the crowdsale .
pause the crowdsale .
unpauses the crowdsale .
transfer token for a specified address .
transfer tokens from one address to another .
send _value amount of tokens from address _from to address _to .
erc-20 related .
the callback function which oraclize will call after newround have be call .
change the bet price if ether would surge .
this function be only used if twitter change it 's design .
function to check if a specific adress be a winner during a specify round .
"backup function if oraclize do not run as schedule , everyone can run this ! ."
betting of number of tweet make during current round .
get number of bet .
get what 's in stake for a specific round .
get the number of total tweet for a specific round .
possible for winner to withdraw claes cash prize .
the ico ( initial claes offering ) function .
"get the current ico price in wei for each claes , after 30 days the price increase be flaten out ."
this function be only intend to run once .
"cost modifier , revert if price be not meet ."
"migration modfier , to lock the function ."
the balance of a particular account ? .
"clear the delegate address for all tokens delegate by the send address , unlock the locked tokens ."
change vote rule .
submit proposal for the dao to execute a particular transaction .
check if a proposal code match .
vote in favor or against an exist proposal .
whether or not the specify address have cast a vote on the specify proposal .
"yea vote , nay vote , quorum ( total vote ) ."
finish vote .
only shareholders can execute a function with this modifier .
only the dao itself ( via an approved proposal ) can execute a function with this modifier .
any account except the dao itself can execute a function with this modifier .
only a shareholder who have * not * delegate his vote can execute a function with this modifier .
only boardmembers ( shareholders above a certain threshold ) can execute a function with this modifier .
only a shareholder who have delegate his vote can execute a function with this modifier .
"set the delegate address for a specified number of tokens belong to the send address , lock the tokens ."
validate that a provided ecsda signature be sign by the specified address .
validate that the hash of a provided address be sign by the ecdsa public key associate with the specify ethereum address .
convert an uncompressed ecdsa public key into an ethereum address .
calculate the bitcoin-style address associate with an ecdsa public key .
verify a merkle proof use the utxo merkle tree .
convenience helper function to check if a utxo can be redeem .
verify that a utxo with the specify merkle leaf hash can be redeem .
"redeem a utxo , credit a proportional amount of tokens ( if valid ) to the send address ."
release the previously specify amount of tokens to the provided address .
extract a bytes32 subarray from an arbitrary length bytes array .
check if goal be reach .
change tier take block number a time .
function to mint tokens .
assign allowance _value to _spender address to use the msg . sender .
unsigned log .
sign log .
buy a 16 bytes signature for 0 . 001 eth .
query whois the owner address of the signature .
halts or unhalts direct trade without the sell and buy function below .
user buy kwhs and pay in ether .
user sell kwhs and get ether .
refunding owner .
mark : - modifiers .
"is the actor part of the admin group , or be they the owner ? ."
get contract version .
mark : - admin .
delete an administrator .
check if an address be an administrator .
add a post .
complete post .
public methods .
internal balance .
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
transfer token for a specified address .
transfer tokens from one address to another .
update state of contract show tokens buy .
transfers fxx tokens to another address .
sells the amount of fxx to refill the senders eth balance for another transaction .
can be iniitialized only once .
in case somebody send tokens here .
"call by the owner , pause ico ."
"call by the owner , resume ico ."
low level token purchase function .
transfer tokens .
transfer tokens from other address .
check whether you own this lottery .
get the code for an affiliate .
convert an affiliate 's address into a code .
get the address who originally refer the give user .
set the affiliation of a user to a give code .
"add wei to multiple affiliate , be sure to send an amount of ether equivalent to the sum of the _amounts array ."
withdraw wei into your wallet ( will revert if you have no balance ) .
get the amount of wei you can withdraw .
transfer ownership to another address ( go into effect when other address accept ) .
get the current state of the lottery .
"when the currently run game end , a new game wo n't be automatically start ."
"when the currently run game end , a new game will be automatically start ( this be the default behavior ) ."
in the event that some error occur and the contract never get the random callback the owner of the lottery can trigger another random number to be retrieve .
set new rule for the next game .
"get the rule for the upcoming game ( if there even be one ) ( jackpot , numberoftickets , ticketprice , maxticketsper , willstartnewgameuponcompletion ) ."
buy ticket for the lottery by pass in an array of ticket number ( start at 1 not 0 ) .
buy ticket with a referral code .
accept ownership of the lottery ( if a transfer have be initiate with your address ) .
get the ticket you have purchase for the current game .
get information pertain to the last game .
link an address to this contract .
check if you have be link to this contract .
add a new event .
private helpers .
open / close registration of new affiliate .
should promote registration of new affiliate .
transfer token for a specified address .
burn token of an specified address .
mint token to an specify address .
send tokens .
burn tokens .
allow someone to spend on your behalf .
transfer tokens from allowance .
token controller function .
schedule sale for give block range .
register purchase with give payment id .
check whether sale be currently active .
prevent further creation of tokens .
create new tokens and transfer them to specify address .
token be release or specify address be transfer manager .
specified address be transfer manager .
sender be release manager .
token be release ( transferable ) .
token be in lock up period .
set release manager if token not release yet .
approve specify address to make transfer in lock up period .
forbid specify address to make transfer in lock up period .
release token and make it transferable .
transfer token to a specified address .
transfer tokens from one address to another .
destroy tokens ( reduce total supply ) .
change name and symbol of tokens .
prevents far change to name and symbol .
approve specify address to mint tokens .
forbid specify address to mint tokens .
create new tokens and transfer them to specify address .
low level token transfer function .
buy tokens from contract by send ether .
destroy tokens .
end the crowdsale when the value xx ether or xx days be reach .
change the price if need .
only moderators .
read access .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
token owner can approve for spender to transferfrom ( . . . ) .
"gets the nft object from an address , validate that implementserc721 be true ."
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
currentrate of fxx tokens per eth .
withdraw team tokens after 1 year .
send any leave over fund to the wallet .
transfers tokens hold by timelock to beneficiary .
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
add off chain contribution .
true if investors can buy at the moment .
true if crowdsale event have end .
override of the validpurchase function so that the new sale periode start at startsale instead of startblock .
sale period start at startblock until the sale start ( startsale ) .
function to recover signer address from a message by use his signature .
function to verify the signature with give input signer .
function update the fee charge by the exchange .
function to calculate transaction fee for give value and token .
function to calculate transaction fee for give list of value and tokens .
function to calculate transaction fee for give value and token .
"function buys tokens with ether , exchange them 1 : 1 ."
withdraw ether from the account .
withdraw ether from the account to a target account .
gets the balance of the specified address .
"erc20 transferfrom , modify such that an allowance of max_uint represent an unlimited allowance ."
function to enable / disable contract operations .
fucntion only execute if there be an emergency and only contract owner can do it .
this function create a new army and save it in the array with it parameters .
function to return the owner of the army .
function to return the owner army count .
function to return the soldier count of an army .
return an array with the weapons of the army .
retrieve count battle win .
retrieve the detail of a battle .
get battle count .
to withdraw fund from this contract .
we use this function to purchase an army with metamask .
function to purchase a soldier .
payable function to purchase weapons .
we use this function to affect an army to an address ( when someone purchase an army ) .
we use this function to start a new battle .
owner can sell army .
owner remove army from marketplace .
function to return all the value of an army .
function to return the owner of the army .
current bet .
change state .
mint to investor ( sale ) .
mint to partner ( non-sale ) .
mint to partner with lock ( non-sale ) .
"mint to private investor ( sale , ico ) ."
internal function .
lottery end .
send tokens throw on any error rather then return a false flag to minimize user errors .
burn mana .
transfer back remain mana to account .
transfer back remain mana to multiple account .
allow the token holder to upgrade some of their tokens to a new contract .
allocate tokens for the early investors .
allow to ( re ) set finalize agent .
allow crowdsale owner to close early or extend the crowdsale .
allow to ( re ) set price strategy .
called once by crowdsale finalize ( ) if the sale be success .
dynamically create tokens and assign them to the investor .
get the current tranche or bail out if we be not in the tranche periods .
get the current price .
calculate the current price for buy in amount .
function to set default vest schedule parameters .
function to set vest with default schedule .
function to set / update vest schedule .
"release tokens a per vest schedule , call by contributor ."
"release tokens a per vest schedule , call by anyone ."
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
start the second release phase .
start the third release phase .
get the first phase total supply .
get the second phase total supply .
get the third phase total supply .
get the phase number .
destroy tokens from other account .
allows anyone to execute a confirmed transaction .
upgrade ship .
transfer action .
"bid function , people use this to buy ship ."
cancel auction .
"internal transfer , only can be call by this contract ."
buy tokens from contract by send ether .
sell amount tokens to contract .
send _value tokens to _to from your account .
send _value tokens to _to in behalf of _from .
allows _spender to spend no more than _value tokens in your behalf .
"allows _spender to spend no more than _value tokens in your behalf , and then ping the contract about it ."
remove _value tokens from the system irreversibly .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
freeze ? prevent allow target from send receive tokens .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
this get call by constructor and after the swap to restart evertying .
calculates the tokens mine base on the tier .
"store send amount a credit to be pull , call by payer ."
"withdraw accumulate balance , call by payee ."
requesting a certification be a pay feature .
requesting a certification confirmation be a pay feature .
requesting a certification document by index be a pay feature .
requesting a confirmation that a document be a certification be a pay feature .
symbol of this token .
number of decimals for this token .
name of this token .
withdraw unusold tokens .
withdraw unusold tokens .
approve and then comunicate the approve contract in a single tx .
a contract attempt to get the coin .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
destroy tokens .
returns balance of the _address .
start an exciting new friendship with me .
am i friends with this address ? .
withdraw the fund .
"finish ico and emit tokens for bounty company , partner and team ."
unfreeze tokens ( enable token transfer ) .
freeze tokens ( disable token transfer ) .
store how many eth be invest by investor .
writes how many tokens investor receive ( for payments in eth ) .
writes how many tokens investor receive ( for payments in other cryptocurrencies ) .
issues tokens for users who make purchase in other cryptocurrencies .
issue tokens for investors who pay in other cryptocurrencies .
issue tokens for investors who pay in ether .
calculates bonus if preico sales still not over .
allows execution by the oracle only .
enable return of investments .
disable return of investments .
allows investors to return their investments ( in eth ) if preico or ico return duration be not over yet and burn tokens .
burn tokens of investors who pay in other cryptocurrencies if preico or ico return duration be not over yet .
allows company withdraw investments .
allows execution by the owner only .
mint tokens .
enables token transfer .
disables token transfer .
burn tokens .
send coin throw on any error rather then return a false flag to minimize user errors .
an account / contract attempt to get the coin throw on any error rather then return a false flag to minimize user errors .
allows another account / contract to spend some tokens on it behalf throw on any error rather then return a false flag to minimize user errors .
allows execution by the one of controllers only .
set rate of eth and update token price .
start preico .
pause preico .
finish preico .
start ico .
pause ico .
only root function .
to send tokens that be accidentally send to this contract .
the price of the token each day .
used to tweak and update for game .
for trsnsfering tokens to others use this sc to enure they pay .
for purchase tokens from others use this sc to give trust to purchase .
to find users token ammount and box number .
for transfer tokens to others .
transfer tokens from other address .
decide or change box use in game .
release the fund for expand project .
create the token to be sell .
low level token purchase function .
getadslength tell you how many ads there be .
to get the contract owner address .
to get the withdrawal address .
ads must be purchase in 10x10 pixel block .
ads must be purchase in 10x10 pixel block .
"publish allow for set the link , image , and nsfw status for the ad unit that be identify by the idx which be return during the buy step ."
forcensfw allow the owner to override the nsfw status for a specific ad unit .
withdraw allow the owner to transfer out the balance of the contract .
low level token purchase function .
transfer token for a specified address .
gets the balance of the specified address .
function to set the new price can only be call from owner wallet .
determine the bonus with respect to time elapse .
low level token purchase function .
true if the transaction can buy tokens .
functions for the owner .
sales of channels .
general setters .
general getters .
update the constants of the network if necessary .
erc20 function .
"transfer an _amount to multiple address , use for airdrop ."
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
approve should be call when allow _spender 0 .
allows execution by the ico only .
transfer to the specify address if anyone can provide the correct preimage .
default action when timeout : override this .
when timeout .
gets the gift ratio of the specified address .
directly mint tokens to a htlc contract .
private functions https : / / github . com / openzeppelin / zeppelin-solidity / blob / master / contract / ecrecovery . sol .
"ensures that username be n't take , and account do n't already exist for user 's address ."
owner functions .
owner should call this on 1st of every month .
minter functions .
send tokens to exist account .
user functions .
user can withdraw their share of donations from the previous month .
erc20 functions .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newmaster .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
cancel auction .
car sales be limited .
returns minimal amount to wager to return a profit in case of max win .
"for the game to be fair , the total gross payout over a large number of individual slot spin should be the total amount wager by the player ."
"check order as well , since order assumptions be make in _callback and elsewhere ."
approve and then communicate the approve contract in a single tx .
decrease the token 's supply .
increase the token 's supply .
decrease the token 's supply .
set ethfunddeposit .
send eth to cte team .
allow users to buy tokens for _buyexchangerate eth and sell tokens for _sellexchangerate eth .
admin function for transfer coin .
"sell token , soldsupply , lockaccount ."
buy tokens from contract by send ether .
sell amount tokens to contract .
increase the token 's supply .
only whitelisted address can airdrop .
"run air drop , only from whitelisted adresses ( can run multiple pending transactions at a time ) the granularity be 50 adresses at a time for the same amount , save a good amount of gaz ."
add adresses that can run an airdrop .
transfer token for a specified address .
transfer tokens from one address to another .
create the token to be sell .
we override the close function from zeppelin .
low level token purchase function .
true if investors can buy at the moment .
true if crowdsale event have end .
true if crowdsale event have end .
buy tokens from contract by send ether .
sell amount tokens to contract .
a + b .
number of tokens give spender be currently allow to transfer from give owner .
name of this token .
symbol of this token .
number of decimals for this token .
total number of tokens in circulation .
set new wallet address for the smart contract .
vip rank of the owner of give address .
accept ethers and other currencies to buy tokens during the token sale .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"true on success , false on error ."
a * b .
transferring the contract ownership to the new owner .
accept the contract ownership by the new owner .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"true if token transfer be successfully approve , false otherwise ."
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
exchange tokens of _exchanger .
low level token purchase function .
increase the amount of eth .
call by the owner to transfer the target token to _owner from this contact .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
a + b .
number of decimals for this token .
this be a constructor function which mean the following function name have to match the contract name declare above .
create the token to be sell .
low level token purchase function .
send ether to the fund collection wallet ( s ) .
function to add a minor owner can only be call by the major / actual owner wallet .
function to remove a minor owner can only be call by the major / actual owner wallet .
the callback function which oraclize will call after newround have be call .
new round can start one week after last round .
betting of number of tweet make during current round .
add a new payee to the contract .
transfer token for a specified address .
burns a specific amount of tokens .
modifier to allow action only when the fund are lock .
modifier to allow action only when the fund are not lock .
"call by the owner to lock , trigger lock state ."
"call by the owner to unlock , return to normal state ."
send eth to ctb team .
"if product 's owner want to move , he need to use this fuction for set receiver : must use by sender ."
product 's buyer need to use this function for save his genuine .
check genuine of owner .
set waracoin sale price .
seller will send waracoin to buyer .
owner will buy back waracoin from backers .
here be waracoin 's genuine dapp function .
approves and then call the receive contract .
"internal transfer , only can be call by this contract ."
redeem tokens when the will to do so have be state within the user interface of a beercoin redemption system .
redeem tokens when the will to do so have be state within the user interface of a beercoin redemption system .
transfer beercoins to multiple recipients .
destroy beercoins by remove them from the system irreversibly .
restrict to the owner only .
transfer the ownership to another address .
lock or unlock the redemption functionality .
generate a sequence of bottle cap value to be use for production and send the respective total beercoin value to the contract for keep until a scan be recognize .
grant beercoins to a user who scan a bottle cap code .
grant beercoins to users who scan bottle cap cod .
first function set up a new campaign .
function to contribute to the campaign .
check if the goal or time limit have be reach and end the campaign .
from begin january to end january around 1 cent per token from begin febuary to end febuary around 5 cent per token before and after . . . . .
transfer the balance from the sender 's address to the address _to .
withdraws to address _to form the address _from up to the amount _value .
allows _spender to withdraw the _allowance amount form sender .
transfer the balance from owner 's account to another account .
check if the goal or time limit have be reach and end the campaign .
returns the name of the current round in plain text .
"change the date and time : the begin of the round , the end of the bonus , the end of the round ."
"change the price ( the number of tokens per 1 eth ) , the maximum hardcap for the last bet , the minimum bet ."
"for example - after 5 years of the project 's existence , all of u suddenly decide collectively ( company + investors ) that it would be more profitable for everyone to switch to another smart contract responsible for tokens ."
change the address for the specified role .
"if a little more than a year have elapse ( ico start date + 400 days ) , a smart contract will allow you to send all the money to the beneficiary , if any money be present ."
"we accept payments other than ethereum ( eth ) and other currencies , for example , bitcoin ( btc ) ."
the function for obtain smart contract fund in eth .
if the time of freeze expire will return the fund to the owner .
check for the possibility of buy tokens .
transfer of tokens from one account to another .
transfer of tokens from the trusted address _from to the address _to in the number _value .
check for the ability to finalize the round .
remove the wallet ignore the exchange pause .
reissue your tokens .
depositing fund on behalf of an ico investor .
the logic of finalization .
the manager freeze the tokens for the team .
initializing the round .
we check whether we collect the necessary minimum fund .
safe math function .
modifier to allow action only when the contract is not pause .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
approve should be call when allow _spender 0 .
low level token purchase function .
true if the transaction can buy tokens .
true if crowdsale event have end .
function to stop mint new tokens .
allow user to withdraw his balance .
modifier to add to function that should only be callable by contract owner .
gets cat price for a particular cat index .
sets exception price in wei that differ from release price for single cat base on cat index .
get cat with no owner at specify index by pay price .
get address of owner base on cat index .
get address of contract owner who perform contract creation and initialisation .
indicate that cat be no longer for sale ( by cat owner only ) .
create sell offer for cat with a certain minimum sale price in wei ( by cat owner only ) .
create sell offer for cat only to a particular buyer address with certain minimum sale price in wei ( by cat owner only ) .
buy cat that be currently on offer .
admin function to make total supply permanently lock ( callable by owner only ) .
withdraw any pending eth amount that be owe to fail bidder or successful seller .
returns count of how many cat be own by an owner .
return total supply of cat exist .
admin function to set attribute type descriptor text ( callable by owner only ) .
admin function to release new cat index number and update image hash for new cat release .
admin function to update price for an entire release of cat still available for claim .
migrate detail of previous contract cat owners address and cat balance to new contract instance .
add value for cat attribute that have be define ( only for cat owner ) .
transfer cat by owner to another wallet address .
total number of tokens initially .
remain number of tokens .
setup the opendistribution parameters .
checks modifier and allow transfer if tokens be not lock .
checks modifier and allow transfer if tokens be not lock .
lock address from transfer until . .
lock / unlock transfer .
checks whether it can transfer or otherwise throw .
allows any user to get his eth refund before the purchase be make .
low level token purchase function .
low level token purchase function .
"no modifiers be need , because each access be check no more than one time in the whole code , ."
upgrade tank .
transfer action .
"bid function , people use this to buy tank ."
cancel auction .
this be the tricky method which create the new type tank .
throws if call by any account other than the current owner .
transfer token to a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
function to check the amount of tokens than an owner allow to a spender .
mint datatrading tokens .
mint datatrading tokens and aproves the passed address to spend the minted amount of tokens .
true if the transaction can buy tokens .
change these values for your flux .
the list address be not valid recipients of tokens .
"associates this token with a current crowdsale , give the crowdsale an allowance of tokens from the crowdsale supply ."
enables the ability of anyone to transfer their tokens .
overrides erc20 transferfrom function with modifier that prevent the ability to transfer tokens until after transfer have be enable .
burns a specific amount of tokens if msg . sender .
checks if the fund cap or token_hardcap have be reach .
returns the current time .
returns the bonus value .
"internal transfer , only can be call by this contract ."
set minimum balance to make the transaction successfull .
"default function , map admin ."
total number of tokens initially .
"10 winners of 15 , 000 tokens or . 375 ."
"100 winners of 1 , 500 tokens or . 0375 ."
"1 , 000 winners of 150 tokens or . 00375 ."
"10 , 000 winners of 15 tokens or . 000375 ."
"100 , 000 winners of 1 . 5 tokens or . 0000375 ."
this be the tricky method which create the new type tank .
"true if tokens be transfer successfully , false otherwise ."
"true if token transfer be successfully approve , false otherwise ."
"true if tokens be create successfully , false otherwise ."
"true on success , false on error ."
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
name of this token .
symbol of this token .
low level token purchase function .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
assert function .
admin panel .
edit function for admin .
private function for edit field cryptopicture .
erc20 similary .
get variable .
check sum of the tokens for sale in the tranches in the crowdsale time .
get index of tranche .
function to check if the contract have be compromise .
called by the payer to store the send amount a credit to be pull .
"withdraw accumulate balance , call by payee ."
"create and deploy the target contract ( extension of target contract ) , and set the msg . sender ."
sends the contract fund to the researcher that prove the contract be break .
count number of tokens with bonuses .
check require of tokens in the tranche .
summing sell of tokens .
accept the membership payment by move eth from the user 's account to the owner 's account .
send _value amount of tokens from address _from to address _to .
checkwinnerinernal try find a winner for the old non-decided round .
"given a group , investor and amount of wei , pay all the eligible invitors ."
is a specific investor in a specific round ? .
get info about specific account .
get info about group .
get info about specific group .
get info about specific group member .
get info about specific group 's round .
"get info about specific round 's investment , by investor ."
get info about specific round 's investment - by index .
if someones send ether directly to the contract - fail it ! .
does group name exist ? .
create new group ( only owner ) .
close group ( only owner ) .
join group and make first investment .
invest in a group .
withdraw collect due fund in a safe manner .
checkwinner check if at the time of the call a winner exist for the currently early unwon round of the give group .
"checkanddeclarewinner check if at the time of the call a winner exist for the currently early unwon round of the give group , and then declare the winner ."
declarewinner etch the winner into the blockchain .
modifiers here .
"create vest by introduce beneficiary addres , total token amount , start date , duration for each vest period and number of periods ."
get current user total grant token amount .
"get user available vest amount , total amount - receive amount ."
get list of vest users address .
drain all eth and tokens to owner in an emergency situation .
send _value amount of tokens from address _from to address _to .
the balanace the particular account .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
get allowance .
gets totalsupply .
gets account 's balance .
transfers the balance from msg . sender .
send _value amount of tokens from address _from to address _to .
bearcrowdsale contract instance mint token .
exchange msg . value .
buy bear token normally .
get current exchange rate .
utility function for calculate available tokens and cost ethers .
release lock token .
admin moderators .
convenient tool to add monster .
gate way .
only gen 0 .
only gen 0 .
write access .
read access .
adds list of new investors to the investors list and approve all .
removes list of investors from list .
"allow _spender to withdraw from your aacount , multiple time , up to the _value amount ."
withdraws ether in contract ( owner only ) .
buy function allow to buy ether .
enables sale .
disables sale .
gets aacount 's balance .
transfers ownership provide that a valid address be give .
true if investors can buy at the moment .
function set the token conversion rate in this contract .
halt the presale in case of emergency .
low level token purchase function .
true if the transaction can buy tokens .
eth balance be always expect to be 0 .
true if crowdsale event have end .
public functions of the contract .
owner functions of the contract .
others functions of the contract .
functions of the contract .
modifiers of the contract .
get the owner of a specific din .
self-register multiple new dins and set the resolver .
register multiple new dins .
register multiple new dins and set the resolver .
transfer ownership of a din .
get the address of the resolver contract for a specific din .
set the resolver of a din .
get the last time a din be update with a new owner or resolver .
self-register a new din .
self-register a new din and set the resolver .
register a new din for a specific address .
register a new din and set the resolver .
self-register multiple new dins .
functions with this modifier can only be execute by the owner .
transfer the balance from owner 's account to another account .
the vault be the only address that can call a function with this modifier .
creates a giver admin with the msg . sender .
"updates a giver 's info to change the address , name , url , or committime , it can not be use to change a plugin , and it must be call by the current address of the giver ."
creates a delegate admin with the msg . sender .
"updates a delegate 's info to change the address , name , url , or committime , it can not be use to change a plugin , and it must be call by the current address of the delegate ."
creates a project admin with the msg . sender .
"updates a project 's info to change the address , name , url , or committime , it can not be use to change a plugin or a parentproject , and it must be call by the current address of the project ."
a constant getter that return the total number of pledge .
a getter that return the detail of the specify pledge .
getter to find delegate w / the pledge id the delegate index .
a constant getter use to check how many total admins exist .
a constant getter to check the detail of a specified admin .
"this create a pledge with an initial amount of 0 if one be not create already ; otherwise it find the pledge with the specified attribute ; all pledge technically exist , if the pledge have n't be create in this system yet it simply be n't in the hash array hpledge2idx yet ."
a getter to look up a admin 's detail .
a getter to look up a pledge 's detail .
a getter that search the delegationchain for the level of authority a specific delegate have within a pledge .
a getter to find how many old parent pledge a specific pledge have use a self-referential loop .
a getter to find the long committime out of the owner and all the delegate for a specified pledge .
a getter to find the level of authority a specific project have use a self-referential loop .
a getter to find if a specify project have be cancel .
a getter to find the old pledge that have n't be cancel .
a check to see if the msg . sender .
plugin whitelist methods .
"this be how value enter the system and how pledge be create ; the ether be send to the vault , an pledge for the giver be create ( or find ) , the amount of eth donate in wei be add to the amount in the giver 's pledge , and an lp transfer be do to the idreceiver for the full amount ."
transfers amount between pledge for internal account .
authorizes a payment be make from the vault can be use by the .
onlyvault confirms a withdraw request change the pledgestate from paying to paid .
"onlyvault cancels a withdraw request , change the pledgestate from paying back to pledged ."
changes the project . cancel .
"transfers amount in idpledge back to the oldpledge that that send it there in the first place , a ctrl-z ."
transfers multiple amount within multiple pledges in an efficient single call .
authorizes multiple amount within multiple pledges to be withdraw from the vault in an efficient single call .
mconfirmpayment allow for multiple pledge to be confirm efficiently .
mcancelpayment allow for multiple pledge to be cancel efficiently .
mnormalizepledge allow for multiple pledge to be normalize efficiently .
"transferownershiptoproject allow for the transfer of ownership to the project , but it can also be call by a project to un-delegate everyone by set one 's own id for the idreceiver ."
"transferownershiptogiver allow for the transfer of value back to the giver , value be place in a pledged state without be attach to a project , delegation chain , or time line ."
appenddelegate allow for a delegate to be add onto the end of the delegate chain for a give pledge .
appenddelegate allow for a delegate to be add onto the end of the delegate chain for a give pledge .
proposeassignproject propose the assignment of a pledge to a specific project .
dotransfer be design to allow for pledge amount to be shift around internally .
only affect pledge with the pledged pledgestate for 2 things : 1 : checks if the pledge should be commit .
callplugin be use to trigger the general function in the plugin for any action need before and after a transfer happen .
callpluginspledge be use to apply plugin call to the delegate chain and the intend project if there be one .
callplugins call callpluginspledge once for the transfer context and once for the receive context .
basic helper function to return the current time .
this be call by liquidpledging before every transfer to and from a pledgeadmin that have this contract a it plugin .
this be call by liquidpledging after every transfer to and from a pledgeadmin that have this contract a it plugin .
called when _owner send ether to the minime token contract .
notifies the controller about a token transfer allow the controller to react if desire .
notifies the controller about an approval allow the controller to react if desire .
create tokens .
allow token transfer .
erc20 function .
call functions .
call function .
"the owner can withdraw ethers already during pre sale , only if the minimum fund level have be reach ."
the participant will need to withdraw their fund from this contract if the pre sale have not achieve the minimum fund level .
"the owner can clawback any ethers after a date in the future , so no ethers remain trap in this contract ."
throw an exception if the amount be not equal .
add a number to a base value .
subtract a number from a base value .
add a wallet manager .
finalize settings .
set a new action and set a value of zero on a vote .
manager vote for the action .
set default empty settings .
check that the sender be a manager .
track who be the customer make the payment so we can send thank you email .
allow anonymous contributions to this crowdsale .
allow to ( re ) set finalize agent .
allow crowdsale owner to close early or extend the crowdsale .
allow to ( re ) set price strategy .
allow load refund back on the contract for the refund .
investors can claim refund .
make an investment .
allow anonymous contributions to this crowdsale .
transfer tokens from approve ( ) pool to the buyer .
calculate the current price for buy in amount .
allow the token holder to upgrade some of their tokens to a new contract .
transfer token to other address .
private transfer function .
check balance of an address .
buy tokens from contract by send ether .
sell amount tokens to contract .
"internal transfer , only can be call by this contract ."
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
getter totalsupply .
low level token purchase function .
"internal transfer , only can be call by this contract ."
mint new tokens .
burn tokens .
set block lock .
replace current owner with new one .
set account that can mint new tokens .
are transfer currently disallow .
checks if transfer parameters be valid .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
transfer balance to owner .
get balance of specific address .
owner can add new restrict address or remove one .
sell amount tokens to contract .
"internal transfer , only can be call by this contract ."
constructor that give msg . sender .
token controller function .
fix for the erc20 short address attack http : / / vessenes . com / the-erc20 - short-address - attack-explained .
function that enable / disable transfer of token .
approve should be call when allow _spender 0 .
function to stop mint new tokens .
"internal transfer , only can be call by this contract ."
buy tokens from contract by send ether .
sell amount tokens to contract .
function to recover the fund on the contract .
modifier - owner .
special manager disactivation .
modifier - manager or owner .
owner creation / activation .
manager disactivation .
modifier - transactions on .
modifier - emission on .
function transactions on now validate for definit address .
transaction allow / forbid for definit token holder .
function of change allow / forbid transfer status .
function of change emission status .
owner creation / activation .
balanceofonforholder ; balanceofon .
function on / off token display in function balanceof for definit token holder .
function add of new verification address .
function of disactivation of verification address .
description update .
balance view .
real balance view .
check if a give user have be delegate right to perform transfer on behalf of the account owner .
total balance quantity .
owner disable .
function of token transaction .
internal function that perform the actual transfer ( can not be call externally ) .
function token transfer .
function of transfer tokens from a delegated account .
function of delegate account management for a certain amount .
the emission function ( the manager or contract owner create tokens and send them to a specific account ) .
add 5 address at once .
function tokens withdraw .
balance description update .
token name change function .
recording of verification detail .
token symbol change function .
new token emission address set up .
new token withdraw address set up .
special manager or owner modifier .
special manager creation / actination .
destroy tokens from other account .
self : a storage pointer members : an array of address ppms : an array of integers that should sum to 1 million .
setup the funding parameters .
setup success parameters if proyect fund succeed .
approve should be call when allow _spender 0 .
setup contract address .
only after finishminting and check for bounty account time restrictions .
function to mint tokens .
drain tokens with refund .
transfer token for a specified address .
release time of freezed account .
change restrict releasexx account .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
setup contract address .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
buy tokens from contract by send ether .
setup the fundung parameters .
send value token to to from msg . sender .
send value token to to from from .
the transaction address and send the event a approval .
update price .
exchange tokens of _exchanger .
low level token purchase function .
increase the amount of eth .
call by the owner to transfer the target token to owner from this contact .
true if crowdsale event have end .
x + y .
number of decimals for this token .
total number of tokens in circulation .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"true if token transfer be successfully approve , false otherwise ."
"true on success , false on error ."
set new fund address for the smart contract .
x - y .
x * y .
number of tokens currently belong to the owner of give address .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"true if token transfer be successfully approve , false otherwise ."
name of this token .
symbol of this token .
change issuer address .
allocate tokens .
mint token .
create the token to be sell .
runtime state check .
test if we reach the goals .
contract 's token balance .
emergency function .
update all the price .
low level deposit .
token distribution for presale purchasers .
low level purchase .
for deposit that do not come thru the contract .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
"if crowdsale be unsuccessful , investors can claim refund here ."
"should be call after crowdsale end , to do some extra finalization work ."
distribute tokens .
send coins .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
transfer contract balance to owner .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
pause round a .
"finish round a and mint tokens appicsfund , ecosystemfund , steemitfund , ."
start round b .
pause round b .
"finish round b and mint tokens appicsfund , ecosystemfund , steemitfund , ."
start round c .
pause round c .
"finish round c and mint tokens appicsfund , ecosystemfund , steemitfund , ."
start round d .
pause round d .
"finish round d and mint tokens appicsfund , ecosystemfund , steemitfund , ."
enable token transfer .
disable token transfer .
issues tokens for users who make purchase in other cryptocurrencies .
issue tokens for investors who pay in ether .
calculates bonus .
allows company withdraw investments when round be over .
allows execution by the one of controllers only .
allows execution if the any round start only .
set rate of eth and update token price .
start pre-sale .
pause pre-sale .
"finish pre-sale and mint tokens for appicsfund , ecosystemfund , steemitfund , ."
start round a .
reset count of tokens approve for give address .
owner balance will be increase by _value .
sender balance will be decrease by _value .
hammer setter .
only hammer can call it .
hammer check modifier .
get balance of plain address .
take allow tokens .
_value tokens will be send to _to .
from _from will be send _value tokens to _to .
give to target address ability for self token manipulation without send .
change authority .
"once a player have join the game , the creator must reveal their bet by provide the same playersecret that be pass to creategame ( . . . ) ."
a utility function to get the minimum distance between two selections on a wheel of wheel_size wrap around at 0 .
"once the game be complete , use this function to get the result of the game ."
"once the game be complete , each player can withdraw their earn ."
change min / max bet amount .
internal helper function to add elements to an array .
internal helper function to remove element from an array .
get next game id to be associate with a player address .
used to calculate the bet hash give a wheel bet and a player secret .
create and initialize a game instance with the send bet amount .
cancel a game that be create but never have another player join .
join an open game instance .
this can be call by the join player to force the game to end once the expire time have be reach .
send coin .
new stuff .
transfer bounty to target address from bounty pool .
pre-ico state .
approves and then call the contract code .
withdraw tokens hold by the contract and send them to an account can only be call by the owner .
since v0 . 4 . 12 .
an account / contract attempt to get the coin throw on any error rather then return a false flag to minimize user errors .
anyone who find a block on ethereum would also get a reward in .
change miners reward can only be call by the contract owner .
remove tokens from an account and decrease the token supply can only be call by the contract owner .
"send coin throw on any error rather then return a false flag to minimize user errors note that when transfer to the smart token 's address , the coin be actually destroy ."
"an account / contract attempt to get the coin throw on any error rather then return a false flag to minimize user errors note that when transfer to the smart token 's address , the coin be actually destroy ."
allow the token holder to upgrade some of their tokens to a new contract .
allow transfer the contract ownership the new owner still need to accept the transfer can only be call by the contract owner .
allow token holders to withdar their dragons after timelock expire .
manually enter dragon credit to dragon lock - remember to add 8 extra zero to compensate for 8 dragon decimals .
used in case data entry clerk make an error credit address .
transfer ownership of this contract .
manually send different dragon package .
run during precrowdsale - can only be call by main crowdsale contract .
run when crowdsale be active - can only be call by main crowdsale contract .
pay the advisor part of the incoming ether .
use this to set the crowdsale beneficiary address .
use this to set the charity address .
set crowdsale address .
set advisors address .
empty the crowdsale contract of dragons and forward balance to beneficiary .
start this to initiate crowdsale - will run for 60 days .
set the dragon crowdsalecore contract .
emergency withdrawal of dragons incase send to this address .
"step 4 : if step 3 be a-ok , execute the draw , request a random number from our rng provider ."
"step 5 : generate a random number between 0 and the sum of purchased ticket , use oraclize random ds ."
step 6 : callback from the rng provider - find the winner base on the generated random number .
"step 6 ' : drawer receive bonus ticket , to cover the high gas consumption and incentivize people to do so ."
step 7 : determine winner by figure out which address own the interval encompass the generated random number and pay the winner .
end lottery flow .
allow players to withdraw their money in case the lottery fail .
public methods outside lottery flow .
allow the owner to withdraw the house fee + house top up .
"in case the lottery get stick , oraclize doesnt call back etc . , ."
helper methods .
certain parameters of the game can only be change if the game be stop .
owner methods .
end of game rule .
convenience method to return the current lottery .
ensure there 's enough gas leave ( mingasfordrawing be an estimate ) and that the gas price be enough to ensure it doesnt take an eternity to process the draw tx .
step 2 : store balance .
"step 3 : when someone contribute to the lottery , check to see if we 've meet the requirements for a draw yet ."
state update .
return cardlist array .
allow future tenant to lease a card .
get last lease from a card .
get lease from card .
get lease list from a card .
transfer the ownership of a card .
allow address to withdraw their balance .
return carddetailslist array .
return card detail by id .
return card by id .
"this be call on the initial buy card , user to user buy be at buycard ( ) ."
"internal transfer , only can be call by this contract ."
get the total token supply .
set token name .
set token symbol .
set token rate .
set minimum accept ether .
set total supply .
transfer ownership and transfer account balance .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
sets openned for sale status .
transfer tokens from other address .
get allowance .
set contract frozen status .
get account balance ( number of tokens the account hold ) .
allows anyone to transfer the test tokens once trade have start .
allows anyone to transfer the test tokens once trade have start .
modifier to allow token creation only when the sale is on .
modifier to allow token creation only when the hardcap have not be reach .
function for calculation bonus tokens bonus 1 for each 100 fem batch per buy ( up to max 50 bonus ) .
allows anyone to create tokens by deposit ether .
allows create tokens .
allows the owner to finish the mint .
allows the owner to double tokens of female investors .
allows the owner to transfer erc20 tokens to the multi sig vault .
"internal transfer , only can be call by this contract ."
called when someone try to redeem the gift .
called when someone send eth to this contract function .
approve should be call when allow _spender 0 .
creates and begin a new auction .
"bids on an open auction , complete the auction and transfer ownership of the nft if enough ether be supply ."
cancels an auction when the contract be pause .
simply a boolean to indicate this be the contract we expect to be pure mean they promise not to read from or modify the state .
return a pseudo random number between low and upper bound give the number of previous block it should hash .
"give genes of kitten 1 2 , return a genetic combination - may have a random factor ."
creates and begin a new auction .
updates lastsaleprice if seller be the nft contract .
places a bid for sire .
assigns ownership of a specific monster to an address .
an internal method that create a new monster and store it .
checks if a give address be the current owner of a particular monster .
checks if a give address currently have transferapproval for a particular monster .
returns the number of monsters own by a specific address .
transfers a monster to another address .
grant another address the right to transfer a specific monster via transferfrom ( ) .
"transfer a monster own by another address , for which the call address have previously be grant transfer approval by the owner ."
returns the total number of monsters currently in existence .
returns the address currently assign ownership of a give monster .
returns a list of all monster ids assign to an address .
the address of the sibling contract that be use to implement the sooper-sekret genetic combination algorithm .
checks that a give monster be able to breed .
check if a sire have authorize breed with this matron .
"set the cooldownendtime for the give monster , base on it current cooldownindex ."
checks to see if a give monster be pregnant and ( if so ) if the gestation period have pass .
checks that a give monster be able to breed ( i . e .
checks whether a monster be currently pregnant .
internal check to see if a give sire and matron be a valid mat pair .
internal check to see if a give sire and matron be a valid mat pair for breed via auction ( i . e .
"checks to see if two monsters can breed together , include check for ownership and siring approvals ."
"internal utility function to initiate breed , assume that all breed requirements have be check ."
"breed a monster you own ( a matron ) with a sire that you own , or for which you have previously be give siring approval ."
the auction contract variables be define in monsterbase to allow u to refer to them in monsterownership to prevent accidental transfer .
put a monster up for auction .
put a monster up for auction to be sire .
completes a sire auction by bid .
transfers the balance of the sale auction contract to the monstercore contract .
"we can create promo monsters , up to a limit ."
creates a new gen0 monster with the give genes and create an auction for it .
returns all the relevant information about a specific monster .
allows the cfo to capture the balance available to the contract .
anyone can try to reveal the bet .
anyone can try to finalize after the max block count or bet in the round be all reveal .
constant function .
"adds a new bet to the bet map , if bet do not exist yet ."
this method can be use by the controller to extract mistakenly sent tokens to this contract .
returns total number of transactions after filers be apply .
returns list of transaction ids in defined range .
allows to replace an owner with a new owner .
allows anyone to execute a confirmed transaction .
join the club ! make a deposit to another account if it exist or initialize a deposit for a new account .
withdrawal can only occur after deposit time be exceed .
transfer _value tokens from sender 's account msg . sender .
transfer _value ton tokens from sender 's account msg . sender .
returns current price of an nft on auction .
computes the current price of an auction .
"remove all ether from the contract , which be the owner 's cut as well a any ether send directly to the contract address ."
creates and begin a new auction .
returns auction info for an nft on auction .
"give genes of kitten 1 2 , return a genetic combination - may have a random factor ."
creates and begin a new auction .
an internal method that create a new monster and store it .
transfers a monster to another address .
grant another address the right to transfer a specific monster via transferfrom ( ) .
"transfer a monster own by another address , for which the call address have previously be grant transfer approval by the owner ."
adapted from memcpy ( ) by arachnid ( nick johnson email protect ) .
adapted from tostring ( slice ) by arachnid ( nick johnson email protect ) .
internal check to see if a give sire and matron be a valid mat pair .
"breed a monster you own ( a matron ) with a sire that you own , or for which you have previously be give siring approval ."
have a pregnant monster give birth ! .
put a monster up for auction .
put a monster up for auction to be sire .
completes a sire auction by bid .
creates a new gen0 monster with the give genes and create an auction for it .
returns all the relevant information about a specific monster .
adds an auction to the list of open auction .
migrate tokens to the new token contract .
function to mint tokens .
transfer _value seth tokens from sender 's account msg . sender .
transfer _value sgn / sga tokens from sender 's account msg . sender .
transfer _value utt tokens from sender 's account msg . sender .
transfer _value appc tokens from sender 's account msg . sender .
transfer _value ins tokens from sender 's account msg . sender .
public variables of the token .
return a pseudo random number between low and upper bound give the number of previous block it should hash .
this function transfer the adminship of the contract to _newadmin .
contribution handler .
check status .
function to withdraw eth to creator address .
transfer the specified amount of tokens to the specify address .
check account detail .
to withdraw your account balance from this contract .
transfer the eth in contract balance .
transfers sender 's tokens to a give address .
allows allow third party to transfer tokens from one address to another .
sets approve amount of tokens for spender .
get the account balance for an address .
transfer the balance from owner 's account to another account .
allow _spender to withdraw from your account up to _value .
spender of tokens transfer tokens from the owner 's balance .
returns the amount of tokens approve by the owner that can be transfer by spender .
accept the ownership .
proxy transfer token .
"proxy approve that some one can authorize the agent for broadcast transaction which call approve method , and agents may charge agency fee ."
approves and then call the contract code .
function for off-chain proof derivation .
internal function for hash the seed .
internal function for hash bytes .
internal function for hash an address .
lockamount - lock ether with a proof .
unlockamount - verify a proof to transfer the locked fund .
modifier to apply to methods to restrict access to the owner .
check the amount of tokens the owner have allow to a spender .
makes the coin tradable between users can not be undone .
mint tokens to users .
function to stop mint tokens irreversable .
only make certain change before the sale start .
is the sale still on .
has the sale complete .
has the sale complete .
make sure we be under the hardcap .
make sure we be over the soft cap .
transfer the ownership to a new owner can only be do by the current owner .
make sure we be over the soft cap .
if the soft cap have not be reach and the sale be over investors can reclaim their fund .
withdrawl the fund from the contract .
update the eth price for the token sale .
temp function for change start time for debug .
the pre sale purchase of tokens .
allows user to buy coin if we be under the hardcap also add a bonus if under the bonus amount .
withdrawl the fund from the contract .
get the eth balance of this contract .
allows this coin to be trade between users .
if this coin can be mint modifier .
obtain current total supply of ctn tokens .
get the initial supply of ctn coin .
returns the balance of a wallet .
transfer ctn between wallets .
send _amount of tokens from address _from to address _to .
allows an address to transfer money out this be administer by the contract owner who can specify how many coin an account can take .
get the balance of an _owner address .
approves and then call the receive contract .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
returns the amount which _spender be still allow to withdraw from _owner .
replace this with any other price function .
owner can batch return contributors contributions ( eth ) .
owner can set multisig address for crowdsale .
registers node with rate .
block node .
updates node charge rate .
updates node park rate .
parking off .
check crowdsale state and calibrate it .
decide if throw or only return ether .
creates a new clone token with the initial distribution be this token at _snapshotblock .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
update the dapp by create a new token with new functionalities the msg . sender .
creates a new clone token with the initial distribution be this token at _snapshotblock .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
update the dapp by create a new token with new functionalities the msg . sender .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
sell amount tokens to contract .
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
create mintedamount tokens and send it to target .
allows north pole to issue santa coins .
allows north pole to issue santa coins .
prevents north pole from issue santa coins .
make sure either santa or an elf be perform this task .
determines random number between range .
determines amount of santa coins to issue ( alias ) .
determines amount of santa coins to issue ( alias ) .
todo : to test the stoppable can work or not .
refund all tokens back to owner .
functions with this modifier can only be execute by the owner .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
approves and then call the receive contract .
events contract issue new tokens for address .
events contract revoke tokens for address .
"buys equal number of tokens of all outcomes , exchange collateral tokens and set of outcome tokens 1 : 1 ."
"sells equal number of tokens of all outcomes , exchange collateral tokens and set of outcome tokens 1 : 1 ."
sets win event outcome .
returns outcome count .
returns outcome tokens array .
returns the amount of outcome tokens hold by owner .
exchanges sender 's win outcome tokens for collateral tokens .
calculates and return event hash .
exchanges sender 's win outcome tokens for collateral tokens .
calculates and return event hash .
creates a new categorical event and add it to the event map .
creates a new scalar event and add it to the event map .
"buys tokens with ether , exchange them 1 : 1 ."
"sells tokens in exchange for ether , exchange them 1 : 1 ."
kill balance .
kill tokens .
set paramsico .
set paramspresale .
send coin .
transfer from .
transfer onlyowner .
burn owner .
destroy owner .
setup the presale parameters .
setup success parameters if proyect fund succeed .
allows to fund the market with collateral tokens convert them into outcome tokens .
allows market creator to close the market by transfer all remain outcome tokens to the creator .
allows market creator to withdraw fee generate by trade .
allows to buy outcome tokens from market maker .
allows to sell outcome tokens to market maker .
"buys all outcomes , then sell all share of select outcome which be buy , keep share of all other outcome tokens ."
calculates fee to be pay to market maker .
creates a new market contract .
returns cost to buy give number of outcome tokens .
returns profit for sell give number of outcome tokens .
returns marginal price of an outcome .
calculates the result of the lmsr cost function which be use to derive price from the market state .
"calculates sum ( exp ( q / b - offset ) for q in quantities ) , where offset be set so that the sum fit in 248-256 bits ."
gets net outcome tokens sell by market .
replaces owner .
sets event outcome .
returns if winning outcome be set .
returns outcome .
creates a new centralized oracle contract .
function that be call when transaction target be a contract .
only root function .
public function ( from https : / / github . com / dexaran / erc223-token - standard / tree / recommended ) .
function that be call when a user or another contract want to transfer fund to an address with tokenfallback function .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
"internal transfer , only can be call by this contract ."
uses transferfrom so you 'll need to approve some tokens before this one to this contract address .
privilege transfer .
get priveleged balance .
admin only can transfer from the privileged account .
calculates amount of bonus tokens .
withdraw allow only on success .
generates team tokens after ico finish .
dev method for debug .
transfer token for a specified address .
transfer tokens from one address to another .
setup the presale parameters .
setup success parameters if proyect fund succeed .
withdraw pull the entire ( if any ) balance of the contract to the owner 's account .
send coin .
transfer from .
mint tokens .
satart presale .
end presale .
start ico .
end ico .
is ico close .
is presale close .
check transfer .
not this .
buy tokens .
this close it when we want to close - rather than wait .
this close it when we want to close - rather than wait .
this close it when we want to close - rather than wait - this be bad .
this close it when we want to close - rather than wait .
validate a token address - verify that the address belong to one of the changeable tokens .
validate maximum change fee .
validate change fee .
validate a change path - verify that the number of elements be odd and that maximum number of 'hops ' be 10 .
allow execution only when change be n't disable .
return the number of reserve tokens define .
"return the number of changeable tokens support by the contract note that the number of changeable tokens be the number of reserve token , plus 1 ( that represent the smart token ) ."
"give a changeable token index , return the changeable token contract address ."
allow the manager to update the quick buy path .
return the length of the quick buy path array .
"return true if ether token exist in the quick buy path , false if not note that there should always be one in the quick buy path , if one be set ."
"return the address of the ether token use by the quick buy functionality note that it should always be the first element in the quick buy path , if one be set ."
disable the entire change functionality this be a safety mechanism in case of a emergency can only be call by the manager .
update the current change fee can only be call by the manager .
return the change fee amount for a give return amount .
define a new reserve for the token can only be call by the owner while the changer be inactive .
"return the reserve 's virtual balance if one be define , otherwise return the actual balance ."
return the expected return for change a specific amount of _fromtoken to _totoken .
return the expected return for buy the token for a reserve token .
return the expected return for sell the token for one of it reserve tokens .
change a specific amount of _fromtoken to _totoken .
buy the token by deposit one of it reserve tokens .
sell the token by withdraw from one of it reserve tokens .
"change the token to any other token in the bancor network by follow a predefined change path note that when change from an erc20 token ( a oppose to a smart token ) , allowance must be set beforehand ."
buy the smart token with eth if the return amount meet the minimum request note that this function can eventually be move into a separate contract .
"utility , return the expected return for sell the token for one of it reserve tokens , give a total supply override ."
"utility , transfer tokens from an account to the local contract ."
advance the step of campaign to presale 2 contract be deploy in presale 1 mode .
advance step of campaign to main sale .
to populate website with status of the sale .
"in case refund be need , money can be return to the contract ."
it will be call by owner to start the sale block number will be calculate base on current block time average .
"due to change average of block time this function will allow on adjust duration of campaign closer to the end allow adjust campaign length to 101 days , equivalent of 625392 block at 4 . 3 block per minute ."
it will be call by fallback function whenever ether be send to it .
this function will finalize the sale .
this function can be use by owner to update contribution address in case of use address from exchange or incompatible wallet .
call to send tokens to contributors after ico .
contributors can claim tokens after public ico be finish tokens be only claimable when token address be available .
allow refund when ico fail .
refund non compliant member .
failsafe drain to individual wallet .
failsafe token transfer .
tokens be lock during the ico .
unlock tokens for trade .
"called by the owner in emergency , trigger stop state ."
lock tokens in case of problems .
set authorized party .
migrate tokens to the new token contract .
set address of migration target contract and enable migration process .
mint new tokens with max of 197 . 5 millions .
"called by the owner to end of emergency , return to normal state ."
set the handle of the token contract .
set the product completion date for release of dev tokens .
to release tokens of the team accord to vest schedule .
to release tokens of the company accord to vest schedule .
to verify if action be not perform out of the campaign range .
return number of contributors for all campaign .
safe multiplication .
safe division .
safe subtraction .
safe addition .
low level function to buy tokens .
"in case of endtime before the reach of the cap , the owner can claim the unsold tokens ."
add / remove to whitelist array of address base on boolean status .
only owner can manually finalize the sale .
this function be use to manually distribute tokens .
add an address to the accredited list .
check if an address be accredit .
remove an address from the accredited list .
true if investors can buy at the moment .
"must be call after crowdsale end , to do some extra finalization work ."
set the token that the presale will use .
similar to grantvestedtokens but mint tokens instead of transfer .
overrides vestedtoken grantvestedtokens ( ) .
set address of migration agent contract and enable migration process .
migrates the tokens to the target token through the migrationagent .
overrides mint ( ) function so a to keep track of the tokens mint after the migrationagent have be set .
resets newtokens to zero .
resets burnttokens to zero .
burns a specific amount of tokens .
withdraw tokens hold by the contract and send them to an account can only be call by the owner .
"this be how value enter into the system which create pledge ; the token of value go into the vault and the amount in the pledge relevant to this giver without delegate be increase , and a normal transfer be do to the idreceiver ."
moves value between pledge .
this method be use to withdraw value from the system .
method call by the vault to confirm a payment .
method call by the vault to cancel a payment .
method call to cancel this project .
method call to cancel specific pledge .
mtransfer allow for multiple pledge to be transfer efficiently .
mwithdraw allow for multiple pledge to be withdraw efficiently .
appenddelegate allow for a delegate to be add onto the end of the delegate chain for a give pledge .
normalizepledge only affect pledge with the pledged pledgestate and do 2 things : 1 : checks if the pledge should be commit .
this be call by liquidpledging before every transfer to and from a pledgeadmin that have this contract a it plugin .
this be call by liquidpledging after every transfer to and from a pledgeadmin that have this contract a it plugin .
"allow the owner to send any tx , similar to a multi-sig this be necessary b / c the campaign may receive dac / campaign tokens if they transfer a pledge they own to another dac / campaign ."
called when _owner send ether to the minime token contract .
notifies the controller about a token transfer allow the controller to react if desire .
notifies the controller about an approval allow the controller to react if desire .
manually set the token price ( in wei - https : / / etherconverter . online ) .
send _amount of tokens to _target .
decrease user balance .
the function of buy tokens on crowdsale .
x + y .
number of decimals for this token .
total number of tokens in circulation .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"true on success , false on error ."
set new fund address for the smart contract .
x - y .
x * y .
number of tokens currently belong to the owner of give address .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
name of this token .
symbol of this token .
allow the owner to claim his the contract balance at any time .
transfer token for a specified address .
transfer stakes from owner balance to buyer balance save data to salestat storage .
set new owner .
set new fundaria address .
set new ether price in usd .
set address of wallet where investment will be transfer for further use in business transactions .
change pool capacity in usd .
register investment guide .
stop increase price dynamically .
"continue increase price dynamically ( the standard , usual algorithm ) ."
ability to tune dynamic price change with time .
get and set address of investment guide and distribute bonus stakes and guide reward .
distribute bonus stakes to investor accord to bonusshare .
translate wei to stakes .
translate stakes to wei .
"transfer wei from this contract to pool wallet partially only , 1 ) for fund promotion of stakes sale 2 ) accord to share ( finance_periods_last + current_finance_period ) / business_planned_period ."
investor can withdraw part of his / her investment .
investor reject withdraw investment .
distribute bounty reward for bounty task .
unfreeze team fundaria stakes .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
approve should be call when allow _spender 0 .
how many investment remain ? maximum investment be poolcapusd .
dynamically set cap .
"dynamically set the price of stake in usd cents , which depend on current timestamp ( price grow with time ) ."
help fix airdrop when holder 100 but need to calculate outer .
burn token if token be not sell out after public .
transfer token to presale investor who pay by cash .
increase hard cap if previous dont sell out .
allows the current owner to set an authorization .
throws if call by any account other than the whitelisted .
allows the current owner to set an whiteliststatus .
transfers vest tokens to beneficiary .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
transfer dfn .
authorize external contract to transfer .
unauthorize external contract to transfer .
record notarization string ( hash ) .
freeze contract .
empty out fund that accidentally end up on this contract .
functions for the owner .
public function .
allows any user to get his eth refund before the purchase be make .
checks to see if we be allow to change the allocator address .
checks to see if we be allow to change the crowdfund contract .
checks if allocator be perform the action .
issue tokens .
check if the pre-tde be go on .
crowdsale override .
finalizer function .
contract specific function .
finalizer function .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
approve should be call when allow _spender 0 .
migrate tokens to the new token contract .
set address of migration target contract and enable migration process .
enable upgrade to allow tokens migration to new contract process .
interface marker .
fix for the erc20 short address attack .
interface marker .
return the current state of contract .
"call by the owner to pause or unpause , trigger stop state on first call and return to normal state on second call ."
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
withdraw the fund .
true if investors can buy at the moment .
"token distribution to founder , develoment team , partner , charity , and bounty ."
the attached liquidpledging contract be the only address that can call a function with this modifier .
"onlyowner use to attach a specific liquidpledging instance to this lpvault ; keep in mind that once a liquidpledging contract be attach it can not be undone , this vault will be forever connect ."
"used to decentralize , toggle whether the lpvault will automatically confirm a payment after the payment have be authorize ."
"onlyliquidpledging authorizes payments from this contract , if autopay true the transfer happen automatically else the owner must call confirmpayment ( ) for a transfer to occur ( train wheel ) ; either way , a new payment be add to payments ."
allows the owner to confirm payments ; since authorizepayment be the only way to populate the payments array this be generally use when autopay be false after a payment have have be authorize .
transfers eth accord to the data hold within the specified payment id ( internal function ) .
when autopay be false and after a payment have be authorize to allow the owner to cancel a payment instead of confirm it .
cancels a pending payment ( internal function ) .
onlyowner an efficient way to confirm multiple payments .
onlyowner an efficient way to cancel multiple payments .
the total number of payments that have ever be authorize .
transfer eth or tokens to the escapehatchdestination .
returns how many als be give in exchange for 1 eth .
true if the transaction can buy tokens .
get the time-based bonus rate .
start public sale .
true if the crowdsale have raise enough money to be successful .
allow load refund back on the contract for the refund .
investors can claim refund .
set / change multi-signature wallet address .
change minimum contribution .
change presale publicsale end time .
"token distribution to founder , key employee allocation _founderandteamcap 10000000e18 ; 10 ."
current time .
check if goal be reach .
withdraw the fund .
allows any user to get his eth refund before the purchase be make .
burn away the specified amount of darftoken tokens .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
change the airdrop rate .
reset the rate to the default .
kill the contract send everything to _to .
outside-visible transact entry point .
confirm a transaction through just the hash .
revokes a prior confirmation of the give operation .
replaces an owner _from with another _to .
( re ) set the daily limit .
( re ) set the daily limit .
determine today 's index .
function to mint tokens .
function to mint tokens .
set the dragon crowdsalecore contract .
manually send different dragon package .
use this to set the charity address .
set crowdsale address .
set advisors address .
override standardtoken transferfrom .
override basictoken transfer .
dividents can be pay any time - even after presale and before sale1 ethrate - actual eth / usd rate .
override mintabletoken mint .
override pullpayment withdrawpayments .
withdraw ethers if contract have more ethers than for dividends for some reason .
override crowdsale buytokens .
migrate _value of tokens to the new token contract .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"before first send , make sure to allow this contract spend from token contract with function approve ( address _spender , uint256 _value ) and to update tokensapproved with function updatetokensapproved ( ) ."
be careful to this function to be sure you approve enough before you send a contract ca n't check first total amount in array .
buy the tokens .
create new document that be represent by it hash .
create and sign a new document that be represent by it hash .
sign an exist document with a valid iethidentity of signer - key : unique id of the create document - ethidentity : address of ethidentiy of signer that allow to verify the signer 's authenticity .
get the document information by it id key .
get the specific signatory of a give document by it id key .
check if a document exist by it key .
convert bytes32 to string .
no one can update metadata .
monkey patch .
reconcile all outstanding dividends for an address into it balance .
function allow investors to participate in the ico .
"internal burn function , only callable by team ."
calculate the divends for the current period give the aum profit .
function to mint tokens .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
throws if call by any account other than the owner .
deconstruct server-side byte data to structure data .
child contract can enable to provide the condition when the upgrade can begin .
create new tokens and allocate them to an address . .
owner can allow a crowdsale contract to mint new tokens .
make sure we be not do yet .
limit token transfer until the crowdsale be over .
the function can be call only before or after the tokens have be releasesd .
the function can be call only by a whitelisted release agent .
burns a specific amount of tokens .
"when token be release to be transferable , enforce no new tokens can be create ."
allow upgrade agent functionality kick in only if the crowdsale be success .
owner can update token information here .
method call when new seller join the program .
method call when owners add their own product .
interface declaration .
self check if all reference be correctly set .
pricing tell if this be a presale purchase or not .
"this be invoked once for every pre-ico address , set pricepertoken to 0 to disable ."
iterate through milestones .
get the current milestone or bail out if we be not in the milestone periods .
get the current price .
calculate the current price for buy in amount .
make an investment .
preallocate tokens for the early investors .
allow anonymous contributions to this crowdsale .
track who be the customer make the payment so we can send thank you email .
allow anonymous contributions to this crowdsale .
"invest to tokens , recognize the payer and clear his address ."
"invest to tokens , recognize the payer ."
the basic entry point to participate the crowdsale process .
finalize a succcesful crowdsale .
allow to ( re ) set finalize agent .
set policy do we need to have server-side customer ids for the investments .
set policy if all investors must be clear on the server side first .
allow address to do early participation .
allow crowdsale owner to close early or extend the crowdsale .
allow to ( re ) set price strategy .
allow to change the team multisig address in the case of emergency .
interface declaration .
allow load refund back on the contract for the refund .
investors can claim refund .
true if the crowdsale have raise enough money to be a successful .
check if the contract relationship look good .
check if the contract relationship look good .
crowdfund state machine management .
this be for manual test of multisig wallet interaction .
interface marker .
called from invest ( ) to confirm if the curret investment do not break our cap rule .
interface marker .
dynamically create tokens and assign them to the investor .
allow the token holder to upgrade some of their tokens to a new contract .
set an upgrade agent that handle .
get the state of the token upgrade .
change the upgrade master .
create the token to be sell .
low level token purchase function .
determine the rate of the token w . r . t .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
start charityspace ico ! .
"confirm donation in btc , bch ( bcc ) , ltc , dash ."
sale state management : start / pause / finalize .
"if function have this modifier , only owner can execute this function ."
transfer tokens from account ( _from ) to another account ( _to ) .
transfere tokens to audit partner ( 2 ) .
transfer tokens to bounty partner ( 2 ) .
transfer tokens to admine users pool ( 10 ) .
transfer tokens to advisors ( 6 ) .
transfer tokens to ico partner ( 60 ) .
transfer tokens to pre sale partner ( 5 ) .
erase unsold pre sale tokens .
chech trade balance of account .
transfer tokens from your account to other account .
create new glx tokens .
"finalize the crowdsale , should be call after the refund period ."
failsafe drain .
allow to change the team multisig address in the case of emergency .
manually back darftoken owner address .
transfer remain to owner in case if impossible to do min buy .
when min_cap be not reach : 1 ) backer call the approve function of the darftoken token contract with the amount of all darftokens they get in order to be refund 2 ) backer call the refund function of the crowdsale contract with the same amount of darftokens 3 ) backer call the withdrawpayments function of the crowdsale contract to get a refund in eth .
"withdraw accumulate balance , call by payee ."
to call to start the crowdsale .
receives a donation in ether .
compute the darftoken bonus accord to the buyment period .
allows any user to get his eth refund before the purchase be make .
buy the tokens .
returns tuts rate per 1 eth depend on current time .
calculate the tokens in percent over de tokens generate .
method to mint the team and pool tokens .
allows any user to withdraw his tokens .
allows any user to get his eth refund before the purchase be make or after approx .
exit price ( gem per skr ) .
returns true if cup be well-collateralized .
bad debt .
collateral pending liquidation .
cancel debt .
dai target price ( ref per dai ) .
feed price ( sai per skr ) .
boom price ( sai per skr ) .
bust price ( sai per skr ) .
force settlement of the system at a give price ( sai per gem ) .
cage by read the last value from the fee for the price .
debt ceiling .
liquidation ratio .
stability fee .
governance fee .
total cdp debt .
liquidation fee .
join / exit spread .
eth / usd feed .
mkr / usd feed .
boom / bust spread .
rate of change of target price ( per second ) .
liquidation ratio 150 .
backing collateral .
raw collateral .
join price ( gem per skr ) .
the not frozen modifier guard function modify the supply of the token from be call after the token supply have be freeze .
make sure only the dropper can drop claimable supply .
"freeze will irrevocably stop all modifications to the supply of the token , effectively freeze the supply of the token ( transfer be still possible ) ."
mint can be call by the owner to create tokens for a certain receiver it will no longer work once the token supply have be freeze .
claimable return how much a give address can claim from the airdrop .
drop will create a new allowance for claimable tokens of the airdrop it will no longer work once the token supply have be freeze .
claim will allow any sender to retrieve the airdrop tokens assign to him it will only work until the maximum number of airdrop tokens be redeem .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
this contract only define a modifier but do not use it it will be use in derived contract .
return total amount of tokens uint256 public totalsupply ; .
this contract only define a modifier but do not use it it will be use in derived contract .
this contract only define a modifier but do not use it it will be use in derived contract .
produce amount of tokens to _owner .
consume digital artwork tokens for change physical artwork .
set address of peony contract .
send _value token to _to .
only mark 'done ' if call succeed ( not exceptional condition ) .
make a new offer .
make a new offer .
"transfers fund from caller to offer maker , and from market to caller ."
cancel an offer .
insert offer into the sorted list keepers need to use this function .
delete _rank id .
return true if token be succesfully add to whitelist .
return true if token be successfully remove from whitelist .
set the minimum sell amount for a token .
return the minimum sell amount for an offer .
public entrypoints .
set buy functionality enable / disable .
set match enable / disable .
"return the best offer for a token pair the best offer be the low one if it 's an ask , and high one if it 's a bid offer ."
"return the next worse offer in the sorted list the bad offer be the high one if it an ask , a low one if it a bid offer , and in both case the new one if they 're equal ."
"return the next better offer in the sorted list the good offer be in the low price one if it an ask , the next high price one if it a bid offer and in both case the old one if they 're equal ."
return the amount of good offer for a token pair .
get the first unsorted offer that be insert by a contract .
get the next unsorted offer .
internal functions .
find the id of the next high offer after offer id .
accept give quantity of an offer .
find the id of the next high offer after offer id .
return true if offer low price less than or equal to offer high .
"these variables be global only because of solidity local variable limit match offer with taker offer , and execute token transactions ."
make a new offer without put it in the sorted list .
put offer into the sorted list .
remove offer from the sorted list ( do not cancel offer ) .
hide offer from the unsorted order book ( do not cancel offer ) .
cancel an offer .
make a new offer .
"after close_time have be reach , no new offer be allow ."
"after close , no new buy be allow ."
"after close , anyone can cancel an offer ."
check if token pair be enable .
public entrypoints .
convert minium uc amount to purchase - minimum token amount to purchase .
the contract owner send tokens to the target address .
the contract owner can set the coin value per 1 ether .
the contract owner can set the minimum coin value to purchase .
the contract owner can add a target address in the blacklist .
the contract owner can delete a target address from the blacklist .
set up true or false for a target address .
"if true , token sale be not available ."
"if false , token sale be available ."
the contract owner can push all remain uc coin to the target address .
users can buy uc coin .
convert uc amount per ether - token amount per ether .
"once a player have join the game , the creator must reveal their bet by provide the same playersecret that be pass to creategame ( . . . ) ."
stability fee .
governance fee .
rate of change of target price ( per second ) .
like drop / swap except simply elect this address if it be high than current hat .
throws unless the array of address be a ordered set .
transfers sender 's tokens to a give address .
allows allow third party to transfer tokens from one address to another .
returns number of tokens own by give address .
sets approve amount of tokens for spender .
returns number of allow tokens for give address .
burns a specific amount of tokens .
overriden methods .
insert offer into the sorted list keepers need to use this function .
put offer into the sorted list .
increase the token supply and send the new tokens to an account can only be call by the contract owner .
perform only allow state transition .
record an investment .
"withdraw accumulate balance , call by payee in case crowdsale have fail ."
whether to apply hard cap check logic via getmaximumfunds ( ) method .
to be override in test .
maximum investments to be accept during the sale ( in wei ) .
minimum amount of fund to consider the sale a successful ( in wei ) .
end time of the sale .
minimal amount of one investment ( in wei ) .
small divisible token units ( token wei ) in one token .
calculate token amount for give investment .
amount of euro collect .
amount of wei collect .
amount of wei-tokens mint .
public interface .
maximum investments to be accept during the sale ( in euro-cents ) .
minimum amount of fund to consider the sale a successful ( in euro-cents ) .
euro-cents per 1 ether .
price of one token ( 1e18 wei-tokens ) in euro cents .
crowdsale participation .
payment process .
maximum investments to be accept during the sale ( in euro-cents ) .
minimum amount of fund to consider the sale a successful ( in euro-cents ) .
maximum investments to be accept during the sale ( in euro-cents ) .
minimum amount of fund to consider the sale a successful ( in euro-cents ) .
maximum investments to be accept during the sale ( in euro-cents ) .
minimum amount of fund to consider the sale a successful ( in euro-cents ) .
maximum investments to be accept during the sale ( in euro-cents ) .
minimum amount of fund to consider the sale a successful ( in euro-cents ) .
maximum investments to be accept during the sale ( in euro-cents ) .
minimum amount of fund to consider the sale a successful ( in euro-cents ) .
low level token purchase function .
transfers tokens hold by timelock to beneficiary .
either sale close or 24 dec 2017 pass .
transfer limit by the tradingopen modifier ( either sale close or 24 dec 2017 pass ) .
transfer limit by the tradingopen modifier ( either sale close or 24 dec 2017 pass ) .
we use pure bbecause it promise that the value for the function depend only on the function arguments .
used to transfer fund on behalf of one person .
used to approve a third-party to send fund on your behalf .
low level function use to do a sanity check of input data for cma token transfer .
used to retrieve total supply .
used to look up balance of a user .
used to look up allowance of a user .
used to launch start the contract .
keep a list of address that be participate in the site .
manual payout for site users .
low-level mint function not accessible externally .
"used to mint tokens , only usable by the contract owner ."
used to burn tokens .
used to freeze token transfer .
used to thaw token transfer .
used to transfer fund .
add previous investor compensaton rate .
check if soft cap goal be reach in usd .
check if hard cap goal be reach in usd .
check if hard cap goal be reach in usd .
"if crowdsale be unsuccessful , investors can claim refund here ."
call by the escrow to update current eth x usd exchange rate .
return current token price base on current presale time frame .
killer method that can bu use by owner to kill the contract and send fund to owner .
modifier to make a function callable only when it call by escrow .
main function to buy tokens .
check if the current purchase valid base on time and amount of pass ether .
finish presale stage and move vault to refund state if goal be not reach .
check if crowdsale still active base on current time and cap .
finalize crowdsale .
write access .
read access .
approve should be call when allow _spender 0 .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
generate tokens for many address with a single transaction .
compensate the presale investors at the address provider base on their contributions during the presale .
transfers tokens hold by timelock to beneficiary .
the crowdsale owner may withdraw any amount of ether from this contract at any time .
set the whitelistoff variable .
the owner of the controller can change the controller to a new contract .
change whether transfer be enable .
called when _owner send ether to the minime token contract .
notifies the controller about a token transfer allow the controller to react if desire .
notifies the controller about an approval allow the controller to react if desire .
the owner can change the usd ether price .
return the number of wei some amount of usd .
return the number of bnty per some amount in wei .
backwards compatibility .
asset implementation contract .
returns token 's name .
"destroy tokens from owener account , can be run only by owner ."
"destroy tokens from other account , can be run only by owner ."
"create mintedamount tokens and send it to owner , can be run only by owner ."
"freeze or unfreeze account , can be run only by owner ."
check if the address be frozen .
"internal transfer , only can be call by this contract ."
returns token 's symbol .
returns token 's decimals .
returns token 's total supply .
returns balance of the give address .
transfer tokens .
transfer tokens from other address .
set allowance for other address .
returns allowance for the give owner and spender .
approve should be call when allow _spender 0 .
allow transfer only after crowdsale finish .
use for disable transfer before exchange to main bob tokens .
get the token we be distribute .
participate to a presale .
load fund to the crowdsale for all investors .
how may tokens each investor get .
how many tokens remain unclaimed for an investor .
claim all remain tokens for this investor .
claim n buy tokens to the investor a the msg sender .
ico never happen .
set the target crowdsale where we will move presale fund when the crowdsale open .
setting timelock ( delay ) for claim .
"this be use in the first case scenario , this will force the state to refund ."
"this should be use if the crowdsale fail , to receive the refuld money ."
resolve the contract umambigious state .
interface marker .
the price or token value for a ether .
the price or token value for a ether .
allows the current owner to transfer control of the contract to a newowner .
low level token purchase function .
function to stop mint new tokens .
burns a specific amount of tokens .
function to mint tokens .
_newprice : 266 0 . 000266 .
_newprice : 266 0 . 000266 .
amount : 12345000 12 . 345000 arna 12345000000000000000 ; .
refund if the softcap be not reach .
returns number of tokens own by give address .
begin of external sales .
get id of currency enum .
get token count by transaction id .
end of external sales .
finalize the crowdsale .
transfers sender 's tokens to a give address .
allows allow third party to transfer tokens from one address to another .
returns number of allow tokens for give address .
safe transfer of ownership in 2 step .
"called by the owner on emergency , trigger pause state ."
override this method to mock current time .
calc how much token you can buy at current time .
methods to access externally state of preico claim .
the amount allocate for beneficiary at _index .
reward the beneficiary at _index .
add a new allocation to the lockup .
override standardtoken transferfrom ensure that mint have finish or the message sender be the token owner .
override standardtoken transfer ensure the mint have finish or the message sender be the token owner .
add an authorizer to the authorizers map .
true if crowdsale event have end .
true if the crowdsale have start .
override crowdsale buytokens mint the ownerrate of tokens in addition to call the super method .
mint _amount tokens to the _beneficiary minus the bonusrate tokens to be lock up via the lockup contract .
unlock tokens from the token lockup contract .
set the authorizer contract if the crowdsale have n't start .
set the lockup contract if the crowdsale have n't start .
set the token contract if the crowdsale have n't start .
remove an authorizer from the authorizers map .
set the cap on the contract if the crowdsale have n't start .
allow maxcontribution to be modify .
allow endtime to be modify .
override crowdsale createtokencontract .
"override finalizablecrowdsale finalization finalize mint for the token contract , disable further mint ."
"true if crowdsale participants can buy at the moment check whether the cap have not be reach , the purchaser have be authorize , and their contribution be within the min / max thresholds ."
allow an account to participate in the crowdsale .
return whether or not the provided _account be an authorizer .
return whether or not the provided _account be authorize to participate in the crowdsale .
allow only the contract creator or one of the authorizers to do this .
update the allocation storage remain balance .
the total number of allocations .
transfer from msg . sender .
initializes contract with initial supply tokens to the creator of the contract .
"these variables be global only because of solidity local variable limit match offer with taker offer , and execute token transactions ."
put offer into the sorted list .
approve should be call when allow _spender 0 .
function to mint tokens .
erc20 standard function .
additions over erc20 .
0 . 01 1 and 100 10000 .
set the duration of lock of tokens approve of mint .
approve of mint _amount tokens that be assign to _owner .
withdraw approval of mint _amount tokens that be assign to _owner .
mints _amount tokens that be assign to _owner .
mints _amount tokens that be assign to _owner within one day after deployment the tokens mint will be add to balance immediately .
function to stop mint new tokens .
set the aelfmultisig .
set the aelfcommunitymultisig .
gets the balance of the specified address .
set allowance for other address .
burn tokens .
function to check the amount of tokens that an owner allow to a spender .
"freeze will irrevocably stop all modifications to the supply of the token , effectively freeze the supply of the token ( transfer be still possible ) ."
mint can be call by the owner to create tokens for a certain receiver it will no longer work once the token supply have be freeze .
drop will create a new allowance for claimable tokens of the airdrop it will no longer work once the token supply have be freeze .
claim will allow any sender to retrieve the airdrop tokens assign to him it will only work until the maximum number of airdrop tokens be redeem .
test purchase : new crowdsale ( ) ; 0 . purchase ( ) ( 10 ) ; .
test withdraw : new crowdsale ( ) ; 0 . purchase ( ) ( 1000 ) ; .
modifier to mark that a function can only be execute by the owner .
owner can initiate transfer of contract to a new owner .
new owner have to accept transfer of contract .
modifier for function that can only be execute by adminstrator .
owner can remove an administrator .
add to whitelist .
add batch to whitelist .
"after seal , no more whitelisting be possible ."
number of tokens currently belong to the owner of give address .
"internal transfer , only can be call by this contract ."
airdrop tokens to request address .
kill this smart contract .
do we want lock permanent ? i think so .
"multi function just issue events , to fix initial event history ."
note that address recover from signatures must be strictly increase .
note that address recover from signatures must be strictly increase .
internal functions .
set new _maximumbuy .
updates buy price ( owner only ) .
create new coin .
functions with this modifier check the validity of msg value value must great than equal minimumbuyprice total deposit must less than equal maximumbuyprice .
buy function allow to buy ether .
set new icopercent .
contribution handler .
check status .
closure handler .
mint _mintedamount tokens to _target address .
burn _burnedamount tokens form _target address .
this famous algorithm be call exponentiation by square and calculate x n with x a fixed-point and n a regular unsigned .
allows user to buy coin if we be under the hardcap also add a bonus if under the bonus amount .
gets number of remain tokens .
allows token transfer .
overrides transfer function by add check whether transfer be allwed .
override transferfrom function and add a check whether transfer be allwed .
burns a specific amount of tokens .
burns a specific amount of tokens for specific address .
"call by the owner on emergency , trigger stop state ."
"call by the owner on end of emergency , return to normal state ."
overriding function to create handeliontoken .
low level token purchase function .
this function just transfer tokens to beneficiary address .
this function just transfer tokens with decimals to beneficiary address .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
forward handelion tokens to purchaset .
closes crowdsale and change it state to finalized .
burns all caller tokens .
burns remain tokens which be not sell during crowdsale .
gets remain tokens on a contract .
gets total supply of tokens .
gets amount of token of specific investor .
true if the transaction can buy tokens .
true if crowdsale event have end .
returns token creator address .
gets total supply of handelion token .
transfer _value tokens from _from to _to if msg . sender .
allows _spender to transfer _value tokens from msg . sender .
check the amount of tokens the owner have allow to a spender .
makes the coin tradable between users can not be undone .
mint tokens to users .
function to stop mint tokens irreversable .
only make certain change before the sale start .
is the sale still on .
has the sale complete .
has the sale complete .
make sure we be under the hardcap .
make sure we be over the soft cap .
make sure we be over the soft cap .
update the eth price for the token sale .
allows user to buy coin if we be under the hardcap also add a bonus if under the bonus amount .
withdrawl the fund from the contract .
withdrawl the fund from the contract .
if the soft cap have not be reach and the sale be over investors can reclaim their fund .
get the eth balance of this contract .
allows this coin to be trade between users .
if this coin can be mint modifier .
obtain current total supply of ctn tokens .
get the initial supply of ctn coin .
returns the balance of a wallet .
transfer ctn between wallets .
send _amount of tokens from address _from to address _to .
allows an address to transfer money out this be administer by the contract owner who can specify how many coin an account can take .
send _value token to _to from msg . sender .
send _value token to _to from _from on the condition it be approve by _from .
purchase from exchange address .
public function .
transfer the balance from owner 's account to another account only escrow can send token ( to send token private sale ) .
administrative function .
allows the current owner to transfer control of the contract to a newowner .
check if the contract be deprecate .
_newprice : 266 0 . 000266 .
_softcap : 3333000000 3333 ether ; .
high level token purchase function .
true if burntoken function have end .
function transfertoken work to transfer tokens to the specify address on the call of owner within the crowdsale timestamp .
low level token purchase function .
true if the transaction can buy tokens .
"true if tokens be transfer successfully , false otherwise ."
"true if token transfer be successfully approve , false otherwise ."
number of tokens give spender be currently allow to transfer from give owner .
index of new create snapshot .
"true if tokens be transfer successfully , false otherwise ."
"true on success , false on error ."
update historical balance for give token owner .
set historical balance for the owner of give address a it be at the moments of snapshots with index in give range .
add address to the list of address that ever have non-zero token balance .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"true on success , false on error ."
freeze token transfer .
set new owner address .
index of new create snapshot .
name of this token .
symbol of this token .
"true if tokens be burn successfully , false otherwise ."
set new snapshot creator address .
total number of tokens in circulation at the moment snapshot with give index be create .
number of tokens currently belong to the owner of give address .
number of tokens owner of the give address have at the moment the snapshot with give index be create .
flag that tell whether there be at least one address that probably have non-zero token balance at the moment of snapshot with give index ( hasresult ) ; and the fist address that probably have non-zero token balance at the moment snapshot with give index be create or zero if there be no such address ( result ) .
flag that tell whether there be next address that probably have non-zero token balance at the moment of snapshot with give index ( hasresult ) ; and the next address that probably have non-zero token balance at the moment of snapshot with give index be create or zero if there be no such address ( result ) .
"true if tokens be transfer successfully , false otherwise ."
participate to a presale .
to get the total supply of ctn coin .
to get the total supply of ctn coin .
returns the balance of the wallet .
all money will go to dogcharity project .
returns tuts rate per 1 eth depend on current time .
method to mint the team and pool tokens .
transfers tokens hold by timelock to beneficiary .
override crowdsale buytokens mint the ownerrate of tokens in addition to call the super method .
immediately mint _amount tokens to the _beneficiary .
mint _amount tokens to the _beneficiary minus the bonusrate tokens to be lock up via the lockup contract .
low level token purchase function .
true if the transaction can buy tokens .
true if crowdsale event have end .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
call this method to extract the tokens .
overrideable for easy test .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
mint _amount tokens to the _beneficiary minus the bonusrate tokens to be lock up via the lockup contract .
"erc20 transferfrom , modify such that an allowance of max_uint represent an unlimited allowance ."
"buys tokens with ether , exchange them 1 : 1 ."
"sells tokens in exchange for ether , exchange them 1 : 1 ."
"call by the owner to extend deadline relative to last deadline time , to accept ether and transfer tokens ."
function ext .
transfer entire balance to any account ( by owner and admin only ) .
transfer part of balance to any account ( by owner and admin only ) .
"call by the owner to unpause , return to normal state ."
transfer token for a specified address .
transfer tokens from one address to another .
checks if the msg . sender .
upgrade the contract for the give contract identifier to a new version .
rollback the contract for the give contract identifier to the provide version .
swap the give contract state a define : - newcontractaddress will be activate - oldcontractaddress will be deactived .
esnure the msg . sender .
transfer token for a specified address .
transfer tokens from one address to another .
function to mint tokens .
get the amount of share that a shareholder own in percentage relative to the total number of share .
get the late token contract address .
check if the contract be active .
get the late reference to the token .
check if the provided address be a company shareholder .
check if the give address be a majority company shareholder .
ensure the msg . sender .
ensure the msg . sender .
ensure the msg . sender .
ensure there be no sale in progress .
ensure there be a sale in progress .
initialize a new sale .
check if the contract be not active .
process the payment from the investor .
abort the current sale .
activate the contract .
deactiate the contract .
ensure no lock be in place for the give contract identifier .
get the address of the active contract for the give identifier .
check if the contract for the give address be manage .
setup function set external contract ' address .
transfers tokens to a give address .
calculates the maximum amount of vested tokens .
add wallet to whitelist .
function for sell tokens .
low level token purchase function .
after crowdsale end this method withdraw all unsold tokens .
tokens buy with btc be send via this method .
issue ticket for the specified address .
pay from fund to the specify address only if not pay already .
if fund already pay to the specify address .
server integration methods .
send fund to player by index .
if fund already pay to the specify player by index .
server method .
random integration .
company integration .
constant methods .
validates arguments for changeowner function .
changes require sigs for minor transactions .
changes threshold for major transaction day spend per token .
verifies a confirm owner have not confirm already .
used later to calculate the number of confirmations need for tx .
used to check if tx be move tokens and parse amount .
retrieves sig requirement for spend tx .
function to create new contract .
create and execute transaction from wallet .
"confirms a current pending tx , will execute if final confirmation ."
"revokes a prior confirmation from sender , call with tx id ."
sorts give array in place .
multiplies two number and check for overflow before return .
validates arguments for removeowner function .
divides two number but check for 0 in the divisor first .
adds two number and check for overflow before return .
subtracts two number and check for underflow before return .
validates arguments for change any of the sig requirement parameters .
used later to calculate the number of confirmations need for tx .
changes owner address to a new address .
adds owner to wallet .
removes owner from wallet .
changes require sigs to change wallet parameters .
changes require sigs for major transactions .
"get list of wallet owners , will return fixed 50 until fork ."
"get list of confirmations for a tx , use gettransactionlength to get late number ."
retrieve tx confirmation count .
retrieve if transaction be successful .
get index of an owner .
get max number of wallet owners .
get number of wallet owners .
get sig requirements for administrative change .
get sig requirements for minor tx spend .
get sig requirements for major tx spend .
get major tx threshold per token .
get the number of tx 's with the same id .
called by a crowdsale contract upon creation .
function to change the price of the token .
function that be call three days before the sale to set the token and price .
fallback function to set tokens if the exchange rate function be not call .
function that calculate address cap from the number of users register .
called when an address want to purchase tokens .
functions inherit from crowdsalelib library .
called by a crowdsale contract upon creation .
called by a crowdsale contract upon creation .
called when an address want to purchase tokens .
functions inherit from crowdsalelib library .
"lock call , deposit no longer available ."
"if someone accidentally transfer tokens to this contract , the owner can return them as long a distribution have n't start ."
"update the total balance , to be call in case of subsequent sales ."
"calculates the monthly period , start after the startblocktimestamp , periodat will return 0 for all timestamps before startblocktimestamp ."
"what withdrawal period be we in ? return the period number from 0 , periods ) ."
deposit your tokens to be save .
convenience function for owner : deposit on behalf of many .
withdraw withdraw tokens to the sender withdraw can be call at most once per redemption period .
calculates the fraction of total ( one-off + monthly ) withdrawable give the current timestamp .
"business logic of _withdrawto , the code be separate this way mainly for test ."
"public face withdrawto , inject business logic with the correct model ."
"prestart , state be after lock , before start ."
force withdrawal to many address .
"start call , the save contract be now finalize , and withdrawals be now permit ."
"uninitialized state , before init be call ."
"post initialization state , mainly use to guarantee that periods and t0special have be set properly before start the withdrawal process ."
nullify functionality be intend to disable the contract .
"initialization function , should be call after contract deployment ."
lock be call by the owner to lock the save contract so that no more deposit may be make .
"starts the distribution of save , it should be call after lock ( ) , once all of the bonus tokens be send to this contract , and multimint have be call ."
"check withdrawal be live , useful for check whether the save contract be live , withdrawal enable , start ."
transfer tokens .
invoke erc20 transferfrom method .
submit a order-ring for validation and settlement .
cancel a order .
set a cutoff timestamp to invalidate all order whose timestamp be small than or equal to the new value of the address 's cutoff timestamp .
calculate each order 's fee or lrc reward .
verify input data 's basic integrity .
assmble order parameters into order struct .
calculate the hash of a ring .
validate order 's parameters be ok .
get the keccak-256 hash of order with specified parameters .
"return value attribute 2 contain the follow value in this order : cansubmit , isreserved ."
true if a ring 's hash can be submit ; false otherwise .
true if a ring 's hash be submit and still valid ; false otherwise .
"return the rate the user will be pay at , base on the amount of wei send to the contract ."
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if crowdsale event have end .
approves an user 's kyc .
disapproves an user 's kyc .
changes the kyc manager to a new address .
returns if an users have kyc approval or not .
function to mint tokens .
modifier to only allow kycmanager .
"true if the transaction can buy tokens , otherwise false ."
low level token purchase function .
can only be call by admin .
can only be call by prior to the period .
can only be call during the period when halt .
can only be call after the period .
is the fundraiser active ? .
receive a contribution for a donor musereum address .
halt the contribution period .
unhalt the contribution period .
kill this contract .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be a contract .
transfer tokens from one address to another - need for owner transfer .
data be an array of uint256s .
data be an array of uint256s .
"proxypayment ( ) return false , mean ether be not accept at the token address , only the address of fiinucrowdsale ."
"notifies the controller about a transfer , for this campaign all transfer be allow by default and no extra notifications be need ."
"notifies the controller about an approval , for this campaign all approvals be allow by default and no extra notifications be need ."
"active - true , if sale be active ."
process receive payment .
transfer eth amount from contract to owner 's address .
kill method .
withdraw method that can be use by crowdsale contract 's owner for the withdrawal fund to the owner .
killer method that can be use by owner to kill the contract and send fund to owner .
it calculate the amount of tokens to send to the investor .
check if goal be reach .
constrctor function .
buy tokens from contract by send ether .
sell amount tokens to contract .
send coin .
"internal transfer , only can be call by this contract ."
transfer withdraw ownership to another account .
purchases the sectors at give offset .
allows to transfer the sectors at give coordinate to a new owner .
sets the state of the sector by it rightful owner .
sets the owner of the sector .
transfers the owner of _value implicit sectors .
gets the current price in wei .
raises sectorupdated event .
transfers all the funs on this contract to the sender which must be withdrawowner .
transfers the give amount of fund to give beneficiary address .
to mint tokens .
is_leap_year set year to 12am on new years day of the current year and set the mine reward .
in case etherdelta decide to deploy new smartcontract .
deposit we 're not use the third argument so we comment it out to silence solidity linter warn .
register the erc20 erc223 pair with the smart contract .
low level token purchase function .
privilege transfer .
admin only can transfer from the privileged account .
low level token purchase function .
gets the balance of the specified address .
return a pseudo random number between low and upper bound give the number of previous block it should hash .
function for change rate of eth and price of token .
ico status function .
function for buy tokens to investors who pay in other cryptos .
function that calculate bonus .
function to withdraw eth from smart contract .
"internal transfer , only can be call by this contract ."
send _value tokens to _to from your account .
remove _value tokens from the system irreversibly .
"internal transfer , only can be call by this contract ."
"internal transfer , only can be call by this contract ."
send _value tokens to _to in behalf of _from .
freeze ? prevent allow target from send receive tokens .
approve and then comunicate the approve contract in a single tx .
allows anyone to transfer the change tokens once trade have start .
allows anyone to transfer the change tokens once trade have start .
calculates the amount of bonus coin the buyer get .
true if crowdsale event have end .
throw if person send be not contract owner or cs role .
throw if person send be not authorise or send nothing .
authorise an account to participate .
authorise a lot of account in one go .
ban an account from participation ( default ) .
set a new admin representative .
low level token purchase function .
transfer ownership of the token to the owner of the presale contract .
token function .
signed function .
any account can call this method to deploy a new bttstoken contract .
safe maths .
"ecrecover from a signature rather than the signature in part v , r , s ."
get checkresult message .
signed function .
function to mint tokens .
"lock call , deposit no longer available ."
"if someone accidentally transfer tokens to this contract , the owner can return them as long a distribution have n't start ."
"update the total balance , to be call in case of subsequent sales ."
"calculates the monthly period , start after the startblocktimestamp , periodat will return 0 for all timestamps before startblocktimestamp ."
"what withdrawal period be we in ? return the period number from 0 , periods ) ."
deposit your tokens to be save .
convenience function for owner : deposit on behalf of many .
withdraw withdraw tokens to the sender withdraw can be call at most once per redemption period .
calculates the fraction of total ( one-off + monthly ) withdrawable give the current timestamp .
"business logic of _withdrawto , the code be separate this way mainly for test ."
"public face withdrawto , inject business logic with the correct model ."
"prestart , state be after lock , before start ."
force withdrawal to many address .
"start call , the save contract be now finalize , and withdrawals be now permit ."
"uninitialized state , before init be call ."
"post initialization state , mainly use to guarantee that periods and t0special have be set properly before start the withdrawal process ."
nullify functionality be intend to disable the contract .
"initialization function , should be call after contract deployment ."
lock be call by the owner to lock the save contract so that no more deposit may be make .
"starts the distribution of save , it should be call after lock ( ) , once all of the bonus tokens be send to this contract , and multimint have be call ."
"check withdrawal be live , useful for check whether the save contract be live , withdrawal enable , start ."
function to mint tokens .
transfer token for a specified address .
sets the lock state of the specified address .
gets the lock state of the specified address .
transfer tokens from one address to another .
check if the goal or time limit have be reach and end the campaign .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
approve should be call when allow _spender 0 .
allows any user to withdraw his tokens .
allows any user to get his eth refund .
buy the tokens .
can disable / enable contract .
picops verification .
address have be verify .
set before sale enable .
in case delay of token sale .
in case of inaccurate sale block .
retrieve abandon tokens .
retrieve abandon tokens .
low level token purchase function .
owner can mint tokens during crowdsale withing define cap .
set new date for pre-salev ( emergency case ) .
set new date for main-sale ( emergency case ) .
set new wallets ( emergency case ) .
set new rate ( emergency case ) .
set new goal ( emergency case ) .
set token on pause .
unset token 's pause .
set token ownership .
true if pre sale event have end .
send ether to the fund collection wallet .
we want to be able to check all bonuses in already deploy contract that 's why we pass currenttime a a parameter instead of use now .
"finish crowdsale , take totalsupply a 90 and mint 10 more to specify owner 's wallet then stop mint forever ."
modifier cod by dondi .
"send ether to the fund collection wallets override to create custom fund forward mechanisms take from openzeppelin , add 11 / 7 / 2017 10am ."
distribute the tokens leave after the crowdsale to the pre-agreed account .
let the caller withdraw all ether allocate to it during the sale period .
closes crowdsale and change it state to finalized .
true if crowdsale event have end .
opens smart contract for refund .
requests refund .
burns specify investor tokens .
burns specify investor tokens .
gets current contract balance .
moves all fund from contract to owner 's wallet .
overriding function to create handeliontoken .
preallocate tokens to handelion platform owners .
forward handelion tokens to purchaset .
allow token transfer .
transfer token for a specified address .
transfer tokens from one address to another .
get total supply of issued coin .
get balance of specific address .
send coin .
allow another contract to spend some tokens in your behalf .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
get the amount of remain tokens to spend .
stops all token transfer in case of emergency .
owner can add new restrict address or remove one .
calculates number of tokens rmc for buy with custom price of token .
get the block number state .
a function use safemath to work with the new function .
token distribution initial function for the one in the exchange to be do only the owner can run this function .
function to run when the transaction have be veified .
change exchange rate update price everyday .
begin of external sales .
public function .
public constant function .
private function .
sets support assets .
updates the model portfolio .
public constant function .
private mutable function .
private constant function .
allow anytime withdrawals .
check whether the address be register for token sale or not .
set new admin a admin of kyc contract .
register the address for token sale .
register the address for token sale .
unregister the registered address .
unregister the registered address .
this function be call when user buy tokens .
this function be call when crowdsale be successfully finalize .
this function be call when crowdsale be unsuccessfully finalize and refund be require .
this function allow for user to refund ether .
transfers tokens hold by timelock to beneficiary .
transfers tokens hold by timelock to beneficiary .
checks whether minethercap be reach .
checks whether maxethercap be reach .
rate baserate * ( 100 + bonus ) / 100 .
"should be call after crowdsale end , to do ."
"end token mint on finalization , mint tokens for dev team and reserve wallets ."
refund a lot of investors at a time check onlyowner .
"if crowdsale be unsuccessful , investors can claim refund here ."
get investors deposit .
delivery token for buyer .
transfers the balance from multisig wallet to an account .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
create new coin .
"functions with this modifier check the validity of range a , b 0 , buyers . length-1 ."
buy function allow to buy ether .
set new icopercent .
ico volume bonus calculation .
adds tokens to address .
"initialises address of founder , bountyowner ."
sets new type .
sets new stage .
sets new owner .
buy quantity of tokens depend on the amount of send ethers .
burn tokens from account .
send tokens to founder .
date bonus calculation .
send tokens to other wallets .
burns tokens from address .
create the token to be sell .
low level token purchase function .
set the upgrade master .
set the upgrade agent ( once only ) thus enable the upgrade .
upgrade tokens to the new revision .
modifier to make a function callable only when the upgrade be enable .
modifier to make a function callable only when the upgrade be impossible .
throws if call by any account other than the upgrademaster .
allow the specified drawer to withdraw the specify value from the contract balance .
withdraw the allow value from the contract balance .
set the address of the holder of bounty tokens .
mint tokens and add them to the balance of the message . sender .
send the value ( ethers ) that the contract hold to the owner address .
transfer tokens to the specify address .
transfer tokens from one address to another .
approve the specified address to spend the specified amount of tokens on behalf of the msg . sender .
increase the approval for the passed address to spend tokens on behalf of the msg . sender .
decrease the approval for the passed address to spend tokens on behalf of the msg . sender .
withdraw the allow value ( ethers ) from the contract balance .
set the pausemaster ( callable by the owner only ) .
throws if call when ico be active .
throws if call when ico be complete .
throws if call by the owner before ico be complete .
throws if call before returnallowedtime .
"start the pause ( by the pausemaster , once only ) ."
modifier to make a function callable only when the contract be not pause .
throws if call by any account other than the pausemaster .
"call by the owner to pause , return to paused state ."
this function be copy-paste of the generatetokens of the original minimi contract except it use maygenerate modifier ( original use onlycontroller ) this be because we do n't want the sale campaign contract to be the controller .
overwrite the original function .
permanently disable generation of new tokens .
to eliminate tokens and adjust the price of the fee tokens .
to send tokens to another user .
allows any user to withdraw his tokens .
buy the tokens .
create the token to be sell .
functions reserve for the owner .
functions accessible to everyone .
transfer token for a specified address .
burns a specific amount of tokens .
for mint tokens to usd investor .
terminate contract and refund to owner .
"function to get the price of the token return how many token units a buyer get per wei , need to be divide by 10 ."
function to stop mint new tokens .
function to mint tokens .
function to burn tokens .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
this function be prototyped in recoverable contract .
this be modifier ( a special function ) which will execute before the function execution on which it apply .
here be the example of modifier this function code replace _ ; statement of modifier .
what be the balance of a particular account ? .
function for transer the coin from one address to another .
function for transer the coin from one address to another .
low level token purchase function .
true if crowdsale event have end .
allow fee to be send in order to verify identity on picops .
allows any user to withdraw his tokens .
allows any user to get his eth refund .
buy the tokens .
set before sale enable .
address have be verify .
set before sale enable .
fix for the erc20 short address attack .
this method will change old sponsee address with a new one .
transfer token for a specified address .
"function to get the price of the token return how many token units a buyer get per wei , need to be divide by 10 ."
"if function have this modifier , only owner can execute this function ."
change main owner address and transer tokens to new owner .
chech trade balance of account .
transfer tokens from your account to other account .
transfer tokens from account ( _from ) to another account ( _to ) .
transfer tokens from investbalance to balncec for trade .
transfer toknes from balncec to investbalance .
"if function have this modifier , only owner can execute this function ."
preallocate tokens for the early investors .
private token sale - 10000000000000 ; / / 10000000 * 1000000 ( 6 decimal ) .
allows the owner to enable the trade .
token distribution initial function for the one in the exchange to be do only the owner can run this function .
function to run when the transaction have be veified .
change exchange rate .
blacklist the users which be fraudulent from get any tokens to do also refund just in case .
burns a specific amount of tokens .
"function to get the price of the token return how many token units a buyer get per wei , need to be divide by 10 ."
low level token purchase function .
"finalize the crowdsale , should be call after the refund period ."
dopayment ( ) be an internal function that send the ether that this contract receive to the vault and create tokens in the address of the _owner assume the tokensale be still accept fund .
approve and then communicate the approve contract in a single tx .
a modifier that can be apply to function to only allow the owner to execute them .
- - - public utility function - - - - - - public utility function - - - - - - public utility function - - - .
- - - owner function - - - - - - owner function - - - - - - owner function - - - .
- - - internal function - - - - - - internal function - - - - - - internal function - - - .
creates a new clone token with the initial distribution be this token at _snapshotblock .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
update the dapp by create a new token with new functionalities the msg . sender .
base token started erc 20 standards .
end base token .
modified by amit a on 18th august to stop the tarnsaction if ico date be over .
to check if fund be give to the founder or the beneficiaries .
"finish the ico and supply 40 share for the contract owner , be require the ico state of the contract ."
public mutable function .
transfer or sell tokens .
transfer tokens from one address to another or sell them if _to be this contract or zero address .
fuction call when somebody be buy tokens .
fuction call when somebody be sell his tokens .
set fee apply when buy tokens .
set fee apply when sell tokens .
set minimal amount of ether which can be use to buy tokens .
set minimal amount of ether which can be use to buy tokens .
collect ether receive for token purshases .
start distribution phase .
distribute tokens to buyers .
distribute ether to sellers .
verify that the gas price be low than maxgasprice .
updates max gas price for crowdsale transactions .
"closes crowdsale , finish mint ( allow token transfer ) , transfer token ownership to the owner ."
claim collect ether without close crowdsale .
mint a certain number of tokens that be lock up .
finalise any minting operations .
causes tokens to be liquid 1 week after the tokensale be complete .
unlock any now freeable tokens that be lock up for team and reserve account .
methods override some openzeppelin function to prevent call them when token be not liquid .
function for set presale buy limit for list of account .
override to track sell tokens .
overrides crowdsale createtokencontract not to create new token .
overrides cappedcrowdsale validpurchase to check if not pause .
for refund only .
mint new tokens .
calculates the amount of bonus coin the buyer get .
low level token purchase function .
start the auction .
finalize the auction - set the final xch token price and change the auction stage after no bid be allow anymore .
canceled the auction .
send msg . value .
claim auction tokens for msg . sender .
claim auction tokens for receiveraddress after the auction have end .
withdraw eth for msg . sender .
withdraw eth for receiveraddress after the auction have cancel .
"get the xch price in wei during the auction , at the time of call this function ."
"get the miss fund need to end the auction , calculate at the current xch price in wei ."
calculates the token price ( wei / xch ) at the current timestamp during the auction ; elapse time 0 before auction start .
allows msg . sender .
set _tokenaddress a the token address to be use in the auction .
send _value token to _to .
transfer tokens from one address to another .
check if a pair be list for trade .
a debug function .
get current conversion rate .
do a trade .
can be call only by owner .
can be call only by owner .
ether could also be deposit without call this function .
tokens could also be deposit without call this function .
can only be call by owner .
use token address eth_token_address for ether .
register the address for token sale .
register the address for token sale .
unregister the registered address .
unregister the registered address .
checks whether maxethercap be reach .
trasfers ownership from the owner who execute the function to another give address .
allows investors to buy aco tokens .
calculates and return the bonus percentage base on how early an investment be make .
returns the current rate 1 eth equate to include the bonus amount .
checks whether an incoming transaction from the buytokens function be valid or not .
issues a refund to a give address .
this function can only be call by the onwers of the ico contract .
generates newly mint aco tokens and send them to a give address .
terminates the minting period permanently .
transfers aco tokens from the sender 's account to another give account .
returns the minimum goal of the ico .
returns the maximum amount of fund the ico can receive .
returns the time that the ico duration will end .
returns the amount of eth a give address have invest .
returns true if the duration of the ico be over .
returns true if the ico be a success .
returns the amount of eth raise in wei .
transfers tokens from the account of the owner by an approved spender .
allows another account to spend a give amount of tokens on behalf of the owner 's account .
"generates new aco tokens during the ico , after which the mint period will terminate permenantly ."
terminates the minting period permenantly .
"returns true if the mint period have end , false otherwhise ."
functions with this modifier will only execute if the the function be call by the owners of the contract .
sub function assert that b be less than or equal to a .
add function avoid overflow .
transfer function make it possible for users to transfer their hire tokens to another .
balanceof function return the total balance of the queried address .
"transferfrom function allow users to spend eth on another 's behalf , give that the _owner have allow them to ."
approve function allow users to allow others to spend a specified amount tokens on their behalf .
allowance function return the total allowance from one address to another .
return number of reserve .
use token address eth_token_address for ether .
use token address eth_token_address for ether .
use token address eth_token_address for ether .
use token address eth_token_address for ether .
use token address eth_token_address for ether .
use token address eth_token_address for ether .
use token address eth_token_address for ether .
can be call only by admin .
can be call only by admin .
can be call only by admin .
should be call off chain with as much gas a need .
allow fee to be send in order to verify identity on picops .
address have be verify .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
buy tokens from contract by send ether .
sell amount tokens to contract * 10 * * ( decimals ) ) .
"the distribution function , accumulate tokens on a variable dividend among members ."
the function of request balance of the smart contract for wei and tokens .
pile robbery function of pantry owner contract .
"the function of create and credit tokens for retail customers , participants of the bonus program ."
pile robbery function of pantry owner contract .
internal executable function for create new tokens .
true if investors can buy with the value provide .
"address public mainnetpresalecontractaddress 0x6a5b0fa01590ec2f03682023192c95a2ebd8e3b9 ; address public mainnetpresalebuyers 0x00010bd8606a84b1bbad0f2c70b13cce44a46910 , 0x00a109ab01028056768469aa11328c8f9d3db45b , 0x01e2f9ba53b6cb91e7f158090d24ebbcadf0c564 , 0x0347297c8c1f278c739ff8d76550a3386cf88b60 , 0x09b467499cfa5b094aa96eea80fa7095a2508731 , 0x0cea3e5c3663f8634b623327a635ca8c2e0ca276 , 0x0f659b838270390aaa6bf16e0b9d01ad15d43f00 , 0x188cac349c6a156476711a2357779706cfed403f , 0x18ea39b27b1dd0e53a46a90f544a3ee6e16f94c4 , 0x1b3b36b36a64aaef71354ef655bffd577ba0276c , 0x1e74a46e968bc0472d09533bf93da27a6c21b079 , 0x20abf65634219512c6c98a64614c43220ca2085b , 0x2195fe76d358acd2dc7e804f60bb5f4d53d9f907 , 0x23cdcdfcf58a593ed16cf8ff5516a37fee1d48d8 , 0x2471ceb7520b926ba02d876cd032fd020237e413 , 0x249f600fd158ccd81a418db93a5d3d1b3c420b13 , 0x267be1c1d684f78cb4f6a176c4911b741e4ffdc0 , 0x2c02d03f53489bd2774f9e360ea393a6c6329bdb , 0x330c63a5b737b5542be108a74b3fef6272619585 , 0x358c39cc0aba5fcc0689d840024c4caeb06f85c0 , 0x36ca1322f23209703d7bfc4663d2267b07a4cbe8 , 0x3833f8dbdbd6bdcb6a883ff209b869148965b364 , 0x387fa411fae6769e4fcedcba838d22ea2dd9ffed , 0x3d6f29c67f571cad827bb512c7949b0a1c0b9899 , 0x3eb0aefabec429149dd0d4ae560238fb0b68976e , 0x3f04b7101708b7e4a2c693270254ef8a32977b36 , 0x41e8374286aacb2b85189cc74b4d1c0362d4fc80 , 0x4644c88b98dd5dda0cb6040366df2b4f37e6b50f , 0x4a83cee7d83c28891d851910f7a240a4c2c4d9eb , 0x4b0250098cf3f62f4595be93d8c0afcfe0bd63f1 , 0x4f813b5cf2750a59a45f3c5e50397d6ac02b64f9 , 0x5030baf58fab3c95799edc9e6cd08abfde5f1e5a , 0x51072c4f9bca88bc9b3b2327fb44b1272ba115c0 , 0x532cbc68f66bb7482086a15972fa20ee3aca21c4 , 0x53564581a45a5520243083ce050f76ef933a1e66 , 0x55c86e80fbe2db0d81ff856110556b1df1713899 , 0x598f65c344b3644a9b6bd23a99860cd8d0c3e20a , 0x5f2bdf26f6528ce05aac77d7fa52bac7a836ef66 , 0x63e0d8753480ffcc6ce65ec46f9efb06778e819c , 0x66294a00e801db524b215952bf60e85e1a945895 , 0x6771bb70d84bedeb60166df47ebb9056169d7a0d , 0x67adfab056edc1a03602139b8ac36a06fc62f1bb , 0x72df894c334a0b8a58b7d220b72d29a50521d9a4 , 0x72f084f5ed9384194870b855c22b0065961305b4 , 0x75360cbe8c7cb8174b1b623a6d9aacf952c117e3 , 0x75e7f640bf6968b6f32c47a3cd82c3c2c9dcae68 , 0x76d3451bec571316cfe096b1ab64681286b078d5 , 0x783bd8a6077d02eeecbfc142929d71ff4aa2762d , 0x7c01113c3c382d9c1c39e3daa9262e27787a02ee , 0x7ed1e469fcb3ee19c0366d829e291451be638e59 , 0x7fec3afb1075d3ee2ca6bd685a9895290ad917df , 0x83e09aee382c74ac0c3094d4a99a45d607590c28 , 0x86a392b40c6b33fdbb142eae4c40ff05d3daa82f , 0x87b10daf0522e54cd4cdd3029eac0fdd306f644e , 0x87b325cf000e426b64518d50bf3fb11c28eee89e , 0x8c46dc82995d3bad337418df9a111b289fd50abc , 0x93fb7bea36d788bcb87ba92094b72c6c43586bdb , 0x952aa202f9656eca051ef36ce66925a0d0e34723 , 0x9903322124677c2aaf289eec5117bfa8aeac3f42 , 0x993841ab5028ee74245d350edd3c89405d4212ea , 0x9ac0233a97b0005462f7d65943b8cf6d7d074280 , 0x9d8d17d134be89c832559e1653f8e15d6b8bb05a , 0xa102d39f4aa67f458e9536b04da9b80847c04a57 , 0xa163d40de9dc681d7850ed24564d1805414ac468 , 0xa263327200a9648c063ef1d9f0746a50b23caa56 , 0xaefb5464fadc9293700a9c4bc4fbefb4d768931d , 0xaf302aa751058797c6ab5249cb83547a6357763a , 0xb37e62dce9daee5a2de41e4475c8262f5bb9edae , 0xb93b6e8816091ceb78cca35f7022b477e44c490a , 0xb94142f522bfe77b1075527d8e6a11cbcd901e26 , 0xbb4e6fdfbc01b1f2b52272d998fcaa274d7f1651 , 0xbdf9b5bda53c709cce44a073067b3e26afe1d816 , 0xcd73fd5deec3670926d0cd29b634f6c2938b1df6 , 0xcf1996c3b7f9ff891ebf94067b6d0edfa1b181f0 , 0xd1f670779246349931ba76ffdf8c90de70946cac , 0xd2e3c4856d25a71fa777769b5dc9596890568026 , 0xd4cb7fd8e2b214596c1cbd4ba0f1c701fbf2bcb8 , 0xd5742c05e6ae9ea99af45a7c7d1517ce6c042d25 , 0xe41ce247756d757e3060ec361c201be019bd54f6 , 0xe702afb99a46f9a6e15d3565823867b8b40c499c , 0xec30eacdb39705ec281e10891d605cb0be41e094 , 0xee55181386d9b743064c570601014df163d5554c , 0xee8ce6f0ebef4231068db3705fadff5ef9a1f45e , 0xef58321032cf693fa7e39f31e45cbc32f2092cb3 , 0xef9a1b20384989f79f73fd5a261e270d6d1888d3 , 0xf656d04f13b7bdf09410b8b5cb75bbe3ac5a37e7 , 0xf6dc43ba328affec2afebda472ac6977200da957 , 0xf6edf5dcdfba55f3cecee2a430bb6c2d30a4a1a8 , 0xf8ac3740622308414a41619af0648328f69b6fc0 , 0xf8f337c518b4979f12348c279696a5b7754f662e , 0xfbb1b73c4f0bda4f67dca266ce6ef42f520fbb98 , 0xfc7d5e499f869d8ee0b17c61b0f6f83bbac2fbc2 , 0xffca1e2e0e50faf10cd4a8e1d5bd2f5db57a0771 ; address public testnetpresalecontractaddress 0x6fb8a63800a00141052ea524f415398188879086 ; address public testnetpresalebuyers 0xf6c6fac8b78e3196eced61df42a0d37cfddbf3f8 ; ."
burns a specific amount of tokens .
low level token purchase function .
true if the transaction can buy tokens .
allows anyone to transfer the tokens .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
function to mint tokens .
allows anyone to transfer the tokens .
to transfer tokens to a user address .
to transfer tokens to a contract address .
function to check the amount of tokens that an owner allow to a spender .
to check if an address be a contract or not .
only allow token transfer after the ico .
only the crowdsale .
to set the address of the crowdsale in order to distribute the tokens .
to distribute the presale and ico tokens and increase the total supply accordingly .
to convert the old tokens to the new version manually .
override the function to not allow token transfer until the end of the ico .
override the function to not allow token transfer until the end of the ico .
override the function to not allow token transfer until the end of the ico .
override the function to not allow token transfer until the end of the ico .
override the function to not allow token transfer until the end of the ico .
override the function to not allow token transfer until the end of the ico .
to make token transfer to a user or a contract .
to make token transfer to a user or a contract with additional data .
to make token transfer from the allowance of another user .
increace total supply .
user be buy svc .
"user be sell u svc , we be sell eth to the user ."
_freeze internal .
transfer tokens .
set allowance for other address and notify .
state transition .
create the token to be sell .
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
oraclize update .
gets the balance of the specified address .
transfer token for a specified address .
transfer token for a specified address .
"internal transfer , only can be call by this contract ."
allows any user to withdraw his tokens .
buy the tokens .
buy the tokens .
"internal transfer , only can be call by this contract ."
set allowance for other address .
set allowance for other address and notify .
"internal transfer , only can be call by this contract ."
destroy tokens from other account .
transfer token for a specified address .
returns token 's name .
"destroy tokens from owener account , can be run only by owner ."
"destroy tokens from other account , can be run only by owner ."
"create mintedamount tokens and send it to owner , can be run only by owner ."
"freeze or unfreeze account , can be run only by owner ."
returns token 's symbol .
returns token 's total supply .
returns balance of the give address .
returns allowance for the give owner and spender .
check if the address be frozen .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
set allowance for other address .
notice transfer _value h . n .
notice finalize crowdfunding clossing fund options .
function be mock for test .
called when _owner send ether to the minime token contract .
notifies the controller about a token transfer allow the controller to react if desire .
notifies the controller about an approval allow the controller to react if desire .
"destroy tokens from owener account , can be run only by owner ."
"destroy tokens from other account , can be run only by owner ."
"create mintedamount tokens and send it to owner , can be run only by owner ."
"internal transfer , only can be call by this contract ."
set allowance for other address .
encode transfer .
perform multiple token transfer from message sender 's address .
buy tokens from contract by send ether .
public management - set address of base and reward tokens .
public order view - get full detail of an order .
public order view - get mutable detail of an order .
public order view - enumerate all recent order + all open order for one client .
internal price calculation - turn packed price into a friendly unpacked price .
internal price calculation - be a packed price on the buy side ? .
internal price calculation - turn a packed buy price into a packed sell price .
internal price calculation - compute amount in counter currency that would be obtain by sell baseamount at the give unpacked price ( if no fee ) .
internal price calculation - compute amount in counter currency that would be obtain by sell baseamount at the give packed price ( if no fee ) .
public order placement - create order and try to match it and / or add it to the book .
public order placement - cancel order .
public management - change fee collector .
public order placement - continue place an order in 'needsgas ' state .
internal order placement - remove a still-open order from the book .
internal order placement - credit fund receive when take liquidity from book .
internal order placement - process a create and sanity check order .
internal order placement - match the give order against the book .
internal order placement .
internal order placement .
internal order placement .
internal order placement .
internal order placement .
"public info view - what be be trade here , what be the limit ? ."
internal order placement .
public book view .
internal book view .
"public funds view - get balance hold by contract on behalf of the client , or balance approve for deposit but not yet claim by the contract ."
public funds manipulation - deposit previously-approved base tokens .
public funds manipulation - withdraw base tokens ( a a transfer ) .
public funds manipulation - deposit counter currency ( eth ) .
public funds manipulation - withdraw counter currency ( eth ) .
public funds manipulation - deposit previously-approved reward tokens .
public funds manipulation - withdraw base tokens ( a a transfer ) .
send coin .
calc how much token you can buy at current time .
transfers sender 's tokens to a give address .
allows allow third party to transfer tokens from one address to another .
sets approve amount of tokens for spender .
approve and then communicate the approve contract in a single tx .
allows the current owner to transfer control of the contract to a newowner .
"allows the owner to transfer tokens whenever , but others to only transfer after owner say so ."
allow bonus tokens to be withdraw .
function for change rate of eth and price of token .
ico status function .
function for buy tokens to investors who pay in other cryptos .
function for buy tokens for presale investors .
internal function for buy tokens .
function to withdraw eth from smart contract .
migrate _value of tokens to the new token contract .
"internal transfer , only can be call by this contract ."
destroy tokens .
destroy tokens from other account .
create mintedamount tokens and send it to owner .
"internal transfer , only can be call by this contract ."
destroy tokens from other account .
create mintedamount tokens and send it to owner .
helper function .
view current ether balance of the give address .
buy tokens for ether .
token holders withdraw ether in exchange of their tokens .
owner 's interface .
set token selling price in wei .
start sell tokens .
stop sell tokens .
transfer ether from the contract to the owner .
set the trusted sender of tokens .
"add bonus to the amount , for example 200 + 15 bonus 230 ."
transfer tokens to an address .
grant bounty tokens to an address .
refund investment by transfer all tokens back to the contract and send ether to the investor .
set token buyback price in wei .
enable buyback .
pause buyback .
destroy the contract and send all ether to the owner .
convert amount in wei to tokens .
convert amount in tokens to wei .
public interface .
view current token balance of the contract .
view current token balance of the give address .
view total amount of currently distribute tokens .
view current ether balance of the contract .
burns a specific amount of tokens .
create the token to be sell .
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
true if crowdsale event have end .
override transfer token for a specified address to add validdestination .
override transferfrom token for a specified address to add validdestination .
burn tokens .
burn tokens on the behalf of someone .
throws if call by any account other than the owner or admin .
allows the current owner to change admin of the contract .
get balance of a specific address .
a contract or user attempt to get the coin .
allow another contract or user to spend some tokens in your behalf .
low level token purchase function .
return true if the transaction can buy tokens .
allow to add and exclude address from earlyparticipantwhitelist for owner .
investors can claim refund .
calculate the current price for buy in amount .
transfer token for a specified address .
transfer tokens from one address to another .
function to mint tokens .
function to stop mint new tokens .
allow or disallow refund .
transfer eth amount from contract to owner 's address .
"true if ico be close manually or stage be inactive , otherwise false ."
kill method .
stage - active stage .
process receive payment .
change pre-sale end date .
change general sale start date .
change general sale end date .
stop ico manually .
reopen ico .
close main sale and destroy unsold tokens .
close pre ico and transfer all unsold tokens to main sale wallet .
low level token purchase function .
low level token purchase function .
simple single-sig function modifier .
revokes a prior confirmation of the give operation .
checks if owner confirm give operation .
set the controller .
check which prevent short address attack .
perform only allow state transition .
record an investment .
"owners : send value of ether to address to , can be call if crowdsale succeed ."
"withdraw accumulate balance , call by payee in case crowdsale fail ."
a boolean that indicate if the operation be successful .
replace an owner _from with another _to .
sets the controller .
ability for controller to step down .
a boolean that indicate if the operation be successful .
a boolean that indicate if the operation be successful .
a boolean that indicate if the operation be successful .
sets the controller .
internal function .
allows token transfer .
crowdsale participation .
add an owner .
payment process .
say if crowdsale time bound must be check .
whether to apply hard cap check logic via getmaximumfunds ( ) method .
minimal amount of investment .
amount of tokens mint ( not equal to totalsupply ( ) in case token be reuse ! ) .
process and forward investment .
total investments amount store use storeinvestment ( ) .
call in case crowdsale succeed .
remove an owner .
call in case crowdsale fail .
automatic check for unaccounted withdrawals .
additional check of contribute process since we have state .
call in case crowdsale succeed .
call in case crowdsale fail .
set exchange rate before start .
set exchange rate before start .
withdraw payments by investor on fail .
additional check of initial settings set .
change the required number of owner signatures .
all users except deployer must check time before contribute .
for min investment check .
get collect fund ( internally from fundsregistry ) .
minimum amount of fund to consider crowdsale a successful .
maximum investments to be accept during crowdsale .
start time of the crowdsale .
end time of the crowdsale .
formula for calculate tokens from contribute ether .
additional on-success action .
returns attach token .
gets owners .
record an investment .
"owners : send value of ether to address to , can be call if crowdsale succeed ."
"withdraw accumulate balance , call by payee in case crowdsale fail ."
"call by the owner to unpause , return to normal state ."
"call by the owner to unpause , return to normal state ."
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
allows the current owner to transfer control of the contract to a newowner .
allows the current owner to transfer escrowship of the contract to a escrow account .
"allows the current owner to set the new total supply , to be use iff not all tokens sell during crowdsale ."
allows the current owner to transfer control of the contract to a newowner .
allows the current owner to withdraw ether fund after ico end .
allows owner to change the exchange rate of tokens ( default 0 . 005 ether ) .
allows owner to change the refund exchange rate of tokens ( default 0 . 005 ether ) .
function that sell available tokens .
modifier to allow action only when the refund is not pause .
modifier to allow action only when the refund is pause .
modifier to allow action only when the crowdsale have end .
"call by the owner to pause , trigger stop state ."
"call by the owner to pause , trigger stop state ."
limit token transfer until the crowdsale be over .
set the contract that can call release and make the token transferable .
owner can allow a particular address ( a crowdsale contract ) to transfer tokens despite the lock up period .
multiplies a time b .
divides a by b .
subtracts a from b .
adds a to b .
transfers sender 's tokens to a give address .
allows allowance third party to transfer tokens from one address to another .
sets approve amount of tokens for spender .
approve should be call when allowance _spender 0 .
returns number of allowance tokens for give address .
returns number of tokens own by give address .
public function .
starts the presale .
sets the maximum and minimum raise amount prior to the main sale .
starts the main sale .
"starts the trade stage , allow buyer to claim their tokens ."
allows buyer to be refund their eth if the minimum presale raise amount have n't be meet .
allows buyers to claim the tokens they 've purchase .
allocated tokens to the presale buyer at a rate base on the total receive .
allocated tokens to the presale buyer at a rate base on the total receive .
calculates the amount of presale tokens to allocate .
ends the presale .
ends the main sale trigger a refund if the minimum sale raise have no be meet .
set policy do we need to have server-side customer ids for the investments .
set policy if all investors must be clear on the server side first .
"invest to tokens , recognize the payer and clear his address ."
"invest to tokens , recognize the payer ."
allow the token holder to upgrade some of their tokens to a new contract .
set an upgrade agent that handle .
change the upgrade master .
allows owner to execute a confirmed transaction .
token related methods .
get the total amount of tokens .
get the amount of tokens from a particular user .
transfer tokens .
how many tokens be allow to send .
send tokens from the recipient to the recipient .
allow to send tokens between recipients .
set contract owner .
the contract be close .
"updates internal balance structures , only callable by the token contract ."
sender start the challenge period ; this can only happen once .
deletes the channel and settle by transfer the balance to the receiver and the rest of the deposit back to the sender .
internal function for get an address from tokenfallback data bytes .
internal function for get the block number from tokenfallback data bytes .
check if a contract exist .
returns the sender address extract from the balance proof .
"opens a new channel or top up an exist one , compatibility with erc 223 ; msg . sender ."
"creates a new channel between a sender and a receiver and transfer the sender 's token deposit to this contract , compatibility with erc20 tokens ."
"function call when any of the party want to close the channel and settle ; receiver need a balance proof to immediately settle , sender trigger a challenge period ."
"function call by the sender , when he have a close signature from the receiver ; channel be close immediately ."
function for get information about a channel .
"function call by the sender after the challenge period have end , in case the receiver have not close the channel ."
"creates a new channel between a sender and a receiver , only callable by the token contract ."
function that indicate whether pre ico be active or not .
low-level purchase function .
set start time of pre ico .
sets end time of pre ico .
function to mint tokens .
function to burn tokens .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
relays meta transactions .
gets an address encode a the first argument in transaction data .
returns the local nonce of an account .
adds a number of address to a specific whitelist .
removes a number of address from a specific whitelist .
internal logic to update a whitelist .
function to stop sale for an emergency .
function to restart stopped sale .
valid only during sale or before sale if the sender be whitelisted .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
change whitelist status for a specific address .
get the rate for a acf token 1 acf 0 . 05 eth - 20 acf 1 eth .
get the amount of unsold tokens allocate to this contract ; .
allow the token to be freely tradeable .
modifier to determine if the crowdsale have be initialize .
modifier to determine if the crowdsale be active .
start the zilla crowdsale .
"finalize the zilla crowdsale , unsold tokens be move to the vault account ."
allow owner to increase the end date of the crowdsale as long a the crowdsale be still run .
allow owner to change the multisig wallet .
allow owner to add to the whitelist .
allow owner to remove from the whitelist .
apply our fixed buy rate and verify we be not sell out .
apply our fixed presale rate and verify we be not sell out .
transfer tokens to the recipient and update our token availability .
allows the owner to grant presale participants their tokens .
allows anyone to create tokens by deposit ether .
allows owner to transfer tokens to any address .
allows the owner to grant presale participants their tokens .
modifier to determine if the token be tradeable .
allow the token to be freely tradeable .
creazione dei token .
ritorna il numero di token che un delegato può ancora inviare .
brucia tutti i token rimanenti .
brucia la quantita ' _value di token .
ritorna il numero totale di token .
ritorna il bilancio dell'utente di un indirizzo .
abilita l'acquisto di token .
disabilita l'acquisto di token .
abilita la distribuzione di bonus .
disabilita la distribuzione di bonus .
per inviare i token .
invio dei token con delega .
delegare qualcuno all'invio di token .
extra function .
low level token purchase function .
pauses the token allocation process .
allow token transfer .
"issues tokens for a particular address a for a contribution of size _contribution , then issue bonuses in proportion ."
issues tokens for the off-chain contributors by accept call from the trusted address .
issues the reward for founder and early contributors .
"set the capp / usd rate for phase two , and then start the second phase of token allocation ."
allows to freeze all token transfer in the future .
"advance the bonus phase to next tier when appropriate , do nothing otherwise ."
unpauses the token allocation process .
allows the manager to change backends .
erc20 function .
mint some tokens and assign them to an address .
disable mint .
enable mint .
disable token transfer .
transfer balance to owner .
define game rule .
buy ticket start game init game by condition .
change the redemption wallet address .
issue tokens for eth receive during private sale .
freeze tokens .
burn tokens hold by owner .
private function .
issue tokens .
erc20 function .
override transferfrom .
return the number of connector tokens define .
"return the number of convertible tokens support by the contract note that the number of convertible tokens be the number of connector token , plus 1 ( that represent the smart token ) ."
"give a convertible token index , return it contract address ."
update the current conversion fee can only be call by the manager .
"return the connector 's virtual balance if one be define , otherwise return the actual balance ."
return the expected return for buy the token for a connector token .
return the expected return for sell the token for one of it connector tokens .
buy the token by deposit one of it connector tokens .
sell the token by withdraw from one of it connector tokens .
"utility , return the expected return for sell the token for one of it connector tokens , give a total supply override ."
"helper , dispatch the conversion event ."
setter for the whitelist contract .
white list contract address .
before crowdsale start owner can calibrate time of crowdsale stag .
getter to calculate how much user can contribute .
return if there be overflow of contributed eth .
recovers erc20 tokens other than eth that be send to this address .
owner can batch return contributors contributions ( eth ) .
if there be any issue with refund owner can withdraw eth at the end for manual recovery .
level for the account .
increace total supply .
set allowance for other address .
set allowance for other address and notify .
destroy tokens .
destroy tokens from other ccount .
user be buy etd .
"user be sell u etd , we be sell eth to the user ."
transfer tokens .
reward tokens - tokens go to .
transfer lock reward .
unlocked locked reward by merchant .
transfer tokens from other address .
true if bountyfunds function have end .
true if rewardsfunds function have end .
throws if call by any account other than the owner .
burns a specific amount of tokens .
low level token purchase function .
true if crowdsale event have end .
transfer unsold tokens back to the wallet .
create the token to be sell .
determine the rate of the token w . r . t .
low level token purchase function .
claiming hodl reward for an address .
claimhodlrewardfor ( ) for multiple address .
setting 3 - 6 - 9 months total stake hodl value if time be come .
only before hodl be start .
adding hodler stake to an account .
setting hodler stake of an account .
setting hodler start period .
invalidates hodler account .
claiming hodl reward for msg . sender .
queries the balance of _owner at a specific _blocknumber .
total amount of tokens at a specific _blocknumber .
creates a new clone token with the initial distribution be this token at _snapshotblock .
getvalueat retrieve the number of tokens at a give block number .
internal function to determine if an address be a contract .
this function make it easy to get the total number of tokens .
true if crowdsale have start .
transfers vest tokens to beneficiary .
allows the owner to revoke the vest .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
only the crowdsale can call it .
only the crowdsale can call it .
override hasnotokens extracttokens to make it possible to extract any tokens after migration or before that any tokens except etheal .
set crowdsale address and transfer heal tokens from ethealcontroller 's sale address .
is there a not end crowdsale ? .
grant vest token to an address .
transfer tokens to a grant until it be start .
revoking grant .
returns the token grant count .
contract can burn it own or it sale tokens .
"replace controller when it be not yet replace , only multisig can do it ."
"set new multisig wallet , to make it upgradable ."
"set the token , if no hodler provide then create a hodler reward contract ."
proxy call for set hodler start time .
proxy call for add hodler stake .
proxy call for set hodler stake .
no eth payment to the token contract .
"before transfer be enable for everyone , only this and the crowdsale contract be allow to distribute heal ."
retrieve mistakenly send tokens ( other than the etheal token ) from the token contract .
implementation of low level token purchase function .
true if the transaction can buy tokens .
function to mint tokens .
over-ridden low level token purchase function so that we can control the token-per - wei exchange rate dynamically .
allows the current owner to transfer control of the contract to a newowner .
true if crowdsale event have end .
internal function .
can be override to add finalization logic .
cap mint so that totalsupply total_tokens .
internal function .
withdrawal function for erc20 tokens .
withdraw from share expense allocation .
converts from share to eth .
used for test .
using from so : https : / / stackoverflow . com / question / 42738640 / division-in - ethereum-solidity / 42739843 42739843 .
series of getter function for contract data .
function to add members to the contract .
only admins and owners can change the contract name .
shared expense allocation allow admins to withdraw an amount to be use for shared expense .
set share amount explicitly by calculate difference then add or remove accordingly .
increment the number of share for a member .
decrement the number of share for a member .
function for a member to withdraw ether from the contract proportional to the amount of share they have .
function to allow owner to transfer out accidentally sent erc20 tokens .
erc 20 standard token interface transfer function .
only owner can kill .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
approve should be call when allow _spender 0 .
allows the current owner to transfer control of the contract to a newowner .
proxy transfer smart token .
allocate tokens to the users .
add and delete certificator .
add and delete cource certificate .
distribute token by batch .
check if all contributor 's token be successfully distribute .
process transaction .
withdraw alc .
distribute token .
plenum return a number of players for a room specify by a size and a bid .
"roomtypeget return two value : room type a a bit-flag value ; size / bid : 0 for unused pair ; 1 for 4 / 0 . 08 , ."
called by a crowdsale contract upon creation .
gets the number of tokens sell thus far .
called by the standard token upon creation .
permanently burn tokens .
multiplies two number and check for overflow before return .
divides two number but check for 0 in the divisor first .
adds two number and check for overflow before return .
subtracts two number and check for underflow before return .
transfer tokens from caller 's account to another account .
authorized caller transfer tokens from one account to another .
retrieve token balance for an account .
authorize an account to send tokens on caller 's behalf .
remaining tokens third party spender have to send .
authorize third party transfer by increase / decrease allow rather than set it .
"change own address of the token contract , specifically for mint ."
"mints additional tokens , new tokens go to owner ."
permanent stop mint .
allows the current owner to transfer control of the contract to a newowner .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
low level token purchase function .
true if the transaction can buy tokens .
"it be function and not variable , thus it ca n't be stale ."
true if crowdsale event have end .
true if presale be active .
check if goal be reach .
allows an owner to finalize and completly transfer proxy to new identitymanager .
allows an owner to finalize migration once admintimelock time have pass .
low level token purchase function .
allow crowdsale owner to close early or extend the crowdsale .
overriden because presaleweiraised be not alter and would mess with the tranchepricing .
add this here because it be not visible by preallocate .
make an investment .
"amount calculation , depend of current period ."
true if in period or false if not .
human readable period name .
sell token and send to contributor address .
finish crowdsale .
true if crowdsale event have end .
set new hoqu token exchange rate .
buy hqx .
"add hqx pay by another crypto ( btc , ltc ) ."
add hqx by referral program .
reduce buy hqx amount .
internal method for store tokens in contract until claim stage .
claim all buy hqx .
claim all buy hqx for specific approved address .
claim all buy hqx for all approved address .
internal method for claim tokens for specific approved address .
finish sale .
internal method to change rate if boundary be hit .
inherited internal method for store tokens in contract until claim stage .
create initial marriage contract .
set the marriage status if it change .
set the ipfs hash of the image of the couple .
low level token purchase function .
create the token to be sell .
throws if call by any account other than the owner .
"vault finalization task , call when owner call finalize ( ) ."
send coin .
a contract attempt to get the coin but transfer from the origin .
a contract attempt to get the coin .
this close it when we want to close - rather than wait - this be bad .
setup function set external contract ' address .
transfers tokens to a give address .
calculates the maximum amount of vested tokens .
the percentage of tokens that be charge .
the rate use when change tokens .
the amount of decimals use .
whether the token changer be in the paused state .
pause the token changer make the contract revert the transaction instead of convert .
resume the token changer make the contract convert tokens instead of revert the transaction .
the actual fee .
converts tokens by burn the tokens receive at the token smart-contact locate at _from and by issue tokens at the opposite token smart-contract .
throw if not authenticate .
setup authentication .
after call the deploy function the crowdsale rule become immutable .
whether the converter be currently authenticate or not .
enable authentication .
disable authentication .
pause the token changer make the contract revert the transaction instead of convert .
resume the token changer make the contract convert tokens instead of revert the transaction .
event handler that initialize the token conversion .
called by the observed token smart-contract in order to notify the token observer when tokens be receive .
only if '_token ' be the leave or right token that of the token changer .
whether the '_token ' be part of this token changer .
left token address .
right token address .
setup the crowdsale .
setup stakeholders .
the address of the deposit address .
the address of the deposit address .
the address of the deposit address .
the address of the deposit address .
true if in presale phase .
true if end .
true if there be a balance that belong to _beneficiary .
the allocated token balance .
the allocated eth balance .
the invested refundable balance .
the index of the current phase .
the rate use in _phase multiply by the corresponding volume multiplier .
volumes and correspond release date .
amount in tokens .
the accepted ether amount .
the accepted ether amount .
function to end the crowdsale by set the stage to ended .
the accepted ether amount .
the accepted ether amount .
the accepted ether amount .
distribute tokens .
allocate eth .
allocate tokens .
allocate eth for stakeholders .
allocate tokens for stakeholders .
setup authentication .
wheter the dcorp be accept or not .
receive a contribution from a dcorp member .
total raise ether amount .
wheter the contributor be accept or not .
failsafe mechanism .
wheter the dcorp member be accept or not .
attach a crowdsale and correspond token to the proxy .
after call the deploy function the proxy 's rule become immutable .
the address of the deposit address .
the address of the deposit address .
true if there be a record that belong to _member .
the contributed amount .
the allocated token balance .
the total share .
request tokens from the target crowdsale by call it 's withdraw token function .
update internal token balance .
withdraw allocate tokens .
the accepted ether amount .
the accepted ether amount .
failsafe mechanism .
event handler that process the token receive event .
accepted ether amount .
"weight , drp balance ."
throw if crowdsale not end yet .
prevent reentry .
setup the proxy .
access be restrict to owners only .
unregister _observer a an observer .
the total supply .
the balance .
whether the transfer be successful or not .
amount of remain tokens allow to spend .
returns true if _account be the current owner .
whether the token be lock .
whether the lock be successful or not .
whether the tokens where sucessfully burn or not .
whether the sender be allow or not .
the amount of owners .
whether the sender be allow or not .
whether the transfer be successful or not .
whether the transfer be successful or not .
the address of the owner find at _index .
adds _account a a new owner .
removes _account a an owner .
whether the account be a registered observer .
the amount of registered observers .
the observers address .
register _observer a an observer .
transfer balance to owner .
transfer tokens from caller 's account to another account .
public management - set address of base and reward tokens .
functions with this modifier can only be execute by the owner of follow smart contract .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
minimal contribution which will be process be 0 . 5 eth .
freeze all edu token transfer during sale period .
freeze edu tokens for teamandadvisers for 1 year after the end of the presale .
set contribution flag status .
set the sale period .
set change the presale period if necessary .
balance of a specific account .
transfer the balance from owner 's account to another account .
low level token purchase function .
"low level get rate function override to create custom rate function , like give bonus for early contributors or whitelist address ."
true if crowdsale event have end .
low level token purchase function .
sorts give array in place .
sorts give array in place .
sorts give array in place .
sorts give array in place .
sorts give array in place .
volume bonus calculation .
"initialises address of founder , target wallets ."
sets new state .
sets new manager .
sets bounty owner .
sets new mediator wallet .
buy quantity of tokens depend on the amount of send ethers .
buy tokens to specify wallet .
partial withdraw .
send tokens to bountyowner depend on crowdsale result .
send tokens to founder .
anyone could burn tokens by send it to buyback address and call this function .
transfers sender 's tokens to a give address .
allows allow third party to transfer tokens from one address to another .
returns number of tokens own by give address .
sets approve amount of tokens for spender .
returns number of allow tokens for give address .
burns tokens from address .
adds tokens to address .
transfer token for a specified address .
transfer tokens from one address to another .
proxy transfer gg token .
functions with this modifier can only be execute by the owner .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
modifier to allow mint of tokens .
function to mint tokens .
function to stop mint new tokens .
token transfers .
override the base transfer class to enforce vest requirement be meet .
override the base transferfrom class to enforce vest requirement be meet .
token vesting .
gets the number of vest periods that have complete from the start time to the current time .
gets the vested balance for an account .
convenience method - get the vested balance of the address .
"at the end of the sale , this should be call to trigger the vest to start ."
true if the transaction can buy tokens .
true if crowdsale event have end .
"should be call after crowdsale end , to do some extra finalization work ."
allows any pre-allocations to bet set for presale purchase or team member allocations .
allows a list of pre-allocations to bet set for presale purchase or team member allocations .
sets the intitialized flag to true so that the presale can start and mint be finish .
"allows the owner to set the tokens sell , base on the number of presale purchase ."
function to allow users to purchase tokens base on the calculated sale rate .
overrides base function .
"according to the term of the sale , a minimum of 33 million tokens be to allocate for the crowd sale ."
gets the current price of the tokens base on the current sell amount ( currentbasetokenssold ) .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
"upgrade your tokens to the new , penis token , black edition ."
process transaction .
revoke the grant of tokens of a specifed address .
get all information about a specifc grant .
constant function return the current wpx price .
"calculate wmount of wpx we get , give the wei and the rat we 've define per 1 eth ."
"given the rate of a purchase and the remain tokens in this tranche , it will throw if the sale would take it past the limit of the tranche ."
to be call at the end of crowdfund period .
failsafe drain .
make an investment .
user be buy grx .
"user be sell u grx , we be sell eth to the user ."
burns a specific amount of tokens .
drop prophet .
add a loopring protocol address .
submit a order-ring for validation and settlement .
cancel a order .
public functions .
verify miner have calculte the rat correctly .
calculate each order 's fee or lrc reward .
scale down all order base on historical fill or cancellation stats but key the order 's original exchange rate .
amount of erc20 token that can be spend by this contract .
assmble order parameters into order struct .
true if a ring 's hash can be submit ; false otherwise .
true if a ring 's hash be submit and still valid ; false otherwise .
function to revoke permission of the manager .
function to check manager status .
function to check permissions of a manager .
function to check if the manager can perform the action or not .
modifier to check manager address .
modifier to allow action only when the contract is pause .
modifier to allow action only when the contract is not pause .
"call by the manager to pause , trigger stop state ."
allows the current owner to transfer control of the contract to a newowner .
"call by the manager to unpause , return to normal state ."
the getter for pause contract variable .
function to calculate hash of the token s name .
function to calculate hash of the token s symbol .
process new eth investment and send tokens back .
calculate amount of tokens for received eth .
calculate discount amount of eth for refunded tokens .
calculate amount of eth for refunded tokens .
calculate price for tokens .
function to add new manager .
function to remove existing manager .
function to grant new permission to the manager .
only allow the execution of the function if it 's comming from crowdsale .
function to set the crowdsale smart contract 's address only by the owner of this token .
distributes the presale tokens .
distributes the ico tokens .
deletes the amount of tokens refund from that buyer balance .
burn the amount of tokens remain after ico end .
only allow the execution of the function before the crowdsale start .
to buy tokens give an address .
allows the current owner to transfer control of the contract to a newowner .
calculates how many ether will be use to generate the tokens in case the buyer send more than the maximum balance but have some balance leave and update the balance of that buyer .
set 's the rate of tokens per ether for each tier .
allow to extend ico end date .
check if the crowdsale have end and enable refund only in case the goal have n't be reach .
"if crowdsale be unsuccessful , investors can claim refund here ."
buys the tokens for the specify tier and for the next one .
buys the tokens give the price of the tier one and the wei pay .
checks if a purchase be consider valid .
to see if the minimum goal of tokens of the ico have be reach .
public function to check if the crowdsale have end or not .
transfer tokens from one address to another .
modifier for authorized call .
"ether swap , activate by the fallback function after receive ethers ."
this function be call from a javascript through an authorized address to inform of a transfer of old token .
throw if at stage other than current stage .
throw if sender be not beneficiary .
the balance .
transfer raise amount to the beneficiary address .
the beneficiary address .
low level token purchase function .
withdrawal or refund for investor and beneficiary .
withdraweth when minimum cap be reach .
price be 1000 node for 1 eth .
the basic entry point to participate the tge event process .
transfer bounty to target address from bounty pool .
freeze and unfreeze .
replaces an owner .
"replaces a founder , transfer team pool to new founder balance ."
throws if call by any account other than the moderator .
throws if call by any account other than the owner or moderator .
allows the current moderator to transfer control of the contract to an othermoderator .
complete moderatorship transfer .
removes moderator from the contract .
"call by the owner or moderator to pause , trigger stop state ."
"call by the owner or moderator to unpause , return to normal state ."
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
check if give address be frozen .
freezes address ( no transfer can be make from or to this address ) .
unfreezes frozen address .
allows moderator to transfer tokens from one address to another .
check if give address be frozen .
burns a specific amount of tokens .
set allowance for address to interact with contract .
notice transfer _value hon token tokens from sender 's account msg . sender .
notice finalize crowdfunding clossing fund options .
anyone can burn their vkn tokens .
low level token purchase function .
true if crowdsale event have start .
create the token to be sell .
true if investors can buy at the moment .
"must be call after crowdsale end , to do some extra finalization work ."
"must be call after crowdsale end , to do some extra finalization work ."
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
low level token purchase function .
initializes contract with initial supply tokens to the creator of the contract .
modifier that allow only the crowdsale contract to be sender .
back link vlbtoken contract with vlbcrowdsale one .
call only by link vlbcrowdsale contract to end crowdsale .
killer method that can bu use by owner to kill the contract and send fund to owner .
main function to buy tokens .
check if the current purchase valid base on time and amount of pass ether .
check if crowdsale still active base on current time and cap .
finalize crowdsale .
check if hard cap goal be reach .
return current token price base on current presale time frame .
killer method that can bu use by owner to kill the contract and send fund to owner .
true if in period or false if not .
human readable period name .
human readable period name .
update preito start time .
update ito start date .
"amount calculation , depend of current period ."
sell token and send to contributor address .
sell token and send to contributor address .
finish crowdsale .
claim tokens hold by time lock .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
transfer token for a specified address when not pause .
transfer tokens from one address to another when not pause .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
migrate tokens to the new token contract .
set address of migration target contract and enable migration process .
update / create a record in the distribution list .
finalize the distributionlist after token price be set and eth conversion be know .
fix for the erc20 short address attack .
payout function .
drop syndicoins .
functions with this modifier can only be execute by the owner .
emergency pause and release be call by owner in case of emergency .
erc20 function to return total supply .
erc20 function to return balance of give address .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
ensures certain call can only be make when mint be finish .
"overrides crowdsale . createtokencontract , ."
overrides version of crowdsale . buytokens .
true if crowdsale have reach more fund than the minimum goal .
true if crowdsale event have end .
true if investors be allow to purchase tokens at the moment .
mints the tokens for the facilitate party .
return the current bonus rate .
ensures admin be caller .
query the available balance of an address erc-20 standard .
query the amount of tokens the spender address can withdraw from the owner address erc-20 standard .
query whether the user be eligible for claim dividence .
transfer tokens from an address to another erc-20 standard .
authorize an address to retrieve fund from you erc-20 standard .
check whether address be a contract erc-223 proposed standard .
transfer the specified amount to the target address with embedded bytes data erc-223 proposed standard .
"handles transfer to an eca ( externally controlled account ) , a normal account erc-223 proposed standard ."
handles transfer to a contract erc-223 proposed standard .
re-entry protection .
handles casino deposit custom erc-223 proposed standard addition .
check how much casino withdrawal balance remain for address .
retrieve erc tokens send to contract .
freeze token circulation - splitprofits internal .
re-enable token circulation - splitprofits internal .
freeze token circulation .
re-enable token circulation .
add the address to the user list .
ensures system be n't frozen .
split the monthly profit of the casino to the users .
change variables on split end .
rise or low user bank balance - backend function .
freeze user during platform use - backend function .
de-freeze user - backend function .
check if user be log internal .
ban a user .
unban a user .
check if a user be ban .
advertising token distribution .
ensures player be n't log in on platform .
ensures player be n't banneduser .
safemath library safesub import .
check the name of the token erc-20 standard .
check the symbol of the token erc-20 standard .
check the decimals of the token erc-20 standard .
check the total supply of the token erc-20 standard .
"totalsupply return the total number of potatoes own by all people , take into consideration those that already rot away ."
"transferfrom implement erc20 , but be forbidden ."
"approve implement erc20 , but be forbidden ."
"allowance implement erc20 , but be forbidden ."
"balanceof return the current number of potatoes own by a particular account , take into consideration those that already rot away ."
"unsowed return the current number of unsowed potatoes own by a farmer , take into consideration those that already rot away ."
"sow return the current number of sow potatoes own by a farmer , take into consideration those that be currently grow ."
"trash return the number of potatoes own by a farmer that rot away , take into consideration the current storage and field too ."
request ask the potatoin foundation for a grant of one potato .
"sow create a new potato field with the requested number of potatoes in it , double after the grow period end ."
harvest gather all the potatoes of a user that have finish grow .
recycle throw away the potatoes of a user that rot away .
transfer forward a number of potatoes to the request address .
can be override to add finalization logic .
sets cat to ether rate .
creates token contract for ico .
helper to pause catoken .
helper to unpause catoken .
freeze _value token to _unfrozentime .
get frozen balance .
unfreeze frozen amount .
send coin .
allow to add and exclude address from whitelistedbeforeactivation list for owner .
transfer token for a specified address .
gets the balance of the specified address .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
transfer tokens from one address to another .
approve should be call when allow _spender 0 .
owner methods .
allows to issue tokens for a specific address .
issues the give number of wei-tokens in the favor of the give address .
sets the crowdsale a active or inactive .
marks token sale a finish .
"to be call once mint be complete , disable mint ."
only one of claimbyproof ( ) or claim ( ) will potentially be activate in the future .
only one of claimbyproof ( ) or claim ( ) will potentially be activate in the future .
function below this line be onlyowner set message of the day .
function below this line be public .
"in the future , when the controller support multiple token head , allow the controller to reconstitute the transfer and approval history ."
burn event possibly call by the controller on a burn .
sets the burn address to a new value .
enables burn through burnable bool .
this give u a maximum of 2 96 tokens per user .
disables burn through burnable bool .
indicates that burn be enable .
"burn function , change from original implementation ."
claim ( quantumreceive ) allow the user to prove some an ict to the contract thereby thereby release the tokens into their account .
"simplified version of claim , just require user to call to claim ."
set the burn address to the new value .
function below this line be onlyowner .
new functionality .
function below this line be onlyledger let the ledger send transfer events ( the most obvious case be when we mint directly to the ledger and need the transfer ( ) events to appear in the token ) .
function below this line be onlytoken .
enables burn on the token contract .
disables burn on the token contract .
- function that allow foreground contract to spend ( burn ) the tokens .
- allow another contract to spend some tokens on your behalf .
allocates the team bonus with a specific vest rule .
"this method can optional be call by the owner to adjust the conversionrate , startdate and enddate before contribution phase start ."
"this method can optional be call by the owner to adjust the conversionrate , startdate and enddate before pre contribution phase start ."
all function relate to the tge cap come here .
throws if call by any account other than the foundation board .
throws if call by any account other than the auditor .
throws if auditor have not yet confirm tge .
"after the tge reach state 'auditing ' , the auditor will verify the legal and regulatory obligations ."
"after the auditor have verify the the legal and regulatory obligations of the tge , the foundation board be able to finalize the tge ."
postallocation reward tokens .
all function relate to refunding can be find here .
if tge be not successfull refund process will be release by smartone .
checks whether it can transfer or otherwise throw .
grant tokens to a specified address .
calculate the total amount of transferable tokens of a holder at a give time .
this function allow the token owner to rename the token after the operations have be complete and then point the audience to use the token contract .
mint new tokens for the predefined inflation period and assign them to the reward wallet .
limit token transfer until the tge be over .
this will make the tokens transferable .
"error : cantransfer ( msg . sender , ."
triggers the registered callback function for the number of periods pass since last update .
all logic relate to the tge contribution be currently place below .
checks whether contract be in a state in which contributions will be accept .
this modifier make sure that not more tokens a specify can be allocate .
add a new investor to the whitelist .
remove an investor from the whitelist .
test whether an investor .
release mdl tokens hold by this smart contract only after the timelock period .
true if investors can buy at the moment .
override finalizablecrowdsale finalization to prevent further mint after ico end .
approve function to adjust allowance to investment of each individual investor .
bool be true be _investor be approve .
"must be call after crowdsale end , to do some extra finalization work ."
kept public in order to buy for someone else .
uint256 of how many tokens can one get .
adjust finalization to transfer token ownership to the fund hold address for further use .
optional settings to extend the duration .
low level token purchase function .
withdrawal or refund for investor and beneficiary .
queries the balance of _owner at a specific _blocknumber .
total amount of tokens at a specific _blocknumber .
generates _amount tokens that be assign to _owner .
burns _amount tokens from _owner .
getvalueat retrieve the number of tokens at a give block number .
updatevalueatnow use to update the balance map and the totalsupplyhistory .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
send _amount tokens to _to from _from on the condition it be approve by _from .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
this function make it easy to read the allowed map .
function call after crowdfundendtime it transfer the remain tokens to remainingtokenholder address .
buy token function call only in duration of crowdfund active .
function to transfer the fund to founder account .
get function function to get the current state of the crowdsale .
function to calculate the total no of tokens with bonus multiplication .
function provide the current bonus rate .
provide the bonus .
function to change the founder multi sign address .
attach the token contract .
function to stop mint new tokens .
total to invest in weis .
total to invest in weis .
pauses the contribution if there be any issue .
send ether from the complete crowdsale to the owners wallet address .
function to change the price of the token .
function that be call three days before the sale to set the token and price .
fallback function to set tokens if the exchange rate function be not call .
gets the price and buy cap for individual address at the give milestone index .
gets the number of tokens sell thus far .
transfer tokens from caller 's account to another account .
called by a crowdsale contract upon creation .
called when an address want to purchase tokens .
functions inherit from crowdsalelib library .
called by a crowdsale contract upon creation .
function to check if the crowdsale be currently active .
function to check if the crowdsale have end .
function to check if a purchase be valid .
function call by purchasers to pull tokens .
function call by purchasers to pull leftover wei from their purchase .
transfers sender 's tokens to a give address .
allows allow third party to transfer tokens from one address to another .
allows to send a bid to the auction .
claims tokens for bidder after auction .
calculates stop price .
calculates token price .
private function .
setup function set external contract ' address .
add bidder address to whitelist .
add multiple bidder address to whitelist .
remove bidder address from whitelist .
is this addres in the whitelist ? .
number of non-zero entries in whitelist .
fetch entries in whitelist .
approves and then call the receive contract .
modifier that will execute internal code block only if the sender be a parent of the forwarder contract .
determine if an address be a signer on this wallet return boolean indicate whether address be signer or not .
gets the second signer 's address use ecrecover return address recover from the signature .
verify that the sequence id have not be use before and insert it .
gets the next available sequence id for sign when use executeandconfirm return the sequenceid one high than the high currently store .
execute a token transfer of the full balance from the forwarder token to the main wallet contract .
it be possible that fund be send to this address before the contract be deploy .
modifier that will execute internal code block only if the sender be an authorized signer on this wallet .
create a new contract ( and also address ) that forward fund to this contract return address of newly create forwarder address .
execute a multi-signature transaction from this wallet use 2 signers : one from msg . sender .
execute a multi-signature token transfer from this wallet use 2 signers : one from msg . sender .
execute a token flush from one of the forwarder address .
do common multisig verification for both eth send and erc20token transfer .
irrevocably put contract into safe mode .
remove a member who exceed the cap .
update ban threshold .
set total allowed upload .
throws if call by any account other than a valid member .
add hash to persistent storage .
remove hash from persistent storage .
add a contract to watch list .
remove contract from watch list .
buy tokens from contract by send ether .
safemath multiply function .
approves allowance for token holder .
fetched allowance for owner .
allows enable of block of transfer for all users .
allows enable of unblock of transfer for all users .
bans an address .
un-bans an address .
transfers the ownership of owner .
buy token function to purchase tokens in ico .
function to forward incomming fund to multi-sig wallet .
safemath divide function .
validates the purchase .
calculates the rate base on slabs .
checks weather ico have end or not .
safemath substract function .
safemath addition function .
safemath power function .
initialize the token contract .
transfers the token .
transfers the token on behalf of .
transfers the token from owner during the ico .
checks balance of address .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
buy tokens from contract by send ether .
sell amount tokens to contract .
tranfer the token balance to a specified address .
gets the balance of the specified address .
gets the totalsupply of the tokens .
transfer the amount of money invest by the investor to his balance .
"used to remove the balance , when ask for refund ."
egoldchain - modified the correct technical term mint to a well know term mine for market purpose .
getlistcount ( ) return the number of record in disclosurelist ( not include the empty 0th record ) .
future idea : another function to return total number of unamended entries ? ( ie actual record count ) .
amends / change mark exist entry a amended and take pass data to create a new entry to which the amend pointer ( rownumber ) will point .
returns row regardless of whether or not it have be amend .
returns late entry of record intend to pull .
calculates the rate base on slabs .
send coin .
a contract attempt to get the coin .
contract owner withdraw eth .
contract owner authorize redemptions in units of 1 / 1000 eth .
check that message come from the contract owner .
function to mint tokens .
function to mint reserve tokens to partner .
owner can withdraw ether here .
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
true if crowdsale event have end .
"if crowdsale be unsuccessful , investors can claim refund here ."
"if crowdsale be successful , owner can withdraw ether here ."
"must be call after crowdsale end , to do some extra finalization work ."
"vault finalization task , call when owner call finalize ( ) ."
gets the balance of the specified address .
transfer token for a specified address .
transfer tokens from one address to another .
burns a specific amount of tokens .
"in the future , when the controller support multiple token head , allow the controller to reconstitute the transfer and approval history ."
function below this line be onlyledger let the ledger send transfer events ( the most obvious case be when we mint directly to the ledger and need the transfer ( ) events to appear in the token ) .
"only human , wallet can not be invoke from other contract , ."
if caller be one of wallet owners function revert his confirmation for transaction number i .
if transaction number i have correct number of confirmations and .
revert operation if caller be not owner of wallet specify in constructor .
time measuement be base on block .
function that set the account that can do transfer .
gets contract balance .
gets total number of transactions ever create .
counts number of confirmations if number be equal or great than .
"registers transaction for confirmation , design for tokens transfer or ether if ether transfer leave from blank from that moment wallet owners have wait_blocks block to confirm transaction ."
if caller be one of wallet owners function note his confirmation for transaction number i .
"give a token supply , reserve , crr and a deposit amount ( in the reserve token ) , calculate the return for a give change ( in the main token ) ."
"fixedexp be a 'protected ' version of fixedexpunsafe , which assert instead of overflow ."
this function can be auto-generated by the script 'printfunctionfixedexpunsafe . py ' .
"give a token supply , reserve , crr and a sell amount ( in the main token ) , calculate the return for a give change ( in the reserve token ) ."
predicts the high precision which can be use in order to compute base exp without exceed 256 bits in any of the intermediate computations .
returns floor ( ln ( numerator / denominator ) * 2 precision ) .
takes a rational number numerator / denominator a input .
returns floor ( ln ( x / 2 precision ) * 2 precision ) .
returns floor ( log2 ( x / 2 precision ) * 2 precision ) .
takes a rational number numerator / denominator a input .
takes a natural number n a input .
purchase function allow incoming payments when not pause - require payment code .
function of operation .
function who regulate every bet and his proccess .
send coin .
multiplication with safety check .
to handle erc20 short address attack .
lock transfer during sale .
implementation for transfer iac token to provide address .
transfer initiate by spender .
get iac token balance for provided address .
add spender to authorize for spend specified amount of iac token .
get iac token amount that spender can spend from provide owner 's account .
get contract address by it id .
add or replace contract address by id .
to enable transfer tokens from company inventory .
division with safety check .
verify if the sender be owner .
modifier to make sure transaction be happen during sale when it be not stop .
to upgrade ecosystem contract .
to start crowdsale .
to start crowdsale after 2 years ( gapinprimarycrowdsaleandsecondarycrowdsale ) .
to set price for iac token per ether .
to create and assign iac tokens to transaction initiator .
to enable owner to mint tokens .
to enable transfer tokens from company inventory .
finalize the crowdsale .
subtraction with safety check .
to enable transfer of iac token anytime owner wish .
failsafe drain .
addition with safety check .
modifier to check transaction initiator be only owner .
ownership can be transfer to provided newowner .
modifier to continue with transaction only when sale be not pause .
modifier to continue with transaction only when sale be pause .
"call by the owner on emergency , pause sale ."
"call by the owner on end of emergency , resume sale ."
transfers the current balance to the owner and terminate the contract .
reclaim all erc20basic compatible tokens .
"the owner can withdraw ethers after the presale have complete , only if the minimum fund level have be reach ."
the participant will need to withdraw their fund from this contract if the presale have not achieve the minimum fund level .
"the owner can clawback any ethers after a date in the future , so no ethers remain trap in this contract ."
set address in whitelist .
ability to turn of whitelist filter after 24 hours .
throw an exception if the amount be not equal .
add a number to a base value .
subtract a number from a base value .
function to mint tokens .
"forwards the amount from the contract to the vault , 67 of the amount to vault1 and 33 to vault2 ."
check after deadline if the goal be reach and end the campaign .
closes presale .
withdraw the fund .
token stakeholder can vote against the project continuation .
"token stakeholder can release the against-vote , and unlock the tokens ."
"after each vote period , vote stake can be count , and in case that more than 50 of token stake be against the continuation , the remain eth balance can be withdraw proportionally ."
refund your money for tip user .
buy gold for user .
function call when api get result .
convert string to bytes32 .
send tip for user .
owner modification .
creates user with username and address .
tip user for his post / comment .
create new instance of ico token contract .
low level token purchase function .
mint tokens for airdrop .
"close token sale and transfer ownership , also move unclaimed airdrop tokens ."
allows to add a new owner .
return list of transactions after filter be apply .
returns list of pending transactions .
returns list of executed transactions .
allows to remove an owner .
update the minimum required owner for transaction validation .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
allows an owner to submit and confirm a transaction .
allows an owner to confirm a transaction .
allows anyone to execute a confirmed transaction .
allows an owner to revoke a confirmation for a transaction .
returns the confirmation status of a transaction .
returns number of confirmations of a transaction .
exchange function .
withdraw remain tokens to an specify address .
withdraw collect ether to ethwallet .
send wei for user allocate in contract .
forward payment to 'to ' from sender .
transfer wei from sender to 'to ' .
refund 'value ' wei to sender .
allocate fee for transfer .
allocate new fee .
allocate new owner .
function to revoke permission of the manager .
function to check manager status .
function to check permissions of a manager .
function to check if the manager can perform the action or not .
"call by the manager to pause , trigger stop state ."
"call by the manager to unpause , return to normal state ."
the getter for pause contract variable .
function to calculate hash of the token s name .
function to calculate hash of the token s symbol .
process new eth investment and send tokens back .
calculate amount of tokens for received eth .
calculate discount amount of eth for refunded tokens .
calculate amount of eth for refunded tokens .
calculate price for tokens .
function to add new manager .
function to remove existing manager .
function to grant new permission to the manager .
interface to ensure the contract be correctly configure .
get the state of the token upgrade .
child contract can override to provide the condition in which the upgrade can begin .
allow upgrade agent functionality to kick in only if the crowdsale be a success .
make an investment .
investing function that recognize the payer and verify he be allow to invest .
investing function that recognize the payer .
the basic entry point to participate in the crowdsale process .
crowdfund state machine management .
returns any excess wei receive .
get the current tranche or bail out if there be no tranche define for the current block .
get the current price .
token amount calculation .
implements the criterion of the fund state .
this function decide who handle lose tokens .
extended to transfer unused fund to team team_multisig and release the token .
gets the balance of the specified address .
function to check the amount of tokens than an owner allow to a spender .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
init lottery .
transfer founders team tokens to multisigwallet - 365 days locked .
throws if call by any account other than the owner .
this have to be call before preallocation .
balance tokens of investor address .
total investment do by ethereum address .
amount of remain tokens allow to spend .
required state : success .
required state : success .
whether the approval be successful or not .
to allocate tokens to project fund - eg .
bcdc accept early investment through manual process in fiat currency .
function will transfer the tokens to investor 's address .
finalize crowdfunding .
call this function to get the refund of investment do during crowdsale .
this will return the current state of token sale .
upgrade tokens to the new token contract .
set address of upgrade target contract and enable upgrade process .
set address of upgrade target contract and enable upgrade process .
use this a function modifier that should not execute if contract state halted .
use this a function modifier that should execute only if contract state halted .
call by only owner in case of any emergecy situation .
call by only owner to stop the emergency situation .
required state : be bcdcreservefund set .
this method be for get bcdctoken a reward .
throws if call by any account other than the bcdcreservefund owner .
burn the amount of tokens remain after ico end .
check if the crowdsale have end and enable refund only in case the goal have n't be reach .
check if the crowdsale have end and enable refund only in case the goal have n't be reach .
"ecrecover from the signature part v , r , s ."
_ercversion be like : erc20 erc223 .
config oracle db address and set minimum tx amt to limit abuse .
true if the transaction can buy tokens .
true if crowdsale event have end .
create the token to be sell .
send coin .
"grant developer tokens , equal to a percentage of purchased tokens ."
pay auction proceed to the underwriter may be call by underwriter or owner ( fbo underwriter ) .
call by owner ( or any other concerned party ) to generate a satatechangeevent .
"set the strike price start the sale period , during which bidders must call executebid ."
the owner may disqualify a bid if it be bogus .
execute a bid .
"expirebid if a bid be not execute during the sale period , then the owner can mark the bid a expire ."
bidder withdraw excess fund ( or all fund if bid be too low ) .
set withdrawal gas nonstandard gas be necessary to support push-withdrawals to other contract .
"internal transfer , only can be call by this contract ."
"internal transfer , only can be call by this contract ."
transfer eth .
is_leap_year set year to 12am on new years day of the current year and set the mine reward .
calculates the rate base on slabs .
transfers the ownership of owner .
initialize the token contract .
transfers the token .
transfers the token from owner during the ico .
called when an address want to purchase tokens .
modifier to check if a target address have a particular entry .
external function allow access to our structs via function with convenient return value .
public function add entries .
delete entries .
allow owner to delete contract if no account exist .
initializes contract with initial supply tokens to the creator of the contract .
initializes contract with initial supply tokens to the creator of the contract .
basic operations .
unrelated to round-up .
combo operations .
note : constant fcn do not need safe math .
note : contant fcn do not need safe math .
onlyowner proposes to transfer control of the contract to a new owner .
"can only be call by the newownercandidate , accept the transfer of ownership ."
owner can step down and assign some other address to this role .
"decentralizes the contract , this operation can not be undone ."
the escapehatch ( ) should only be call a a last resort if a security issue be uncover or something unexpected happen .
changes the address assign to call escapehatch ( ) .
"finalizefunding ( ) end the campaign by set the controller to 0 , thereby end the issuance of new tokens and stop the ."
onlyowner change the location that ether be send .
dopayment ( ) be an internal function that send the ether this contract receive to the vault and create tokens in the address of the _owner as long a the campaign be still accept fund .
proxypayment ( ) allow the caller to send ether to the campaign and have the tokens create in an address of their choose .
"notifies the controller about a transfer , for this campaign all transfer be allow by default and no extra notifications be need ."
"notifies the controller about an approval , for this campaign all approvals be allow by default and no extra notifications be need ."
low level token purchase function .
note : contant fcn do not need safe math .
function to mint tokens .
advance the step of campaign to presale 2 contract be deploy in presale 1 mode .
advance step of campaign to main sale .
it will be call by owner to start the sale block number will be calculate base on current block time average .
"due to change average of block time this function will allow on adjust duration of campaign closer to the end allow adjust campaign length to 70 days , equivalent of 433440 block at 4 . 3 block per minute ."
call to send tokens to contributors after ico .
refund non compliant member .
filter buyers in list buyers .
filter buyers be investor in list deposit .
filter normal buyers in list buyer deposit .
get total deposit of buyers .
delivery token for buyer .
return eth for normal buyers .
transfers the balance from multisig wallet to an account .
gets sell status .
updates buy price ( owner only ) .
adds list of new investors to the investors list and approve all .
removes list of investors from list .
buys gifto .
set new icopercent .
set new _minimumbuy .
set new _maximumbuy .
switch on / off last chance function .
standard transfer ether use owner account .
withdraw to resque account in case of loose owner account access .
"setting emergency account in case of loose access to owner and resque account emergencyaccounthash : keccak256 ( your keyword phrase , address resqueaccount ) photohash : keccak256 ( one_of_your_photofile . pdf_data_passed_to_constructor_of_this_nyx_account_upon_creation ) ."
withdraw to emergency account after loose access to both owner and resque account .
"allows optionally unauthorized withdrawal to any address after loose all authorization assets such a keyword phrase , photo file , private key / passwords ."
create new coin .
contribution handler .
check status .
closure handler .
partial withdraw .
send tokens to founder .
all nutz balance .
register a powerdown request .
total supply ( modify for etherscan display ) .
total supply ( for internal calculations ) .
allows to change the daily limit .
returns if amount be within daily limit and reset spenttoday after one day .
return balance of active holders .
return remain allowance if call return allow address ( this ) _spender ; return balance of ether park to be withdraw .
"return either the saleprice , or if reserve do not suffice for active supply , return maxfloor ."
active supply - sum of balance above .
"return either the saleprice , or if reserve do not suffice for active supply , return maxfloor ."
"return either the saleprice , or if reserve do not suffice for active supply , return maxfloor ."
withdraw excessive reserve - i . e .
this be call when ntz be deposit into the burn pool .
this be call when ntz be deposit into the power pool .
execute a powerdown request .
burn pool - inactive supply .
power pool - inactive supply .
all power balance .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
creates tokens and send to the specify address .
replace this with any other price function .
create the mind token ( override createtokencontract of standardcrowdsale ) .
get the bonus base on the buy time ( override getbonus of standardcrowdsale ) .
transfer the unsold tokens to the mind foundation multisign wallet .
action after buy tokens : check if all sell out and enable transfer immediately .
initializes contract with initial supply tokens to the creator of the contract .
standard kill ( ) function to recover fund .
send the eth home .
allow to change the tokenexchangerate .
function that set the account that can do transfer .
"the bid be give up by the publisher , therefore cancel it and return the fund to the advertiser same logic a cancelbid ( ) , but different permissions ."
both publisher and advertiser have to call this for a bid to be consider verified .
"now , claim the reward ; callable by the publisher ; claimbidreward be a separate function so a to define clearly who pay the gas for transfer the reward ."
"this can be do if a bid be accept , but expire ."
public constant function .
can be call over and over to update the data .
"use _id 0 to create a new item , otherwise modify exist ."
there 's no real point of un-registering items .
functions expose for web3 interface .
bid action .
the bid be cancel by the advertiser .
a bid be accept by a publisher for a give ad slot .
withdraw to resque account in case of loose owner account access .
"allows optionally unauthorized withdrawal to any address after loose all authorization assets such a keyword phrase , photo file , private key / passwords ."
note : can only be set once .
low level token purchase function .
"finish crowdsale , ."
set new date for main-sale ( emergency case ) .
function to calculate bonus tokens base on current time ( now ) and maximum cap per tier .
transfer the raised fund to the target wallet if the ico be over and the goal have be reach .
low level token purchase function .
add a list of wallets to be allow to take part in pre ico .
remove a list of wallets to be allow to take part in pre ico .
true if the ico be in pre ico phase .
true if the public ico be in progress .
true if ico have end .
true if the soft cap have be reach .
withdraw the contributed fund if the ico have end and the goal have not be reach .
allow another contract to spend some tokens in your behalf .
approve and then comunicate the approve contract in a single tx .
"unused : : function div ( uint256 a , uint256 b ) internal pure return ( uint256 ) uint256 c a / b ; return c ; ."
"public ( read only ) : just to look pretty - split 1e18 reolution to mainunits and the fraction part , just for direct enduser lookylooky at contract variables ."
"public ( read only ) : just to look pretty - split 1e18 reolution to mainunits and the fraction part , just for direct enduser lookylooky at contract variables ."
+ interest stuff + + every token holder receive interest ( base on token balance ) at fix intervals ( by default : 30 days ) + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + + public ( read only ) : stage how many interval cycle complete ; increase every 12 intervals by 1 ; 1 stage approx .
public ( read only ) : interval index of the active interest interval .
public ( read only ) : unixtime to next interest payout unnecessary - just for enduser lookylooky .
public ( read only ) : next interest payout rate in percent unnecessary - just for enduser lookylooky .
internal ( gas operation ) : trigger before any ( gas costy operation ) balance transaction - account interest to balance of address it for performance reason : use a gas operation to add new ( cumulate ) interest to account-balance to reduce interest-calc - loop ( balanceof ) .
internal ( gas operation ) : trigger before any ( gas costy operation ) balance transaction - account interest to balance of address it for performance reason : use a gas operation to add new ( cumulate ) interest to account-balance to reduce interest-calc - loop ( balanceof ) .
internal ( gas operation ) : trigger by a transation-function - pay interest to both addr ; subtract transaction fee ; do token-transfer every call trigger the interest payout loop and add the new balance internaly - next loop can save cpu-cycles .
internal ( no gas ) : calc interest a a function of interval-index ( loop from-interval to to-interval ) .
this modifier can be use on function with external call to prevent reentry attack .
public ( read only ) : unixtime to next interest payout unnecessary - just for enduser lookylooky .
internal ( read only ) : unnecessary - just for enduser lookylooky .
internal ( read only ) : use in masternoderegister and deregister .
public ( command ) : send eth ( requiredbalanceformasternodeinether ) to contract to become a masternode .
public ( command ) : close masternode and send deposit eth back to owner .
public ( command ) : close masternode and send deposit eth back to owner .
public ( command ) : owner of a masternode can transfer the mn ( and the value in eth ) to another wallet address .
public ( read only ) : check if addr be a masternode .
internal ( read only ) : .
internal ( read only ) : faster than push / pop operations on array .
"event interestpayed ( address index owner , uint256 interestpayed ) ; erc20 : tramsferfrom : : allow _spender to withdraw from your account , multiple time , up to the _value amount ."
internal ( command ) : .
public ( command ) : official function to buy tokens during tokensale .
public ( read only ) : calc the active sale stage a a function of already sell amount .
public ( read only ) : calc the active sale stage a a function of any amount .
public ( read only ) : calc the active exchange factor ( tokens per eth ) a a function of already sell amount .
internal : token purchase function .
public ( read only ) : unixtime to next interest payout .
true if tokensale have start .
erc20 : tramsferfrom : : returns the amount which _spender be still allow to withdraw from _owner .
true if tokensale end .
true if tokensale be pause .
erc20 : tramsferfrom .
erc20 : tramsferfrom .
erc20 : public ( command ) : token transfer by owner to someone attn : total _value + transactionfee ! ! ! - account-balance _value + transactionfee .
erc20 : public ( command ) : send _value amount of tokens from address _from to address _to attn : total _value + transactionfee ! ! ! - account-balance _value + transactionfee .
erc20 : public ( read only ) .
note : constant fcn do not need safe math .
note : contant fcn do not need safe math .
buy now .
"function to get the price of the token return how many token units a buyer get per wei , need to be divide by 10 ."
low level token purchase function .
true if investors can buy at the moment .
true if crowdsale event have end .
"vault finalization task , call when owner call finalize ( ) ."
"if crowdsale be unsuccessful , investors can claim refund here ."
founders can take non-claimed fund after 19 dec .
basic operations .
unrelated to round-up .
combo operations .
note : contant fcn do not need safe math .
note : contant fcn do not need safe math .
set a new owner .
function to stop mint new tokens .
true if the hard cap be reach .
"_oraclecontract : address of the oracle contract , must implement oracleinterface ."
get the account balance for an address .
transfer the balance from owner 's account to another account .
allow _spender to withdraw from your account up to _amount .
spender of tokens transfer tokens from the owner 's balance .
returns the amount of tokens approve by the owner that can be transfer by spender .
shift tokens from the contract balance to the player or the other way round .
transfer an amount from the contract balance to the owner 's wallet .
update a casino game address in case of a new contract or a new casino game newaddress the new address of the game .
"authorize a casino contract address to access the fund v , r , s the player 's signature of the casino address , the number of time the address have already be lock and a bool state if the signature be mean for authourization ( true ) or deauthorization ( false ) ."
"deauthorize a casino contract address to access the fund v , r , s the player 's signature of the casino address , the number of time the address have already be lock and a bool state if the signature be mean for authourization ( true ) or deauthorization ( false ) ."
update the average amount of gas consume by a game gas the new avg gas .
accept deposit for an arbitrary address .
forwards a move to the corresponding game contract if the data have be sign by the client .
check if the give address be pass a first parameters in the bytes field data the function call .
"if the user want / need to withdraw his fund himself , he need to request the withdrawal first ."
withdraw an amount from the user balance if 7 minutes pass since the request .
return the current bankroll in tokens with 0 decimals .
let the owner close the contract if there be no player fund on it or if nobody have be use it for at least 30 days .
can be override to add finalization logic .
creates token contract for ico .
helper to pause catoken .
helper to unpause catoken .
low level token purchase function .
true if the transaction can buy tokens .
true if crowdsale event have end .
trigger reward a miner with sta token : .
set ico address for allow execution from the ico contract .
function to access max supply of tokens .
stable params .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
mint new tokens .
trigger reward the miner with sta token .
receiving sta from miners - during and after ico .
send stb to the miners who return sta tokens - after successful ico .
send stb to the donors - after successful ico .
send fund to the ico beneficiary account - after successful ico .
refund eth - after unsuccessful ico .
send owner 's fund to the ico owner - after ico .
send stb to the ico owner - after ico .
backup function to be execute manually - in case of a critical ethereum platform failure during automatic function execution .
assemble the give address bytecode .
allows any user to withdraw his tokens .
buy the tokens .
contribution handler .
check status .
the owner may disqualify a bid if it be bogus .
allows an owner to confirm a transaction .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
this contract only define a modifier but do not use it - it will be use in derived contract .
creates tokens and send to the specify address .
admin functions .
we do n't want the unicorn to spread hateful message .
clean house from time to time .
returns the current token price .
it should not let owners transfer tokens to protect investors .
or just transfer to the nashville ethereum meetup address .
distributes the presale tokens .
distributes the ico tokens .
to buy tokens give an address .
sends the fund to the wallet or to the refund vault smart contract if the minimum goal of tokens have n't be reach yet .
check if the crowdsale have end and enable refund only in case the goal have n't be reach .
allow load profit on the contract for the payout .
investors can claim profit if load .
allow owner to unload the loaded profit which could not be claim .
called once by crowdsale finalize ( ) if the sale be success .
shift tokens from the contract balance to the player or the other way round .
allow the owner to change the minimum bet .
true if correct .
the bytes .
true if correct .
the total win of all hand .
the value of the player 's hand .
the value of the player 's hand and the current card index .
the value of the dealer 's hand and a flag indicate if the dealer have get a blackjack .
the sum of the number .
allow the owner to change the maximum bet .
authorize a address to call game function .
deauthorize a address to call game function .
check if an address be authorize to call game functionality .
double the bet of the game with the give id if the correct amount be send and the player do not double the hand yet .
split the hand of the game with the give id if the correct amount be send from the player address and the player do not split yet .
by surrender half the bet be return to the player .
"first check if deck and the player 's number of card be correct , then check if the player win and if so , send the win ."
allows the developer to set the crowdsale address .
allows any user to withdraw his tokens .
allows any caller to get his eth refund .
buy the tokens .
wire investment .
presale tokens distribution .
allow token withdrawals from foundation reserve .
withdraws tokens from foundation reserve .
changes multisig address .
changes signer address .
burns the rest of the tokens after the crowdsale end and send 10 tokens of totalsupply to team address .
multiplies the give number by 10 ( decimals ) .
settle an investment in btc and distribute tokens .
invest in usd .
settle an investment make in eth and distribute tokens .
function call after crowdfundendtime it transfer the remain tokens to remainingtokenholder address .
buy token function call only in duration of crowdfund active .
function to transfer the fund to founder account .
get function function to get the current state of the crowdsale .
function to calculate the total no of tokens with bonus multiplication .
function provide the current bonus rate .
provide the bonus .
function to keep track of the total token allocation .
function to change founder multisig wallet address .
function to change the founder multi sign address .
attach the token contract .
function to mint tokens .
function to stop mint new tokens .
interface for founder to blacklist investors .
interface for founder to whitelist investors .
eth-aix exchange rate .
this method will generally be call by the aix token contract to acquire aixs .
this method will can be call by the controller before the contribution period end or by anybody after the endtime .
total eth that still available for collection in weis .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
pauses the contribution if there be any issue .
this method should be call by the apt holders to collect their corresponding aixs .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
the auctioneer have to call this function while supply the 1th to start the auction .
anyone can bid by call this function and supply the corresponding eth .
"once the auction end have be reach , we distribute the ether ."
"once the auction have finish , the bidders can withdraw the eth they put ."
call thisfunction to know how many second remain for the auction to end .
the dev ( owner ) will call this method to extract the tokens .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
the dev ( owner ) will call this method to extract the tokens .
distribute bonus stakes to investor accord to bonusshare .
get current finance period number .
show how much wei can withdraw investment guide .
"transfer wei from this contract to pool wallet partially only , 1 ) for fund promotion of stakes sale 2 ) accord to share ( finance_periods_last + current_finance_period ) / business_planned_period ."
investor can withdraw part of his / her investment .
distribute bounty reward for bounty task .
unfreeze team stakes .
dynamically set cap .
process stakes sale .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
send coin .
this method will can be call by the controller before the contribution period end or by anybody after the endtime .
dopayment ( ) be an internal function that send the ether that this contract receive to the vault and create tokens in the address of the _owner assume the campaign be still accept fund .
"finalizefunding ( ) end the campaign by call set the controller to 0 , thereby end the issuance of new tokens and stop the ."
for debug only available before the contract be lock .
should use when paydividends be under re-entrance freeze .
should use when paydividends be under re-entrance freeze .
re-entrance attack can freeze all dividends calculation .
re-entrance attack can freeze all dividends calculation .
fully destruct contract .
transfer token for a specified address .
high level token issue function .
this function transfer tokens to the contributor 's account .
transfer tokens from one address to another .
throws if call by any account other than the owner .
use with extreme caution this will burn the rest of the tokens in the contract .
low level token purchase function .
buy the token by deposit one of it connector tokens .
sell the token by withdraw from one of it connector tokens .
contract specific function .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
simple single-sig function modifier .
replaces an owner _from with another _to .
gets an owner by 0-indexed position ( use numowners a the count ) .
outside-visible transact entry point .
confirm a transaction through just the hash .
allows verify creation of multisignature wallet .
check if goal be reach .
withdraw the fund .
transfer tokens from other address with allowance .
destroy own tokens .
destroy tokens from other account with allowance .
price base on current token supply .
only owner can kill .
erc 20 standard token interface transfer function .
erc 20 standard token interface transfer function .
price ( ) expose for unit test .
donate entry point .
set up founder address token balance .
"for offline donation , execute by signer only ."
"emergency adjust if incorrectly set by signer , only available during the sale ."
check for redeemed balance .
redeem token in moac network .
"restore redeem back to user , only founder can do , if user make an error ."
emergency stop crowdsale .
resume crowdsale .
set crowdsale phase .
withdraw unsale token .
close crowdsale .
limits execution to after unlock date .
provides current time .
determines whether unlock date have pass .
extends unlock date .
transfers tokens hold by this contract .
owner and admin can change the admin address .
allows the admin to claim back all tokens that be not currently allocate .
owner and admin can change the operations address .
implementation of the standard transfer method that take into account the finalize flag .
implementation of the standard transferfrom method that take into account the finalize flag .
implement a burn function to permit msg . sender .
finalize method mark the point where token transfer be finally allow for everybody .
owner and revoke can change the revoke address .
allows admin or ops to create new allocations for a specific account .
"allows the revoke key to revoke allocations , if revoke be allow ."
push model which allow ops to transfer tokens to the beneficiary .
low level token purchase function .
low level token purchase function .
returns an early purchase record .
returns early purchase amount by purchaser 's address .
returns total amount of raise fund by early purchasers .
returns number of early purchase .
sets up function set external contract 's address .
invalidate early purchase .
checks whether early purchase be invalid .
amends a give early purchase with data .
checks whether early purchase be amend .
loads early purchase data to starbaseearlypurchaseamendment contract .
normalizes early purchase data .
fetches early purchase data .
returns raw number of early purchase .
setup function set external contract ' address and set the max crowdsale cap .
transfers raise fund to company 's wallet address at any give time .
update start block number for the crowdsale .
update the cny / eth rate to record purchase in cny .
update the cny / btc rate to record purchase in cny .
allow for the possibility for contract owner to start crowdsale .
ends crowdsale .
ends crowdsale .
load early purchase from the contract keep track of them .
load presale purchase from the contract keep track of them .
set qualify crowdsale partner i . e .
remove address from qualified partner list .
update whitelisted address amount allow to raise during the presale .
returns boolean for whether crowdsale have end .
returns number of purchase to date .
returns early purchase amount by purchaser 's address .
returns total raise amount in cny ( include ep ) and bonuses .
returns total amount of early purchase in cny and bonuses .
returns total amount of early purchase in cny .
allows qualify crowdsale partner to purchase star tokens .
allows user to purchase star tokens with ether .
initializes starbase crowdsale .
abstract record of a purchase to tokens .
calculates amount with bonus for bonus milestones .
fetchs bonus tier percentage per bonus milestones .
fetchs bonus tier percentage per bonus milestones .
returns total amount of raise fund by early purchasers .
redirecttopurchase redirect to adequate purchase function within the smart contract .
setup function set external contract ' address .
load crowdsale purchase from the contract keep track of them .
deliver tokens to purchasers accord to their purchase amount in cny .
returns purchase amount by an early purchaser .
returns boolean for whether crowdsale have end .
calculates bonus of a purchase .
returns number of early purchase .
close early purchase term .
setup function set external contract 's address .
internal ( gas operation ) : trigger by a transation-function - pay interest to both addr ; subtract transaction fee ; do token-transfer every call trigger the interest payout loop and add the new balance internaly - next loop can save cpu-cycles .
public ( command ) : owner of a masternode can transfer the mn ( and the value in eth ) to another wallet address .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
throws if call by any account other than the owner .
restrict access to approve users .
only owner can approve new user and currently owner ca n't remove user once register .
only allow call from owner of the address ask .
only allow call from owner of the address ask .
only allow call from owner of the address ask .
default deposit function use by users .
bot grab balance from user 's account .
let me change the secret just in case i want to .
do n't need it anymore .
gets the balance of the specified address .
function to check the amount of tokens that an owner allow to a spender .
approve should be call when allow _spender 0 .
external function allow access to our structs via function with convenient return value .
returns number of tokens own by give address .
returns number of tokens own by give address .
divide with safety check .
"called by the owner , to resume the ended / pause phase ."
"called by the owner , to extend deadline ( usually for special phase mode ) ."
standard interface .
price should be enter in multiple of 10000 's .
transfer the sms balance from caller 's wallet address to target 's wallet address .
transfer the sms balance from specific wallet address to target 's wallet address .
checking allowance .
transfer the sms balance from sms 's contract address to an investor 's wallet account .
function to give token to investors .
token bonus reward will be give to investor on each sale end .
check wallet address if exist .
check if minbalance be enough .
add wallet address with exist check .
drain all the available eth from the contract back to owner 's wallet .
drain all the available sms from the contract back to owner 's wallet .
manual burn function .
function use in reward contract to know address of token holder .
function use in reward contract to get to know the address array length .
bonus period 1 - - - bonus 0-9 sms - 5 10-49 sms - 10 50-99 sms - 20 100 sms - 30 - - - time - - - ( 2 days 9 hours 59 minutes 59 second ) .
bonus period 2 - - - bonus 0-9 sms - 3 10-49 sms - 5 50-99 sms - 10 100 sms - 15 - - - time - - - ( 11 days 9 hours 59 minutes 59 second ) .
"bonus period 3 - - - bonus 0-9 sms - 1 10-49 sms - 3 50-99 sms - 5 100 sms - 8 - - - time - - - ( 50 days , 5 hours , 14 minutes and 59 second ) ."
normal period 1 ( 2018 ) - - - time - - - ( 31 days ) .
normal period 2 ( 2020 ) - - - bonus 3x - - - time - - - ( 7 days ) .
selling from the available tokens ( on owner wallet ) that we collect after each sale end .
"called by the owner , to end the current phase and mark a burnable ."
"grant developer tokens , equal to a percentage of purchased tokens ."
transfer the unsold tokens to the owner main wallet .
init lottery .
anyone can call this .
the callback function be call by oraclize when the result be ready the oraclize_randomds_proofverify modifier prevent an invalid proof to execute this function code : the proof validity be fully verify on-chain .
the callback function be call by oraclize when the result be ready the oraclize_randomds_proofverify modifier prevent an invalid proof to execute this function code : the proof validity be fully verify on-chain .
change creator address .
release tokens after the ico .
transfer raise amount to the company address .
add additional bonus for subscribed investors .
throw if at stage other than current stage .
throw if sender be not creator .
the balance .
withdraw for bounty and advisory pool .
set up end date .
set up bounty pool .
set up advisory pool .
set buy back fund address .
update crowd sale stage base on current time .
returns the current rate with bonus percentage of the tokens .
returns the current bonus percentage .
mints a give amount of new tokens to the provided address .
checks whether or not a purchase be valid .
allows investors to claim refund in the case that the soft cap have not be reach and the duration of the ico have pass .
mints new tokens for the bounty campaign .
withdraws the total amount of eth raise to the owners address .
"returns true if the ico be a success , false otherwise ."
"returns true if the duration of the ico have pass , false otherwise ."
returns the end time of the ico .
returns the total investment of a give eth address .
finishes the mint period .
transfers tokens from the account of the owner by an approved spender .
allows another account to spend a give amount of tokens on behalf of the owner 's account .
mints a give amount of tokens to the provided address .
terminates the minting period permanently .
allows investors to buy etcl tokens by send eth and automatically receive tokens to the provided address .
allows safe confirm of manager address .
allows safe change of manager address .
indicates that preico start and not finish .
indicates that we have available tokens for sale .
tokens ans ownership will be transfer from preico contract to ico contract after preico period .
investments will be refund if preico not hit the softcap .
manager can get his / shes bonus after preico reach it 's softcap .
convert bytes to address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
allows the current owner to transfer control of the contract to a newowner .
allows safe change current owner to a newowner .
burns a specific amount of tokens .
initially safe set preico manager address .
moderator function .
transfers tokens hold by timelock to owner .
limit function execution only to senders assign to require 'role ' .
transfer token for a specified address .
this function make it easy to get the total number of tokens .
gets the balance of the specified address .
internal function .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
implements ierc677token .
public function .
withdraw and send 'amount ' of ether to msg . sender .
public function .
implements ierc223token .
allow ethertoken to reclaim tokens wrongly send to it address .
internal function .
public function .
public function .
internal function .
"divide v by d , round up if remainder be 0 . 5 or more ."
"compute decimal decimalfraction 'frac ' of 'amount ' with maximum precision ( multiplication first ) both amount and decimalfraction must have 18 decimals precision , frac 10 * * 18 represent a whole ( 100 of ) amount mind loss of precision a decimal fraction do not have finite binary expansion do not use instead of division ."
compute part / total of amount with maximum precision ( multiplication first ) part and total must have the same units .
open zeppelin math library below .
check if a contributor be at any point register .
"if the user be already register , ensure that the new cap do not conflict previous contributions ."
sets registration status of an address for participation .
remove registration status of an address for participation .
re-registers an already exist contributor .
sets registration statuses of address for participation .
the owner can allocate the specified amount of tokens from the crowdsale allowance to the recipient address .
the owner can allocate the specified amount of tokens from the crowdsale allowance to the recipient ( _to ) .
the owner can call this function to withdraw the fund that have be send to this contract for the crowdsale subject to the fund goal have be reach .
checks if the fund cap have be reach .
returns the current time .
"buy tokens , subject to the descriptive constraints specify by modifiers ."
check if a contributor be at any point register .
"if the user be already register , ensure that the new cap do not conflict previous contributions ."
sets registration status of an address for participation .
remove registration status of an address for participation .
re-registers an already exist contributor .
sets registration statuses of address for participation .
the owner can terminate the crowdsale at any time .
the owner can call this function to withdraw the fund that have be send to this contract for the crowdsale subject to the fund goal have be reach .
checks if the fund cap have be reach .
returns the current time .
computes the amount of qsp that should be issue for the give transaction .
deposit 'amount ' of eur-t to address 'to ' .
withdraws 'amount ' of eur-t by burn required amount and provide a proof of whithdrawal .
enable or disable address to be receipient of eur-t .
enable or disable address to be sender of eur-t .
overrides erc20 interface to allow transfer from / to allow address .
broker act in the name of 'from ' address so broker need to have permission to transfer from this way we may give permissions to broker smart contract while investors do not have permissions to transfer .
overrides migration source .
add to enablemigration function to prevent change of migration target once set .
should enable migration to migration target .
return current migration target .
submit a order-ring for validation and settlement .
cancel a order .
set a cutoff timestamp to invalidate all order whose timestamp be small than or equal to the new value of the address 's cutoff timestamp .
calculate each order 's fee or lrc reward .
calculate each order 's fill amount .
the small order 's index .
scale down all order base on historical fill or cancellation stats but key the order 's original exchange rate .
assmble order parameters into order struct .
validate order 's parameters be ok .
calculate the square of coefficient of variation ( cv ) https : / / en . wikipedia . org / wiki / coefficient_of_variation .
calculate the hash of a ring .
true if a ring 's hash can be submit ; false otherwise .
add a loopring protocol address .
destroy tokens from other account .
permanently lock out the director to decentralize oyster .
director can alter the storage-peg and broker fee .
director can alter the epoch time .
director can alter the maximum time of storage retention .
oyster protocol function .
oyster protocol function .
"internal transfer , can be call by this contract only ."
this method will change old multi signature for sponsee address with new one .
this method will change old sponsee address with new one .
this method will change ispayableenabled flag .
change rbinformationstoreaddress .
change name .
change symbol .
mint new token amount .
increase cap .
decrease cap .
rollback transfer .
this method will change old multi signature address with new one .
deposit amount to channel .
close a channel between two party that be use bidirectionally .
updates counter party transfer after close .
unlock a locked transfer .
settles the balance between the two party .
"the evm be a big-endian , byte address machine , with 32bytes / 256bits word ."
only admin .
only owner .
helper function .
transfer stakes from owner balance to buyer balance save data to salestat storage .
distribute bonus stakes to investor accord to bonusshare .
show how much wei can withdraw investment guide .
show share of stakes on some address relate to full supply capacity .
"transfer wei from this contract to pool wallet partially only , 1 ) for fund promotion of stakes sale 2 ) accord to share ( finance_periods_last + current_finance_period ) / business_planned_period ."
investor can withdraw part of his / her investment .
process stakes sale .
change the upgrade master .
owner can update token information here .
create the token to be sell .
low level token purchase function .
owner can mint tokens during crowdsale withing define cap .
"finish crowdsale , take totalsupply a 90 and mint 10 more to specify owner 's wallet then stop mint forever ."
set new date for pre-salev ( emergency case ) .
set new date for main-sale ( emergency case ) .
set new wallets ( emergency case ) .
set new rate ( emergency case ) .
set token on pause .
unset token 's pause .
set token ownership .
we want to be able to check all bonuses in already deploy contract that 's why we pass currenttime a a parameter instead of use now .
this be an especial admin-only function to make massive tokens assignments .
send coin .
migrate tokens to the new token contract .
check if goal be reach .
withdraw the fund .
"attach the token contract , can only be do once ."
function call after crowdfundendtime .
buy token function call only in duration of crowdfund active .
get function function provide the token .
function to keep track of the total token allocation .
function to change the founder multisig address .
log that agreement be accept by platform user .
public function .
return additional amount of neumarks issue for euroulps at totaleuroulps .
return amount of euro correspond to burn neumarks .
return amount of euro correspond to burn neumarks .
find total amount of neumarks issue for give amount of euro .
find issuance curve inverse by binary search .
public function .
implements isnapshotable .
internal function .
this function make it easy to read the allowed map .
send _amount tokens to _to from _from on the condition it be approve by _from .
internal function .
make sure that 'snapshotid ' between current snapshot id ( mcurrentsnapshotid ) and first snapshot id .
get last value in the series .
getvalueat retrieve value at a give snapshot id .
setvalue use to update sequence at next snapshot .
this function make it easy to get the total number of tokens .
the balance of owner at the current block .
send amount tokens to to from msg . sender .
implements itokensnapshots .
implements iclonedtokenparent .
snapshot at wchich initial token distribution be take .
get all token balance of 'owner ' .
internal function .
get balance at snapshot if with continuation in parent token .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
generates amount tokens that be assign to owner .
burns amount tokens from owner .
public function .
issue new neumarks to msg . sender .
use by role_neumark_issuer to transer newly issue neumarks typically to the investor and platform operator .
private function .
execute a function above but allow to provide search range for low gas burn .
internal function .
public function .
lock fund of investors for a period of time .
"unlock investors fund , see unlockinvestor for detail ."
allow to anyone to release all fund without burn neumarks and any other penalties .
allow anyone to use escape hatch .
set address to which tokens from unlock penalty be send both simple address and contract be allow contract need to implement approveandcallcallback interface .
overrides migration source .
migrate single investor .
allow lockedaccount to reclaim tokens wrongly send to it address .
internal function .
private function .
unlock 'investor ' tokens by make them withdrawable from assettoken .
announce that a particular future ethereum fork will the one take by the contract .
declare that the current fork ( a identify by a blockhash ) be the valid fork .
public function .
"implements iaccesspolicy . allow ( address , ."
atomically change a set of role assignments .
private function .
public mutable function .
mint new token amount .
check if a contract exist .
"dispute the state after close , call by the counterparty ( the participant who do not close the channel ) ."
unlock a locked transfer .
settle the transfer and balance of the channel and pay out to each participant .
returns the number of block until the settlement timeout .
returns the address of the token .
returns the block number for when the channel be open .
returns the block number for when the channel be close .
returns the block number for when the channel be settle .
returns the address of the close participant .
get the address of channel with a partner .
create a new payment channel between two party .
get the hash of the two address .
check if a contract exist .
get all channel .
get all participants of all channel .
get all channel that an address participate in .
get the address of the channel token .
get the address of channel with a partner .
create a new payment channel between two party .
register a new erc20 token .
get the channelmanager address for a specific token .
get all registered tokens .
get the address of all channel managers for all registered tokens .
caller make a deposit into their channel balance .
get the address and balance of both partner in a channel .
close the channel .
registers the ethereum address to the endpoint socket .
finds the socket if give an ethereum address .
finds ethreum address if give an exist socket address .
transfer token for a specified address .
this function can be auto-generated by the script 'printfunctionfixedexp . py ' .
"give a token supply , connector balance , weight and a deposit amount ( in the connector token ) , calculate the return for a give conversion ( in the main token ) ."
"give a token supply , connector balance , weight and a sell amount ( in the main token ) , calculate the return for a give conversion ( in the connector token ) ."
calc how much token you can buy at current time .
approve and then communicate the approve contract in a single tx .
send tokens .
transfer tokens .
allow another contract to spend some tokens in your behalf .
destruction of the token .
public mutable function .
gets the balance of the specified address .
transfer tokens from one address to another param _from address the address which you want to send tokens from param _to address the address which you want to transfer to param _value uint256 the amout of tokens to be transfer .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
converts all 10mti tokens approve ( ) 'd by msg . sender .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
withdraw the fund safely .
create the token to be sell .
low level token purchase function .
mint 55 mln tokens for owner .
public function .
stop sale in case of emergency ( i . e .
restart sale in case of an emergency stop .
create msg . value .
checks if transaction meet individual cap requirements .
updates registration status of an address for sale participation .
updates registration status for multiple address for participation .
allows contributors to recover their eth in the case of a failed token sale .
depositing fund on behalf of an ico investor .
return the fund to a specify investor .
destruction of the contract with return of fund to the specify address .
returns the name of the current round in plain text .
the logic of finalization .
the manager freeze the tokens for the team .
"change the date and time : the begin of the round , the end of the bonus , the end of the round ."
"change the price ( the number of tokens per 1 eth ) , the maximum hardcap for the last bet , the minimum bet ."
"we change the parameters of the discount : min bonus , max bonus , number of step ."
returns the amount of fee for both phase .
returns the percentage of the bonus on the give date .
"the ability to quickly check pre-ico ( only for round 1 , only 1 time ) ."
remove the pause of exchange .
checking whether the right to address ignore the pause of exchange .
"if a little more than a year have elapse ( ico start date + 460 days ) , a smart contract will allow you to send all the money to the beneficiary , if any money be present ."
"we accept payments other than ethereum ( eth ) and other currencies , for example , bitcoin ( btc ) ."
the function for obtain smart contract fund in eth .
"public info view - what be be trade here , what be the limit ? ."
public function .
private funtions .
it will return status of white list .
it will remove whitelisted user .
it will white list one member .
it will white list multiple members .
modifier to require the ico be on go .
function to contribute to the ico .
function to check if ico if finish .
function to do final transactions .
function to be call when anyone send u money .
redeem tokens ( admin fallback ) .
true if the transaction can buy tokens .
true if crowdsale event have end or cap reach .
"if crowdsale be unsuccessful , contributors can claim refund here ."
do not require that crowdsale hasended ( ) to leave safegaurd in place if eth rise in price too much during crowdsale .
low level token purchase function caution : tokens must be redeem by beneficiary address .
redeem tokens .
only for demonstrate test version .
only for demonstrate test version .
only for demonstrate test version .
only for demonstrate test version .
only for demonstrate test version .
change for private when deploy to main net .
todo : optimize this .
low level token purchase function .
issue new tokens accord to the star token inflation limit .
declares starbase mvp have be launch .
allocate tokens to a crowdsale or early purchaser from the crowdsale share .
transfers sender 's tokens to a give address .
allows third party to transfer tokens from one address to another .
adds fundraiser .
update fundraiser address right .
returns whether fundraiser address have right .
returns whether the transfer of tokens be available fundraiser .
returns the number of transferable company 's tokens .
returns the number of untransferable tokens of the early contributor .
returns number of tokens which can be issue accord to the inflation rule .
allocate tokens value from an address to another one .
setup function set external contract ' address .
returns number of declared public offer plan .
declares a public offer plan to make company 's tokens transferable .
false if crowdsale event be end .
current stage name .
change agent for wave mint .
set tlp1 . 2 .
set tlp1 . 1 .
large token holder mint .
calculate amount .
sell token and send to contributor address .
set the ether to dollar exhchange rate .
this add an affiliate ethereum address to our whitelist .
calculate and return the amount to token mint for affilliate .
fetches the ethereum address of a valid affiliate .
checks if an affiliate be valid .
adds an approved address for the sale .
"this method send the ether receive to the ether escrow address and generate the calculated number of shp tokens , send them to the caller 's address ."
pays an affiliate if they be valid and present in the transaction data .
minime controller interface function .
adds to the whitelist .
processes the presale if the allow contribution be more than zero .
"returns true if the whitelist period be still active , false otherwise ."
"returns the contribution to be use a part of the transaction , and any refund value if expect ."
"returns the contribution to be use for a sender that have previously be whitelisted , and any refund value if expect ."
returns the contribution and refund value to be use when the transaction value equal the whitelisted contribution for the sender .
returns the contribution and refund value to be use when the transaction value be high than the whitelisted contribution for the sender .
returns the contribution and refund value to be use when the transaction value be low than the whitelisted contribution for the sender .
"updates the whitelistedplannedcontributions counter , subtract the contribution about to be apply ."
calculates the allow contribution base on the transaction value and amount remain till cap .
returns the ether amount remain until the hard-cap .
public function enable close of the pre-sale manually if necessary .
private function use to close the pre-sale when the hard-cap be hit .
applies the discount base on the discount tiers .
updates the counter for the amount of ether pay .
"this mean that if the owner call this function , the function be execute and otherwise , an exception be throw ."
owner can collect fee .
change ownership .
double payout program .
allows the current owner to transfer control of the contract to a newowner .
this famous algorithm be call exponentiation by square and calculate x n with x a fixed-point and n a regular unsigned .
change the owner of the contract .
mint more tokens .
burn some tokens .
get the balance of the give holder .
transfer tokens to a specify holder .
transfer tokens to a specify holder .
transfer tokens from one address to another .
mint tokens .
burn tokens .
get the amount of tokens that a holder allow other holder to spend .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
transfer tokens from one holder to the other holder .
burn tokens .
check participants answer and change deal state .
return money to customer .
confirm deal complete and transfer money to beneficiary .
pay on a behalf of an address .
pay on a behalf of the sender .
throws if call by any account other than the owner .
implementation of erc20interface .
"internal transfer , only can be call by this contract ."
for refund only .
transfer token to .
mint new tokens .
handle incoming transactions .
setup the whitelist .
wheter the contributor be accept or not .
attach the presale contract .
allow investors that contribute in the private presale to generate the same amount of tokens in the actual crowdsale .
setup the crowdsale .
low level token purchase function .
low level token purchase function .
moderator function .
moderators function .
public function .
"allows _spender to spend no more than _value tokens in your behalf , and then ping the contract about it ."
batch the adminship of the contract .
adds a token deposit to deposit ; only the owner can call this function and it will only work if the account send the tokens have call approve ( ) so that this contract can call transferfrom ( ) and take the tokens .
this function be a failsafe function in case a token be deposit that have an issue that could prevent it 's withdraw loop break ( e . g .
"sends all the tokens and ether to the token holder by loop through all the deposit , determine the appropriate amount by divide the totalsupply by the number of tokens the token holder have at deposit . block ."
"this function be a failsafe function in case a token holder want to skip a payment , can only be apply to one deposit at a time and only affect the payment for the msg . sender ."
calculates the amount of a give token ( or ether ) the holder can receive .
a check to see if a specific address have anything to collect .
checks how many deposit have be make .
checks to see if a specific deposit have be skip .
"transfers amount of token to dest , only use internally , and do not throw , will always return true or false ."
"decentralizes the contract , this operation can not be undone ."
the blacklistescapetokens ( ) mark a token in a whitelist to be escape .
adds an ether deposit to deposit ; only the owner can deposit into this contract .
set start date .
set end date .
set rate .
set address .
invest in this contract in order to have tokens purchase on your behalf when the buytokens ( ) contract be call without a throw .
get the presalebalance ( eth ) for an address .
an 'escape hatch ' function to allow purchasers to get a refund of their eth before refundstart .
attempt to purchase the tokens from the token contract .
call 'withdraw ' on the skrilla contract a this contract .
transfer an account token entitlement to itself .
refund an accounts investment .
functions of the contract .
modifiers of the contract .
token fallback function forward to this .
release balance back to original owner if any .
you can claim current balance if you put the same amount ( or more ) back in .
price be 1000 techbench for 1 eth .
the basic entry point to participate the tge event process .
pre-tge state .
bonus stage one state .
bonus stage two state .
bonus stage three state .
transfer bounty to target address from bounty pool .
transfer team tokens to target address .
function to mint tokens .
function distributetltdaddress address ) onlyowner for ( uint i 0 ; i address . length ; .
used for force ensurestage modifier .
overrides crowdsale . buytokens ( ) .
overrides crowdsale . validpurchase ( ) .
overrides crowdsale . createtokencontract ( ) .
"there should n't be any fund trap in this contract but a a failsafe if there be any fund whatsoever , this function exist ."
helper function to return a min betwen the two uints .
pure function .
this function calculate the refund amount for the funder .
getter function .
state change function .
refunding by funder .
used when the funder want to remove themselves a a funder without refund .
this be a bookkeeping function which update the state for the funder when top up their fund .
the beneficiary can stop / enable funders from claim more tokens .
token contract forwarding controller functions .
tranfer tokens to address .
tranfer tokens from one address to other .
approve transfer .
create new tokens and allocate them to an address .
set the contract that can call release and make the token transferable .
accept transferownership .
fix for the erc20 short address attack http : / / vessenes . com / the-erc20 - short-address - attack-explained .
make sure we be not do yet .
limit token transfer until the crowdsale be over .
total supply .
tokens balance .
token allowance .
call by contract to generate random number between 0-9 .
get money back .
approves and then call the receive contract .
director can close the crowdsale .
director can open the crowdsale .
transfers the director to a new address .
transfers the partner to a new address .
withdraw fund from the contract ( failsafe ) .
function to mint tokens .
low level token purchase function .
reward rate for purchase .
send ether to the fund collection wallet .
true if the transaction can buy tokens .
true if crowdsale event have end .
burn by user .
burn from users .
called by a crowdsale contract upon creation .
functions with this modifier can only be execute by the owner .
add : transfer ownership .
add : mint token .
burn bntts by user .
burn bntts from users .
functions with this modifier can only be execute by the owner .
send _value amount of tokens from address _from to address _to .
send coin .
a contract attempt to get the coin .
reject all erc23 compatible tokens param from_ address the address that be transfer the tokens param value_ uint256 the amount of the specify token param data_ bytes the data pass from the caller .
"withdraw accumulate balance , call by payee ."
"contribute function , accept incoming payments and track balance for each contributors ."
function to check if crowdsale have start yet .
function to check if crowdsale be complete ( .
function to view current token balance of the crowdsale contract .
"function to check if crowdsale have be successful ( have incoming contribution balance meet , or exceed the minimum goal ? ) ."
function to check the ether balance of a contributor .
function to check the current tokens sold in the ico .
function to check the current tokens affect to the team .
function to check the current tokens affect to bounty .
function to check the refund period be over .
function to check the refund period be over .
function to check percentage of goal achieve .
calcul the rok bonus accord to the investment period .
function to set the balance of a sender .
only owner will finalize the crowdsale .
function to pay out .
function to pay team .
function to update kyc list .
function to claim rok tokens .
when min_cap be not reach the smart contract will be credit to make refund possible by backers 1 ) backer call the refund function of the crowdsale contract 2 ) backer call the withdrawpayments function of the crowdsale contract to get a refund in eth .
when min_cap be not reach the smart contract will be credit to make refund possible by backers 1 ) backer call the partialrefund function of the crowdsale contract with the partial amount of eth to be refund ( value will be renseigned in wei ) 2 ) backer call the withdrawpayments function of the crowdsale contract to get a refund in eth .
processes the presale if the allow contribution be more than zero .
"returns the contribution to be use a part of the transaction , and any refund value if expect ."
returns the contribution and refund value to be use when the transaction value be high than the whitelisted contribution for the sender .
returns the contribution and refund value to be use when the transaction value be low than the whitelisted contribution for the sender .
returns the ether amount remain until the hard-cap .
this should be call by the creator of the contract to commit all the ceilings .
anybody can reveal the next ceiling if he know it .
reveal multiple ceilings at once .
applies the discount base on the discount tiers .
updates the counter for the amount of ether pay .
public function enable close of the crowdsale manually if necessary .
"move to ceiling , use a a failsafe ."
return the fund to collect for the current point on the ceiling ( or 0 if no ceilings reveal yet ) .
calculates the hash of a ceiling .
return the total number of ceilings commit ( can be large than the number of actual ceilings on the ceiling to hide the real number of ceilings ) .
bootstrap the contract and make the tokens transferrable .
before start : .
"internal transfer , only can be call by this contract ."
set allowance for other address and notify .
transfer tokens .
anyone can make tokens available when the campaign be successful .
checks if fund of a give address be time-locked .
stand order address .
number of wei that payee can collect .
"number of wei belong owner , negative if contract be miss fund to cover payments ."
amount that have be transfer ! .
withdraw request amount back to owner .
terminate order .
address of new create standingorder contract .
number of order .
stand order address .
number of order .
public a string be subitted that be hash test to the digest ; if true the fund be send to the dest address and destroy the contract .
only issuer if the time expire ; the issuer can reclaim fund and destroy the contract .
allow actors to view their tx .
adds an approved address for the sale .
get the balance of the specified address .
transfer tokens to the specify address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens .
get the amount of tokens that an owner have allow an address to spend .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
transfer tokens to the specify address .
throws if call by any account other than the owner .
gets the balance of the specified address .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
function to check the amount of tokens than an owner allow to a spender .
function to restart mint new tokens .
allows the owner to enable the trade .
allows anyone to transfer the pay tokens once trade have start .
allows anyone to transfer the pay tokens once trade have start .
function to stop mint new tokens .
function to stop mint new tokens .
allows anyone to create tokens by deposit ether .
allows authorize acces to create tokens .
allows the owner to set the exchangerate contract .
allows the owner to transfer erc20 tokens to the multi sig vault .
allows the owner to set the multisig contract .
ownership of the pay token contract be transfer to this owner .
function to add a new investor .
allows the current owner to update a single rate .
allows the current owner to update multiple rat .
allows the anyone to read the current rate .
functions of the contract .
modifiers of the contract .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
destroy tokens .
the index of the current phase .
handle incoming transactions .
allocate tokens for stakeholders .
transfers tokens hold by timelock to beneficiary .
wrapper of token . transferfrom .
wrapper of token . transfer .
mint timelocked tokens .
release frozen tokens .
burns a specific amount of tokens .
allows the current owner to transfer control of the contract to a newowner .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
approve should be call when allow _spender 0 .
function to mint tokens .
we 're override the fund forward from crowdsale .
"if crowdsale be unsuccessful , investors can claim refund here ."
"vault finalization task , call when owner call finalize ( ) ."
release delay bonus tokens .
trasfer bonuses and add delayed bonuses .
mint of tokens in the name of the founder and freeze part of them .
purchase for bitcoin .
set new address who can buy tokens for bitcoin .
finish the crowdsale .
low level token purchase function .
send ether to the fund collection wallet .
check if the specified purchase be valid .
"because of discount hasended might be true , but validpurchase return false ."
true if crowdsale event have start .
"must be call after crowdsale end , to do some extra finalization work ."
display current contract state in human readable form .
implementation methods .
fail if the current state be not before than the give one .
fail if something in setup be look weird .
accept call from owner only .
accept call from token holders only .
don t accept transactions with value less than allow minimum .
require _proposedaddress to have be propose already .
require that the vote period for the proposal have not yet end .
require that the vote period for the proposal have end .
require that the proposal be support .
whether the proxy be in the deploy stage .
whether the proxy be deploy .
whether the proxy be execute .
deploy the proxy .
the combined total drp supply .
true if there be a balance that belong to _owner .
the allocated drps token balance .
whether _proposedaddress be already propose .
the amount of proposals .
voting duration .
uint vote count .
bool whether _account have vote on the proposal .
bool supported .
allows a token holder to vote on a proposal .
"support , reject ."
bool supported .
bool success .
event handler that initialize the token conversion .
withdraw drps tokens from the proxy and reduce the owners weight accordingly .
withdraw drpu tokens from the proxy and reduce the owners weight accordingly .
failsafe mechanism .
adjust vote weight in ongoing proposals on which _owner have already vote .
require that the proxy be in _stage .
require _token to be one of the drp tokens .
require that _token be not one of the drp tokens .
require that sender have more than zero tokens .
the percentage of tokens that be charge .
the rate use when change tokens .
the amount of decimals use .
whether the token changer be in the paused state .
the actual fee .
whether the converter be currently authenticate or not .
request that the ( old ) drp smart-contract transfer _value worth of ( old ) drp to the drps token converter to be convert .
failsafe mechanism .
whether the '_token ' be part of this token changer .
left token address .
right token address .
request that the ( old ) drp smart-contract transfer _value worth of ( old ) drp to the drpu token converter to be convert .
event handler that initialize the token conversion .
can be use prior to the donation a a constant function but it be mainly use in the noname function .
"first check the gt owner , then fire the event and then change the owner to null so gt ca n't be use again ."
"first check the gt owner , then change the owner and fire an event about the ticket change owner ."
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
create the token to be sell .
implementation of the override to the buy in function for incoming eth .
recalculating tokens to receive base on teh currentprice ( 2 ) function .
can be use prior to the donation a a constant function but it be mainly use in the noname function .
initiate oraclize call for random number .
the finalization override - comment bellow .
checking result of the fundraiser in usd .
counts percentage of the total fund that belong to the charity .
counts the exact amount of wei to get send to the charity .
create the ethusd query to kraken thorough oraclize .
create the random number query to oraclize .
use qtype to handle the last called query type .
reaction to ethusd rate oraclize callback - getrateusd ( ) .
reaction to random number oraclize callback - getrandom ( number of participants ) .
adjusting the hasended function to a case where all tokens be sell .
whether _account be have an entry in the whitelist .
whether _account be successfully authenticate .
throws if call by any account other than the owner .
throws if call by any account other than the owner .
throws if call by any account other than the owner .
function to stop mint new tokens .
allows anyone to transfer the bon tokens once trade have start .
allows anyone to transfer the bon tokens once trade have start .
modifier to allow token creation only when the sale is on .
allows to set the toal alt deposit measure in eth to make sure the hardcap include other deposit .
allows the owner to finish the mint .
allows the owner to transfer erc20 tokens to the multi sig vault .
function to get a specific authorizer .
function to add a new authorizer .
allows the current owner to update a single rate .
allows the current owner to update multiple rat .
fix for the erc20 short address attack .
returns an early purchase record .
returns early purchase amount by purchaser 's address .
returns total amount of raise fund by early purchasers .
returns number of early purchase .
contract function .
internal function .
update start block number for the crowdsale .
allow for the possibility for contract owner to start crowdsale .
ends crowdsale .
deliver tokens to purchasers accord to their purchase amount in cny .
load early purchase from the contract keep track of them .
calculates total amount of tokens purchase include bonus tokens .
calculates total amount of tokens purchase without bonus conversion .
returns total raise amount in cny ( include ep ) and bonuses .
returns early purchase amount by purchaser 's address .
allows user to purchase star tokens with ether .
initializes starbase crowdsale .
abstract record of a purchase to tokens .
calculates amount with bonus for bonus milestones .
returns total amount of raise fund by early purchasers .
returns number of early purchase .
append an early purchase log .
privilege transfer .
admin only can transfer from the privileged account .
"funding succeed if not abort , minimum fund be raise before end date ."
returns wholesale value in wei .
calculates the sale and wholesale portion of tokens for a give value of wei at the time of call .
ts function .
general address can purchase tokens during fund .
owner can sweep a successful fund to the fundwallet .
releases vest tokens back to hut34 wallet .
direct refund to caller .
bulk refund can be push from a failed ts .
erc20 additional and overloaded function .
overload to check ts success and kyc flag .
overload to require ts success .
contract management function .
finalise change of ownership to newowner .
this will selfdestruct the contract on the condittion all have be process .
calculate commission on prefunded and raise ether .
make sure this function name match the contract name above .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
balance of a specific account .
returns the amount which _spender be still allow to withdraw from _owner base on the approve function .
approves and then call the receive contract .
basic operations .
combo operations .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
throws if call by any account other than the owner .
ensure only owner can call function .
update owner .
whitelist handler function .
allow refund if isrefundallowed be on .
utility function .
send _value tokens to _to from your account .
send _value tokens to _to in behalf of _from .
allows _spender to spend no more than _value tokens in your behalf .
"allows _spender to spend no more than _value tokens in your behalf , and then ping the contract about it ."
make an investment .
modified allow execution only if the crowdfunding be currently run .
investors can claim refund .
"called by the deploy agent on emergency , trigger stop state ."
"called by the deploy agent on end of emergency , return to normal state ."
add a milestone .
get the current milestone or bail out if we be not in the milestone periods .
returns the account balance of another account with address _owner .
"transfers _value amount of tokens to address _to , and must fire the transfer event ."
"transfers _value amount of tokens from address _from to address _to , and must fire the transfer event ."
"allows _spender to withdraw from your account multiple time , up to the _value amount ."
limit token transfer until the sale be over .
modified allow execution only if deploy agent call .
modified allow execution only if not stop .
modified allow execution only if stop .
fix for the erc20 short address attack http : / / vessenes . com / the-erc20 - short-address - attack-explained .
crowdfund state machine management .
goal be reach .
allow contributions to this crowdfunding .
finalize a succcesful crowdfunding .
replaces an owner .
"replaces a founder , transfer team pool to new founder balance ."
"reviewed : - interger overflow ok , check ."
fix for the erc20 short address attack .
price count .
the basic entry point to participate the crowdsale process .
pre-ico state .
emergency stop ico .
transfer bounty tokens to target address .
erc 20 standard token interface transfer function .
erc 20 standard token interface transfer function .
totalsupply uint256 proof token total supply .
balance uint256 corresponding token holder balance .
change the proof token controller .
low level token purchase function .
forwards fund to the tokensale wallet .
allows to add a new owner .
return list of transactions after filter be apply .
returns list of pending transactions .
returns list of executed transactions .
allows to remove an owner .
update the minimum required owner for transaction validation .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
allows an owner to submit and confirm a transaction .
allows an owner to confirm a transaction .
allows anyone to execute a confirmed transaction .
allows an owner to revoke a confirmation for a transaction .
returns the confirmation status of a transaction .
returns number of confirmations of a transaction .
function to mint tokens .
"to trigger payout three out of four administrators call this function , fund will be transfer right after verification of third signer call ."
destroy tokens from other ccount .
self-report the time it take you to solve ( or not ) .
internal function for transfer of tokens between 2 different address .
function to transfer apmas to a give address from the contract owner .
function to transfer apmas between two give address .
setting up the allowance for the spender on the behalf of the contract owner .
notification for allowance of a spender by the contract owner .
depleting the apma supply .
depleting the apma supply from a give address .
change the proof token controller .
deposit a erc20 token .
watch for balance in a token contract .
erc23 token fallback .
"called minimetoken approvesandcall to this contract , call deposit ."
allows to remove an owner .
give full ownership of this wallet to _dest remove old owners from wallet .
allows anyone to execute a confirmed transaction .
withdraw all recognize tokens balance and ether to _dest .
withdraw all recognize tokens balance to _dest .
withdraw _tokenaddr _amount to _dest .
register the deposit .
returns total number of transactions after filter be apply .
contract constructor set initial owners and required number of confirmations .
deposit a erc20 token .
clonedtokenaddress address .
changebountypaystokens ( ) : allow the issuer to change a bounty 's issuer .
override this method to mock current time .
this function be n't abstract since the compiler emit automatically generate getter function a external .
issues tokens for the recipient .
proposes to transfer control of the paireceipt contract to a new owner .
accepts new ownership on behalf of the paireceipt contract .
participate to a presale .
how may tokens each investor get .
how many tokens remain unclaimed for an investor .
claim n buy tokens to the investor a the msg sender .
this function must be call by token holder in case of crowdsale fail .
migration by investor .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
function to mint tokens .
function to stop mint new tokens .
function to burn tokens .
allows the current owner to transfer control of the contract to a newowner .
fix for the erc20 short address attack .
transfer token for a specified address .
transfer tokens from one address to another .
check if the goal or time limit have be reach and end the campaign .
send money to beneficiary .
"if the ico be fail , investors will call this function to get their money back ."
send some of your tokens to a give address .
allow another contract or person to spend some tokens in your behalf .
a contract or person attempt to get the tokens of somebody else .
"refund investment , token will remain to the investor ."
get the rate for a acf token 1 acf 0 . 05 eth - 20 acf 1 eth .
function for external token purchase .
public function .
only admin .
only moderators .
in case there be an error .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
calculates the sale and wholesale portion of tokens for a give value of wei at the time of call .
ico function .
general address can purchase tokens during fund .
owner can sweep a successful fund to the fundwallet .
bulk refund can be push from a failed ico .
overload to check ico success and kyc flag .
overload to require ico success .
modified allow execution only if the crowdfunding be currently run .
"call by the deploy agent on end of emergency , return to normal state ."
modified allow execution only if deploy agent call .
modified allow execution only if not stop .
modified allow execution only if stop .
crowdfund state machine management .
goal be reach .
allow contributions to this crowdfunding .
finalize a succcesful crowdfunding .
investors can claim refund .
"call by the deploy agent on emergency , trigger stop state ."
decode an rlpitem into bytes .
get the list of sub-items from an rlp encode list .
decode an rlpitem into an ascii string .
decode an rlpitem into a uint .
decode an rlpitem into a boolean .
decode an rlpitem into a byte .
decode an rlpitem into an int .
decode an rlpitem into a bytes32 .
decode an rlpitem into an address .
get the payload offset .
creates an rlpitem from an array of rlp encode bytes .
get the full length of an rlp item .
get start position and length of the data .
assumes that enough memory have be allocate to store in target .
check that an rlp item be valid .
the follow modifiers only allow specific roles to call function with these modifiers .
the following modifiers prevent function from be call if the campaign have be cancel or if new milestones be be propose .
the number of milestones ever create even if they be cancel .
onlyarbitrator reassigns the arbitrator to a new address .
onlydonor reassigns the donor to a new address .
onlyrecipient reassigns the recipient to a new address .
creates an rlpitem from an array of rlp encode bytes .
"onlyrecipient proposes new milestones or change old milestones , this will require a user interface to be build up to support this functionality a ask for rlp encode bytecode to be generate , until this interface be build you can use this script : https : / / github . com / giveth / milestonetracker / blob / master / js / milestonetracker_helper . js ."
onlyrecipient cancels the propose milestones and reactivate the previous set of milestones .
onlydonor approves the propose milestone list .
onlyrecipientorleadlink marks a milestone a done and ready for review .
onlyreviewer approves a specific milestone .
onlyreviewer rejects a specific milestone 's completion and revert the milestone . status .
onlyrecipientorleadlink sends the milestone payment a specify in paydata ; the recipient can only call this after the reviewtime have elapse .
onlyrecipient cancels a previously accept milestone .
onlyarbitrator forces a milestone to be pay out as long a it have not be pay or cancel .
onlyarbitrator cancels the entire campaign void all milestones vo .
check if the rlp item be null .
this internal function be execute when the milestone be pay out .
check if the rlp item be a list .
check if the rlp item be data .
check if the rlp item be empty ( string or list ) .
get the number of items in an rlp encode list .
create an iterator .
return the rlp encode bytes .
"lock transfer until mint be over , which end at the end of the sale thus , the behavior of this token be locked transfer during sale , and unlocked after : ) ."
returns the first slice of a split .
returns the length of a null-terminated bytes32 string .
finds the index of the first occurrence of _needle in _haystack .
transfer token to .
total supply uint256 .
token balance uint256 .
allocates proof tokens to the give proof token wallet .
finalize the token sale ( can only be call by owner ) .
forwards fund to the tokensale wallet .
function to distribute tokens to list of address by the provided amount .
returns the first slice of a split .
returns the length of a null-terminated bytes32 string .
finds the index of the first occurrence of _needle in _haystack .
bool valid .
helper function to return a min betwen the two uints .
clones proof token at the give snapshot block .
total supply uint .
total supply uint .
balance uint .
balance uint .
transfert the amont _value from the address call the function to address _to .
return the balance of an account .
autorize the address _spender to transfer from the account msg . sender .
return the amont of allowance .
send token : transfer amount _value from the addr call function to address _to .
low level token purchase function .
manually update the tokens sell count to reserve tokens or update stats if other way buy .
"release tokens from sell statistist , use if the account be not verify with kyc ."
send ether to the fund collection wallet override to create custom fund forward mechanisms .
"when a user buy our token they will recieve a bonus depedning on time : , ."
"true if the transaction can buy tokens check for valid time period , min amount and within cap ."
true if the goal be reach .
send coin .
owner function .
owner be the only address that can call a function with this modifier .
only allowedspenders the recipient of a payment call this function to send themselves the ether after the earliestpaytime have expire .
onlysecurityguard delays a payment for a set number of second .
onlyowner cancel a payment all together .
onlyowner adds a spender to the allowedspenders white list .
onlyowner sets the address of securityguard .
onlyowner changes timelock ; the new timelock can not be low than absolutemintimelock .
onlyowner changes the maximum number of second securityguard can delay a payment .
the address preassigned the escapehatchcaller role be the only address that can call a function with this modifier .
the escapehatch ( ) should only be call a a last resort if a security issue be uncover or something unexpected happen .
changes the address assign to call escapehatch ( ) .
the address assign the role of securityguard be the only address that can call a function with this modifier .
states the total number of authorized payments in this contract .
called anytime ether be send to the contract create an event to more easily track the incoming transactions .
only allowedspenders creates a new payment .
phoenix ends the fund period and send the eth home .
function to distribute tokens to list of address by the provided amount .
allow the owner to reveal the secret key after ballot conclusion .
ballot params - allow the frontend to do some check .
this be an especial admin-only function to make massive tokens assignments .
increase the tokens of an specified address increase totalsupply .
decrease the tokens of an specified address decrease totalsupply .
when the contract need to upgrade to version 2 .
change the required number of owner signatures .
request dividends for current account .
hook on standard erc20 transfer to pay dividends .
hook on standard erc20 transferfrom to pay dividends .
"disable mint ( ) , irreversible ! ."
starts new token emission .
add dividends to the account _to .
calculate dividends for the account _for .
process and forward investment .
total investments amount store use storeinvestment ( ) .
"create more payment channel , up to the limit but not exceed gas stipend ."
process payments - record analytics and pass control to iaoninvested callback .
payment process .
public interface : maintenance .
tests ownership of the current caller .
payment callback .
minimum amount of fund to consider crowdsale a successful .
maximum investments to be accept during pre-ico .
start time of the pre-ico .
end time of the pre-ico .
pre-ico bonus .
replace an owner _from with another _to .
add an owner .
remove an owner .
adds new coordinator .
removes exist coordinator from list of coordinators .
accepts the vote of coordinator for upcoming emission : which amount he or she be agree to emit .
attempts to make emission of specified value .
hold coin .
unhold coin .
send coin .
allow another contract to spend some tokens in your behalf .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
set access permissions for methods .
fund contract .
total amount of tokens .
allows the owner to change the price for tokens .
"allows owner to transfer tokens assign to the sale contract , back to the bank wallet ."
allows the owner to finalize the sale and allow tokens to be trade .
allows the owner to change the bonus amount apply to purchase .
allows the owner to change the time window for the sale .
allows the owner to suspend / stop the sale .
allows the caller to buy tokens for another recipient ( proxy purchase ) .
"erc20 transfer function , modify to only allow transfer once the sale have be finalize ."
"erc20 transferfrom function , modify to only allow transfer once the sale have be finalize ."
internal helper to check if the transfer should be allow .
creates a new clone token with the initial distribution be this token at _snapshotblock .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
update the dapp by create a new token with new functionalities the msg . sender .
"update randomness , will be use to find next nonce ."
return randomness use in pow calculations .
"pure , accept randomness nonce and return hash a int ( which should be compare to target ) ."
accept nonce and tell whether it be good to mine .
"accept nonce aka mine field , check if it pass proof of work , reward if it do ."
send _value tokens to _to from your account .
"allows _spender to spend no more than _value tokens in your behalf , and then ping the contract about it ."
unrelated to round-up .
combo operations .
a contract attempt to get the coin .
modifier to allow action only when the contract be not pause or the sender be the owner of the contract .
transfer tokens from other address .
destroy tokens .
create mintedamount tokens and send it to target .
"internal transfer , only can be call by this contract ."
"internal transfer , only can be call by this contract ."
transfer tokens .
destroy tokens .
"call by the owner on emergency , trigger stop state ."
"call by the owner on end of emergency , return to normal state ."
public functions .
true if a ring 's hash have ever be submit ; false otherwise .
calculate the hash of a ring .
submit a order-ring for validation and settlement .
cancel a order .
set a cutoff timestamp to invalidate all order whose timestamp be small than or equal to the new value of the address 's cutoff timestamp .
validate a ring .
0 if neither order be the small one ; 1 if 'state ' be the small order ; 2 if 'next ' be the small order .
scale down all order base on historical fill or cancellation stats but key the order 's original exchange rate .
amount of erc20 token that can be spend by this contract .
amount of lrc token that can be spend by this contract .
verify input data 's basic integrity .
assmble order parameters into order struct .
validate order 's parameters be ok .
get the keccak-256 hash of order with specified parameters .
verify signer 's signature .
calculate the square of coefficient of variation ( cv ) https : / / en . wikipedia . org / wiki / coefficient_of_variation .
"check if condition hold , if not , log an exception and revert ."
add a loopring protocol address .
remove a loopring protocol address .
amount of erc20 token that can be spend by this contract .
invoke erc20 transferfrom method .
gets all versioned address .
set access permissions for methods .
calculates the sale and wholesale portion of tokens for a give value of wei at the time of call .
bulk refund can be push from a failed ico .
owner can salvage erc20 tokens that may have be send to the account .
check if goal be reach .
function to be use for presale purchase .
function to be use for mainsale purchase .
function report the number of tokens available for sale .
override unpause function to only allow once configure .
function to configure contract address .
function to configure contract parameters .
function that can be call by purchasers to refund .
function use for fund in case of refund .
transfer tokens from one address to another - need for owner transfer .
function that be use for whitelisting an address .
data be an array of uint256s .
"note that a bop can not go from committed back to open , but it can go from closed back to committed ( this would retain the committed worker ) ."
throws if call by any address other than the one that own the id .
calculates the maximum amount of vested tokens .
modify the fee .
to get the money back .
to reply to a thread .
functions - - - modifiers .
after sale contract owner ( can be another contract or account ) can withdraw all collect ether .
"bonuses be set in a integers ( 20 , 30 ) , initial 0 ."
interaction with other contract .
for example for conveting all tokens of user account to another tokens .
administrative function .
"create and sell tokens set time for start and time for end pre-ico time be integer represent block timestamp in unix time , see : https : / / www . epochconverter . com ."
prevent short address attack .
allows the contract owner to burn ( destroy ) their own tokens .
allows the owner to set the crowdsaleaddress .
"allow the owner to update the unlockdate to allow trade sooner , but not later than the original unlockdate ."
checks if now be before unlock date and the msg . sender .
checks if msg . sender .
erc-20 transfer with safemath .
erc-20 transferfrom with safemath .
erc-20 approve spender .
erc-20 allowance .
allows only the contract owner to transfer ownership to someone else .
"allows only the owner to create new tokens as long a the number of tokens attempt to be mint plus the current totalsupply be less than or equal to 1 , 000 , 000 , 000 increase the totalsupply by the amount of tokens mint ."
calculates the amount of bonus coin the buyer get .
throw if person send be not contract owner or cs role .
throw if person send be not authorise or send nothing .
authorise an account to participate .
authorise a lot of account in one go .
ban an account from participation ( default ) .
set a new fx representative .
low level token purchase function .
total amount of tokens .
the balance .
send _value token to _to from msg . sender .
send _value token to _to from _from on the condition it be approve by _from .
amount of remain tokens allow to spend .
this function be disable .
this function update rat .
this function complete buy tokens .
this function burn all b2bk tokens on the address that cause this function .
"attach the token contract , can only be do once ."
function call after crowdfundendtime .
buy token function call only in duration of crowdfund active .
function to buy the tokens at presale .
function to calculate the total no of tokens with bonus multiplication .
get function function to get the current state of the crowdsale .
function provide the current bonus rate .
provide the bonus .
get function .
function to keep track of the total token allocation .
function to change the founder multisig address .
low level token purchase function .
setup function set external contract ' address and set the max crowdsale cap .
ends crowdsale .
returns total raise amount in cny ( include ep ) and bonuses .
returns total amount of early purchase in cny .
general methods .
helper function to avoid too many contract call on frontend side .
ico methods .
auction methods .
"internal transfer , only can be call by this contract ."
returns number of confirmations of a transaction .
returns total number of transactions after filers be apply .
"returns array with owner address , which confirm transaction ."
returns list of transaction ids in defined range .
transfer lock tokens to decent . bet 's .
upgrade-related methods .
erc20 interface : transfer _value new tokens from msg . sender .
erc20 interface : transfer _value new tokens from _from to _to .
erc20 interface : delegate transfer right of up to _value new tokens from msg . sender .
allows to remove an owner .
erc20 interface : return the amount of new tokens belong to _owner that _spender can spend via transferfrom .
erc20 interface : return the wmount of new tokens belong to _owner .
upgrade tokens to the new token contract .
set address of next upgrade master and enable upgrade process .
finalize the upgrade .
check to make sure that the current sum of old and new version tokens be still equal to the original number of old version tokens .
sets the new token contract address .
sets flag to prevent change newtoken after upgrade .
creates new version tokens from the new token contract .
allows to replace an owner with a new owner .
initializes original supply from old token total supply .
returns the confirmation status of a transaction .
allows anyone to execute a confirmed transaction .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
set price in sntr tokens for store .
set sntr token address .
"register file hash in contract , web3 integration ."
payable registration in sntr tokens .
internal registation method .
check hash existance .
allow owner to be change by exisiting owner ( dev management ) .
transmute dac to dat .
utility methods .
kills this contract .
internal methods .
internal function that transfer the ether send with a payment back to the sender .
calculates the hash for the provided payment information .
updates the wallet to which all payments be send .
updates the wallet to which all payments be send .
updates the state of the contact so that it will start accept payments .
instructs the contract that it should expect a payment with the give identifier to be make .
instruct the contract should stop expect a payment with the give identifier .
submits a payment to the contract with the spcified payment identifier .
accepts a pending payment and forward the payment amount to the sales wallet .
rejects a pending payment and return the payment to the payer .
datacoord userid_assurid .
burn tokens from the specified address .
"rate scale ( or divider ) , to support not integer rat ."
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
check if the specified purchase be valid .
"because of discount hasended might be true , but validpurchase return false ."
"must be call after crowdsale end , to do some extra finalization work ."
override token creation to integrate with mywill token .
override getrate to integrate with rate provider .
override getratescale to integrate with rate provider .
admin can set new rate provider .
admin can move end time .
owner function .
moderator function .
migrate tokens to a new version of the contract .
receive tokens from an old version of the token contract .
address may not be long than 256 .
allowances be intentionally not support .
reduce digital artwork tokens for change physical artwork .
send _value token to _to .
set transfer upper limit .
delete the contract .
transfer allocations msg . sender .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
sets onlyowner modifier for specified function .
allows for transfer of contract ownership .
provides the remain balance of approved tokens from function approve .
allows for a certain amount of tokens to be spend on behalf of the account owner .
returns the account balance .
sends tokens from sender 's account .
transfers tokens from an approved account .
calculates the hash for the provided payment information .
returns the total number of holders of this currency .
gets the token holder at the specified index .
adds an approval for the specified account to spend money of the message sender up to the defined limit .
transfer the balance from owner 's account to another account .
mint new tokens - this can only be do by special callers ( i . e .
ensures that once the ico be over this contract can not be use until the point it be destruct .
set the xwin token contract address a a one-time operation .
close the ico phase and transition to execution phase .
sending reserve tokens ( 20 from all tokens be reserve in preico ) .
modifier that allow only manager .
change debate period by manager .
transfer ethers from contract account .
add proposal .
check if a proposal code match .
log a vote for a proposal .
finish vote .
modifier that allow only manager .
adds a user / contract to our list of account readers .
transfer fund between two address that be not the current msg . sender .
burns the rest of the tokens after the crowdsale end .
settle an investment and distribute tokens .
overrides owned . sol .
withdraws tokens from foundation reserve .
fund contract .
invariant : acc_premium + acc_riskfund + acc_payout + acc_balance + acc_reward + acc_oraclizecosts 0 .
claim bounty reward .
import bounty reward ( for owner ) .
clear invalid bounty reward ( for owner ) .
withdraw remain tokens after reward claim period be over ( for owner ) .
get the price for a bou token at current time ( how many tokens for 1 eth ) .
dopayment ( ) be an internal function that send the ether that this contract receive to the bouledevmultisig and create tokens in the address of the .
moves fund in sale contract to boulé multisigwallet .
function to mint tokens .
function to stop mint new tokens .
low level token purchase function .
send ether to the fund collection wallet .
a method to signal a vote for a give _candidate .
number of voters .
"queries the list with _offset and _limit of voters , candidates choosen and msp amount at the current block ."
"queries the list with _offset and _limit of voters , candidates choosen and msp amount at a specific _blocknumber ."
this method can be use by the owner to extract mistakenly sent tokens to this contract .
this function be override by the test mocks .
helper function to return a min betwen the two uints .
this famous algorithm be call exponentiation by square and calculate x n with x a fixed-point and n a regular unsigned .
the owner of this contract can change the controller of the pls token .
in between the offer and the network .
internal function to determine if an address be a contract .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
send _amount tokens to _to from _from on the condition it be approve by _from .
called when _owner send ether to the minime token contract .
notifies the controller about a token transfer allow the controller to react if desire .
notifies the controller about an approval allow the controller to react if desire .
generates _amount tokens that be assign to _owner .
the owner of this contract can change the controller of the wct2 token .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
allows the owner to start / stop the trade .
allows anyone to transfer the tokens once trade have start .
allows anyone to transfer the tokens once trade have start .
fix for the erc20 short address attack .
transfer token for a specified address .
transfer tokens from one address to another .
allows anyone to create tokens by deposit ether .
true if the transaction can buy tokens .
let owner collect eth .
allows the owner to set the vault address .
allows the owner to set the rate .
allows the owner to close sale .
allows the owner to end the sale .
allows the owner to change minimum payment .
allows the owner start or stop trade .
allows the owner to destroy contract .
for user to register their new public key to map holder 's tokens to new blockchain tokens .
allows authorize access to create tokens .
allows owner to transfer erc20 tokens to vault .
create new policy .
used to transfer fund on behalf of one person .
used to approve a third-party to send fund on your behalf .
distributeprebuyersrewards ( ) : private utility function call by constructor .
distributetimelockedtokens ( ) : private utility function call by constructor .
you 're about to purchase the equivalent of msg . value .
owner-only function .
low level token purchase function .
create msg . value .
sends the eth to eth fund wallet and finalize the token sale .
allows contributors to recover their eth in the case of a failed token sale .
function to mint tokens .
function to stop mint new tokens .
creates tokens to receiver address follow a formula .
number of tokens available to be mint at day d .
starts the mint process .
creates amount tokens to receiver address .
allows anyone to buy tokens in exchange of ether .
manages the purchase of the tokens for a give price .
returns the number of tokens to be purchase by 1 ether at the give block .
returns the number of tokens available for sale .
sends the fund collect to the address icofunding and project .
"calculates the variable fee depend on the amount , thresholds and rat set ."
returns the price for a specific block .
checks if an uint array be sort .
you must set the allowance to zero before change to a non-zero value .
changes the owner of the contract to newowner .
adds a new minter to the token _minter : address of the new minter .
removes a minter of the token _minter : address of the minter to be remove .
blocks the possibility to add new minters .
set a block from when a token wo n't be tradeable .
creates amount tokens and send them to recipient address .
aproves _spender to spend _value tokens and execute it receiveapproval function .
transfers value tokens to to address .
transfers value tokens to to address from from .
ico date bonus calculation .
"initialises address of founder , tokens owner , accrecive ."
sets new state .
sets new round ico .
sets manager .
buy quantity of tokens depend on the amount of send ethers .
burn tokens from account only in state not migrate .
partial withdraw .
ether withdraw .
send tokens to partner .
send limit tokens to partner .
send limit tokens to company .
send all tokens to founder .
send limit tokens to founder .
inc supply tokens .
allows user to purchase star tokens with ether .
transfer tokens .
destroy tokens .
modifier function .
no constructor .
prepareforsale ( ) stop transfer and allow purchase .
public constant methods .
functions for manual call via same name function in pacioico ( ) .
"setffsettings ( address vfoundertokensa , address vfoundationtokensa , uint vfoundertokensallocation , uint vfoundationtokensallocation ) ."
state change public methods .
standard uint256 function .
erc20 methods .
modifier function .
state change public methods make pause-able and with call log .
public constant methods .
functions to be call manually .
token contract functions to be call manually via owner call to ico contract .
approves and then call the receive contract with any additional paramteres .
buy token by send ether here .
functions for the contract owner .
some percentage of the tokens be already reserve for market .
some useful getters ( although you can just query the public variables ) .
send _value tokens to _to from your account .
"allows _spender to spend no more than _value tokens in your behalf , and then ping the contract about it ."
mint a certain number of tokens .
the balance should be available .
an allowance should be available .
tokens must not be lock .
can only be call by the administrator .
can only be call by the prepurchaser .
the transaction params be valid for buy in .
requires the hard cap to be respect give the desired amount for buyin .
requires sender to be certify .
sale life cycle : 1 .
can only be call during the period when not pause ( 2a ) .
mint a certain number of tokens that be lock up .
can only be call during the period when pause ( 2b ) .
can only be call after the period ( 3 ) .
allocation life cycle : 1 .
only when sufficient allocations remain for make this liquid allocation ( 2 ) .
only when sufficient allocations remain for make this lock allocation ( 2 ) .
only when no further allocations be possible ( 3 ) .
note a prepurchase that have already happen .
make a purchase from a privileged account .
let sender make a standard purchase ; amb go into another account .
finalise any minting operations .
receive a contribution from _recipient .
determine purchase price for a give address .
halt the contribution period .
unhalt the contribution period .
called once by anybody after the sale end .
preallocate a liquid portion of tokens .
preallocate a locked-up portion of tokens .
end of the sale and token allocation ; retire this contract .
return the current unlock-phase .
unlock any now freeable tokens that be lock up for account _who .
transfer tokens between account .
transfer via allowance .
approve allowance .
get the balance of a specific address .
available allowance .
controller interface transfer callback method .
change the proof token controller .
allocates proof tokens to the give proof token wallet .
finalize the token sale ( can only be call by owner ) .
enable or block transfer - to be call in case of emergency .
success bool .
"return the number of convertible tokens support by the contract note that the number of convertible tokens be the number of reserve token , plus 1 ( that represent the smart token ) ."
allow another contract to spend some tokens in your behalf .
send coin .
low level token purchase function .
the balance should be available .
get a specific deployment .
return the number of coin for a specific owner .
return a specific index by owner .
deploy a new basiccoin on the blockchain .
owner can withdraw all collect fund .
an allowance should be available .
no eth should be send with the transaction .
a value should be 0 .
balance of a specific address .
transfer via allowance .
approve allowance .
available allowance .
return the number of deploy .
standard kill ( ) function to terminate contract .
public management - set address of base and reward tokens .
"public info view - what be be trade here , what be the limit ? ."
crowdsale only .
kill the contract send everything to _to .
simple modifier for daily limit .
( re ) set the daily limit .
reset the amount already spend today .
getter and setter for accesscontrol .
getter and setter for ledger .
getter and setter for policies .
getter and setter for risk .
getter and setter for oraclizecallbacks .
allows the current owner to transfer control of the contract to a newowner .
the address of the contract .
bool success .
bool success .
"after deploy all contract , this function be call and call setcontracts ( ) for every register contract ."
destruct one contract .
destruct all contract .
allows the owner to enable transfer .
allows the owner to stop transfer .
allows anyone to transfer the wise tokens once transfer have start .
allows anyone to transfer the wise tokens once transfer have start .
check if valid purchase .
check if valid claim for btc .
true if crowdsale event have end .
low level token purchase function .
claim tokens buy for mbtc .
to enable transfer .
to stop transfer .
to correct exchange rate eth for btc .
finish mine coin and transfer ownership of wise token to owner .
reclaim all erc20basic compatible tokens .
function to mint tokens .
modifier that throw if trade have not start yet .
account for paused / unpaused-state .
"sets exhange rate , ie amount of tokens ( 10 18 cdt ) for 1 wei ."
buy tokens for all send ether .
check if goal be reach .
create new policy .
burn mits by user .
burn mits from users .
"in case an owner account get compromise , it should be possible to move control over to another account ."
approve should be call when allow _spender 0 .
the vote can be claim by the owner of this contract .
update an account for vote or airdrop or both .
get the account balance of another account with address _owner .
send _value amount of tokens to address _to .
send _value amount of tokens from address _from to address _to .
an erc20-compatible balance that return the number of plot own .
private methods .
contract management methods .
buy tokens during the sale / presale .
pay this function to add the dividends .
returns true if we be still in pre sale period .
transfer token for a specified address check if they be dividends to pay .
transfer tokens from one address to another check if they be dividends to pay .
returns true if we be still in pre sale period .
returns true if we be still in sale period .
true if the transaction can buy tokens .
distribute tokens from the reserve .
withdraw some ether from contract .
withdraw ether from contract .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
erc223 transfer to a contract or externally-owned account .
erc223 fetch contract size ( must be nonzero to be a contract ) .
ethereum token .
ethereum token .
ethereum token .
erc223 transfer and invoke specify callback .
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
allows the current owner to transfer control of the contract to a newowner .
allows the owner to set a string with their contact information .
transfers the current balance to the owner and terminate the contract .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
get balace of an account .
set enable status of the account .
transfer fund .
approves a hash .
computes the rank ( eth-weighted sum of approvals ) of the document at index .
oyster protocol function .
"internal transfer , can be call by this contract only ."
set allowance for other address .
director can alter the storage-peg and broker fee .
director can alter the epoch time .
director can alter the maximum time of storage retention .
director can close the crowdsale .
director can open the crowdsale .
oyster protocol function .
the 160 lsb be the address of the balance .
function to mint tokens .
data be an array of uint256s .
erc20 function .
oyster protocol function .
"internal transfer , only can be call by this contract ."
transfers the contract owner to a new address .
withdraw fund from the crowdsale .
permanently lock out the contract owner to decentralize oyster .
contract owner can alter the storage-peg and broker fee .
contract owner can alter the epoch time .
contract owner can alter the maximum storage retention .
oyster protocol function .
function name : mul purpose : be the funcion for safe multiplicate .
function name : div purpose : be the funcion for safe division .
function name : sub purpose : be the funcion for safe substract .
function name : add purpose : be the funcion for safe sum .
send coin .
a contract attempt to get the coin but transfer from the origin .
a contract attempt to get the coin .
transfers the contract owner to a new address .
"internal transfer , only can be call by this contract ."
set allowance for other address .
destroy tokens .
destroy tokens from other account .
withdraw fund from the crowdsale .
permanently lock out the contract owner to decentralize oyster .
contract owner can alter the storage-peg and broker fee .
contract owner can alter the epoch time .
contract owner can alter the maximum storage retention .
contract owner can close the crowdsale .
contract owner can open the crowdsale .
oyster protocol function .
oyster protocol function .
function to stop mint new tokens .
approvedata be an addition to erc20 token methods .
addition to erc20 token methods .
addition to erc20 token methods .
burns a specific amount of tokens .
function will identify what period of crowdsale we be in and update the rate .
"if crowdsale be unsuccessful , investors can claim refund here ."
allow owner to pause ico in case there be something wrong .
destroy contract and send all remain ether back to wallet .
create bid token .
true if the transaction can buy tokens .
redeems tokens and record the address that the sender create in the new blockchain .
returns the current token price .
overriden methods .
"overridden method to check that the minimum be reach ( no refund be possible after that , so transfer of tokens should n't be a problem ) ."
accepts ether and create new divx tokens .
allows to transfer ether from the contract to the multisig wallet .
pauses the contract .
resume the contract .
starts the redeeming phase of the contract .
stops the redeeming phase of the contract .
allows contributors to recover their ether in the case of a failed fund campaign .
get how many tokens be available to be claim .
returns the current period a a number from 0 to totalperiods .
"calculate the accumulated distribution percentage a of now , follow the exponential distribution curve ."
return the current buy price at which the mvm offer to buy tokens to burn them .
returns the maximum amount of wei that the foundation can claim .
returns whether the mvm end-of - life have be reach .
returns the current lif per eth rate during the tge .
allows to get tokens during the tge .
allows to add the address and the amount of wei send by a contributor in the private presale .
allows a tge contributor to claim their contributed eth in case the .
"finalizes the crowdsale , take care of transfer of fund to the ."
set the address of the holder of bounty tokens .
mint tokens and add them to the balance of the message . sender .
send the value ( ethers ) that the contract hold to the owner address .
function to access acount balance .
return the owner of a soul .
return number of souls own by someone .
return price of a soul .
return the nth entry in the soulbook .
sell your soul for a give price and a give reason ! .
buy msg . sender .
"can transfer a soul to a different account , but beware you have to pay charon again ! ."
log and pay charon fee .
check if napkins be still available and adjust amount accordingly .
transfer napkins to people .
transfer the _amount from msg . sender .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
function to specify how much _spender be allow to transfer on _owner 's behalf .
"allow change of the book fee , note obol and token price be fix and can not change ."
"change charon 's boat , i . e ."
total number of napkins distribute by charon .
return the reason for the sell of one 's soul .
called once by crowdsale finalize ( ) if the sale be success .
"this check be an helper function for ðapp to check the effect of the next transaction , not simply the current state of the contract ."
"this check be an helper function for ðapp to check the effect of the next transacion , not simply the current state of the contract ."
throw if at stage other than current stage .
function to end the airdrop and start crowdsale .
function to end the crowdsale by set the stage to ended .
transfer raise amount to the company address .
propose the transfer of the engravedtoken contract ownership to _engravedaddress .
allows egr holders to vote on the poposed transfer of ownership .
calculates the vote and if the majority weigt approve the proposal the transfer of ownership be execute .
throw if at stage other than current stage .
throw if sender be not beneficiary .
throw if sender have a egr balance of zero .
throw if the current transfer proposal 's deadline be in the past .
throw if the current transfer proposal 's deadline be in the future .
the amount in egr .
function to participate in the airdrop .
access be restrict to the current owner .
whether the approval be successful or not .
transfer ownership to _newowner .
whether the transfer be successful or not .
whether the transfer be successful or not .
whether the approval be successful or not .
amount of remain tokens allow to spend .
whether the incentive distribution be start .
whether the unlock be successful or not .
"change the address of the treasury , the address to which the payments be forward to ."
"returns for the give address the number of time it be pay for , and an array of address who actually pay for the fee ( a one might pay the fee for another address ) ."
returns whether the give address pay or not .
this method be use to pay for the fee .
"this method can only be call by the contract owner , and can be use to virtually create a new payment , by origin for who ."
"this method can be call by authorized persons only , and can issue a refund of the fee to the origin address who pay the fee for who ."
multiplication with safety check .
to handle erc20 short address attack .
lock transfer during sale .
implementation for transfer exh token to provide address .
transfer initiate by spender .
get exh token balance for provided address .
add spender to authorize for spend specified amount of exh token .
get exh token amount that spender can spend from provide owner 's account .
modifier to make sure transaction be happen during sale .
to start sale from presale .
to start crowdsale .
division with safety check .
to extend duration of crowdsale .
to set price for exh token .
to enable transfer of exh token after completion of sale .
to create exh token and assign to transaction initiator .
to enable vest of b type exh token .
to get price for exh token .
finalize the crowdsale .
refund the investors in case target of crowdsale not achieve .
failsafe drain .
subtraction with safety check .
addition with safety check .
modifier to check transaction initiator be only owner .
ownership can be transfer to provided newowner .
to create exh token and assign to transaction initiator .
to get price for exh token .
refund the investors in case target of crowdsale not achieve .
"set _price_start , _price_constant and _price_exponent a the new starting price , price divisor constant and price divisor exponent ."
adds account address to whitelist .
removes account address from whitelist .
start the auction .
finalize the auction - set the final rdn token price and change the auction stage after no bid be allow anymore .
send msg . value .
claim auction tokens for receiver_address after the auction have end .
"get the rdn price in wei during the auction , at the time of call this function ."
"get the miss fund need to end the auction , calculate at the current rdn price in wei ."
calculates the token price ( wei / rdn ) at the current timestamp during the auction ; elapse time 0 before auction start .
allows msg . sender .
set _token_address a the token address to be use in the auction .
calculate bonus for hours .
return current bonus percent .
checks if the goal or time limit have be reach and end the campaign .
token purchase .
transfer remain tokens after the completion of crowdsale .
"if crowdsale be successful , investors can claim token here ."
"if crowdsale be unsuccessful , investors can claim refund here ."
transfer fund eth to multisig wallet if reach minimum goal .
manual start crowdsale .
return current bonus percent .
transfer token for a specified address .
low level token purchase function .
presale token conversion .
transfer tokens from one address to another .
low level token purchase function .
"function be final , and must not be override ."
"function be final , and must not be override ."
"function be final , and must not be override ."
returns number of tokens own by give address .
returns number of tokens own by give address .
what 's my girth ? .
what be the length of a particular penis ? .
tenderly remove hand from penis and place on another penis .
perform the inevitable action which cause release of that which each penis be build to deliver .
"allow splooger to cause a payload release from your penis , multiple time , up to the point at which no further release be possible . ."
internal privats .
"decentralizes the contract , this operation can not be undone ."
"function to get the price of the token return how many token units a buyer get per wei , need to be divide by 10 ."
finalize the token sale ( can only be call by owner ) .
allows the current owner to transfer control of the contract to a newowner .
low level token purchase function .
bool valid .
a boolean that indicate if the operation be successful .
bool success .
enable or block transfer - to be call in case of emergency .
helper function to return a min betwen the two uints .
clones proof token at the give snapshot block .
total supply uint .
total supply uint .
balance uint .
balance uint .
success bool .
success bool .
success bool .
success bool .
updates buy price ( owner only ) .
buys kryptor .
functions with this modifier can only be execute by users except owners .
functions with this modifier check on sale status .
functions with this modifier check the validity of original buy price .
transfers the balance from multisig wallet to an account .
overriding payment function to take control over the logic .
buys kr .
prevent short address attack .
allows owner to stop start presale .
for ico and project detail visit http : / / careerxon . com .
token auto purchase function .
day 1 : + 20 bonus .
start date end date of presale and future ico .
token transfer lock .
transfer tokens from one address to another _from address the address which you want to send tokens from _to address the address which you want to transfer to _value uint256 the amout of tokens to be transfer .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to mint tokens _to the address that will receive the minted tokens .
burn away the specified amount of careerxon tokens .
"reviewed : - integer overflow ok , check ."
allocate reserve tokens base on the running time and state of the contract .
get current total token sale .
send token to investor .
"internal transfer , only can be call by this contract ."
it will be call by fallback function whenever ether be send to it .
this function will finalize the sale .
failsafe drain .
failsafe transfer tokens for the team to give account .
prepare refund of the backer if minimum be not reach burn the tokens .
refund the backer .
lock transfer during the ico .
a contract attempt to get the coin .
"store sent amount a credit to be pull , call by payer ."
"withdraw accumulate balance , call by payee ."
to verify if action be not perform out of the campaing range .
specify address of token contract .
modify this address should this be need .
return number of contributors .
it will be call by owner to start the sale .
get some stats .
somehow unnecessery .
function to check the amount of tokens that an owner allow to a spender .
function that sell available tokens .
terminate contract and refund to owner .
permissions modifiers .
user authorisation management methods .
special transaction methods .
work controller function .
transfer controller function .
token controller function .
erc20 interface .
send tokens .
allow another contract to spend some tokens in your behalf .
transfer tokens .
destruction of the token .
allow crowdsale owner to close early or extend the crowdsale .
investors can claim refund .
called once by crowdsale finalize ( ) if the sale be success .
make an investment .
calculate the current price for buy in amount .
allows any user to withdraw his tokens .
allows any user to get his eth refund before the purchase be make or after approx .
buy the tokens .
"a helper function for the default function , allow contract to interact ."
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
"if seal , transfer be enable ."
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
approves and then call the receive contract .
mint tokens and assign to some one .
"set owner to zero address , to disable mint , and enable token transfer ."
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
"must be call after crowdsale end , to do some extra finalization work ."
transfer token for a specified address .
transfer tokens from one address to another .
based on http : / / www . codecodex . com / wiki / calculate_an_integer_square_root .
buy tokens .
buy tokens with limit maximum average price .
withdraw fund to owners .
when contract be halt no one can buy new tokens .
throws if call by any account other than one of the owners .
allows the current owner to transfer control of the contract to a newowner .
calculates how many tokens one can buy for specified value .
buy tokens with limit maximum average price .
set the address of the minter .
account for paused / unpaused-state .
a function to withdraw all fund .
"sets exhange rate , ie amount of tokens ( 10 - 18 zna ) for 1 wie ."
buy tokens for all send ether .
process bonus tokens for beneficiary in case of all tokens sell .
check if goal be reach .
withdraw the fund .
transfer funds .
autorize users refund .
remove contract .
transfer function extend by check of eth balance and pay transaction cost with flkd if not enough eth .
user buy floakss and pay in ether .
user sell floaks and get ether .
refund to owner .
calculate the current price for buy in amount .
override crowdsale validpurchase to add whilelist .
transfer the unsold tokens to the owner main wallet .
low level token purchase function .
true if the transaction can buy tokens .
override cappedcrowdsale validpurchase to add an individual cap .
set 's the rate of tokens per ether for each tier .
check if the crowdsale have end and enable refund only in case the goal have n't be reach .
checks if a purchase be consider valid .
allows anyone to transfer the h20 tokens once trade have start .
allows anyone to transfer the h20 tokens once trade have start .
function to mint tokens .
check if valid purchase .
true if crowdsale event have end .
low level token purchase function .
finish mine coin and transfer ownership of change coin to owner .
function to mint tokens .
function to stop mint new tokens .
function to start mint new tokens .
queries the balance of _owner at a specific _blocknumber .
total amount of tokens at a specific _blocknumber .
creates a new clone token with the initial distribution be this token at _snapshotblock .
generates _amount tokens that be assign to _owner .
getvalueat retrieve the number of tokens at a give block number .
updatevalueatnow use to update the balance map and the totalsupplyhistory .
internal function to determine if an address be a contract .
helper function to return a min betwen the two uints .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
update the dapp by create a new token with new functionalities the msg . sender .
allow a token holder to burn tokens require tokenburner to be set to a valid contract address tokenburner can take any appropriate action .
"proxypayment ( ) return false , mean ether be not accept at the token address , only the address of fiinucrowdsale ."
"notifies the controller about a transfer , for this campaign all transfer be allow by default and no extra notifications be need ."
"notifies the controller about an approval , for this campaign all approvals be allow by default and no extra notifications be need ."
handle automatic refund .
mint possible only if state . preico .
burn only in state . icocompleted .
function be mock for test .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
semi-public function - only oraclize can call .
internal function set max profit .
set gas for oraclize query .
modifier allow execution only if receive value be great than zero .
recover signer address from a message by use his signature .
request to close the channel .
close the channel .
settle the transfer and balance of the channel and pay out to each participant .
returns the address of the manager .
create a new channel from msg . sender .
sender deposit amount to channel .
settles the balance between the two party .
transfers tokens to a specified address .
transfers tokens from one address to another .
approves the specified address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allowance to a spender .
caller make a deposit into their channel balance .
get the address and balance of both partner in a channel .
true if the transaction can buy tokens .
allows the owner to run any emergency update on the time line .
gets the human readable progress for the current crowsale timeline in .
transfers the token ownership .
overrides the base function .
modifier to allow action only when the minimum wei be receive .
allows the owner to update the minimum require wei .
shows the minimum required wei in the smart contract .
create the token to be sell .
mitigate short address attack thank to https : / / github . com / numerai / contract / blob / c182465f82e50ced8dacb3977ec374a892f5fa8c / contract / safe . sol l30-l34 .
in total 13 of c20 tokens will be send to this contract .
transfer token for a specified address when not pause .
transfer tokens from one address to another when not pause .
freeze of a premine .
is it possible to spend the received amount .
burning the rest of the coin .
start this october 27 and crowdsale will run for 60 days .
use this to set the charity address .
empty the crowdsale contract and forward balance to beneficiary .
dev : key parameters to setup for ico event .
dev : as esg be aim to be a regulated bet operator .
dev : burn function : user be able to burn their token for a share of the esg asset contract .
show the balance in the timelock for transparency .
transfers tokens hold by timelock to beneficiary .
dev : address for the timelock tokens to be hold .
dev : set the total number of tokens that can be mint .
dev : mint the number of tokens for the timelock contract .
dev : gets the balance of the address owner .
dev : mint esg tokens by controller .
dev : erc20 standard transfer function .
dev : erc20 standard transferfrom function .
dev : erc20 standard approve function .
dev : function to check the amount of tokens that the owner have allow the spender to transfer .
change admin address .
price for crowdsale by time .
allow anyone send fund to the contract .
main token buy function .
set up founder address token balance .
set up angel address token balance .
emergency stop crowdsale .
arrange unsold coin .
emergency stop .
a contract attempt to get the coin .
get the amount of allow tokens to spend .
issue new tokens .
stops all token transfer in case of emergency .
returns total supply of issue tokens .
transfers tokens from your address to other .
approve other address to spend tokens on your account .
approve and then communicate the approve contract in a single tx .
bailout - just in case this contract ever receive fund .
bailout - just in case this contract ever receive tokens .
create a new series .
"allow the owner to transfer un-claimed items ( they already have the redeem cod , so there be no additional trust require ) ."
allow a user to claim an item use their redeem code .
allow item owners to transfer to another account .
get the contract owner .
get detail about a give series .
get the owner of an item .
sum of a + b .
current tokens / eth rate .
tokens / eth rate for give timestamp .
halt transactions in case of emergency .
unhalt halt contract .
owner to add precommitment fund token balance before the crowdsale commence .
exchanges can buy on behalf of participant .
true on success .
true on success .
true on success .
a - b .
modifier - use to check action allow only for contract owner .
request to change ownership ( call by current owner ) .
"accept ownership request , work only if call by new owner ."
true on success .
true on success .
true on success .
update cap before crowdsale start .
usd raise value .
"adds a new transaction to the transaction map , if transaction do not exist yet ."
returns number of confirmations of a transaction .
returns total number of transactions after filers be apply .
returns list of owners .
"returns array with owner address , which confirm transaction ."
returns list of transaction ids in defined range .
allows to add a new owner .
allows to remove an owner .
allows to replace an owner with a new owner .
allows to change the number of required confirmations .
allows an owner to submit and confirm a transaction .
allows an owner to confirm a transaction .
allows an owner to revoke a confirmation for a transaction .
allows anyone to execute a confirmed transaction .
returns the confirmation status of a transaction .
"internal transfer , only can be call by this contract ."
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
function that be call when a user or another contract want to transfer fund .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
erc20 standards .
get the account balance of another account with address _queryaddress .
send _value amount of tokens to address _to .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
returns the amount which _spender be still allow to withdraw from _owner .
"internal transfer , only can be call by this contract ."
transfer token for a specified address .
transfer tokens from one address to another .
gets the balance of the specified address .
withdraw all tokens to contribute members .
confirms that enough tokens be available to distribute to all address .
test - token transfer - - try 1 token first .
registers the ethereum address to the endpoint socket .
finds the socket if give an ethereum address .
proof be currently a placeholder for when associate proof for addresstype be add .
utilized by bridge .
transfers tokens hold by timelock to beneficiary .
migrate tokens to the new token contract .
set address of migration target contract and enable migration process .
enable upgrade to allow tokens migration to new contract process .
interface marker .
interface marker .
ntry token distribution between team members .
transfers tokens hold by timelock to beneficiary .
return releasetime .
does a byte-by - byte lexicographical comparison of two string .
compares two string and return true iff they be equal .
finds the index of the first occurrence of _needle in _haystack .
specifies contract address a a valid studio sub project .
function allow for external access to number of account that be hold or once held studio tokens .
function allow for external access to tokenholders .
"check to see if tokenholder have a balance , if not it append the tokenholder to the accountindex which the getaddress ( ) can later access externally ."
send coin .
a contract attempt to get the coin .
function allow for external access to tokenholer 's balance .
send coin .
a contract attempt to get the coin .
non-upgradable function require for limitedtransfertoken .
only x modifiers .
set roles .
controller-only function .
utility function .
internal helper function .
adds account address to whitelist .
removes account address from whitelist .
true if crowdsale event have end .
bonus base on the current time .
stop the crowd sale .
low level token purchase function .
can be issue to anyone without owners concent but a this method be internal only buytoken be call it .
true if the transaction can buy tokens .
transfers token ownership from pre-sale to sale .
finishes pre-ico crowdsale and close current contract .
refunds investor .
accepts ethers from investor and send back hdl tokens .
allow address to do early participation .
"change to original : require all participants to be whitelisted , with individual token limit ."
allow crowdsale owner to postpone the start of the crowdsale .
allow crowdsale owner to close early or extend the crowdsale .
allow load refund back on the contract for the refund .
investors can claim refund .
make an investment .
preallocate tokens for the early investors .
functions with this modifier can only be execute by the owner .
transfer the balance from owner 39 ; s account to another account .
send _value amount of tokens from address _from to address _to .
failsafe drain only owner can call this function .
"internal transfer , only can be call by this contract ."
make sure this function name match the contract name above .
change url of dsp .
retrieve information about register publisher .
register organisation a publisher .
unregister publisher and return unused deposit .
transfer ownership of this publisher record .
retrieve information about registered ssp .
register organisation a ssp .
check if ssp register .
unregister ssp and return unused deposit .
change publisher fee of ssp .
transfer ownership of this ssp record .
retrieve information about registered auditor .
check if auditor register .
register organisation a auditor .
transfer ownership of this auditor record .
retrieve information about registered dsp .
register organisation a dsp .
check if dsp register .
this be only for mess up things people put .
throws if call by any account other than the dao .
allows the current owner to transfer control of the contract to a newdao .
this be the function that actually insert a record .
unregister a give record .
transfer ownership of a give record .
tells whether a give key be register .
balance of a specific address .
make an account liquid : only liquid account can do this .
the balance should be available .
a value should be 0 .
get list of all registered auditor .
this be the function that actually insert a record .
unregister a give record .
returns the registration time of the give record .
this be the function that actually insert a record .
updates the value of the give record .
public interaction : .
"ensure that the signature be valid , who be a certified , basic account , the gas price be sufficiently low and the value be sufficiently high ."
reverses a previous inject command .
mint tokens for a particular participant .
the current price for a single indivisible part of a token .
get list of all registered publishers .
this be the function that actually insert a record .
updates the value of the give record .
get list of all registered dsp .
this be the function that actually insert a record .
change ability to transfer tokens by users .
check transfer ability and sender address before transfer .
check transfer ability and sender address before transfer .
function to mint tokens .
used to launch start the contract .
used to approve a third-party to send fund on your behalf .
low level function use to do a sanity check of input data for cma token transfer .
used to retrieve total supply .
used to look up balance of a user .
used to look up allowance of a user .
keep a list of address that be participate in the site .
manual payout for site users .
low-level mint function not accessible externally .
"used to mint tokens , only usable by the contract owner ."
used to burn tokens .
used to freeze token transfer .
used to thaw token transfer .
used to transfer fund .
used to transfer fund on behalf of one person .
only the manager or controller can use this method .
bool debug .
set debug .
only a certain address can use this modified method .
require the minimum fee to be meet .
set debug .
change the fee .
fee the current fee in wei .
change the rat delay .
delay the current rat delay time in second .
change the manager .
manager the address of this contract 's manager .
drain fee .
score the cumulative score .
score the cumulative score .
success if the set be complete successfully .
cumulative score .
reset an entire score storage .
address the manager address .
change the manager .
address the manager address .
change the controller .
internal balance .
public methods .
allow token transfer .
erc20 function .
should not have approve / transferfrom .
call add minter from tau token after contract deploy .
public methods .
accepts ether and create new ads tokens .
just for test cashin and cashout on small amount before let it go .
in case we want to transfer token to other contract we need freeze all future transfer .
ends the fund period and send the eth home .
converts token value to value with decimal place .
tranfer tokens to address .
tranfer tokens from one address to other .
tokens balance .
approve transfer .
token allowance .
modified allow execution only if the crowdsale be currently run .
get the current milestone or bail out if we be not in the milestone periods .
make an investment .
allow anonymous contributions to this crowdsale .
finalize a succcesful crowdsale .
finalize a succcesful crowdsale .
allow load refund back on the contract for the refund .
investors can claim refund .
minimum goal be reach .
check if the ico goal be reach .
crowdfund state machine management .
dynamically create tokens and assign them to the investor .
limit token transfer until the crowdsale be over .
the function can be call only before or after the tokens have be releasesd .
the function can be call only by release agent .
fix for the erc20 short address attack http : / / vessenes . com / the-erc20 - short-address - attack-explained .
make sure we be not do yet .
create new tokens and allocate them to an address .
set the contract that can call release and make the token transferable .
one way function to release the tokens to the wild .
additional api for contract to use as well .
getter function .
refunding by funder .
the beneficiary can decide to stop use this contract .
to be override in test .
ico participation .
payment callback .
tranfer tokens to address .
tranfer tokens from one address to other .
get the current milestone or bail out if we be not in the milestone periods .
make an investment .
finalize a succcesful crowdsale .
method for set usd to ether rate from poloniex .
method set exchange rate agent .
method set data from migrate contract .
allow crowdsale owner to close early or extend the crowdsale .
minimum goal be reach .
check if the ico goal be reach .
limit token transfer until the crowdsale be over .
crowdfund state machine management .
calculating tokens count .
check if the pre ico goal be reach .
converts wei value into usd cents accord to current exchange rate .
one way function to release the tokens to the wild .
"internal transfer , only can be call by this contract ."
new tokens can be mint .
address of notary platform token .
address of ntry tokens owner .
startdate crowdsale open date .
enddate crowdsale close date .
investors total of distinct investors .
investments crowdsale close date .
number of ethers invest by investor .
total of amount of wie collect by the contract .
exchage rate of ethers to ntry tokens .
the status of the contract if it be allow to participate .
crowdfund state machine management .
true for case of success .
true for case of success .
true for case of success .
allow crowdsale owner to close early or extend the crowdsale .
allow crowdsale owner to change exchange rate .
interface marker .
modifier allow execution only if receive value be great than zero .
make an investment .
send ether to the fund collection wallet .
address of multisignature wallet .
owner can withdraw all the money at any time .
fix for the erc20 short address attack .
function to access total supply of tokens .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
election part .
ceo part .
fund methods .
check player profit and number be within range .
only owner address can set houseedge .
only owner address can set maxprofitaspercentofhouse .
only owner address can set minbet .
only owner address can transfer ether .
only owner address can set emergency pause 1 .
only owner address can set emergency pause 2 .
only owner address can suicide - emergency .
check game be currently active .
check payouts be currently active .
check only owner address be call .
"the generation of random number be generate by the banker 's seed + current block of information 1 , the banker 's seed be untrustworthy , but the current block information banker can not manipulate , in order to ensure that the banker can not manipulate the final random number result 2 , block information because the whole network be open , there will be malicious players to use this point to attack the banker , so with the banker issue the seed to ensure that the banker will not be attack by malicious players ."
public function player submit bet only if game be active bet be valid can query and set player vars .
internal function set max profit .
require give state of sale .
"check current block be inside closed interval startblock , endblock ."
check sender have send some ethers .
calculate number of tokens buyer get when send 'ethsent ' ethers after 'ethdepostiedsofar already reeived in the sale .
send coin .
used to log royalties .
"used to launch the contract , and enable token mint ."
used to burn tokens and decrease total supply .
low level function used to create new tokens and increase total supply .
used to create new tokens and increase total supply .
reusable code to do sanity check of transfer variables .
to buy tokens give an address .
calculates how many ether will be use to generate the tokens in case the buyer send more than the maximum balance but have some balance leave and update the balance of that buyer .
set 's the rate of tokens per ether for each tier .
buys the tokens for the specify tier and for the next one .
to distribute airdrops for applicants of round 1 .
to distribute airdrops for applicants of round 2 .
to distribute airdrops for applicants of round 3 .
"to distribute airdrops of remaining token to bounty ( press release post , article submission , blog submission , social sharing etc ) ."
total supply of coin will be 21 million only .
for future development 20 of token will be use .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
make an investment .
users can claim eth by themselves if they want to in case of eth failure .
owner can return eth for multiple users in one call .
owner set new address of escrow .
show how many participants be .
owner can claim reserve tokens on the end of crowsale .
set token contract where mint will be do ( tokens will be issue ) .
withdraw remain balance to manually return where contract send have fail .
"ensure address not null , and not this contract address ."
check the allowance that have be approve previously by owner .
get token balance .
make a transfer .
make an approved transfer to another account from vault .
this method be explain far in https : / / goo . gl / iaqxba .
raise total cap .
lock transfer for contributors during the ico .
approve should be call when allow _spender 0 .
creates tokens and send to the specify address .
throws if call by any account other than the owner .
set finish minting .
start or pause tradable to transfer token .
change starttime to start ico manually .
change endtime to end ico manually .
total tokens supply .
total tokens supply .
change total supply .
the balanace the particular account .
the balance of kyc wait to be approve .
allows the current owner to transfer control of the contract to a newowner .
send value token to to from msg . sender .
send value token to to from from .
the transaction address and send the event a approval .
the amount which spender be still allow to withdraw from owner .
the price or token value for a ether .
true if the transaction can buy tokens .
set / change multi-signature wallet address .
change eth / token exchange rate .
lock transfer for contributors during the ico .
change token contract owner .
allow to vote for the proposed_beneficiary by pass yes or no in the function .
allow donors to withdraw their donations .
paying the tipper .
make sure this function name match the contract name above .
fix for the erc20 short address attack .
sets formula .
"returns number of investors , include reserve ."
iinvestrestrictions override .
iinvestrestrictions override .
reserves a place for investor .
unreserves special address .
reserves place for unknown address .
unreserves place for unknown address specify by an index in array .
"reserved tokens for give amount of ether , return reserved amount ."
unreserves specify amount of tokens .
allows execution by managers only .
iinvestrestrictions implementation .
iinvestrestrictions implementation .
changes investment low cap .
sets new return agent .
removes return agent from list .
sets token that can call returntoken method .
removes token that can call returntoken method .
dev returns the sum of a and b .
icrowdsaleformula override .
returns current bonus percent 0-100 .
returns crowdsale current state .
allows investors to withdraw fund and overpay in case of crowdsale failure .
dev returns the difference of a and b .
dev returns the product of a and b .
ierc20token implementation .
gets real token amount in the small token units .
returns remain token amount .
itokenpool override .
itokenpool override .
returns all tokens back to owner .
functions with this modifier can only be execute by the owner .
transfer the balance from owner 's account to another account .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
start this october 27 .
send coin .
allow another contract to spend some tokens in your behalf .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
"check to see if tokenholder have a balance , if not it append the tokenholder to the accountindex which the getaddress ( ) can later access externally ."
x + y .
total number of tokens in circulation .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"true if token transfer be successfully approve , false otherwise ."
"true on success , false on error ."
set new owner for the smart contract .
set new fund address for the smart contract .
x - y .
x * y .
number of tokens currently belong to the owner of give address .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"true if token transfer be successfully approve , false otherwise ."
number of tokens give spender be currently allow to transfer from give owner .
name of this token .
symbol of this token .
"this method can be call by authorized persons only , and can issue a refund of the fee to the origin address who pay the fee for who ."
fix for the erc20 short address attack .
allows the developer to set the crowdsale and token address .
allows the developer or anyone with the password to shut down everything except withdrawals in emergencies .
withdraws all eth deposit or tokens purchase by the give user and reward the caller .
"buys tokens in the crowdsale and reward the caller , callable by anyone ."
start this november 1 .
buy the token by deposit one of it reserve tokens .
sell the token by withdraw from one of it reserve tokens .
"change the token to any other token in the bancor network by follow a predefined change path note that when change from an erc20 token ( a oppose to a smart token ) , allowance must be set beforehand ."
buy the smart token with eth if the return amount meet the minimum request note that this function can eventually be move into a separate contract .
"utility , check whether allowance for the give spender exist and approve one if it do n't ."
"utility , transfer tokens from an account to the local contract ."
buy the smart token with eth if the return amount meet the minimum request note that this function can eventually be move into a separate contract .
withdraw fund from contract balance to secure hardware wallet .
buy tokens .
accepts ether and create new indi tokens .
ends the fund period and send the eth home .
allows contributors to recover their ether in the case of a failed fund campaign .
erc20 token balanceof query function .
erc20 token transfer function with additional safety .
erc20 token transferfrom function with additional safety .
"erc20 allow _spender to withdraw , multiple time , up to the _value amount ."
erc20 return allowance for give owner spender pair .
erc20 updated increase approval process ( to prevent double-spend attack but remove need to zero allowance before set ) .
erc20 updated decrease approval process ( to prevent double-spend attack but remove need to zero allowance before set ) .
public function player submit bet only if game be active bet be valid can query and set player vars .
only owner address can set maxprofitaspercentofhouse .
only owner address can transfer ether .
check game be currently active .
check payouts be currently active .
public function player submit bet only if game be active bet be valid can query and set player vars .
allows any user to withdraw his tokens .
buy the tokens .
"a helper function for the default function , allow contract to interact ."
low level token purchase function .
modifier that revert ( ) s if trade have not start yet .
allows the current owner to update multiple rat .
function allow for external access to tokenholer 's balance .
send coin during transactions .
send coin during ico .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
failsafe drain .
override buytokens function to allow only whitelisted address buy .
add a whitelisted address .
remove a whitelisted address .
finalization function call by the finalize function that will distribute the remain tokens .
true if the transaction can buy tokens .
"should be call after crowdsale end , to do some extra finalization work ."
end token mint on finalization override this with custom logic if need .
whitelist address .
founder who create tx can cancel it .
ismanager modifier .
iswhitelistmanager modifier .
view function .
we will have some 'peculiar ' list of document for each deal .
delete actual file on the ipfs network be very hard .
abort the purchase and reclaim the ether .
confirm that you ( the buyer ) receive the item .
halt ico in case of emergency .
mint tokens .
allows contributors to recover their ether in the case of a failed fund campaign .
transfer the balance from sender 's account to another one .
function to get current latium balance ( with decimals ) of this contract .
function to get total amount of latium tokens ( with decimals ) that can be lock with this contract .
function to get amount of latium tokens ( with decimals ) that be lock at this moment .
function to get amount of latium tokens ( with decimals ) that can be withdraw at this moment .
function with this modifier can only be execute by the owner .
function to withdraw latium tokens that be unlock at this moment .
function for change rate of eth and price of token .
ico status function .
function for buy tokens to investors who pay in other cryptos .
function for buy tokens for presale investors .
internal function for buy tokens .
function that calculate bonus .
make an investment .
transfer token for a specified address .
show block number of lottery run for the bet .
show block number of lottery run for the bet .
print number of block till next expect dividend payment .
change owner .
change animator .
set ico start block .
set maximum bet size per block .
"reset bet size account , to increase bet volume above safe limit ."
move fund to cold storage .
move fund to contract jackpot .
update account .
pay balance from wallet .
buy tokens .
buy tokens with affiliate partner .
delete all tokens own by sender and return unpaid dividends and 90 of initial investment .
pay unpaid dividends .
commit remain dividends before transfer of tokens .
lottery function .
check if win in lottery .
check if win in lottery .
transfer tokens from one address to another .
play in lottery .
play in lottery with random number .
play in lottery with own number .
create hash data swap space .
"create hash data swap space , add 128 hash ."
fill hash data .
fill hash data many time .
show length of allocate swap space .
show balance of wallet .
show last dividend period process .
show block number when withdraw can continue .
show bet size .
public function player submit bet only if game be active bet be valid can query oraclize and set player vars .
low level token purchase function .
manually transfer tokens .
true if crowdsale event have end .
"vault finalization task , call when owner call finalize ( ) ."
create the token to be sell .
"internal transfer , only can be call by this contract ."
buy tokens from contract by send ether .
sell amount tokens to contract .
freeze frozenamount tokens from be sell .
release releasedamount tokens to contract .
send _value tokens to _to in behalf of _from .
allows _spender to spend no more than _value tokens in your behalf .
"allows _spender to spend no more than _value tokens in your behalf , and then ping the contract about it ."
remove _value tokens from the system irreversibly .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
freeze ? prevent allow target from send receive tokens .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
create the token to be sell .
accepts ether and create new ico tokens .
low level token purchase function .
send _value tokens to _to from your account .
send _value tokens to _to in behalf of _from .
allows _spender to spend no more than _value tokens in your behalf .
remove _value tokens from the system irreversibly .
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms . . .
true if the transaction can buy tokens override crowdsale validpurchase to add extra cap logic .
create the token to be sell .
function in contract 'contractreceiver ' .
low level token purchase function .
transfer token for a specified address .
create the token to be sell .
send _value amount of tokens from address _from to address _to .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to mint tokens .
use safe math additions for extra security .
minimum investment be 2 ether which will be keep in the contract and the depositor will earn interest on it remember to check your gas limit .
calculate interest rate .
the pay interest function be call by an administrator .
state variables .
will selfdestruct the contract .
initiate a change of owner to _owner .
change the resource to _resource .
set the product creation fee .
send contract balance to owner .
create a new product contract .
buy the tokens .
raise total cap .
"a helper function for the default function , allow contract to interact ."
ico participation .
starts new token emission .
add dividends to the account _to .
gets the contract version for validation .
mint tokens .
return rate of token against ether .
admin only can transfer from the privileged account .
opens refund .
allow change the vuepay multisig wallet incase of emergency .
"create vup tokens from the advisory bucket for market , pr , media where we be pay upfront for these activities in vup tokens ."
allows vuepay to withdraw fund .
signals that the sale have reach it minimum fund goal .
transfer token for a specified address when not pause .
transfer tokens from one address to another when not pause .
throws if call by any account other than the owner .
modifier to allow action only when the contract is pause .
modifier to allow action only when the contract is not pause .
allows anyone to transfer the zhq token tokens once trade have start .
low level token purchase function .
need to update sale params after publish because of ui bug .
refund when something go wrong .
low level token purchase function .
end of sale withdrawl do n't keep our junk on blockchain .
set the contract that can call release and make the token transferable .
one way function to release the tokens to the wild .
tranfer tokens to address .
tranfer tokens from one address to other .
tokens balance .
approve transfer .
token allowance .
modified allow execution only if the crowdsale be currently run .
make an investment .
allow anonymous contributions to this crowdsale .
finalize a succcesful crowdsale .
method for set usd to ether rate from poloniex .
method set exchange rate agent .
allow crowdsale owner to close early or extend the crowdsale .
allow load refund back on the contract for the refund .
investors can claim refund .
minimum goal be reach .
"call by the owner on emergency , trigger stop state ."
method set data from migrate contract .
crowdfund state machine management .
calculating tokens count .
check if the pre ico goal be reach .
converts wei value into usd cents accord to current exchange rate .
dynamically create tokens and assign them to the investor .
"call by the owner on end of emergency , return to normal state ."
limit token transfer until the crowdsale be over .
the function can be call only before or after the tokens have be releasesd .
the function can be call only by release agent .
fix for the erc20 short address attack http : / / vessenes . com / the-erc20 - short-address - attack-explained .
make sure we be not do yet .
create new tokens and allocate them to an address .
ends the crowdsale and withdraw any remain tokens .
this handle the withdrawal of refund .
send coin .
a contract attempt to get the coin .
send coin .
a contract attempt to get the coin .
only owner modifier .
is window open ( first month after each genesis anniversary ) .
is window close .
sets token address ( mpy ) .
redeem dividends .
redeem dividends .
transfers tokens hold by timelock to beneficiary .
calculates the amount of sxp coin the buyer get .
low level token purchase function .
can be override to add finalization logic .
allows anyone to transfer the selfpaytoken tokens once trade have start .
allows anyone to transfer the selfpaytoken tokens once trade have start .
"event onsetlock ( bool index _oldgloballocked , bool indexed _newgloballocked ) ; ."
"event oncancelsellingtoken ( address index _tokenaddress , address _seller , uint indexed _sellingamount , uint256 indexed _price , uint _linetime , bool _cancel ) ; ."
"event onbuytoken ( address _buyer , address indexed _seller , address indexed _tokenaddress , uint256 _transtokenamount , uint256 indexed _tokenprice , uint256 _sellerramiantokenamount ) ; ."
callback from sale contract when the sale begin .
1st half of ownership change .
2nd half of ownership change .
put some text in the contract .
withdraw all of the ether .
withdraw some of the ether .
withdraw tokens to owner .
refund early / late tokens .
callback from sale contract when sale end .
set the target sale address .
"ether get send to the main sale contract , but tokens get send here , so we still need withdrawal methods ."
tell the receivers that the sale have begin .
tell the receivers that the sale be over .
initial fund .
explicit balance getter .
whether give address be a contract or not base on bytecode .
reject all erc23 compatible tokens param _from address that be transfer the tokens param _value amount of specify token param _data bytes data pass from the caller .
ensure proper state .
make a match ( and specify payout address ) .
send proceed .
become the new master .
become the new master ( and specify payout address ) .
"in case it ever need to be update for future ethereum release , etc ."
"withdraw accumulate balance , call by payee ."
transfer remain to owner in case if impossible to do min invest .
buy bbd .
close exchange .
check if min cap be archive .
current exchange rate for bbd .
number of bbd tokens on exchange .
max number of bbd tokens on exchange to sell .
max value of wei for buy on exchange .
check if sell be possible .
check if buy be possible .
sell bbd .
allow burn of tokens only by authorized users .
compute the umbrellacoin bonus accord to the investment period .
use with caution - use this withdraw function if you do not trust the contract 's token set .
this handle the withdrawal of refund .
minting methods .
"function to mint tokens , implement mintableinterface ."
true if crowdsale event have end .
override crowdsale buytokens to add extra tokencap logic .
changes the vig address .
what be total circulate supply ? .
"function to link big and little sister , this one can only be call by the big sister and only once ."
the sell price be also determine by the big sister return an uint256 sell price .
likewise the big sister dictate the buy price .
"sends all the fund to the big sister , can only be invoke by her ."
kills the contract and send fund to owner .
what be the value of this token in case this token win ? .
supply that still can be buy .
buy tokens from the contract depend on how much money have be send .
users can redeem their cash and sell their tokens back to the contract .
sells all tokens of a user .
destroys the contract as well a the little sister .
"links a little and a big sister together , can only be invoke by owner ."
"buy tokens from the contract , a in parent class , but ask the sister if price need to be increase for future purchase ."
buy tokens from the contract and check price and potentially increase the price afterwards .
function that can only be call by the sister to check and increase price .
"internal function to check and maybe increase the buying price every time the thresholdamount be meet , the price be increase ."
"checks and initiate payout , i . e ."
internal function need to be call by the evidence gather implementation in subclass .
callback function use by oraclize to provide the result .
can be call by users and token holders to check if trump be still president .
return the price of oracle call in wei .
callback use by oraclize .
can be call by user to request evidence from oraclize .
we a owners can ( only ) increase or keep the price in case there be a gas price surge within the range of 30 to 300 gwei .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
functions with this modifier can only be execute by the owner .
bk ok - only owner can assign new propose owner .
bk ok - only new propose owner can accept ownership .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
add ether to reserve fund without issue new tokens ( price will growth ) .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
approve and then comunicate the approve contract in a single tx .
low level token purchase function .
true if the transaction can buy tokens .
true if crowdsale event have end .
this function allow distribution by the owner before the actual public sale start .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
function to stop mint new tokens in crowdsale ( initial distribution ) .
create the token to be sell .
initializes contract with initial supply tokens to the creator of the contract .
use with caution - use this withdraw function if you do not trust the contract 's token set .
calculates how many tokens a give amount of wei can buy at a particular level of weiraised .
return all user 's tokens if time releasetime .
public function .
public function .
internal function .
overriden to add finalization logic .
private function ca n't override validpurchase because need to pass additional value .
true if now be within the bound of the whitelist period .
ca n't override validpurchase because need to pass additional value .
true if now be within the bound of the open whitelist period .
"internal transfer , only can be call by this contract ."
set allowance for other address and notify .
amount of tokens the investor receive .
returns number of tokens own by give address .
returns number of tokens own by give address .
administrative function .
take enum .
buy tokens for ehter .
"return value : 0 - ok , 1 - balance be zero , 2 - can not send to escrow ."
"return value : 0 - ok , 1 - balance be zero , 2 - can not send to escrow ."
low level token purchase function map ( address uint ) public balance ; .
it will be call by owner to start the sale .
due to change average of block time this function will allow on adjust duration of campaign closer to the end .
it will be call by fallback function whenever ether be send to it .
determine if purchase be valid and return proper number of tokens .
it be call by handleeth to determine amount of tokens for give contribution .
show for display purpose amount of tokens which can be buy at give moment .
this function will finalize the sale .
failsafe token transfer .
to multisig wallet .
to populate website with status of the sale .
set the step of the campaign .
return number of contributors .
sets a new controller address if the current controller be n't lock .
disables the contract .
the total amount of tokens pay out .
commits one token for every token generate to the pool ( batch ) .
locks the current controller address forever .
creates new tokens for the give receiver .
withdraws tokens hold by the contract to a give account .
proxy function for token .
proxy function for token .
sets the address of the contract to which all generate tokens be duplicate .
persists proof of the game state and final board eternally .
distributes tokens for play .
will throw if no donations be receive .
receives eth on behalf of somebody else .
this could be leave available to everybody instead of owner only .
emergency fallback for retrieve fund .
allows donators to withdraw the share of tokens they be entitle to .
fix for the erc20 short address attack .
approval allowance .
sale events .
issuer reserve .
reward distribution .
pyramid grid read function .
pyramid grid write function .
withdrawing balance .
chatbox function .
"in case of chat message with extremely rude or inappropriate content , the administrator can censor a chat message ."
game ownership function .
some magic you wo n't understand .
low level token purchase function map ( address uint ) public balance ; .
allows the current owner to transfer control of the contract to an otherowner .
allow for burn of tokens in the future .
adds an address to the recorrdentry list .
adds an address to the tokenholders list .
allows the owner to create an record of token owners and their balance .
returns record content .
returns the address of a specific index value .
returns time remain on crowdsale .
returns the address of a specific index value .
"pays out dividends to tokens holders of record , base on 500 , 000 token payment ."
sets the multisig wallet for a crowdsale .
sets the token price .
allows owner to start the crowdsale from the time of execution until a specified stoptime .
allows owner to stop the crowdsale immediately .
"allows contract owner to mint new tokens , prevent numerical overflow ."
sends tokens from sender 's account .
transfers tokens from an approved account .
transfer the balance from owner 's account to another account .
lock mana into the contract .
function to mint tokens .
transfer token for a specified address .
true if crowdsale event have end .
withdraw the fund .
burn tokens from sender balance .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
throws if call by any account other than the owner .
true if a ring 's hash have ever be submit ; false otherwise .
calculate the hash of a ring .
submit a order-ring for validation and settlement .
cancel a order .
set a cutoff timestamp to invalidate all order whose timestamp be small than or equal to the new value of the address 's cutoff timestamp .
validate a ring .
0 if neither order be the small one ; 1 if 'state ' be the small order ; 2 if 'next ' be the small order .
scale down all order base on historical fill or cancellation stats but key the order 's original exchange rate .
amount of erc20 token that can be spend by this contract .
amount of lrc token that can be spend by this contract .
verify input data 's basic integrity .
assmble order parameters into order struct .
validate order 's parameters be ok .
get the keccak-256 hash of order with specified parameters .
the signer 's address .
calculate the square of coefficient of variation ( cv ) https : / / en . wikipedia . org / wiki / coefficient_of_variation .
"check if condition hold , if not , log an exception and revert ."
add a loopring protocol address .
remove a loopring protocol address .
amount of erc20 token that can be spend by this contract .
invoke erc20 transferfrom method .
gets all versioned address .
check if the goal or time limit have be reach and end the campaign .
transfer deposit fund to recipients .
approves and then call the receive contract .
overridden method to check for end of fundraise before allow transfer of tokens .
overridden method to check for end of fundraise before allow transfer of tokens .
returns the current token price .
redeems vibes and record the vibehub address of the sender .
ends the fundraising period and send the eth to the ethfunddeposit wallet .
starts the redeeming period .
pauses the contract .
proceeds with the contract .
"okay , we change the process flow a bite where the actual frd to eth map shall be calculate , and push to the contract once the crowdsale be over ."
true if the transaction can buy tokens .
function to start the token sale start the token sale at _starblock .
function to stop the token swap stop the token swap at _endblock .
this function be to add the previous token sale balance .
set the wallet address set the wallet at _wallet .
set the minimum contribution to _mincontrib .
true if token swap event have end .
true if the token swap contract be active .
x + y .
set new owner for the smart contract .
freeze token transfer .
unfreeze token transfer .
x - y .
x * y .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
name of this token .
number of decimals for this token .
track who be the customer make the payment so we can send thank you email .
called once by crowdsale finalize ( ) if the sale be success .
make an investment .
make a match ( and specify payout address ) .
send proceed .
become the new master ( and specify payout address ) .
in case it ever need to be update for future ethereum release .
initial fund .
public onlyowner .
send coin .
public function .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to mint tokens .
private function .
total amount of tokens .
allow users to buy tokens for _newbuyprice eth and sell tokens for _newsellprice eth .
send _minedamount to _target a a reward for mine .
the balance .
send _value token to _to from msg . sender .
send _value token to _to from _from on the condition it be approve by _from .
amount of remain tokens allow to spend .
create _mintedamount tokens and send it to _target .
buy tokens from contract by send ether .
sell _amount tokens to contract .
total amount of tokens .
create _mintedamount tokens and send it to _target .
low level token purchase function map ( address uint ) public balance ; .
allows for a certain amount of tokens to be spend on behalf of the account owner .
"allows contract owner to mint new tokens , prevent numerical overflow ."
sends tokens from sender 's account .
transfers tokens from an approved account .
"call by the owner to pause , trigger stop state ."
low level token purchase function .
true if the transaction can buy tokens .
forward all remain tokens to the foundation address .
allows to add a new owner .
allows anyone to execute a confirmed transaction .
low level token purchase function .
private function .
"internal transfer , only can be call by this contract ."
remove _value tokens from the system irreversibly .
"internal transfer , only can be call by this contract ."
send _value tokens to _to in behalf of _from .
allows _spender to spend no more than _value tokens in your behalf .
"allows _spender to spend no more than _value tokens in your behalf , and then ping the contract about it ."
remove _value tokens from the system irreversibly .
whitelist address .
one of founder can propose destination address for ethers .
another founder can approve specify tx and send it to destaddr .
ismanager modifier .
check if msg . sender .
send _value tokens to _to in behalf of _from .
approves and then call the receive contract .
ensures the promiseid a actually in use .
ensure state consistency after modify lockedtokenbalance or promisedtokenbalance .
initiates the request to lockup the give number of tokens until the give block . timestamp .
cancels the pending transaction as long a the caller have permissions and the transaction have not already be confirm .
allows the recipient to confirm their address .
called by the recipient after the lock have expire .
withdraws the give number of tokens from the locker as long a they be not already lock or promise .
withdraw all tokens from the wallet that be not lock or promise .
"tokens can be transfer out by the owner if either 1 : the tokens be not the type that be govern by this contract ( accidentally send here , most likely ) 2 : the tokens be not already promise to a recipient ( either pending or confirm ) ."
returns true if the give promise have be confirm by the recipient .
returns true if the give promise can be collect by the recipient .
return the total amount of tokens that be eligible to be collect .
return the number of transactions that meet the give criteria .
return a list of promiseids that match the give criteria .
return the number of tokens hold by the token locker ( some might be promise or lock ) .
return the number of tokens that be not promise or lock .
return the number of tokens that a promise by have not be lock ( pending confirmation from recipient ) .
move the promise to the new state and update the locked / pending total accordingly .
add a new state transition to the state transition matrix .
move the promise to the new state as long a it 's permit by the state transition matrix .
move the promise to the confirm state and update the lock token total .
"create and store a new promise object , update the promisedtokenbalance ."
checks the uncommitted balance to ensure there the locker have enough tokens to guarantee the amount give can be promise .
guards action that only the intended recipient should be able to perform .
allow the owner to change the minimum bet .
check if a game with the give id already exist .
true if correct .
the total win of all hand .
allow the owner to change the maximum bet .
authorize a address to call game function .
deauthorize a address to call game function .
check if an address be authorize to call game functionality .
"initialize a round of blackjack with an id , the hash of the ( partial ) deck and the hash of the server seed ."
double the bet of the game with the give id if the correct amount be send and the player do not double the hand yet .
split the hand of the game with the give id if the correct amount be send from the player address and the player do not split yet .
by surrender half the bet be return to the player .
"first check if deck and the player 's number of card be correct , then check if the player win and if so , send the win ."
low level token purchase function .
true if the transaction can buy tokens .
true if the amount be low then 20eth .
modifier to allow action only for whitelisted users .
modifier to allow action for everybody .
call by the owner to allow everyone .
call by the owner to limit to whitelist users .
delay the time of close .
shift tokens from the contract balance to the receiver .
transfer an amount from the contract balance to the owner 's wallet .
update a casino game address in case of a new contract or a new casino game newaddress the new address of the game .
authorize a address to call game function .
deauthorize a address to call game function .
update the price per 1000 gas in edg .
forwards a move to the corresponding game contract if the data have be sign by the client .
accept deposit for an arbitrary address .
"if the user want / need to withdraw his fund himself , he need to request the withdrawal first ."
withdraw an amount from the user balance if 7 minutes pass since the request .
return the current bankroll in tokens with 0 decimals .
let the owner close the contract if there be no player fund on it or if nobody have be use it for at least 30 days .
in case close have be call accidentally .
"initialises address of team , founder , tokens owner , escrow ."
sets new token importer .
imports account 's tokens from pre-ico .
stops ico manually .
"if ico be successful , send fund to escrow ( only manager can do it ) ."
returns fund to funder if ico be unsuccessful .
count tokens that can be sell with amount of money .
invalidates _amount tokens .
buys quantity of tokens for the amount of send ethers .
burn tokens from account only in state not migrate .
set state migrate .
send tokens to founder .
adds tokens to address .
proxy transfer cny token .
"proxy approve that some one can authorize the agent for broadcast transaction which call approve method , and agents may charge agency fee ."
get the nonce .
get last comment .
get specified comment .
allocate tokens to the users .
transfer token for a specified address .
owner can batch return contributors contributions ( eth ) .
owner can set multisig address for crowdsale .
check crowdsale state and calibrate it .
public order placement - create order and try to match it and / or add it to the book .
public order placement - cancel order .
public order placement - continue place an order in 'needsgas ' state .
participate to a presale .
calculate the current price for buy in amount .
total number of tokens initially simplify from wei .
current number of tokens simplify from wei .
setup the packagesale parameters .
minimum investment be 2 ether which will be keep in the contract and the depositor will earn interest on it remember to check your gas limit .
erc20 stub .
grant tokens to a specified address .
revoke the grant of tokens of a specifed address .
unlock vest tokens and transfer them to their holder .
throws if call when not during sale .
throws if call before sale end .
finalizes the token sale event .
create and sell tokens to the caller .
issues tokens for the recipient .
proposes to transfer control of the stoxsmarttoken contract to a new owner .
accepts new ownership on behalf of the stoxsmarttoken contract .
proposes to transfer control of the trustee contract to a new owner .
accepts new ownership on behalf of the trustee contract .
freeze ? prevent allow target from send receive tokens .
"allow address to pay newbuyprice eth when buy and receive newsellprice eth when sell , foreach token buy / sell ."
sets the state of buy and sell operations .
deposits ether to the contract .
the owner withdraw ether from the contract .
buy tokens from contract by send ether .
sell amount tokens to the contract .
send _value tokens to _to in behalf of _from .
allows _spender to spend a maximum of _value tokens in your behalf .
"internal transfer , only can be call by this contract ."
"internal , update the balance of tokens available ."
"internal , update the balance of ether available in order to cover potential sales ."
"internal , update the profit value ."
"the owner send _value tokens to _to , because _to have the right ."
create mintedamount tokens and send it to target .
check if valid purchase .
true if crowdsale event have end .
low level token purchase function .
transfer ownership of the token to the owner of the presale contract .
proxy transfer cny token .
"proxy approve that some one can authorize the agent for broadcast transaction which call approve method , and agents may charge agency fee ."
minimum investment be 5 ether which will be keep in the contract and the depositor will earn interest on it remember to check your gas limit .
creates more tokens .
owner can batch return contributors contributions ( eth ) .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
if des tokens will not be sell in a phase it will be ours .
allocate tokens to a market supporter from the market campaign share .
allocate tokens to an early contributor from the early contributor share .
issue new tokens accord to the star token inflation limit .
allocate tokens to a crowdsale or early purchaser from the crowdsale share .
transfers sender 's tokens to a give address .
allows third party to transfer tokens from one address to another .
adds fundraiser .
setup function set external contract ' address .
allows for market contributor 's reward add and withdrawl .
informs about contributors rewardedtokens and transferredrewardtokens status .
returns number of contributors .
function to mint tokens .
function to stop mint new tokens .
setup function set external contract ' address and set the max crowdsale cap .
allows owner to record a purchase make outside of ethereum blockchain .
allows qualify crowdsale partner to purchase star tokens .
allows user to purchase star tokens with ether .
initializes starbase crowdsale .
abstract record of a purchase to tokens .
fetchs bonus tier percentage per bonus milestones .
accept deposit and create depositor record .
track deposit .
depositor fund to be withdraw after release period .
send ether from the complete crowdsale to the owners wallet address .
function to change the price of the token .
function that be call three days before the sale to set the token and price .
called by a crowdsale contract upon creation .
called when an address want to purchase tokens .
called by a crowdsale contract upon creation .
function call by purchasers to pull tokens .
modifier for function that can only be execute by adminstrator .
owner can add a new administrator .
owner can remove an administrator .
disable whitelisting .
release the token .
check whether release or exempt .
required sender to be a release agent .
update the release agent provide tokens be not already release .
"okay , we change the process flow a bite where the actual ssd to eth map shall be calculate , and push to the contract once the crowdsale be over ."
true if the transaction can buy tokens .
function to start the token sale .
function to stop the token swap .
true if token swap event have end .
true if the token swap contract be active .
true if token swap event have end .
may only be call if the crowdfund have not be halt .
use by owner of contract to halt crowdsale and no long except ether .
transfer amount of tokens from sender account to recipient .
transfer amount of tokens from a specified address to a recipient .
send coin .
a contract attempt to get the coin .
mint a certain number of tokens .
the balance should be available .
an allowance should be available .
tokens must not be lock .
can only be call by the administrator .
can only be call by the prepurchaser .
the transaction params be valid for buy in .
requires the hard cap to be respect give the desired amount for buyin .
requires sender to be certify .
sale life cycle : 1 .
can only be call during the period when not pause ( 2a ) .
mint a certain number of tokens that be lock up .
can only be call during the period when pause ( 2b ) .
can only be call after the period ( 3 ) .
allocation life cycle : 1 .
only when sufficient allocations remain for make this liquid allocation ( 2 ) .
only when sufficient allocations remain for make this lock allocation ( 2 ) .
only when no further allocations be possible ( 3 ) .
note a prepurchase that have already happen .
make a purchase from a privileged account .
let sender make a standard purchase ; amb go into another account .
finalise any minting operations .
receive a contribution from _recipient .
determine purchase price for a give address .
halt the contribution period .
unhalt the contribution period .
called once by anybody after the sale end .
preallocate a liquid portion of tokens .
preallocate a locked-up portion of tokens .
end of the sale and token allocation ; retire this contract .
return the current unlock-phase .
unlock any now freeable tokens that be lock up for account _who .
transfer tokens between account .
transfer via allowance .
approve allowance .
get the balance of a specific address .
available allowance .
deploy and start the crowdsale .
the amount in tokens .
function to end the crowdsale by set the stage to ended .
transfer appropriate percentage of raise amount to the company address .
erc20 short address attack fix .
whether the transfer be successful or not .
whether the transfer be successful or not .
whether the approval be successful or not .
whether the approval be successful or not .
"call by the owner on emergency , trigger stop state ."
function that end sales .
function to extend period of presale .
function to get your ether back if presale fail .
function to send profit and unsold tokens to beneficiary .
get ether and transfer tokens .
making contract burnable .
"call by the owner on end of emergency , return to normal state ."
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function that create new tokens by owner .
function that start sales .
lockchain ends the fund period and send the eth home .
simple function to deposit more eth to match future donations .
the address preassigned the escapehatchcaller role be the only address that can call a function with this modifier .
the escapehatch ( ) should only be call a a last resort if a security issue be uncover or something unexpected happen .
changes the address assign to call escapehatch ( ) .
returns the balance of the basetoken store in this contract .
"sends an _amount of basetoken to _to from this contract , and it can only be call by the contract itself ."
called anytime ether be send to the contract create an event to more easily track the incoming transactions .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
erc20 function .
send some of your tokens to a give address .
allow another contract or person to spend some tokens in your behalf .
a contract or person attempt to get the tokens of somebody else .
optiontoken function .
allows to increase totalsupply and get optiontokens to their balance .
"allows the the contract owner to withdraw all unsold base tokens , also deinitializes the token ."
buy sale tokens .
finalize sale .
allow migrate contract .
ico status overview .
get token creation rate .
buy presale tokens .
finalize presale .
buy the fidgures .
mint spint .
start this october 27 .
low level token purchase function .
total number of tokens initially .
remain number of tokens .
setup the crowdsale parameters .
allows any user to withdraw his tokens .
allows any caller to get his eth refund .
buy the tokens .
authorise a lot of account in one go .
ban an account from participation ( default ) .
set a new cs representative .
call an end ( e . g .
in case somebody send erc2o tokens . . .
throw if person send be not authorise or send nothing .
set start and stop time .
authorise an account to participate .
throw if person send be not authorise or send nothing .
"helper function , determine if a give address be an account or a contract ."
gets the address of any account in 'accountlist ' .
checks if an account be register .
gets the balance of the specified address at the first block minor or equal the specified block .
authorized contract can burn tokens .
send a specified amount of tokens from sender address to '_recipient ' .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
approve should be call when allow _spender 0 .
approve should be call when allow _spender 0 .
sets a contract authorization to burn tokens .
checks if the token own by the provided address be lock .
function permanently disable 'burn ( ) ' and 'setburner ( ) ' .
gets the balance of the specified address .
function to check the amount of tokens that an owner allow to a spender .
sets the maintenance mode .
"maintenance function , if accountslist grow too long back end can safely clean unused account and push the renew list into the contract ."
"maintenance function reserve to back end , remove an account from the list ."
auxiliary method use in constructor to reserve some tokens and lock them in some case .
function implement the share logic of 'transfer ( ) ' and 'transferfrom ( ) ' .
updates the user history with the late balance .
allows the pendingowner address to finalize the transfer .
throws if token be under maintenance .
throws if token be not under maintenance .
registers the recipient account when tokens be send to an unregistered account .
accountslist length .
check if ico be open .
wrap up crowdsale after end block .
legacy code to enable refund if min token supply not meet ( not possible with fixed supply ) .
only owmer .
safely add .
safely subtract .
safely multiply .
return the address balance .
transfer tokens to account .
transfer tokens on behalf of _from .
approve transfer of tokens on behalf of _from .
find allowance .
this modifier should prevent tokens transfer while the tokenswap be still ongoing .
this modifier should prevent ico from be launch by an attacker .
a helper to notify if overflow occur .
the function preicoswaprate ( ) return the current exchange rate between consulteum tokens and ether during the pre-ico token swap period .
the function mintminiicotokens be only usable by the choose wallet contract to mint a number of tokens proportional to the amount of ether send to the wallet contract .
the function disableminiswaplock ( ) be call by the wallet contract once the token swap have reach it end condition .
the function minticotokens be only usable by the choose wallet contract to mint a number of tokens proportional to the amount of ether send to the wallet contract .
the function disableicoswaplock ( ) be call by the wallet contract once the token swap have reach it end condition .
add msg . sender .
add msg . sender .
"only call by referee , do not delete the participant from the list , but keep him from win ( because of inappropiate content ) , only in contract if a referee exist ."
only callable by referee .
"only callable after vote deadline , distribute the prize , fire event ? ."
determines the win voters .
"create a random number in 0 , range ) ."
"distribites the contract balance amongst the creator , wthe winners , the lucky voters , the referee and the provider ."
return the total vote count .
the owner 's address be 0x79ed9508dd940925384c439a3aff10b278604fe2 .
"note that a bop can not go from committed back to open , but it can go from expended back to committed ( this would retain the committed recipient ) ."
this method will generally be call by the wct token contract to acquire wcts .
internal function to determine if an address be a contract .
this method will can be call by the controller before the contribution period end or by anybody after the endblock .
total tokens availale for the sale in weis .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
withdraw the token .
distributes the presale tokens .
set the sift contract address a a one-time operation .
gets the contract version for validation .
close the ico phase and transition to execution phase .
abandons the ico and return fund to shareholders .
allows people to withdraw fund that fail to send during the abandonment of the ico for any reason .
gets the contract version for validation .
transfer the balance from owner 's account to another account .
gets the contract version for validation .
snapshot to current state of contract .
gets the balance of a specified account .
ensures that once the ico be over this contract can not be use until the point it be destruct .
low level token purchase function .
"because of discount hasended might be true , but validpurchase return false ."
check this crowdsale event have end consider with amount to buy .
close vault only if goal be reach .
override token creation to integrate with mywill token .
admin can set new rate provider .
admin can move end time .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
only allowedspenders creates a new payment .
only allowedspenders the recipient of a payment call this function to send themselves the ether after the earliestpaytime have expire .
onlyowner cancel a payment all together .
onlyowner adds a spender to the allowedspenders white list .
onlyowner sets the address of securityguard .
onlyowner changes timelock ; the new timelock can not be low than absolutemintimelock .
onlyowner changes the maximum number of second securityguard can delay a payment .
emits error event with specify error message .
token balance .
multiplication result .
does subtract in safe manner .
emits specify number of tokens .
calculates number of tokens to emit .
calculates token emission in term of give stage .
checks if ico be still run .
validates ico timeframes and total cap .
validates if msg . sender .
get balance of give address .
send _value token to _to from msg . sender .
send _value token to _to from _from on the condition it be approve by _from .
get amount of tokens approve for transfer .
"convenient way to reset approval for give address , not a part of erc20 ."
total amount of tokens .
returns count of token holders .
total amount of tokens .
the balance .
send _value token to _to from msg . sender .
send _value token to _to from _from on the condition it be approve by _from .
amount of remain tokens allow to spend .
public function .
returns total number of transactions after filers be apply .
returns list of transaction ids in defined range .
allows to change the daily limit .
allows anyone to execute a confirmed transaction or ether withdraws until daily limit be reach .
returns if amount be within daily limit and reset spenttoday after one day .
returns maximum withdraw amount .
allows to replace an owner with a new owner .
allows anyone to execute a confirmed transaction .
burn all remain tokens .
use to calculate amount we be able to spend accord to current timestamp .
"function be final , and must not be override ."
emits error event with specify error message .
emits error if call not by asset owner .
emits error if call not by asset proxy .
emits error if _from do n't trust _to .
reject access .
get the owner of a specified din .
transfer ownership of a din .
get the resolver of a specified din .
set the resolver of a din .
get the time a specify din record be last updated .
register a new din .
change the dinregistrar contract .
register a new din .
register multiple new dins .
let 's be nice and clean up after ourselves .
return the token struct .
execute function for creator if erc20 's get stick in this wallet .
public function for request an updated price from server use this function require a payment of 0 . 35 .
donation function that get forward to the contract updater .
return rate price of coin relate to eth .
return 0 . 01 value in united states dollar .
return 0 . 01 value in euro .
return 0 . 01 value in british pound .
return block when price be update last .
"update market rat in usd , euro , and gbp for a specific coin ."
delete a token from the contract .
change creator address .
change sender address .
creazione dei token .
ritorna il numero totale di token .
ritorna il bilancio dell'utente di un indirizzo .
per inviare i token .
invio dei token con delega .
delegare qualcuno all'invio di token .
ritorna il numero di token che un delegato può ancora inviare .
only for demonstrate test version .
only for test version .
low level token purchase function .
for push pre-ico record .
access methods : .
this be call by other currency processors to issue new tokens .
this can be call to manually issue new tokens from the bonus reward .
anyone can call this and get his money back .
for refund only .
can be call by anyone . . .
"this function can be call by creator at any time , or by anyone if ico have really finish ."
public function .
gets the bonus for the specified total supply .
computes number of tokens with bonus for the specify ether .
main token buy function .
log an hash value into the blockchain .
member function .
admin function .
burn rsprs by user .
burn rsprs from users .
functions with this modifier can only be execute by the owner .
update operations .
withdraw money from contract balance to owner .
get total titanium card .
get total black card .
get total metal card .
get total gold card .
get total blue card .
get total start card .
"user get card ( titanium , black , gold metal , gold and other ) , if amount eth sufficient for this ."
contract execute .
withdraw money from contract balance to owner .
contract execute .
display current contract state in human readable form .
implementation methods .
fail if the current state be not before than the give one .
fail if something in setup be look weird .
accept call from owner only .
accept call from token holders only .
don t accept transactions with value less than allow minimum .
fail if something in setup be look weird .
allows the owner to set the crowdsale and token address .
allows any user to withdraw his tokens .
buy the tokens .
buy the tokens .
transfer token for a specified address when not pause .
transfer tokens from one address to another when not pause .
contract constructor set initial owners and required number of confirmations .
total number of tokens initially .
setup the crowdsale parameters .
this be call when ntz be deposit into the burn pool .
this be call when ntz be deposit into the power pool .
execute a powerdown request .
total supply .
queries the balance of _owner at a specific _blocknumber .
total amount of tokens at a specific _blocknumber .
creates a new clone token with the initial distribution be this token at _snapshotblock .
generates _amount tokens that be assign to _owner .
update the dapp by create a new token with new functionalities the msg . sender .
proxypayment ( ) allow the caller to send ether to the earlytokensale and have the tokens create in an address of their choose .
"notifies the controller about a transfer , for this earlytokensale all transfer be allow by default and no extra notifications be need ."
"notifies the controller about an approval , for this earlytokensale all approvals be allow by default and no extra notifications be need ."
dopayment ( ) be an internal function that send the ether that this contract receive to the vault and create tokens in the address of the _owner assume the earlytokensale be still accept fund .
finalizesale ( ) end the earlytokensale .
this function be override by the test .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
pauses the contribution if there be any issue .
resumes the contribution .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
get total tokens .
transfer tokens .
transfer tokens if you have a delegated wallet .
delegate your wallet to someone .
allows anyone to transfer the change tokens once trade have start .
allows anyone to transfer the change tokens once trade have start .
calculates the amount of bonus coin the buyer get .
check if valid purchase .
true if crowdsale event have end .
low level token purchase function .
finish mine coin and transfer ownership of change coin to owner .
function to mint tokens .
function to burn down tokens .
function to resume mint new tokens .
low level token purchase function .
load fund to the crowdsale for all investors .
get claim of token byself .
get claim of token by address .
true if the transaction can buy tokens .
true if harborpresale event have end .
call after presale end .
finalization refund or excute fund .
"if presale be unsuccessful , investors can claim refund here ."
change presale preiod .
send coin .
a contract attempt to get the coin .
send coin .
a contract attempt to get the coin .
create the token to be sell .
tokens per eth .
low level token purchase function .
"call after crowdsale end , to do some extra finalization ."
finalization refund check .
"if crowdsale be unsuccessful , investors can claim refund here ."
allow crowdsale owner to close early or extend the crowdsale .
send coin .
eth balance be always expect to be 0 .
save some gas by make only one contract call .
check if the goal or time limit have be reach and end the campaign .
validate consistency of data structure .
get end time of the last bonus .
validate consistency of data structure .
send value of ether to address to .
"withdraw accumulate balance , call by payee ."
trigger some state change base on current time note : function body could be skip ! .
automatic check for unaccounted withdrawals .
ico participation .
pause ico .
resume pause ico .
consider paused ico a fail .
in case we need to attach to existent token .
in case we need to attach to existent fund .
internal function .
perform only allow state transition .
calculate amount of stq to which payer of _wei be entitle .
"start time of the ico , inclusive ."
to be override in test .
replaces an owner _from with another _to .
all pending operations will be cancel ! .
all pending operations will be cancel ! .
all pending operations will be cancel ! .
we restrict transfer by override it .
we restrict transferfrom by override it .
create new tokens and allocate them to an address .
allow the token holder to upgrade some of their tokens to a new contract .
set an upgrade agent that handle the upgrade process .
change the upgrade master .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
atomic increment of approved spend .
atomic decrement of approved spend .
set policy do we need to have server-side customer ids for the investments .
allow to ( re ) set finalize agent .
allow load refund back on the contract for the refund .
investors can claim refund .
true if the crowdsale have raise enough money to be a success .
check if the contract relationship look good .
crowdfund state machine management .
this be for manual test of multisig wallet interaction .
allow the owner to set a fund cap on the crowdsale .
make an investment .
we assign tokens through the mint mechanism .
"these two setters be present only to correct block number if they be off from their target date by more than , say , a day ."
here we calculate the amount of tokens that correspond to each price point .
we restrict investments to those with a minimum of 2 eth .
the owner be suppose to whitelist investors for the discounted price at low price point .
investing function that recognize the payer .
the basic entry point to participate in the crowdsale process .
finalize a succcesful crowdsale .
this can be call to manually issue new tokens from the bonus reward .
anyone can call this and get his money back .
throw if at stage other than current stage .
ico number .
update crowd sale stage base on current time and ico periods .
transfer appropriate percentage of raise amount to the company address and humanity and buy back fund .
add additional bonus tokens for subscribed investors .
set humanity fund address .
rate how many tokens will be issue for one eth .
"investor rate , 1000000 100 ."
the amount in rich .
whether the approval be successful or not .
whether investor have invest enough or not .
function that everyone can call and burn for other tokens if they can be burn .
ico number .
start of the crowd sale can be set only once .
whether the transfer be successful or not .
whether the transfer be successful or not .
execute options during the ico token purchase .
buy option tokens .
private function .
create tokens .
burn option tokens after execution during ico .
get remain tokens for all type of option tokens .
"allows _spender to spend no more than _value tokens in your behalf , and then ping the contract about it ."
create tokens .
allow token transfer .
erc20 function .
token migration .
set address of migration contract .
this be call by other currency processors to issue new tokens .
send value of ether to address to .
unlock team member 's tokens by transfer them to his address .
send coin .
pause the sale .
withdraw mana ( only owner ) .
withdraw any erc20 token ( just in case ) .
withdraw proceed .
change address where fund be receive .
calculate which day into the sale be we .
add a user to the whitelist .
remove an user from the whitelist .
batch add users .
withdraw money from contract balance to owner .
set new hoqu token exchange rate .
set new minimum buyable amount in ethers .
performs actual token sale process .
trigger emergency token pause .
unpause token .
finish ico .
perform initial token allocation between founder ' address .
hoqu token factory .
function that sell available tokens .
distributes the presale tokens .
distributes the ico tokens .
contructor that give msg . sender .
burn dony by user .
get balace of an account .
transfer function always return true .
this function should only be call in the unfortunate case that enjin should refund from a different address .
use with caution - use this withdraw function if you do not trust the contract 's token set .
fapcoin ends the fund period and send the eth home .
pause the auction and temporarily disable bid .
resume the auction and allow bid once again .
end the auction and send the high bid to the owner .
override auction . endauction .
bid on the auction with the value send with this transaction .
withdraw a bid that be overbid .
start the auction and allow bid .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
deprecate current contract in favour of a new one .
deprecate current contract if favour of a new one .
issue a new amount of tokens these tokens be deposit into the owner address .
redeem tokens .
transfer token for a specified address .
transfer tokens from one address to another .
"function to get the price of the token return how many token units a buyer get per wei , need to be divide by 10 ."
check if token pair be enable .
public entrypoints .
make a new offer .
make a new offer .
"transfers fund from caller to offer maker , and from market to caller ."
cancel an offer .
insert offer into the sorted list keepers need to use this function .
return true if token be succesfully add to whitelist .
return true if token be successfully remove from whitelist .
set the minimum sell amount for a token .
return the minimum sell amount for an offer .
set buy functionality enable / disable .
set match enable / disable .
"return the best offer for a token pair the best offer be the low one if it 's an ask , and high one if it 's a bid offer ."
"return the next worse offer in the sorted list the bad offer be the high one if it an ask , and low one if it a bid offer ."
"return the next better offer in the sorted list the good offer be in the low price one if it an ask , and next high price one if it a bid offer ."
return the amount of good offer for a token pair .
get the first unsorted offer that be insert by a contract .
get the next unsorted offer .
internal functions .
find the id of the next high offer after offer id .
return true if offer low price less than or equal to offer high .
"these variables be global only because of solidity local variable limit match offer with taker offer , and execute token transactions ."
make a new offer without put it in the sorted list .
put offer into the sorted list .
remove offer from the sorted list ( do not cancel offer ) .
hide offer from the unsorted order book ( do not cancel offer ) .
public entrypoints .
accept give quantity of an offer .
cancel an offer .
make a new offer .
"after close_time have be reach , no new offer be allow ."
donation function that get forward to the contract updater .
delete a token from the contract .
bidders that have be outbid can call this to retrieve their eth .
for winner ( or creator if no bid ) to retrieve badge .
for auction creator to retrieve eth 1 day after auction end .
mint token from pool of mintable tokens .
make sure we be not do yet .
fix for the erc20 short address attack .
one way function to release the tokens to the wild .
set the contract that may call the release function .
the function can be call only before or after the tokens have be releasesd .
the function can be call only by a whitelisted release agent .
allows the current owner to transfer control of the contract to a newowner .
"called by the owner on emergency , trigger stop state ."
"called by the owner on end of emergency , return to normal state ."
transfer token for a specified address .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
burns tokens and send reward .
transfers or burn tokens .
transfer tokens from one address to another or burn them if _to be this contract or zero address .
we dissable token transfer during ico and some time after ico .
set founder address .
set the timestamp when trasfers will be allow .
asserts crowdsale goal be reach .
"asserts crowdsale be finish , but goal not reach ."
"throws if crowdsale be not run : not start , end or max cap reach ."
calculates current price rate ( how many mtrx you get for 1 eth ) .
shows if crowdsale be run .
sends all contribute ether back if minimum cap be not reach by the end of crowdsale .
sends collect fund to owner .
finalizes ico when one of condition meet : - end time reach or - no more tokens available ( cap reach ) or - message send by owner .
this function allow ico / tge manager to set final ico / tge address it can be overwrite until contract address be lock .
only for contract managers .
run code only in unlocked mode .
run code only when tge address be lock .
interface declaration .
limit token transfer until the distribution be over .
sets a producer 's status .
creates new emeralds .
one way function to release the tokens to the wild .
fix for the erc20 short address attack .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
only producer allow .
contributors can make payment and receive their tokens .
"preallocate tokens for reserve , bounties etc ."
allow load refund back on the contract for the refund .
changes date of token distribution event .
internal function that create and distribute tokens .
contributors can claim refund .
state machine .
calculating token price .
save some gas by make only one contract call .
check whether the address be register for token sale or not .
check the address be register for token sale .
register the address for token sale .
register the address for token sale .
unregister the registered address .
fix for the erc20 short address attack .
transfer token for a specified address .
transfer tokens from one address to another .
this be a seperate function so user could query it before crowdsale start .
function be callable by everyone .
eth balance be always expect to be 0 .
just to check that fund go to the right place tokens be not give in return .
owner can delist by set cap 0 .
an optimization in case of network congestion .
transfer tokens from approve ( ) pool to the buyer .
fail if something in setup be look weird .
don t accept transactions with value less than allow minimum .
allows the developer to set the crowdsale address .
withdraws all eth deposit or tokens purchase by the give user and reward the caller .
allows developer to add eth to the buy execution bounty .
allows developer to add eth to the withdraw execution bounty .
"buys tokens in the crowdsale and reward the caller , callable by anyone ."
changes the number of required confirmations to one .
allows an owner to execute a confirmed transaction .
allows the developer to set the token address because we do n't know it yet .
developer override of received_tokens to make sure tokens be n't stick .
"anyone can call to see if tokens have be receive , and then set the flag to let withdrawls happen ."
allows the developer or anyone with the password to shut down everything except withdrawals in emergencies .
withdraws all eth deposit or tokens purchase by the give user .
"send all eth to the presale contract once total be between 149 , 299 , callable by anyone ."
allows the developer to set the token address ! .
allows the developer or anyone with the password to shut down everything except withdrawals in emergencies .
withdraws all eth deposit or tokens purchase by the give user and reward the caller .
only allow access from the main token contract .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
"total number of tokens issue so far , normalise ."
setup the crowdsale parameters .
get the account balance .
"return crowdsale max fund in eth , low res ."
"return crowdsale min fund in eth , low res ."
"return crowdsale progress ( fund raise ) in eth , low res ."
"return crowdsale remain cap ( hardcap ) in eth , low res ."
erc20 token transfer function .
erc20 token transferfrom function .
"erc20 allow _spender to withdraw , multiple time , up to the _value amount ."
erc20 return allowance for give owner spender pair .
erc20 methods .
add intervals .
retrieve the node id of the next node in the tree .
retrieve the node id of the previous node in the tree .
updates or inserts the id into the index at it appropriate location base on the value provide .
checks whether a node for the give unique identifier exist within the give index .
remove the node for the give unique identifier from the index .
query the index for the edge-most node that satisfy the give query .
searches interval list for : - match intervals - information on how search should proceed .
grove link list traversal .
uint / int conversions for grove nodeids .
data create helpers helpers .
retrieve the unique identifier for the node .
retrieve the value for the node .
retrieve the height of the node .
retrieve the parent id of the node .
retrieve the leave child id of the node .
retrieve the right child id of the node .
burn jack by user .
burn jack from users .
proxy for the bancor formula purchase return calculation .
burn jane by user .
burn janes from users .
function to mint tokens .
"function to get the price of the token return how many token units a buyer get per wei , need to be divide by 10 ."
function to stop mint new tokens .
burn all remain tokens .
burn all remain tokens .
erc 20 standard token interface transfer function .
erc 20 standard token interface transfer function .
burns tokens and send reward .
transfer tokens from one address to another if transfer be open .
change current state of transfer allowence to opposite .
allow transfer for the give address against global rule .
function to mint tokens for investor .
transfer token for a specified address if transfer be open .
returns number of tokens own by give address .
"one thing i ask from the lord , this only do i seek : that i may dwell in the house of the lord all the days of my life , to gaze on the beauty of the lord and to seek him in his temple ."
generate public from secret for manufacturer ( note this be not go to transactions - just constant ! ) .
add item from manufacturer .
check item by customer .
update item by customer .
transfer token for a specified address .
vote long enought to go to next phase .
preparation for vote ( application for vote ) long enought to go to next phase .
voting start and in progress .
voting preparation start and in progress .
voters agree on propose contract and ethereum be be send to that contract .
"can be call by anyone , if timespan withou accept proposal long enought enable refund ."
open preparation for new vote on propose lottery contract address .
payable so attendance only of people who really care register you a a voter ; .
open vote on propose lottery contract address .
gets the balance of the specified address .
close vote on propose lottery contract address check if fail - if no vote be more common than yes increase fail vote count and if it reach 10 reach of goal be fail and investors can withdraw their money .
vote on contract proposal .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
fell fre to donate author if you like what be present here .
premium for buy tits at the begin of ico .
allows to buy share .
opens ico ( only owner ) .
"closes ico - anyone can invoke if invoke to soon , take no action ."
"allows _spender to spend no more than _value tokens in your behalf , and then ping the contract about it ."
internal json ( https : / / api . etherscan . io / api ? module account action txlist address 0xddbd2b932c763ba5b1b7ae3b362eac3e8d40121a startblock 0 endblock 99999999 page 0 offset 0 sort desc apikey fj39p2diu8ix8u9n2735sukqwg3hppgpx8 ) . result ? ( . from ' address ' ) . timestamp .
this method be useful when we need to know last transaction ts .
function to mint tokens .
returns tranche index .
calculate the current price for buy in amount .
creates or update a deposit that be available for withdrawal after the specified number of weeks .
withdraws due deposit .
returns the price in wei pay to oraclize .
sets up a shapeshift cryptocurrency conversion use oraclize and the shapeshift api .
"returns true if a give string contain only number and letter , and be below a maximum length ."
returns a concatenation of seven bytes .
returns the shapeshift shift api string that be need to be send to oraclize .
returns the ascii numeric or low case character representation of a number .
returns the bytes representation of a provide ethereum address .
"this will not throw error on wrong input , but instead consume large and unknown amount of gas ."
destroys the contract and return and ether to the owner .
sets up a shapeshift cryptocurrency conversion use oraclize and the shapeshift api .
sets up a shapeshift cryptocurrency conversion use oraclize and the shapeshift api .
callback function for use exclusively by oraclize .
cancel a cryptocurrency conversion .
recover any recoverable fund due to the failure of intercrypto .
fix for the erc20 short address attack .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
fuzzy hash and name validation take from king of the ether throne https : / / github . com / kieranelby / kingoftheetherthrone / blob / v1 . 0 / contract / kingoftheetherthrone . sol .
"true if-and - only-if _name_ meet the criteria below , or false otherwise : - no few than 1 character - no more than 25 character - no character other than : - roman alphabet letter ( a-z and a-z ) - western digits ( 0-9 ) - safe punctuation : ! ( ) - ."
"name must only include upper and lowercase english letter , number , and certain character : ! ( ) - ."
create a game that may be join only by the address provide .
use this when you know you 've lose a player 1 and you do n't want to bother with reveal your move .
prevent new game from be create .
total amount of tokens .
the balance .
send _value token to _to from msg . sender .
send _value token to _to from _from on the condition it be approve by _from .
amount of remain tokens allow to spend .
total amount of burn tokens .
whether the burn be successful or not .
send coin .
a contract attempt to get the coin .
transfer deposit fund to recipients .
owner function and setters for parameter vars .
gets current buy price without ether .
get current sell price without ether .
check if the goal or time limit have be reach and end the campaign .
a method to signal a vote for a give _candidate .
number of voters .
"queries the list with _offset and _limit of voters , candidates choosen and msp amount at the current block ."
"queries the list with _offset and _limit of voters , candidates choosen and msp amount at a specific _blocknumber ."
this method can be use by the owner to extract mistakenly sent tokens to this contract .
helper function to return a min betwen the two uints .
calculates the amount of bonus coin the buyer get .
true if crowdsale event have end .
low level token purchase function .
can be call by anyone .
called once by crowdsale finalize ( ) if the sale be success .
calculate the current price for buy in amount .
transfer token for a specified address .
move fund to cold storage .
move fund to contract jackpot .
buy tokens with affiliate partner .
check if win in lottery .
transfer tokens from one address to another .
play in lottery .
play in lottery with random number .
play in lottery with own number .
create hash data swap space .
fill hash data .
fill hash data many time .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
address public proposed_sale 0x0 ; .
buy the tokens .
allows anyone to transfer the simis tokens once trade have start .
allows anyone to transfer the pay tokens once trade have start .
calculates the amount of bonus coin the buyer get .
true if valid purchase .
true if crowdsale event have end .
low level token purchase function .
finish mine coin and transfer ownership of change coin to owner .
privilege transfer .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
forward erc20 methods to upgraded contract if this one be deprecate .
transfer token for a specified address .
transfer tokens from one address to another .
transfer token for a specified address .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
low level token purchase function .
can be issue to anyone without owners concent but a this method be internal only buytoken be call it .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
true if crowdsale event have end .
calulate game time and gc amount record .
range game .
garbage collect previous fund amount record and log the status .
point game .
we do not want big difference with our contract 's balance and actual prize pool .
erc 20 standard token interface transfer function .
modifier to check transaction initiator be only owner .
add spender to authorize for spend specified amount of bop .
get bop amount that spender can spend from provide owner 's account .
failsafe drain .
ownership can be transfer to provided newowner .
multiplication with safety check .
division with safety check .
subtraction with safety check .
addition with safety check .
assert use in different math function .
implementation for transfer bop to provide address .
transfer initiate by spender .
get bop balance for provided address .
setup the crowdsale parameters .
return approximate crowdsale max fund in eth .
return approximate crowdsale min fund in eth .
return approximate crowdsale progress ( fund raise ) in eth .
return approximate crowdsale remain cap ( hardcap ) in eth .
"erc20 allow _spender to withdraw , multiple time , up to the _value amount ."
make an investment .
allow crowdsale owner to close early or extend the crowdsale .
function allow all ether to be drain from contract by owner .
function allow all tokens to be transfer to owner .
"buys tokens in the crowdsale and reward the caller , callable by anyone ."
function be mock for test .
changes the number of required confirmations to one .
withdraws all eth deposit or tokens purchase by the give user and reward the caller .
returns log2 ( x 32 ) 32 1 .
"fixedexp be a 'protected ' version of fixedexpunsafe , which assert instead of overflow ."
functions below be specific to this token and not part of the erc-20 standard .
i ca n't make myetherwallet send payments a part of constructor call while create contract .
our reserve token be always eth .
"give a token supply , reserve , crr and a deposit amount ( in the reserve token ) , calculate the return for a give change ( in the main token ) ."
calculate ( _basen / _based ) ( _expn / _expd ) .
"input range : numerator : 1 , uint256_max precision denominator : 1 , uint256_max precision output range : 0 , 0x9b43d4f8d6 ."
"input range : 0x100000000 , uint256_max output range : 0 , 0x9b43d4f8d6 ."
get the admin address .
amend and option in an exist ballot .
seal a ballot - after this the ballot be official and no change can be make .
"function to determine if a ballot be currently in progress , base on it start and end date , and that it have be seal ."
"function to determine if a ballot have end , base on it end date ."
"function to determine if a ballot have be seal , which mean it have be authorize by the administrator and can no longer be change ."
function to allow a coin holder add to the vote count of an option in an active ballot .
function to determine if an address have already vote in a give ballot .
function to determine if an account have vote in any current ballot .
get the total coin supply .
get the balance of a specific account by it address .
transfer an amount from the owner 's account to an indicated account .
send _value amount of tokens from address _from to address _to .
"pre-authorize an address to withdraw from your account , up to the _value amount ."
get the currently authorize that can be withdraw by account _spender from account _owner .
"create a new ballot and set the basic detail ( proposal description , date ) ."
"create a new ballot and set the basic detail ( proposal description , date ) ."
add an option to an exist ballot .
lookrev can change the crowdsale wallet address .
accept ethers and exchange to purchase tokens on behalf of user msg . value .
"any account can burn _from 's tokens as long a the _from account have approve the _amount to be burnt use approve ( 0x0 , _amount ) ."
lookrev can transfer out any accidentally send erc20 tokens .
amount in wei i . e .
transfer eth hold by the contract to the owner .
receive donations in eth .
the amount in zt .
function to end the crowdsale by set the stage to ended .
transfer appropriate percentage of raise amount to the company address .
refund in the case of an unsuccessful crowdsale .
erc20 short address attack fix .
whether the transfer be successful or not .
whether the transfer be successful or not .
whether the approval be successful or not .
distributes incentives over the core team members a describe in the whitepaper .
"internal transfer , only can be call by this contract ."
send _value tokens to _to from your account .
allows _spender to spend no more than _value tokens in your behalf .
create presale token .
return true if the transaction can buy tokens .
send coin .
a contract attempt to get the coin .
razvijalec s klicom te funkcije nastavi naslov crowdsale-a .
v skrajni sili lahko razvijalec ali pa kdorkoli s posebnim geslom aktivira 'kill switch ' .
poslje ethje ali tokene klicatelju .
poslje ethje uporabniku ali pa tokene in nagradi klicatelja funkcije .
razvijalec lahko doda eth v nagrado za vplacilo .
razvijalec lahko doda nagrado za dvig .
"kupi tokene v crowdsalu , nagradi klicatelja ."
cancel the lottery if the host quorum be n't meet or a host fail to reveal in time .
"adds a host to the lottery , increase the security of the lottery 's random number generation ."
allows anyone to steal a host 's committed eth if their secret random number be n't random or be n't secret .
allow host to reveal their secret random number during the lottery 's reveal phase .
allow host to claim their earn from a successful lottery .
allow anyone to send the winner their winnings .
withdraw a user 's eth for them in the event the lottery be cancel .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
spender of tokens transfer an amount of tokens from the token owner 's balance to another account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
"after seal , no more mint be possible ."
mint coin for a multiple account .
owner can transfer out any accidentally send erc20 tokens .
owner can initiate transfer of contract to a new owner .
new owner have to accept transfer of contract .
"add a number to another number , check for overflow ."
"subtract a number from another number , check for underflows ."
owner can add a new administrator .
owner can remove an administrator .
get the account balance of another account with address _account .
transfer the balance from owner 's account to another account .
an optimasition in case of network congestion .
called to reward current koth winner and start new game .
gets the balance of the specified address .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
standard uint256 function .
uint128 function ( h be for half ) .
special function for ico .
this function be call from logic to trigger the correct event upon receive eth .
transfer tokens from one address to another .
setup function set external contract ' address .
allows owner to record a purchase make outside of ethereum blockchain .
allow for the possibilyt for contract owner to start crowdsale .
ends crowdsale .
invalidate a crowdsale purchase if something be wrong with it .
amend a crowdsale purchase if something be wrong with it .
deliver tokens to purchasers accord to their purchase amount in cny .
load early purchase from the contract keep track of them .
allows qualify crowdsale partner to purchase star tokens .
allows user to purchase star tokens with ether .
abstract record of a purchase to tokens .
generates _amount tokens that be assign to _owner .
burns _amount tokens from _owner .
updatevalueatnow use to update the balance map and the totalsupplyhistory .
send _amount tokens to _to from msg . sender .
send _amount tokens to _to from _from on the condition it be approve by _from .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
owner be the only address that can call a function with this modifier .
this function make it easy to get the total number of tokens .
queries the balance of _owner at a specific _blocknumber .
total amount of tokens at a specific _blocknumber .
creates a new clone token with the initial distribution be this token at _snapshotblock .
generates _amount tokens that be assign to _owner .
burns _amount tokens from _owner .
getvalueat retrieve the number of tokens at a give block number .
updatevalueatnow use to update the balance map and the totalsupplyhistory .
internal function to determine if an address be a contract .
update the dapp by create a new token with new functionalities the msg . sender .
this method should be call by the owner before the contribution period start this initialize most of the parameters .
this method will generally be call by the fcc token contract to acquire fccs .
internal function to determine if an address be a contract .
total tokens issue in weis .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
pauses the contribution if there be any issue .
resumes the contribution .
the owner of this contract can change the controller of the fcc token .
this function be override by the test mocks .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
the balance of _owner at the current block .
send coin .
a contract attempt to get the coin .
owner can add new restrict address or remove one .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
this method should be call by the owner before the contribution period start this initialize most of the parameters .
this method will generally be call by the pfc token contract to acquire pfcs .
total tokens issue in weis .
sell token and send to contributor address .
true if the transaction can buy tokens .
true if crowdsale event have end .
true if crowdsale event have end .
calculate amount .
"internal transfer , which can only be call by this contract ."
send _value tokens to _to from your account .
send _value tokens to _to on behalf of _from .
allows _spender to spend no more than _value tokens on your behalf .
"allows _spender to spend no more than _value tokens on your behalf , and then ping the contract about it ."
get the account balance of another account with address _owner .
low level token purchse function .
allow owner to finalize the presale once the presale be end .
allows the current owner to transfer control of the contract to a newowner .
a boolean that indicate if the operation be successful .
true if the operation be successful .
create presale token .
issue new tokens accord to the star token inflation limit .
declares starbase mvp have be launch .
allocate tokens to a crowdsale or early purchaser from the crowdsale share .
returns the number of transferable company 's tokens .
returns number of tokens which can be issue accord to the inflation rule .
allocate tokens value from an address to another one .
declares a public offer plan to make company 's tokens transferable .
allocate tokens to a market supporter from the market campaign share .
allocate tokens to an early contributor from the early contributor share .
allows for market contributor 's reward withdrawl .
include new contributor .
updates contributors rewardtokens .
informs about contributors rewardtokens and transferredrewardtokens status .
returns number of contributors .
"finalize the crowdsale , should be call after the refund period ."
failsafe drain .
allow to change the team multisig address in the case of emergency .
manually back redpilltoken owner address .
transfer remain to owner in case if impossible to do min invest .
when min_cap be not reach : 1 ) backer call the approve function of the redpilltoken token contract with the amount of all redpilltokens they get in order to be refund 2 ) backer call the refund function of the crowdsale contract with the same amount of redpilltokens 3 ) backer call the withdrawpayments function of the crowdsale contract to get a refund in eth .
burn away the specified amount of red pill token tokens .
to call to start the crowdsale .
receives a donation in ether .
compute the redpilltoken bonus accord to the investment period .
"reset reset all account in case we have any fund that have not be withdraw , they become newly receive and undistributed ."
add a new account .
get acct info .
price base on current token supply .
price ( ) expose for unit test .
buy entry point .
set up founder address token balance .
set up founder address token balance .
emergency stop ico .
erc 20 standard token interface transfer function .
"this can make over 9 , 000 old fucks ( just pass in 129 ) ."
"this can make over 9 , 000 old fucks ( just pass in 129 ) ."
the owner may disqualify a bid if it be bogus .
"transfer a number of airtokens to the internal airfox ledger address by a user 's mdn , digits only include country code , no white space , dash , plusses , or any other special character ."
withdraw tokens to owner .
refund early / late tokens .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
get your money back before the raffle occur .
"refund everyone 's money , start a new raffle , then pause it ."
"refund everyone 's money , start a new raffle , then pause it ."
bid on the auction with the value send together with this transaction .
withdraw a bid that be overbid .
end the auction and send the high bid to the beneficiary .
"refund everyone 's money , start a new raffle , then pause it ."
returns balance of particular account .
devs will upload balance snapshot of blockchain via this function .
extra balance removal in case any issue arise .
manual override in case any issue arise .
manual override for total supply in case any issue arise .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
allows devs to set num reward use .
freezes the entire system .
prevent freezing ( once system be ready to be lock ) .
get whether address be genesis parent .
return child address for parent .
allows dev to set elix address .
locks up all change to balance .
true if investors can buy at the moment .
owner function and setters for parameter vars .
returns early purchase amount by purchaser 's address .
setup function set external contract ' address .
returns number of early purchase .
append an early purchase log .
close early purchase term .
funtions public .
using an explicit getter allow for function overload .
using an explicit getter allow for function overload .
using an explicit getter allow for function overload .
send amount amount of tokens to address _to .
send amount amount of tokens from address _from to address _to .
process a transfer internally .
approves a third-party spender .
allow the token holder to upgrade some of their tokens to a new contract .
make an investment .
investors can claim refund .
called once by crowdsale finalize ( ) if the sale be success .
for push pre-ico record .
low level token purchase function .
true if the transaction can buy tokens .
allows the developer to set the crowdsale and token address .
withdraws all eth deposit or tokens purchase by the give user and reward the caller .
"buys tokens in the crowdsale and reward the caller , callable by anyone ."
data be an array of uint256s .
allow crowdsale owner to start early or extend the crowdsale .
send coin .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
sets the limit for a partner address .
exchange msg . value .
emergency situation that require contribution period to stop .
emergency situation resolve .
emergency situation .
"true if sale have start , false otherwise ."
"true if sale have end , false otherwise ."
get current exchange rate .
buy wanchain tokens by partner .
buy wanchain token normally .
utility function for bug wanchain token .
utility function for calculate available tokens and cost ethers .
contribution contract instance mint token .
locking period have pass - locked tokens have turn into tradeable .
"allows backers to withdraw their fund in the crowdsale be unsuccessful , and allow the owner to send the amount raise to the beneficiary ."
whitelists a list of address .
throws if call when crowdsale be still open .
throws if call when crowdsale have close .
return true if the transaction can buy tokens .
check if the goal have be reach .
end or resume the crowdsale .
allows any user to get his eth refund before the purchase be make or after approx .
buy the tokens .
"a helper function for the default function , allow contract to interact ."
"a helper function for the default function , allow contract to interact ."
low level token purchase function .
true if the amount be high then 25eth .
send coin .
transfer dari akun ke akun tapi yang berhak melakukannya adalah akun itu saja .
a add to b .
returns the number of tokens for give amount of ether for an address .
a subtract b .
erc20 overload function .
a multiply by b .
owner can salvage erc20 tokens that may have be send to the account .
a divide by b .
deploy a work order contract .
only allow the peer purchase service to execute a contract function .
only allow the service provider to execute a contract function .
only allow execution of a contract function if the work order be pending .
only allow execution of a contract function if the work order be start .
only allow execution of a contract function if the work order be complete .
fix for the erc20 short address attack .
an uint represent the amount own by the passed address .
allow the contract owner to update provide platform robot .
a uint specifing the amount of tokens still avaible for the spender .
a boolean that indicate if the operation be successful .
true if the operation be successful .
checks whether it can transfer or otherwise throw .
allow the token holder to upgrade some of their tokens to a new contract .
set an upgrade agent that can handle .
allow the provide platform robot to update the provide wallet contract address .
get the state of the token upgrade .
change the upgrade controller .
child contract can override to condition enable upgrade path .
grant tokens to a specified address .
revoke the grant of tokens of a specified address .
an uint represent a holder 's total amount of transferable tokens .
a uint represent the total amount of grant .
an uint represent the amount of vested tokens from a specific grant transferabletokens _ / - - - - - - - - vestedtokens rect _ _ _ _ .
"returns all the value that represent a tokengrant ( address , value , start , cliff , revokability , burnsonrevoke , and vest ) plus the vested value at the current time ."
an uint represent the amount of vested tokens of a specific grant at a specific time .
allow the provide platform robot to update the payments escrow wallet contract address .
an uint represent the amount of non vested tokens of a specifc grant on the passed time frame .
an uint represent the date of the last transferable tokens .
only allow the provide contract owner to execute a contract function .
only allow the provide platform robot to execute a contract function .
set the address of the party provide service and start the work order .
complete the work order .
complete the transaction by remit the exact amount of prvd tokens due .
wait 1 hour after final contract state before allow contract destruction .
function to update the claimable disbursements whenever tokens change hand .
function to check the amount of wei that a token owner can claim .
function to claim the wei that a token owner be entitle to .
function to mint tokens .
transfer tokens from one address to another while ensure that claim remain where they be .
allows anyone to transfer the deve tokens once trade have start .
allows anyone to transfer the deve tokens once trade have start .
modifier to allow token creation only when the sale is on .
modifier to prevent buy tokens below the minimum require .
modifier to allow token creation only when the hardcap have not be reach .
allows anyone to create tokens by deposit ether .
computes the number of bonus tokens award base on the current time .
allows authorize acces to create tokens .
allows the owner to set the minimum purchase .
allows the owner to set the hardcap .
allows to set the toal alt deposit measure in eth to make sure the hardcap include other deposit .
allows the owner to set the exchange rate .
allows the owner to stop the sale .
allows the owner to transfer erc20 tokens to the multi sig vault .
function to send eth to owners of this token .
allows anyone to create tokens by deposit ether .
start the program .
buy the tokens .
"a helper function for the default function , allow contract to interact ."
puts some amount of tokens on hold to be retrieve later .
returns the amount of deposit for beneficiar .
return the idx deposit for beneficiar .
transfers all the tokens already unlock to msg . sender .
check crowdsale state and calibrate it .
owner can set multisig address for crowdsale .
owner can set token address where mint will happen .
owner can claim team tokens when crowdsale have successfully end .
cofoundit can claim their tokens .
calculate how much user can contribute .
issue tokens and return if there be overflow .
push contributor data to the contract before the crowdsale so that they be eligible for priorit pass .
method be need for recover tokens accedentaly send to token address .
withdraweth when minimum cap be reach .
users can claim their contribution if min cap be not raise .
owner can batch return contributors contributions ( eth ) .
if there be any issue / attach with refund owner can withraw eth at the end for manual recovery .
push contributor data to the contract before the crowdsale so that they be eligible for priorit pass .
get back eth to owner .
set depositstarttime .
get all eth and lrc back to owner .
deposit lrc for eth .
withdrawal lrc with eth transfer .
"buys tokens in the crowdsale and reward the caller , callable by anyone ."
start the program .
drain lrc .
current lrc balance .
deposit lrc .
withdrawal lrc .
complete the transaction by remit the exact amount of prvd tokens due .
transfer tokens from one address to another .
allows any user to get his eth refund before the purchase be make or after approx .
buy the tokens .
"a helper function for the default function , allow contract to interact ."
transfer tokens from one address to another .
transfer tokens from one address to another accord to off exchange agreements .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens than an owner allow to a spender .
allows the owner to enable the trade .
allows the owner to enable the trade .
allows the owner to enable the trade .
allows the owner to set the multisig wallet address .
allows the owner to send the fund to the vault .
allows anyone to create tokens by deposit ether .
modifier to allow token creation only when the sale is on .
modifier to allow token creation only when the hardcap have not be reach .
function to mint tokens .
function to mint tokens .
function to stop mint new tokens .
transfer token for a specified address .
delay rat to be at least waittime apart .
success if the rat be process successfully .
score the cumulative score .
only admins can execute .
only managers can execute .
set a contract location by key .
contractaddress - the address of the contract .
isadmin - is this address an admin ? .
add an admin .
remove an admin .
add a manager .
remove a manager .
verify if a contract that have be deploy be a human standard token .
"for now , keep this internal ."
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
modifier to allow token creation only when the sale is on .
modifier to allow token creation only when the hardcap have not be reach .
allows anyone to create tokens by deposit ether .
allows to set the authorize mint token .
allows to set the total alt deposit measure in eth to make sure the hardcap include other deposit .
set eth : tpc rate .
allows authorize access to create tokens .
allows the owner to set the hardcap .
allows the owner to set the starting time .
allows the owner to finish the mint .
allows the owner to transfer erc20 tokens to the multi sig vault .
function to get a specific authorizer .
function to check if an address be authorize .
create the token to be sell .
function name : setholderinformation purpose : be the setter of the swap contract and wallet holder goal : to set de swap contract address and the wallet holder address .
function name : saveaccountbuyinggodz purpose : be the safe function that map the account that send it goal : to store the account information .
function name : setsendgodz purpose : be the flag update for the compliance account goal : to get the flag on the account .
function name : getaccountinformation purpose : be the getter of the information of the account goal : to get the amount and the acount of a compliance account .
only by goldmint contract .
can be call by anyone . . .
this function be automatically call when ico be start .
this function be automatically call when ico be finish .
this be call by other currency processors to issue new tokens .
anyone can call this and get his money back .
withdrawal lrc .
only the contract can operate this internal funktion .
transfer to account ( _to ) any value ( _value ) .
to dend the tokens the sender need the allowance .
the spender can only transfer the value units he own .
funktion contain approve with the addition to follow the contract / / / about the allowance .
create new token in addition to the initalsupply and send to target adress .
participants of the ethereum network can buy or sell this token in / / / exchange to ether .
the ether send to the contract exchange by buyprice and send back / / / hrw tokens .
the hrwtoken send to the contract and exchange by sellprice and / / / send ether back .
freezing tokens .
authenticating owner .
allow and restrict of release of tokens .
whether the token transfer be successful or not be successful or not .
"+ buy lc , 1eth 1000lc , 30 eth send to owner , 70 keep in contact ."
"exchange lc to eth , 1000lc 0 . 7eth , ."
+ transfer .
buy tokens in behalf of the investors by call the ico contract start with the investor at index from and end with investor at index to .
in case an investor want to retrieve his or her fund he or she can call this function .
return the number of investors .
function use in reward contract to get to know the address array length .
use in reward contract .
send _value amount of tokens from address _from to address _to .
failsafe drain .
below function will convert string to integer remove decimal .
use in reward contract .
use in reward contract .
callback function of oracalize which be call when oracalize query return result .
end crowdsale sholud be call by owner after ico end date .
transfer the balance from owner 's account to another account .
function use in reward contract to know address of token holder .
send coin .
function refund contributors if ico be unsuccesful .
allows to remove buggy contract before ico launch .
vote long enought to go to next phase .
preparation for vote ( application for vote ) long enought to go to next phase .
"can be call by anyone , if timespan withou accept proposal long enought enable refund ."
open preparation for new vote on propose lottery contract address .
payable so attendance only of people who really care register you a a voter ; .
open vote on propose lottery contract address .
vote on contract proposal payable to ensure only serious voters will attend .
premium for buy tits at the begin of ico .
allows to buy share .
opens ico ( only owner ) .
"closes ico - anyone can invoke if invoke to soon , take no action ."
function refund contributors if ico be unsuccesful .
voters agree on propose contract and ethereum be be send to that contract .
allows to buy share .
someone have to call create pool .
count - owners count .
result - value * promille / 1000 .
result - value + value * promille / 1000 .
returns amount of wei invest by the specified country .
tokenprice - token price for the period .
tokenssold - amount of tokens sell .
"active - true if tokendistribution be go on , false otherwise ."
if msg . value .
must be call by one of owners .
must be call by one of owners .
owner - owner 's info .
starttime - timestamp of period start time ( inclusive ) .
returns true if the time for the period have already pass .
returns true if period have already finish ( time pass or tokens sell ) .
returns true if all tokens for the period have be sell .
tokens - amount of unclaimed tokens for the caller .
transfers all the tokens store for this investor to his address .
efficiently call claimallforinvestor ( msg . sender ) .
tokens - total tokens count .
duration - duration in second .
finishes the current period and start a new one .
function with this modifier can be call only by one of owners .
to be call as frequently a require by any external party .
withdraws the money to be spend to blind croupier project need .
result - total supply of tokens ever emit .
balance - token balance of owner .
"success - true if the transfer be succesful , false otherwise ."
"success - true if the transfer be succesful , false otherwise ."
"success - true if the allowance be give , false otherwise ."
remain - remain allowance ( token count ) .
"success - true if amount of tokens be destroy , false otherwise ."
called by the standard token upon creation .
permanently burn tokens .
function to send tokens to a give address .
function to allow spender to spend token on owners behalf .
transferfrom function .
"to be call when ico be close , burn the remain tokens but the d-wallet freeze vault ( 1000000000 ) and the ones reserve for the bounty program ( 24000000 ) ."
allows dev to set tmex address .
conversion to tmex function .
withdrawal lrc with eth transfer .
get back eth to owner .
get back eth to owner .
deposit lrc for eth .
get the price for a bou token at any give block number .
dopayment ( ) be an internal function that send the ether that this contract receive to the bouledevmultisig and create tokens in the address of the .
allow investors to be refund if the sale do not reach min investment target ( minfundinggoal ) refund can be ask only after sale period .
function to change sale block intervals .
moves fund in sale contract to boulé multisigwallet .
finalizes sale generate the tokens for boulé dev .
valid only during sale or before sale if the sender be whitelisted .
put the addres in allow map .
token metadata .
send excess of tokens when de ico end .
when tokensalemin be not reach : 1 ) donors call the refund function of the gatcrowdfundingtoken contract .
allows to add a new owner .
"adds a new action to the transaction list , if action do not exist yet ."
returns number of confirmations of an action .
returns total number of action after filers be apply .
"returns array with owner address , which confirm transaction ."
returns list of action ids in defined range .
allows to withdraw an owner .
allows to change the number of required confirmations .
allows to delete a previous action not execute .
allows to delete a previous action not execute .
allows an owner to submit and confirm a transaction .
allows an owner to confirm a transaction .
allows an owner to revoke a confirmation for a transaction .
allows anyone to execute a confirmed transaction .
returns the confirmation status of a transaction .
getadslength tell you how many ads there be .
ads must be purchase in 10x10 pixel block .
"publish allow for set the link , image , and nsfw status for the ad unit that be identify by the idx which be return during the buy step ."
setadowner change the owner of an ad unit .
forcensfw allow the owner to override the nsfw status for a specific ad unit .
withdraw allow the owner to transfer out the balance of the contract .
move tokens int erc20contract to ndao tokens holder .
"note that a bop can not go from committed back to open , but it can go from expended back to committed ( this would retain the committed recipient ) ."
transfer transaction function .
"a helper function for the default function , allow contract to interact ."
creazione dei token .
ritorna il numero totale di token .
ritorna il bilancio dell'utente di un indirizzo .
per inviare i token .
invio dei token con delega .
delegare qualcuno all'invio di token .
ritorna il numero di token che un delegato può ancora inviare .
"buys tokens in the crowdsale and reward the caller , callable by anyone ."
salviamo l'indirizzo del creatore del contratto per inviare gli ether ricevuti .
ritorna il numero totale di token .
erc20 function .
constant function .
payments be not accept after ico be finish .
investors can move their tokens only after ico have successfully finish .
investors can get refund if eth_min_limit be not reach .
owner can withdraw all the money after min_limit be reach .
call by crowdsale contract .
token can be transfer immediately after crowdsale .
can only be call if the crowdfunder be allow to mint tokens .
create new tokens when call by the crowdfund contract .
create an illiquidbalance which can not be trade until admin make it liquid .
make sender 's illiquid balance liquid when call after lockout period .
transfer amount of tokens from sender account to recipient .
transfer amount of tokens from a specified address to a recipient .
transfer tokens from an address to another erc-20 standard .
authorize an address to retrieve fund from you erc-20 standard .
authorize an address to retrieve fund from you with a custom cooldown erc-20 standard .
transfer the specified amount to the target address erc-20 standard .
check whether address be a contract erc-223 proposed standard .
transfer the specified amount to the target address with embedded bytes data erc-223 proposed standard .
"handles transfer to an eca ( externally controlled account ) , a normal account erc-223 proposed standard ."
handles transfer to a contract erc-223 proposed standard .
handles casino deposit custom erc-223 proposed standard addition .
check the cooldown remain until the allowee can withdraw the balance .
check how much casino withdrawal balance remain for address .
ensures system be n't frozen .
disable the split function .
adjust the price of ether accord to coin market cap 's api .
get the current 2-decimal precision price per token .
convert wei to wbc tokens .
add the address to the user list .
split the monthly profit of the casino to the users .
change variables on split end .
split the unsold wbc of the ico .
sign that the dapp be ready .
verify that the dapp be ready .
ensures player be n't log in on platform .
rise or low user bank balance - backend function .
freeze user during platform use - backend function .
de-freeze user - backend function .
purchase wbc tokens for address - ico .
purchase wbc tokens for self - ico .
ensures function run only once .
ensures wbc dapp be online .
safemath library safesub import .
the owner manually start the crowdsale at a pre-determined time .
endcrowdsale ( ) and endcrowdsalepublic ( ) move to steak contract .
"normally , madame bov end the crowdsale at the pre-determined time , but if madame bov fail to do so , anybody can trigger endcrowdsalepublic ( ) after absoluteendblock ."
calculate initial mine prize ( 0 . 0357 .
true if crowdsale event have end .
add madame bov a a beef judge .
send 1m bov to madame bov .
add beef judge .
submit a steak picture .
"retrieving any submission must be do via this function , not submissions ( ) ."
function to check the amount of tokens that an owner allow to a spender .
"members judge steak pics , provide justification if necessary ."
calculate how many bov be reward per approve steak pic .
always call this before call dailyhash and submit a steak .
returns the amount of minutes to post with the current dailyhash .
function to mint tokens .
true if the transaction can invest .
distribute 10m tokens proportionally amongst all investors .
claim your bov ; allocate bov proportionally to this investor .
investors : see how many bov you be currently entitle to ( before the end of the crowdsale and distribution of tokens ) .
administrator be able to switch between periods at any time .
returns total prize pool size .
"administrator can add new team during registration period , with an option to make a team non-eligible for the prize ."
administrator can add new jury members during registration period .
anyone can contribute to the prize pool ( i . e .
jury members can vote during vote period .
administrator can initiate prize payout during final period .
administrator can disqualify team .
"in case something go wrong and contract need to be redeploy , this be a way to return all contributions to the sponsor ."
public function that return user type for the give address .
check if jury member vote .
creates a new clone token with the initial distribution be this token at _snapshotblock .
this be register a new address .
updatevalueatnow use to update the balance map and the totalsupplyhistory .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
the balance of _owner at the current block .
get result of random .
to check hash in js and in solidity .
allocate uip tokens to pre-sell address .
decrease the token 's supply .
what be the balance of a particular account ? .
transfer the balance from sender 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
buy rosecoin by send ether .
owner withdraw ether in contract .
"get list of wallet owners , will return fixed 50 until fork ."
get the number of tx 's with the same id .
"get list of confirmations for a tx , use gettransactionlength to get late number ."
retrieve tx confirmation count .
retrieve if transaction be successful .
verifies a confirm owner have not confirm already .
used later to calculate the number of confirmations need for tx .
used to check if tx be move tokens and parse amount .
retrieves sig requirement for spend tx .
function to create new contract .
get index of an owner .
create and execute transaction from wallet .
"confirms a current pending tx , will execute if final confirmation ."
"revokes a prior confirmation from sender , call with tx id ."
sum vector .
returns the max value in an array .
returns the minimum value in an array .
finds the index of a give value in an array .
utility function for heapsort .
utility function for heapsort .
sorts give array in place .
get max number of wallet owners .
get number of wallet owners .
get sig requirements for administrative change .
get sig requirements for minor tx spend .
get sig requirements for major tx spend .
get current day spend for token .
get major tx threshold per token .
"get last 10 transactions for the day , fix at 10 until fork ."
validates arguments for changeowner function .
changes require sigs for minor transactions .
changes threshold for major transaction day spend per token .
validates arguments for addowner function .
validates arguments for removeowner function .
validates arguments for change any of the sig requirement parameters .
changes owner address to a new address .
adds owner to wallet .
removes owner from wallet .
changes require sigs to change wallet parameters .
changes require sigs for major transactions .
buys tokens in the crowdsale .
"a helper function for the default function , allow contract to interact ."
send gbt .
we only expect to use this to set / reset the start of the contract under exceptional circumstances .
approve the account for operation .
hgtrates in whole tokens per eth max individual contribution in whole eth .
send coin .
a contract attempt to get the coin .
initializes contract with initial supply tokens to the creator of the contract .
"this method be only used if we miss the 256th block contain the result hash , lottery ( ) should be use instead this method a this be duplicate from lottery ( ) ."
can only be call if the crowdfunder be allow to mint tokens .
get your money back before the raffle occur .
"refund everyone 's money , start a new raffle , then pause it ."
fix for the erc20 short address attack .
bool whether the approval be a success ( see erc20 's approve ) .
get your money back before the raffle occur .
"refund everyone 's money , start a new raffle , then pause it ."
"refund everyone 's money , start a new raffle , then pause it ."
transfer the balance from owner 's account to another account .
devs will upload balance snapshot of blockchain via this function .
extra balance removal in case any issue arise .
allows devs to set num reward use .
prevent freezing ( once system be online and fully test ) .
send _value amount of tokens from address _from to address _to .
allows devs to set num reward use .
conversion to tmex function .
can be call by anyone . . .
can be call by anyone . . .
this function be automatically call when ico be finish .
this be call by other currency processors to issue new tokens .
this can be call to manually issue new tokens from the bonus reward .
"refund everyone 's money , start a new raffle , then pause it ."
choose a random int between 1 and totaltickets .
helper function to avoid too many contract call on frontend side .
ico methods .
auction methods .
send coin .
allow another contract to spend some tokens in your behalf .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
send coin .
a contract attempt to get the coin .
generates a random number from 1 to max base on the last block hash .
let owner customize defauts .
allow the owner to set waittime .
allow the owner to set cost .
allow the owner to set a transaction proxy which can perform value exchange on behalf of this contract .
allow the owner to cash out the hold of this contract .
reveal your number . . .
internal implementation of revealnumber ( ) .
choose a random int between 1 and totaltickets .
choose a random int between 1 and totaltickets .
returns total supply of issue tokens .
returns balance of address .
transfers tokens from your address to other .
approve other address to spend tokens on your account .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
get the amount of allow tokens to spend .
withdraw ether to a multisig address .
issue new tokens .
destroy tokens from owners account .
interface declaration .
"if the new target cap have not be reach yet , it 's fine a it be ."
make an investment .
allow the owner to set a fund cap on the crowdsale .
"invest to tokens , recognize the payer ."
finalize a succcesful crowdsale .
allow to ( re ) set price strategy .
allow to ( re ) set finalize agent .
check if the contract relationship look good .
crowdfund state machine management .
calculate the current price for buy in amount .
can we run finalize properly .
called once by crowdsale finalize ( ) if the sale be a success .
change ownership of the ranch .
change the outside contract use by this contract .
update block durations for various type of visit .
update ether cost for various type of visit .
update bounty reward settings .
update birth event settings .
standard erc20 token balance in wallet from specific token address .
approve etherdelta to take take a specific amount .
deposit ether to etherdelta .
withdraw ether from etherdelta .
destroy this wallet and send all ether to sender .
standard erc20 transferfrom function .
change owner this this trader wallet .
send ether to another wallet .
let the owner execute with data .
get ether delta token balance from token address .
withdraw a token from etherdelta .
change etherdelta exchange address .
deposit tokens to etherdelta .
fix for the erc20 short address attack .
"if last update happen more than one day ago , update the price , save the time of current price update ."
setgrowth can accept value within range from 20 to 100 of growth per month ( base on 30 days per month assumption ) .
user can buy arbitrary amount of tokens .
user can sell tokens back to contract .
issue new tokens to contract .
set your referral first .
award bounties to referrals .
santa be come ! who ever make impact to promote the fish and can prove it will get the bonus .
initializes contract with initial supply tokens to the creator of the contract .
multiplication with safety check .
division with safety check .
subtraction with safety check .
addition with safety check .
assert use in different math function .
buy datcoin by send ether .
buy rosecoin by send ether .
owner withdraw ether in contract .
returns the current token price .
redeems vibes and record the vibehub address of the sender .
ends the fundraising period and send the eth to the ethfunddeposit wallet .
remove address the presale list .
update whitelisted address amount allow to raise during the presale .
update the maximum cap of this wallet .
payment function that accept eth from whitelisted address till cap be reach .
send coin .
a contract attempt to get the coin .
withdraws all eth deposit or tokens purchase by the user .
withdraws for a give users .
"buys tokens in the sale and reward the caller , callable by anyone ."
allows anyone with the password to shut down everything except withdrawals in emergencies .
"a helper function for the default function , allow contract to interact ."
"create a equio conteact with _name , sale address _sale , token address _token , password hash _password_hash , early buy block earliest_buy_block , early buy time _earliest_buy_time ."
the function can be call only before or after the tokens have be releasesd .
the function can be call only by a whitelisted release agent .
set the contract that can call release and make the token transferable .
owner can allow a particular address ( a crowdsale contract ) to transfer tokens despite the lock up period .
"call by the owner on emergency , trigger stop state ."
"call by the owner on end of emergency , return to normal state ."
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
limit token transfer until the crowdsale be over .
limit token transfer until the crowdsale be over .
make an investment .
delete function before release contract .
returns total supply of issue tokens .
stops all token transfer in case of emergency .
freeze player account for blacklistfreezetime .
mint ico left token .
require crowdsale open .
get the price accord to the present time .
buy mct token .
buy mct token .
set final period of mct crowdsale .
set token contract where mint will be do ( tokens will be issue ) .
withdraw ether to a multisig address .
transfers tokens from your address to other .
approve other address to spend tokens on your account .
a contract attempt to get the coin .
get the amount of allow tokens to spend .
issue new tokens .
destroy tokens if mct not sell out .
accept a new owner .
allow reservation owner to close early or extend the reservation .
allow to ( re ) set price strategy .
allow to change the team multisig address in the case of emergency .
allow load refund back on the contract for the refund .
investors can claim refund .
crowdfund state machine management .
true if the reservation have raise enough money to be a successful .
called from invest ( ) to confirm if the curret investment do not break our cap rule .
calculate the current price for buy in amount .
make an investment .
allow address to do early participation .
public function for play lottery .
the address of the controller be the only address that can call a function with this modifier .
creates a new clone token with the initial distribution be this token at _snapshotblock .
generates _amount tokens that be assign to _owner .
burns _amount tokens from _owner .
checks modifier and allow transfer if tokens be not lock .
main func for token grant .
transferabletokens _ / - - - - - - - - nonvestedtokens _ _ _ _ .
the date in which all tokens be transferable for the holder .
how many tokens can a holder transfer at a point in time .
in between the sale and the network .
withdraw function send all the fund to the wallet if condition be correct .
deploy gnr be call only once to setup all the need contract .
send _amount tokens to _to from msg . sender .
certain address need to call the activate function prior to the sale open block .
whether the needed account have activate the sale .
get the price for a gnr token at any give block number .
genaro dev need to make initial token allocations for presale partner .
whitelist controll .
true if investor be whitelisted .
proxypayment ( ) allow the caller to send ether to the token directly and have the tokens create in an address of their choose .
"notifies the controller about a transfer , for this sale all transfer be allow by default and no extra notifications be need ."
"notifies the controller about an approval , for this sale all approvals be allow by default and no extra notifications be need ."
send _amount tokens to _to from _from on the condition it be approve by _from .
dopayment ( ) be an internal function that send the ether that this contract receive to the genarodevmultisig and create tokens in the address of the .
function to stop sale for an emergency .
function to restart stopped sale .
finalizes sale generate the tokens for genaro dev .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
true if investors can buy at the moment .
true if crowdsale event have end .
create the token to be sell .
low level token purchase function .
public function for play lottery .
send coin .
restrict usage to only the owner .
check if the contract have be close .
no ether should be transfer to this contract .
tokens be only issue in exchange for a unique proof of contribution .
lock the maxsupply to it current value forever .
lock the contract owner forever .
"block the contract from ever be upgrade , close , or destroy ."
burn all tokens from a balance .
freeze and unfreeze ico .
rrice be 1000 qvolta for 1 eth .
transfer bounty to target address from bounty pool .
transfer team tokens to target address .
transfer bounty to target address from bounty pool .
returns the length in run of the slice .
returns true if the slice be empty ( have a length of 0 ) .
"returns a positive number if other come lexicographically after self , a negative number if it come before , or zero if the content of the two slice be equal ."
returns true if the two slice contain the same text .
"extracts the first rune in the slice into rune , advance the slice to point to the next rune and return self ."
"returns the first rune in the slice , advance the slice to point to the next rune ."
returns the number of the first codepoint in the slice .
returns the keccak-256 hash of the slice .
returns true if self start with needle .
"if self start with needle , needle be remove from the begin of self ."
returns true if the slice end with needle .
"if self end with needle , needle be remove from the end of self ."
"returns the memory address of the first byte of the first occurrence of needle in self , or the first byte after self if not find ."
"returns the memory address of the first byte after the last occurrence of needle in self , or the address of self if not find ."
modifies self to contain everything from the first occurrence of needle to the end of the slice .
modifies self to contain the part of the string from the start of self to the end of the first occurrence of needle .
"splits the slice , set self to everything after the first occurrence of needle , and token to everything before it ."
"splits the slice , set self to everything after the first occurrence of needle , and return everything before it ."
"splits the slice , set self to everything before the last occurrence of needle , and token to everything after it ."
"splits the slice , set self to everything before the last occurrence of needle , and return everything after it ."
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
counts the number of nonoverlapping occurrences of needle in self .
returns true if self contain needle .
returns a newly allocate string contain the concatenation of self and other .
"joins an array of slice , use self a a delimiter , return a newly allocate string ."
"check player profit , bet size and player number be within range ."
check game be currently active .
check payouts be currently active .
check only oraclize address be call .
check only owner address be call .
check only treasury address be call .
public function player submit bet only if game be active bet be valid can query oraclize and set player vars .
semi-public function - only oraclize can call .
public function in case of a failed refund or win send .
check for pending withdrawals .
internal function set max profit .
owner / treasury address only function .
set gas for oraclize query .
only owner adjust contract balance variable ( only use for max profit calc ) .
only owner address can set houseedge .
only owner address can set maxprofitaspercentofhouse .
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
only owner address can set minbet .
only owner address can transfer ether .
only owner address can do manual refund use only if bet place + oraclize fail to __callback filter logbet by address and / or playerbetid : .
only owner address can set emergency pause 1 .
only owner address can set emergency pause 2 .
only owner address can set treasury address .
only owner address can set owner address .
only owner address can suicide - emergency .
returns a slice contain the entire string .
returns the length of a null-terminated bytes32 string .
"returns a slice contain the entire bytes32 , interpret a a null-termintaed utf-8 string ."
returns a new slice contain the same data a the current slice .
copies a slice to a new string .
send coin .
a contract attempt to get the coin .
the basic entry point to participate the crowdsale process .
function to withdraw ether to owner 's account .
function to withdraw latium to owner 's account .
send coin .
allow another contract to spend some tokens in your behalf .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
methods base on token . sol .
tokens be only issue in exchange for a unique proof of contribution .
true if buyer be whitelisted .
true if buyers can buy at the moment .
burns a specified amount of tokens .
low level token purchase function .
allows the developer or anyone with the password to claim the bounty and shut down everything except withdrawals in emergencies .
withdraws all eth deposit or tokens purchase by the user .
automatically withdraw on users ' behalves ( less a 1 fee on tokens ) .
allows developer to add eth to the buy execution bounty .
"buys tokens in the crowdsale and reward the caller , callable by anyone ."
"a helper function for the default function , allow contract to interact ."
returns max number of tokens that actually can be withdraw from foundation reserve .
withdraws tokens from foundation reserve .
sends tokens from icoallocation to investor .
overrides owned . sol .
overrides standardtoken . sol .
this method should be call by the owner before the contribution period start this initialize most of the parameters .
this method will generally be call by the att token contract to acquire atts .
this method will can be call by the owner before the contribution period end or by anybody after the endblock .
internal function to determine if an address be a contract .
total tokens issue in weis .
this function be override by the test mocks .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
pauses the contribution if there be any issue .
resumes the contribution .
the owner of this contract can change the controller of the att token .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
the owner will call this method to extract the tokens .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
withdraw function send all the fund to the wallet if condition be correct .
check if the goal or time limit have be reach and end the campaign .
a contract attempt to get the coin .
lock : 0x211e28b60000000000000000000000000000000000000000000000000000000000000001 unlock : 0x211e28b60000000000000000000000000000000000000000000000000000000000000000 .
functions with this modifier can only be execute by the owner .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
a contract attempt to get the coin .
owner function .
modifier to authorize owner .
"flag function call by owner , release some function to work for ."
drain any ether in contract to owner .
implement function balanceof of erc20 to know the balnce of any account .
transfer tokens from one address to another .
returns the amount which _spender be still allow to withdraw from _owner .
a contract attempt to get the coin .
"create new tokens , call only by owner , new token value supply will be add to _to address with total supply ."
owner can call this freeze function to freeze some account from do certain function .
"transfer the ownership to new address , call only by owner ."
"flag function call by ony owner , stop some function to work for ."
create the token to be sell .
checks whether it can transfer or otherwise throw .
checks modifier and allow transfer if tokens be not lock .
checks modifier and allow transfer if tokens be not lock .
override crowdsale buytokens to add extra whitelist logic we do not use validpurchase because we can not get the beneficiary address .
transfer token for a specified address .
"get tiered price base on block . timestamp , ."
transfer tokens from one address to another .
check to see if sender be owner .
allows the current owner to transfer control of the contract to a newowner .
issue tokens for receive ether .
function that sell available tokens .
approve the passed address to spend the specified amount of tokens on beahlf of msg . sender .
allow presale owner to close early or extend the presale .
crowdfund state machine management .
true if the presale have raise enough money to be a successful .
send any pending fund back to their owner .
request for a shapeshift transaction to be make .
adapted from https : / / github . com / kieranelby / kingoftheetherthrone / blob / master / contract / kingoftheetherthrone . sol .
authored by https : / / github . com / axic .
authored by https : / / github . com / axic .
suicide function .
return the price of use oracalize .
create a cryptocurrency conversion use oracalize and shapeshift return address msg . sender .
create a cryptocurrency conversion use oracalize and custom shapeshift return address .
callback function for oracalize .
cancel a transaction that have not be complete .
append an early purchase log .
low level token purchase function .
owner can call this if there 's a bug in the contract .
a contract attempt to get the coin .
append an early purchase log .
setup function set external crowdsale contract 's address .
append an early purchase log .
get the account balance for an address .
accept eth during crowdsale .
minting of tokens by owner .
minting of tokens by owner .
declare ico finish .
make tokens tradeable .
transfer the balance from owner 's account to another account .
"allow _spender to withdraw from your account , multiple time , up to _amount ."
spender of tokens transfer an amount of tokens from the token owner 's balance to another account .
returns the amount of tokens approve by the owner that can be transfer by _spender .
implement totalsupply ( ) erc20 function .
change ico parameters .
owner can change the number of tokens per eth before the ico start date .
function to get the price of the token return how many token units a buyer get per wei .
low level token purchase function .
function to stop mint new tokens .
a contract attempt to get the coin .
backup function .
owner function .
generates a random number from 1 to max base on the last block hash .
be a number request pending for the address .
let owner customize defauts .
allow the owner to set waittime .
request a number . . .
internal implementation of revealnumber ( ) .
true if buyers can buy at the moment .
accept eth during crowdsale .
minting of tokens by owner .
declare ico finish .
transfer the balance from owner 's account to another account .
"allow _spender to withdraw from your account , multiple time , up to _amount ."
spender of tokens transfer an amount of tokens from the token owner 's balance to another account .
owner can change the number available tokens for the ico ( must be below 70 million ) .
kill contract and return all found to the target user .
for debug purpose only ! .
internal constant method for calculate payments .
do accident logic - transfer find and destruct contract .
"the result look like ' 1469624867 , 1469624584 , . . . ' ."
taken from : https : / / solidity . readthedocs . io / en / develop / common-patterns . html .
"starts the game , i . e ."
participate in the game .
reveal the owner 's random number and choose a winner use all three random number .
cancel the game .
"refund a number of account specify by _count , begin at the next un-refunded index which be lastrefundedindex + 1 ."
"withdraw your fund , i . e ."
withdraw accumulate fee .
adjust game parameters .
in case the contract owner have to be move .
change cloud per eth .
in case the contract owner have to be move .
for the presale the buyer get 1 cloud for every 10 finney they send 1eur 1000 cloud 1eth 300000 .
send _value amount of tokens from address _from to address _to .
total amount of tokens .
the balance .
send _value token to _to from msg . sender .
send _value token to _to from _from on the condition it be approve by _from .
amount of remain tokens allow to spend .
initializes contract with initial supply tokens to the creator of the contract .
allows the owner to set the starting time .
call this method to let the contract to go into next period of sales .
call this method to let the contract to allow token collection after the contribution period .
modifier to allow contribution only when the sale be on .
modifier to allow collection only when the collection be on .
modifier to ensure it be before start of first period of sale .
modifier to ensure it be before the deadline of last sale period .
modifier to ensure it be after the deadline of last sale period .
record the contribution of a contribution .
allows contributor to collect all token allot for all period after preiod deadline .
allow owner to transfer out the token in the contract .
allow owner to transfer out the ether in the contract .
to get the contribution amount of any contributor under different period .
to get the total contribution amount of a give period .
to check if token be collect by any contributor under different period .
to get the amount of token collect by any contributor under different period .
transfer token for a specified address .
transfer tokens from one address to another .
allows the owner to burn the token .
initialise the contract .
create the token to be sell .
send coin .
a contract attempt to get the coin .
be a number request pending for the address .
request a number . . .
internal implementation of revealnumber ( ) .
just for me .
"only valid color , a specify by the model3 production detail ."
only super-accredited ponzico investors ( 0 . 1 .
pay to vote again ! i do n't care ! . . . but .
returns the number of tokens for give amount of ether for an address .
owner can kyc ( or revoke ) address until close of fund .
erc20 overload function .
change the address of the veredictum contract address .
fail if state do n't match .
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
standard function transfer similar to erc20 transfer with no _data .
initializes the contract and allocate all initial tokens to the owner .
burn _value of tokens from your balance .
oracle address and owner address be the same .
eventually change this so that a miss payday will carry owed pay over to next payperiod .
set 1 usd equal x amount of tokens .
set 1 usd equal x amount of wei .
approves and then call the receive contract .
function to recover the fund on the contract .
internal implementation of revealnumber ( ) .
be a number pending for this requestor ? .
generates a random number from 1 to max base on the last block hash .
let owner customize defauts .
allow the owner to set waittime .
allow the owner to set cost .
"allow the owner to set proxy contract , which can accept tokens on behalf of this contract ."
request a number . . .
administrative function .
administrative function .
information function .
information function .
starts the crowdsale .
a backup fail-safe drain if require .
finalizes the crowdsale and send fund .
migrates tkrp tokens to tkr token at a rate of 1 : 1 during the crowdsale .
"processes the contribution give , send the tokens and emit events ."
calculates the bonus amount base on the contribution date .
transfer token for a specified address .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
"destroys tokens from an address , this process be irrecoverable ."
"destroys tokens , this process be irrecoverable ."
modifier to check whether the crowdsale be run .
"sell back a number of unicorn tokens , in exchange for ether ."
change ownership .
update unicorn price .
update reward amount .
internal implementation of revealnumber ( ) .
allow the owner to set proxy contract which can accept tokens on behalf of this contract .
allow the owner to set max .
request a number .
only requestor or proxy can generate the number .
iterate over all account holders and balance transfer proportional bte balance should be 0 aftwards in a perfect world .
proxy mine to token .
can only be set before the start of the crowdsale .
accept ethers and exchange to purchase tokens on behalf of user msg . value .
"call by the owner on emergency , trigger stop state ."
"finalize the devvoteprefund , should be call after the refund period ."
manually back devvote owner address .
when min_cap be not reach : 1 ) backer call the approve function of the devvote token contract with the amount of all devvotes they get in order to be refund 2 ) backer call the refund function of the devvoteprefund contract with the same amount of devvotes 3 ) backer call the withdrawpayments function of the devvoteprefund contract to get a refund in eth .
"call by the owner on end of emergency , return to normal state ."
"store sent amount a credit to be pull , call by payer ."
"withdraw accumulate balance , call by payee ."
fix for the erc20 short address attack .
returns success boolean .
to call to start the devvoteprefund .
receives a donation in ether .
compute the devvote bonus accord to the investment period .
this contract only define a modifier but do not use it - it will be use in derived contract .
owner only function .
a boolean that indicate if the operation be successful .
create presale token .
sum vector .
returns the max value in an array .
returns the minimum value in an array .
finds the index of a give value in an array .
sorts give array in place .
sum vector .
returns the max value in an array .
returns the minimum value in an array .
finds the index of a give value in an array .
sorts give array in place .
sum vector .
returns the max value in an array .
returns the minimum value in an array .
finds the index of a give value in an array .
sorts give array in place .
sum vector .
returns the max value in an array .
returns the minimum value in an array .
finds the index of a give value in an array .
sorts give array in place .
sum vector .
returns the max value in an array .
returns the minimum value in an array .
finds the index of a give value in an array .
sorts give array in place .
"we can only initialize once , but do n't add beforedeadline guard or check deadline ."
"as a safeguard , if we be able to pay into account without be a contributor allow contract owner to clean it up ."
"each backer be responsible for their own safe withdrawal , because it cost gas ."
purchase on a behalf of a benefactor .
purchase on a behalf of the sender .
functions with this modifier can only be execute by the owner .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
send tokens .
allow another contract to spend some tokens in your behalf .
transfer tokens .
destruction of the token .
one of founder can propose destination address for ethers .
another founder can approve specify tx and send it to destaddr .
cancel tx .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
allow to burn pre-tge tokens in order to teleport them to new contract .
allow contract manager to decrease bonus over time .
allow contract manager to close pre-tge .
cost of one token .
exchanges can buy on behalf of participant .
"spender of tokens transfer an amount of tokens from the token owner 's balance to another account , with a check that the crowdsale be finalise ."
crowdsale owners can collect eth any number of time .
register and validate cat that be find .
owner only function disable contract before activation .
add genesis cat in group of 16 .
aggregate getters .
transfer helper .
"assign a name to a cat , once a name be assign it can not be change ."
put a cat up for anyone to adopt .
put a cat up for a specific address to adopt .
cancel an adoption offer .
accept an adoption offer .
transfer a cat directly without payment .
request adoption of a cat with an eth offer .
allow the owner of the cat to accept an adoption request .
allow the requester to cancel their adoption request .
send coin .
initializes contract with initial supply tokens to the creator of the contract .
send coin .
low level token purchase function .
true if crowdsale event have end .
create the token to be sell .
"math operations with safety check that throw on error return the difference of a minus b , assert if the subtraction result in a negative number ."
"return the sum of a and b , assert if the calculation overflow ."
start sale .
end sale .
send coin throw on any error rather then return a false flag to minimize user errors .
an account / contract attempt to get the coin throw on any error rather then return a false flag to minimize user errors .
"allow another account / contract to spend some coin on your behalf also , to minimize the risk of the approve / transferfrom attack vector , approve have to be call twice in 2 separate transactions once to change the allowance to 0 and secondly to change it to the new allowance value ."
function to check the amount of tokens than an owner allow to a spender .
initializes contract with initial supply tokens to the creator of the contract .
only owner .
participate to a presale .
load fund to the crowdsale for all investors .
how may tokens each investor get .
resolve the contract umambigious state .
make an investment .
owner can transfer out any accidentally send erc20 tokens .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
if there 's a draw or a bug in the contract .
send _value amount of tokens from address _from to address _to .
"set owner to zero address , to disable mint , and enable token transfer ."
calculte exchange rate accord to current stage .
for test purpose .
estimate stage .
entry to buy tokens .
calculate tokens sell officially .
manually offer tokens to channel .
initialize to prepare for sale .
"if seal , transfer be enable and mint be disable ."
claim bonus by raw tokens .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
mint tokens and assign to some one .
offer bonus to raw tokens holder .
compressboard remove last col and last row and join digits into one number .
"return reward for the next submit board , so reward first and then increase board ! ."
this be how we get our money out .
this be use to turn off the crowdsale during stage 3 .
"allows users to send tokens to each other , to act a money this be the part of the program that allow exchange between the normies ."
initializes contract with initial supply tokens to the creator of the contract .
assemble the give address bytecode .
function that be call when transaction target be a contract .
move fund to contract .
commit remain dividends before transfer of tokens .
create hash data swap space .
"event logwithdraw ( address index who , uint amount ) ; ."
return the current exchange rate - lnc per ether .
return if the crowd sale be still open .
call after the crodsale end need to allow everyone to send their lnc around .
everyone need to call this function should the minimum cap not be reach refund the sender .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
allow to transfer token to another address .
time leave before the crodsale end .
send coin .
a contract attempt to get the coin .
send coin .
a contract attempt to get the coin .
only the owner of the token can transfer .
the contract be intend a a broker between a scammer address and the scamee .
markasspam : payable function .
once an address be flag a scam it can be forgive by the flagger unless the scammer already start to pay it debt .
forgiveme - function call by scammer to pay any of it debt .
forgivemeonbehalfof - somebody else can pay a scammer address debt ( same a above ) .
constructor - just pass on the owner array to the multiowned and the limit to daylimit .
kill the contract send everything to _to .
outside-visible transact entry point .
constructor be give number of sigs require to do protected onlymanyowners transactions as well a the selection of address capable of confirm them .
revokes a prior confirmation of the give operation .
replaces an owner _from with another _to .
constructor - store initial daily limit and record the present day 's index .
( re ) set the daily limit .
reset the amount already spend today .
throws if call by any account other than the owner .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
modifier to allow token creation only when the sale is on .
allows the current owner to update multiple rat .
fix for the erc20 short address attack .
check if the goal or time limit have be reach and end the campaign .
create the token to be sell .
initializes contract with initial supply tokens to the creator of the contract .
external function allow access to our structs via function with convenient return value .
public function add entries .
delete entries .
allow owner to delete contract if no account exist .
internal function .
return status of arbitrary address and datahash .
allows the owner to set the starting time .
record the contribution of a contribution .
initialise the contract .
one of founder can propose destination address for ethers .
another founder can approve specify tx and send it to destaddr .
"users want to know when the auction end , second from 1970-01 - 01 ."
add msg . sender .
add msg . sender .
maker can activate or deactivate this contract 's sell status .
"maker can withdraw asset tokens from this contract , with the following parameter : tokens be the number of asset tokens to be withdraw ."
maker can transfer asset tokens from this contract to another .
maker can withdraw any erc20 asset tokens from this contract .
maker withdraw ethers from this contract .
taker buy asset tokens by send ethers .
anyone can call this method to verify the settings of a .
maker can call this method to create a new tokenseller contract with the maker be the owner of this new contract .
factory owner can withdraw any erc20 asset tokens from this contract .
allows owner to start the crowdsale from the time of execution until a specified deadline .
allows owner to stop the crowdsale immediately .
allows the owner to set the starting time .
"finalize the crowdsale , should be call after the refund period ."
failsafe drain .
allow to change the team multisig address in the case of emergency .
manually back tix owner address .
transfer remain to owner in case if impossible to do min invest .
when min_cap be not reach : 1 ) backer call the approve function of the tix token contract with the amount of all tixs they get in order to be refund 2 ) backer call the refund function of the crowdsale contract with the same amount of tix 3 ) backer call the withdrawpayments function of the crowdsale contract to get a refund in eth .
burn away the specified amount of skincoin tokens .
to call to start the crowdsale .
receives a donation in ether .
compute the tix bonus accord to the investment period .
external function allow access to our structs via function with convenient return value .
return status of arbitrary address and datahash .
transfer tokens from one address to another .
a contract attempt to get the coin .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
transfer deposit fund to recipients .
basically a decorator _ ; be be the main function will go .
for future transfer of dgt .
decide the state of the project .
if the goal be not reach till the end of the ico allow refund .
returns balance raise in eth from specific address .
returns balance raise in dgt from specific address .
get remain supply of dgt .
get raise amount during ico .
upon successfull ico .
raised during pre-sale .
bounty pool make up 2 from all tokens buy .
deploy atm and start freeze cycle .
calc atm by eth per user .
claim atm .
migrate user data and suiside .
"failsafe drain in case finalize fail , we need guaranteed way to transfer ether out of this contract ."
to be use when certain account be require to access the function .
to verify if action be not perform out of the campaing time range .
to obtain number of contributors so later front end can loop through backersindex and triggger transfer of tokens .
it will be call by owner to start the sale .
call to mark contributer when tokens be transfer to them after ico .
it will be call by fallback function whenever ether be send to it .
this function will finalize the sale .
throws if call by any account other than the minter .
function to mint tokens .
transfers sender 's tokens to a give address .
for future transfer of dgt .
this make it easy to override deltatime in fidgetspinnertest so we can test that velocity / displacement decay be work correctly .
returns the velocity of the spinner during this specific block in the chain .
returns the displacement of the spinner during this specific block in the chain .
adds or subtract from the spin of the spinner .
withdraws all the money from the contract .
withdraws a give amount of money from the contract .
ico methods .
auction methods .
helper function to avoid too many contract call on frontend side .
send coin .
a contract attempt to get the coin .
simple single-sig function modifier .
contract desctruction function .
contract desctruction function with ethers redirection .
pause the contract operations .
unpause the contract operations .
set the bthfoundation wallet .
modifier for multisig function .
returns the current bth block .
calculates the halve number of a give block .
calculate the offset of a give block .
determine the current halve number .
compute the start block of a halve .
calculate the total subsidy of a block .
computes the subsidy of a full halve .
contribute to the mine of bth on behalf of another miner .
contribute to the mine of bth .
miners subsidies must be claim by the miners call claimhalvingssubsidies ( _n ) .
revokes a prior confirmation of the give operation .
compute the number of halve claimable by the miner caller .
computes the number of halve claimable by the miner .
claim all the unclaimed halve subsidies of a miner .
erc20 transferfrom function override to disable transfer when pause .
delete a poll .
retreive the poll data .
return the block per halve .
return the block in which the miner be .
gets an owner by 0-indexed position ( use numowners a the count ) .
return the block in which the miner be .
return the miner halve ( start halve or last claim ) .
return the miner halve ( start halve or last claim ) .
total hash rate of a miner in a halve .
total hash rate of a miner in a halve .
compute the miner halve offset .
compute the miner halve offset .
calculate the hash rate of a miner in a halve .
calculate the halve hash rate of a miner .
calculate the halve hash rate of a miner .
checks if give address be an owner .
calculate the halve hash rate of a miner .
total hash rate of a miner .
total hash rate of a miner .
computes the remain subsidy pending of be claim for a give halve .
function to check be specific owner have already confirme the operation .
confirm and operation and check if it 's already executable .
clear the pending list .
manually back resilium owner address .
when min_cap be not reach : 1 ) backer call the approve function of the resilium token contract with the amount of all resiliums they get in order to be refund 2 ) backer call the refund function of the crowdsale contract with the same amount of resiliums 3 ) backer call the withdrawpayments function of the crowdsale contract to get a refund in eth .
burn away the specified amount of tokens .
to call to start the crowdsale .
compute the resilium bonus accord to the investment period .
modifier to check transaction initiator be only owner .
add spender to authorize for spend specified amount of bopt .
get bopt amount that spender can spend from provide owner 's account .
implementation for transfer bopt to provide address .
get bopt balance for provided address .
"spender of tokens transfer an amount of tokens from the token owner 's balance to another account , with a check that the crowdsale be finalise ."
owner can transfer out any accidentally send erc20 tokens .
get the total token supply .
get the account balance of another account with address _owner .
transfer the balance from owner 's account to another account .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
spender of tokens transfer an amount of tokens from the token owner 's balance to the spender 's account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
"transfer the balance from owner 's account to another account , with a check that the crowdsale be finalise ."
a modifier that provide a pre-check a to whether the sender be the owner .
"transfers ownership to newowner , give that the sender be the owner ."
approves and then call the receive contract .
"function to call to contribute ether to , in exchange for aqt in the next block mine or updateaccount must be call at least 10 minutes from timeoflastblock to get the reward minimum require contribution be 0 . 05 ether ."
"withdraw ( target , amount ) ."
returns the velocity of the spinner during this specific block in the chain .
returns the displacement of the spinner during this specific block in the chain .
buy tokens pre-sale and sale .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
get total gold card .
get total titanium card .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
sum vector .
returns the max value in an array .
finds the index of a give value in an array .
get total metal card .
buy tokens .
modifier to check if sender have an account .
external function prove .
allow access to our structs via function with convenient return value .
delete entries .
internal function .
return status of arbitrary address and datahash .
allows users to claim cluster every 1000 segments ( 1 . 000 . 000 .
allows users to claim segment every 1000 units ( block ) .
allows owner to withdraw fund from the account .
internal check to see if at least 1000 segment pass without withdrawal prior to reward a cluster .
returns the current amount of clusters .
returns the current amount of segments .
returns the current amount of units .
returns the current network block .
allows users to buy cluster and receive their tokens at once .
ap ok - calculate the apy / eth at this point in time .
ap ok - calculate apy / eth at any point in time .
exchanges can buy on behalf of participant .
owner to add precommitment fund token balance before the crowdsale commence .
ap ok - only owner can execute function .
ap ok - propose ownership transfer .
ap ok - accept ownership transfer .
withdraws from the sender 's share of fund and deposit into the sender 's account .
withdraws all fund available to the sender and deposit them into the sender 's account .
"checks whether the sender be allow to withdraw and have sufficient fund , then withdraw ."
gets the amount of fund in wei available to the sender .
- success / failure of the transaction .
the value of balance .
"true in case of succes , otherwise failure ."
- remain right to spend .
bk ok - calculate the bet / eth at this point in time .
bk ok - calculate bet / eth at any point in time .
exchanges can buy on behalf of participant .
bk ok - only owner can execute function .
bk ok - propose ownership transfer .
bk ok - accept ownership transfer .
initializes contract with initial supply tokens to the creator of the contract .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
check address .
public function .
public function .
public function .
address restrict function crowdfund contract call this to burn it unsold coin .
public function lock / unlock tokens on a recurring cycle .
owner restrict function .
check if the current invest break our cap rule .
"emergencystop function call by the owner on emergency , trigger stop state ."
manually back vistacoin owner address .
get reamin coin back to owner .
"release emergencystate function call by the owner on end of emergency , return to normal state ."
fix for the erc20 short address attack .
receives a donation in ether .
compute the vistacoin bonus accord to the investment period .
"finalize the crowdsale , should be call after ico period ."
crowdfund state machine management .
fix for the erc20 short address attack .
transfer the balance _value from owner 's account ( msg . sender ) .
functions with this modifier can only be execute by the owner .
to start preico .
callback function call when we get usd price from oraclize query .
for balance of a account .
finalize the crowdsale .
failsafe drain .
modifier throw if call by any account other than the pendingowner .
internal to pass token .
one do not simply walk into mordor . .
even the small person can change the course of the future .
public function for add and delete entries .
internals for add and delete entries .
prove function .
internal for return status of arbitrary entries .
sets onlyowner modifier for specified function .
returns time remain on crowdsale .
returns the current status of the crowdsale .
sets the token price .
allows owner to start the crowdsale from the time of execution until a specified deadline .
allows owner to start an unlimited crowdsale with no deadline or fund goal .
creates modifier to prevent short address attack .
allows for a certain amount of tokens to be spend on behalf of the account owner .
"allows contract owner to mint new tokens , prevent numerical overflow ."
sends tokens from sender 's account .
transfers tokens from an approved account .
send coin .
send coin .
this function take the amount of ether send and buy tokens .
ends the fund period and send the eth home .
calculating bounus tokens .
calculating bonus percentage .
calculate 2nd level bonus .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
the 160 lsb be the address of the balance .
"after seal , no more fill be possible ."
fix for the erc20 short address attack .
assemble the give address bytecode .
halt ico in case of emergency .
allow address to buy token for another account .
burns the specified amount of tokens from the foundation .
2-phase ownership transfer ; prevent transfer ownership to non-existent address by accident .
allow to change the recipient multisig address .
return rate of token against ether .
per address cap in wei : 1000 ether + 1 of ether receive at the give time .
function to revoke tokens in case the term and condition of the bounty campaign be violate by an user after tokens be assign .
owner can allow a crowdsale contract to revoke tokens .
make an investment .
generating 1 of total crowdsale token for the team .
called by crowdsale finalize ( ) .
calculate the current price for buy in amount .
function allow to credit tokens to participant in the bounty campaign .
function to revoke tokens in case the term and condition of the bounty campaign be violate by an user after tokens be assign .
checking that we do not exceed the investment cap .
condition be the same a above .
creating new tokens for the investor and assign them .
send coin .
a contract attempt to get the coin .
send coin .
a contract attempt to get the coin .
limit token transfer until the crowdsale be over .
fix for the erc20 short address attack http : / / vessenes . com / the-erc20 - short-address - attack-explained .
make sure we be not do yet .
make an investment .
owner can withdraw contract fund .
finalize a succcesful crowdsale .
check if the ico goal be reach .
crowdfund state machine management .
make an investment .
preallocate tokens for the early investors .
failsafe drain - owner can withdraw all the ether from the contract .
below function will convert string to integer remove decimal .
lock the vault .
approve transfer .
dopayment ( ) be an internal function that send the ether that this contract receive to the vault and create tokens in the address of the _owner assume the campaign be still accept fund .
"finalizefunding ( ) end the campaign by call set the controller to 0 , thereby end the issuance of new tokens and stop the ."
this method can be use by the controller to extract mistakenly sent tokens to this contract .
deposit eth .
"close a long position , this will : - sell the bancor for eth - deduct interest , this will go to the house metamask 3 . 8 . 6 ."
"users want to know when the auction end , second from 1970-01 - 01 ."
users want to know theirs or someones current bid .
update high bid or top up previous bid .
bidders can only place bid while the auction be active .
withdraw a bid that be overbid .
multisig member create a proposal to send ether out of the contract .
multisig member vote on a proposal .
create new tokens and allocate them to an address . .
owner can allow a crowdsale contract to mint new tokens .
generates _amount tokens that be assign to _owner .
the owner of this contract can change the controller of the apt token .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
this method will generally be call by the apt token contract to acquire apts .
this method will can be call by the controller before the contribution period end or by anybody after the endblock .
this function be use to choose an address for return the fund .
this be a simple getter function that will be use to return the address that the whg will return the fund to .
verify that the address be different than this contract address .
increase the token supply and send the new tokens to an account can only be call by the contract owner .
only owner can destroy the token .
ens functionality .
reverse resolution support .
owner call to trigger a stop state .
token drain .
change multisig wallet in case it need .
change contract ownership .
toggle refund state on and off .
"refund function when minimum cap isnt reach , this be step be step 2 , this function only available after being enabled ."
owner call to restart from the stop state .
withdrwaw call for refund balance acumilated by payee .
burn function to burn a set amount of tokens .
main function on eth receive .
finalize function .
send coin .
a contract attempt to get the coin .
modifier for owner .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
outside-visible transact entry point .
confirm a transaction through just the hash .
check to see if there be at least _value leave from the daily limit today .
"call by the owner on emergency , trigger stop state ."
"call by the owner on end of emergency , return to normal state ."
atomic increment of approved spend .
atomic decrement of approved spend .
safemath contract - math operations with safety check .
kill contract .
"a helper function for the default function , allow contract to interact ."
allow load refund back on the contract for the refund .
investors can claim refund .
send coin .
allows the developer to shut down everything except withdrawals in emergencies .
withdraws all eth deposit or zbr purchase by the sender .
allow developer to add eth to the buy execution ico .
"buys tokens in the crowdsale and reward the caller , callable by anyone ."
check be msg_sender be contract dev .
send fund when ico end .
semi-public function - only oraclize can call .
burn away the specified amount of venuscoin tokens .
to call to start the token 's sale .
manually back venuscoin owner address .
initializes contract with initial supply tokens to the creator of the contract .
called by the standard token upon creation .
transfer tokens from caller 's account to another account .
authorized caller transfer tokens from one account to another .
authorize an account to send tokens on caller 's behalf .
multiplies two number and check for overflow before return .
divides two number but check for 0 in the divisor first .
adds two number and check for overflow before return .
subtracts two number and check for underflow before return .
withdraw foreign .
constructor - just pass on the owner array to the multiowned and the limit to daylimit .
constructor be give number of sigs require to do protected onlymanyowners transactions as well a the selection of address capable of confirm them .
constructor - store initial daily limit and record the present day 's index .
throw unless the contract be not yet initialize .
check if we be in a new payout cycle .
start a new payout cycle .
determine the amount that should be pay out .
check the contract 's eth balance .
income should go here .
function to mint tokens .
"to prevent cheat , when a withdrawal be make , the tokens for that address become immediately lock until the next period ."
"once a user get pay out for a period , we lock up the tokens they own until the next period ."
erc20 logic implementation .
what be the balance of an user at a block ? .
make a transfer of ago between two address .
approve a payment from msg . sender .
checks the allowance of an account against another one .
returns the total supply of token issue .
ico logic implementation .
method use by the creators .
methods use by the ico investors .
claimer logic implementation .
what be the late reference block number ? .
"finalize the crowdsale , should be call after the refund period ."
manually back newhope owner address .
when min_cap be not reach : 1 ) backer call the approve function of the newhope token contract with the amount of all newhopes they get in order to be refund 2 ) backer call the refund function of the crowdsale contract with the same amount of newhopes 3 ) backer call the withdrawpayments function of the crowdsale contract to get a refund in eth .
burn away the specified amount of newhope tokens .
receives a donation in ether .
compute the newhope bonus accord to the investment period .
constructor be give number of sigs require to do protected onlymanyowners transactions as well a the selection of address capable of confirm them .
constructor - store initial daily limit and record the present day 's index .
constructor - just pass on the owner array to the multiowned and the limit to daylimit .
reject all erc23 compatible tokens .
withdraw function send all the fund to the wallet if condition be correct .
safemath contract - math operations with safety check .
"a helper function for the default function , allow contract to interact ."
allow load refund back on the contract for the refund .
investors can claim refund .
allow developer to add eth to the buy execution bounty .
"buys tokens in the crowdsale and reward the caller , callable by anyone ."
grant tokens to a specified address .
revoke the grant of tokens of a specifed address .
calculate the total amount of transferable tokens of a holder at a give time .
calculate amount of vested tokens at a specifc time .
function to mint tokens .
function to stop mint new tokens .
checks whether it can transfer or otherwise throw .
set artcoin token and escrow address .
certain address need to call the activate function prior to the sale open block .
whether the needed account have activate the sale .
get the price for a artcoin token at any give block number .
get what the stage be for a give blocknumber .
get what the price be for a give stage .
artcoin need to make initial token allocations for presale partner .
dopayment ( ) be an internal function that send the ether that this contract receive to escrow and create tokens in the address of the .
function to stop sale before the sale period end .
function to restart stopped sale .
finalizes sale and distribute artcoin to purchasers and release payments .
notifies the controller about a transfer .
notifies the controller about an approval .
manually back gameplayercoins owner address .
when min_cap be not reach : 1 ) backer call the approve function of the gameplayercoin token contract with the amount of all gameplayercoins they get in order to be refund 2 ) backer call the refund function of the crowdsale contract with the same amount of gameplayers 3 ) backer call the withdrawpayments function of the crowdsale contract to get a refund in eth .
burn away the specified amount of gameplayercoin tokens .
to call to start the crowdsale .
compute the gameplayercoin bonus accord to the investment period .
called when _owner send ether to the minime token contract .
notifies the controller about a token transfer allow the controller to react if desire .
notifies the controller about an approval allow the controller to react if desire .
called by name sellers to make a new seller child contract .
called only by seller child contract when a name be purchase .
function only for owner .
normal user can donate to get vote .
normal user can get back their fund if in emergency .
logo 's owner can claim their reward after end .
helper function .
"a helper function for the default function , allow contract to interact ."
"a helper function for the default function , allow contract to interact ."
"a helper function for the default function , allow contract to interact ."
"a helper function for the default function , allow contract to interact ."
"buys tokens in the crowdsale and reward the caller , callable by anyone ."
send tokens .
a contract attempt to get the tokens .
token purchase have 2 stag : - first stage hold 31 days .
allows the developer or anyone with the password to claim the bounty and shut down everything except withdrawals in emergencies .
called by the standard token upon creation .
manually back projectx owner address .
when min_cap be not reach : 1 ) backer call the approve function of the projectx token contract with the amount of all projectxs they get in order to be refund 2 ) backer call the refund function of the crowdsale contract with the same amount of projectxs 3 ) backer call the withdrawpayments function of the crowdsale contract to get a refund in eth .
burn away the specified amount of projectx tokens .
compute the projectx bonus accord to the investment period .
buyer authorize the service provider ( to call settlebuyer ) .
buyer deauthorizes the service provider ( from call settlebuyer ) .
check authorization between account and service provider .
grant authorization between account and service provider on buyers ' behalf only accessible by contract owner .
revoke authorization between account and service provider on buyers ' behalf only accessible by contract owner .
"give a token supply , reserve , crr and a deposit amount ( in the reserve token ) , calculate the return for a give change ( in the main token ) ."
"give a token supply , reserve , crr and a sell amount ( in the main token ) , calculate the return for a give change ( in the reserve token ) ."
calculate ( _basen / _based ) ( _expn / _expd ) .
"input range : numerator : 1 , uint256_max precision denominator : 1 , uint256_max precision output range : 0 , 0x9b43d4f8d6 ."
"input range : 0x100000000 , uint256_max output range : 0 , 0x9b43d4f8d6 ."
transfering contract ownership .
returns log2 ( x 32 ) 32 1 .
"fixedexp be a protected version of fixedexpunsafe , which assert instead of overflow ."
set max sell token amount per transaction - - only wolk foundation can set this .
liquidation cap per transaction be use to ensure proper price discovery for wolk exchange .
"send wolk into contract in exchange for eth , at an exchange rate base on the bancor protocol derivation and decrease totalsupply accordingly ."
"send eth into contract in exchange for wolk tokens , at an exchange rate base on the bancor protocol derivation and increase totalsupply accordingly ."
send eth into contract in exchange for exact amount of wolk tokens with margin of error of no more than 1 wolk .
token generation event for wolk protocol token .
"if token generation minimum be not met , tge participants can call this func and request for refund ."
finalizing the token generation event .
"set burnrate on wolk protocol - - only wolk foundation can set this , affect service provider settlebuyer ."
"set service provider fee - - only contract owner can do this , affect service provider settleseller ."
check service ee ( in bp ) for a give provider .
"service provider settlement with buyer : a small percent be burnt ( set in setburnrate , store in burnbasispoints ) when fund be transfer from buyer to service provider only accessible by settlers ."
"service provider settlement with seller : a small percent be keep by service provider ( set in setservicefee , store in feebasispoints ) when fund be transfer from service provider to seller only accessible by settlers ."
safemath contract - math operations with safety check .
check be msg_sender be contract dev .
send fund when ico end .
kill contract .
allow load refund back on the contract for the refund .
investors can claim refund .
send coin .
allows the developer to shut down everything except withdrawals in emergencies .
withdraws all eth deposit or zbr purchase by the sender .
allow developer to add eth to the buy execution bounty .
"buys tokens in the crowdsale and reward the caller , callable by anyone ."
"a helper function for the default function , allow contract to interact ."
send _amount tokens to _to from _from on the condition it be approve by _from .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
generates _amount tokens that be assign to _owner .
burns _amount tokens from _owner .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
"call by the owner on emergency , trigger stop state ."
grant tokens to a specified address .
revoke the grant of tokens of a specifed address .
revoke all grant of tokens of a specifed address .
"call by the owner on end of emergency , return to normal state ."
reject all erc23 compatible tokens .
reclaim all erc20basic compatible tokens .
returns true if contribution period be currently run .
function to participate in contribution period .
"this method be call by owner after contribution period end , to distribute dnt in proportional manner ."
method for set up contribution period .
enables contribution period .
sets new min .
sets new max gas price for contribution .
sets district0xnetworktoken contract .
enables transfer of dnt .
method to claim tokens accidentally send to a dnt contract .
"kill method should not really be need , but just in case ."
minime controller default settings for allow token transfer .
"before transfer be enable for everyone , only this contract be allow to distribute dnt ."
following constant methods be use for test and contribution web app .
used by contribution front-end to obtain contribution contract properties .
used by contribution front-end to obtain contributor 's properties .
function to verify if all contributors be compensate .
allows the developer to set the crowdsale and token address .
allows the developer or anyone with the password to shut down everything except withdrawals in emergencies .
withdraws all eth deposit or tokens purchase by the user .
"buys tokens in the crowdsale and reward the caller , callable by anyone ."
transfer token logic .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
transfer tokens from one address to another .
calculate amount of premium bonuses .
"officially finish ico , only allow after ico be end ."
refund ico method .
buy slogn tokens .
manage ethereum balance .
transfer token for a specified address .
sum vector .
returns the max value in an array .
make a transfer of ago between two address .
approve a payment from msg . sender .
returns the total supply of token issue .
method use by the creators .
claiming logic implementation .
what be the valance of an user at a block ? .
lets buy you some tokens .
"note that a bop can not go from committed back to open , but it can go from expended back to committed ( this would retain the committed recipient ) ."
this function must be call by token holder in case of crowdsale fail .
migrate _value of tokens to the new token contract .
transfer fund between two address that be not the current msg . sender .
adds an approval for the specified account to spend money of the message sender up to the defined limit .
transfer the balance from owner 's account to another account .
admin api .
public querying api .
public transaction api .
user management api .
public querying api .
public transaction api .
owner management api .
user management api .
owner management api .
a contract attempt to get the coin .
"finalize ( ) can be call once the fairauction have end , which will allow withdrawals ."
"individualclaim ( ) can be call by any auction participant once the fairauction be finalize , to claim the tokens they be owe from the auction ."
"beneficiarysend ( ) can be call once the fairauction be finalize , to send the crowdsale proceed to their destination address ."
automaticwithdrawloop ( ) can be call once the fairauction be finalize to automatically allocate a batch of auctioned tokens .
removes / delete contract .
erc20 implementation start here .
erc20 extension .
returns total amount of raise fund by early purchasers .
append an early purchase log .
close early purchase term .
setup function set external crowdsale contract 's address .
throws if not a payee .
throws if contract not initialize .
throws if contract not open .
throws if token in lockout period .
throws if not over maturity date .
initialize contract with inital parameters .
finalize contract .
"payment function , transfer eth to token ."
transfer token .
transfer tokens from one address to another .
add interest to each payees .
"return interest by address , unit wei ."
withdraw interest by payee .
withdraw capital by payee .
pause contract .
resume contract .
"set exchange rate in wei , 1 token n eth in wei ."
disable single payee in emergency .
enable single payee .
fix for the erc20 short address attack .
get payee count .
get block number .
"add asset data , audit information ."
get asset count .
put all capital in this contract .
get interest count .
withdraw balance from contract if emergency .
throws if contract pause .
throws if contract be pause .
returns list of owners .
entry point for signers .
set the urls for the link and image .
allow user to reset urls if he want nothing to show on the board .
get a leader at position .
remove from leaderboard ll .
insert in leaderboard linkedlist .
drop last leader from board and return his / her fund .
modifier that only allow the owner to call certain function .
lets owner withdraw eth from the contract .
set new maximum for amount of leaders .
an account / contract attempt to get the coin throw on any error rather then return a false flag to minimize user errors .
withdraw tokens hold by the contract and send them to an account can only be call by the owner .
allows to add a new owner .
allows anyone to execute a confirmed transaction .
allows anyone to execute a confirmed transaction .
allows to remove an owner .
allows an owner to submit and confirm a transaction .
buy token by send ether here .
formula for the dynamic price change algorithm .
functions for the contract owner .
some percentage of the tokens be already reserve by early employees and investors .
some useful getters ( although you can just query the public variables ) .
overriding payment function to take control over the logic .
true if _addr be a contract .
make single preapproved payment to service provider .
convenience getter for some subscription field .
"convenience getter for some subscription field a caller must know , that the subscription with give id exist , because all these field can be 0 even the subscription with give id exist ."
execute periodic subscription payment .
move paiduntil forward to give newduedate .
return current status a a name of a subscription ( or an offer ) with give id ; .
return current status a a code of a subscription ( or an offer ) with give id ; .
create a new subscription offer .
update currently available number of subscription for this offer .
accept give offer and create a new subscription on the base of it .
"empty mark modifier signal to user of the marked function , that it can cause an reentrant call ."
cancel an offer give by offerid .
cancel an subscription give by subid ( a graceful version ) .
cancel an subscription give by subid ( a force version ) .
place an active offer on hold ; it mean no subscriptions can be create from this offer .
resume on-hold offer ; subscriptions can be create from this offer again ( if other condition be meet ) .
call by customer or service provider to place a subscription on hold .
call by customer or service provider to unhold subscription .
can be call by provider on canceled subscription to return a subscription deposit to customer immediately .
call by customer on expired subscription ( paiduntil period be over ) to collect a subscription deposit .
return subscription deposit to customer .
"create simple unlocked deposit , require by some service ."
return previously create deposit to the user .
some internal function .
attach san token to work with ; can be do only once .
register a new service provider to the platform .
de-register the service provider with give addr .
suspend all module operations for give time .
register new exchange rate provider .
xrateproviders length accessor .
make single payment to service provider .
finalizes the precrowdsale and send fund .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
"destroys tokens from an address , this process be irrecoverable ."
starts the precrowdsale .
a backup fail-safe drain if require .
finalizes the precrowdsale and send fund .
"processes the contribution give , send the tokens and emit events ."
modifier to check whether the precrowdsale be run .
starts the precrowdsale .
kill the contract send everything to _to .
outside-visible transact entry point .
confirm a transaction through just the hash .
multi-sig function modifier : the operation must have an intrinsic hash in order that later attempt can be realise a the same underlying operation and thus count a confirmations .
simple modifier for daily limit .
low level token purchase function .
this function allow distribution by the owner before the actual public sale start .
function to stop mint new tokens in crowdsale ( initial distribution ) .
transfer _value sat tokens from sender 's account msg . sender .
create tokens when fund be active .
finalize crowdfunding .
accept any erc20 gift .
change gubberment officials .
information function .
transfer the balance from owner 's account to another account .
spender of tokens transfer an amount of tokens from the token owner 's balance to the spender 's account .
"if you consider yourself rich , donate for world peace ."
"liquidate your tokens for eth , if this contract have sufficient eth ."
gubberment officials will accept 100 of bribe .
gubberment officials can pilfer out of necessity .
modifiers ( encode important crowdsale logic ) .
only allow some action after the crowdsale be over .
only allow some action before the crowdsale start .
only allow some action while the crowdsale be active .
status and utility function .
determine if the crowdsale should close by timer .
"if the open timer have elapse , start the crowdsale ."
"if the close timer have elapse , stop the crowdsale ."
determine if the crowdsale be currently happen .
before the crowdsale : configuration .
allow the owner to start the crowdsale manually .
let the owner start the timer for the crowdsale start .
"let the owner stop the crowdsale open timer , as long a the crowdsale have not yet open ."
let the owner start the timer for the crowdsale end .
"let the owner stop the crowdsale close timer , as long a it have not yet expire ."
during the crowdsale .
allow the owner to end the crowdsale manually .
after the crowdsale : token maintainance .
"if ether somehow manage to get into this contract , provide a way to get it out again ."
the registrar can execute certain function only after one year .
sales / approvals have to be cancel first for certain function .
mitigating erc20 short address attack ( http : / / vessenes . com / the-erc20 - short-address - attack-explained / ) .
allow the current owner to assign a new owner .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
offer a piece for sale at a fixed price - the price have to be low than the current low price .
place a bid for a piece - bid have to be high than current high bid .
if the current low ask address want to fill a bid it have to either cancel it 's sale first and then fill the bid or low the low ask price to be equal or low than the high bid .
withdraw a bid - bid can only be withdraw after 24 hours of be place .
cancel sales - sales can only be cancel 24 hours after it have be offer for sale .
well do n't do it ( unless you want to increase the jackpot ) .
useful to know the row count in artworks index .
deploy a new artwork .
functions with this modifier can only be execute by approved factory contract .
functions with this modifier can only be execute by approved contract .
set the referrer of an artist .
allows the current owner to assign a new owner .
allows approve contract to issue patron tokens .
change the amount of patron tokens a donor receive .
receive patron tokens in return for donations .
check if a specific sha256 hash have be use by another artwork before .
approve factory contract .
open zeppelin asyncsend function for pull payments .
fill a bid with an unindexed piece own by the registrar .
cancel the sale of an unindexed piece own by the registrar .
sell an indexed piece own by the registrar .
fill a bid with an indexed piece own by the registrar .
cancel the sale of an unindexed piece own by the registrar .
begin erc20 function ( c ) bokkypoobah 2017 .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
end erc20 function ( c ) bokkypoobah 2017 .
begin safe math function by open zeppelin https : / / github . com / openzeppelin / zeppelin-solidity / blob / master / contract / math / safemath . sol .
functions with this modifier can only be execute by a specific address .
safety to withdraw unbought tokens back to seller .
safety to prevent anymore purchase / sales from occur in the event of unforeseen issue .
update available iou to purchase .
update iou price .
release buyer 's eth to seller only if amount of contract 's tokens balance be to the amount that still need to be withdraw .
receive patron tokens in return for donations .
creates a new clone token with the initial distribution be this token at _snapshotblock .
generates _amount tokens that be assign to _owner .
add one week to endblocknumber .
erc20 methods .
send _amount tokens to _to from msg . sender .
the address of the controller be the only address that can call a function with this modifier .
changes the controller of the contract .
"the address of the controller be the only address that can call a function with this modifier , also the burner can call but also the target of the function must be the burner ."
changes the burner of the contract .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
total tokens availale for the sale in weis .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
pauses the contribution if there be any issue .
resumes the contribution .
the controller of this contract can change the controller of the msp token .
minime controller interface function .
this function be override by the test mocks .
this method should be call by the controller before the contribution period start this initialize most of the parameters .
this method will generally be call by the msp token contract to acquire msps .
this method will can be call by the controller before the contribution period end or by anybody after the endblock .
total tokens issue in weis .
withdraw function send all the fund to the wallet if condition be correct .
this method should be call by the sit holders to collect their corresponding msps .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
burns _amount tokens from _owner .
update iou price .
exchanges can buy on behalf of participant .
tokens per eth .
use by subscription module to burn token while create a new deposit .
mint new token for give account in crowdsale stage .
start normal operation of the token .
section : modifier .
"token not start mean mint be possible , but usual token operations be not ."
set beneficiary - the account receive platform fee .
attach module manage subscriptions .
set platform fee denominate in 1 / 10000 of san token .
return always 1 because exchange rate of the token to itself be always 1 .
use by subscription module to operate on token balance .
use by subscription module to operate on token balance .
use by subscription module to re-create token from return deposit .
display number of uniq investors .
display receive amount in eth upto now .
display current contract state in human readable form .
there be around 40 address in presale_addresses list .
implementation methods .
execute periodic subscription payment .
move paiduntil forward to give newduedate .
create a new subscription offer .
update currently available number of subscription for this offer .
accept give offer and create a new subscription on the base of it .
cancel an offer give by offerid .
cancel an subscription give by subid ( a graceful version ) .
cancel an subscription give by subid ( a force version ) .
place an active offer on hold ; it mean no subscriptions can be create from this offer .
resume on-hold offer ; subscriptions can be create from this offer again ( if other condition be meet ) .
call by customer or service provider to place a subscription on hold .
call by customer or service provider to unhold subscription .
can be call by provider on canceled subscription to return a subscription deposit to customer immediately .
call by customer on expired subscription ( paiduntil period be over ) to collect a subscription deposit .
"create simple unlocked deposit , require by some service ."
return previously create deposit to the user .
register a new service provider to the platform .
de-register the service provider with give addr .
register new exchange rate provider .
make single payment to service provider .
make single preapproved payment to service provider .
initializes contract with initial supply tokens to the creator of the contract .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
accepts eth from a contributor .
finalizes the fund and send the eth to deposit address .
allows contributors to claim their tokens and / or a refund .
offer a piece for sale at a fixed price - the price have to be low than the current low price .
place a bid for any piece in the edition - bid have to be high than current high bid .
withdraw a bid - bid can only be withdraw after 24 hours of be place .
cancel sales - sales can only be cancel 24 hours after it have be offer for sale .
deploy a new contract .
burn extra tokens from a balance .
semi uinversal call function for unforseen future ethart network contract type and use case .
begin erc20 function ( c ) bokkypoobah 2017 .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
functions with this modifier can only be execute by a specific address .
functions with this modifier can only be execute by approved factory contract .
allow the current owner to assign a new owner .
send coin .
allow another contract to spend some tokens in your behalf .
approve and then comunicate the approve contract in a single tx .
a contract attempt to get the coin .
check if a particular transaction have already be write .
rebuild the previous invest data back to the crowdsale .
rebuild the previous invest data and do a token reissuance .
there be around 40 address in presale_addresses list .
change the upgrade master .
burn extra tokens from a balance .
throws if call by any account other than the owner .
fix for the erc20 short address attack .
"it be call circuit breakers ( pause contract functionality ) , it stop execution if certain condition be meet , and can be useful when new errors be discover ."
owner can set any account into freeze state .
allows the current owner to transfer control of the contract to a newowner .
allow the token holder to upgrade some of their tokens to a new contract .
set an upgrade agent that handle .
add next address package to the internal white list .
disable setup mode .
data be an array of uint256s .
add next address package to the internal white list .
switch off setup mode .
updates a pixel section 's index number .
buy an entire region .
set the for sale flag and a price for a section .
set the for sale flag and price for a region .
set the for sale flag and price for a region .
set an entire region 's cloud image data .
set the for sale flag and a price for a section to a specific address .
remove the for sale flag from a section .
set the for sale flag and price for a region .
set a section 's image data to be redrawn on the map .
update the current ipo price .
withdraw ethereum from the sender 's ethbalance .
deposit ethereum into the sender 's ethbalance .
transfer a section and an ipo token to the supplied address .
transfer a region of section and ipo tokens to the supplied address .
"get the index to access a section object from the provided raw x , y ."
get the index to access a section object from it section identifier .
check to see if section be available for first purchase .
check to see if section be available for purchase .
get the price of the section .
check to see if a region be available provide the top-left ( start ) section and the bottom-right ( end ) section .
buy a section base on it index and set it cloud image_id and md5 .
constant function do not mutate state .
checks modifier and allow transfer if tokens be not lock .
checks modifier and allow transfer if tokens be not lock .
function to assign team bounty tokens to owner .
"locking be a feature that turn a user 's balance into un-issued tokens , take them out of an account and reduce the supply ."
renting - - logic tbd later .
burning - - we allow any user to burn tokens .
notice transfer _value h . n .
notice finalize crowdfunding clossing fund options .
allow owner to set fundraiser target address .
allow owner to set call data to be send along to fundraiser target address .
this be just to inform the owner that a user want to redeem some of their iou tokens .
this be just to inform the investor that the owner redeem some of their iou tokens .
helper function to input bytes via remix from https : / / ethereum . stackexchange . com / a / 13658 / 16 .
i adapt this from fast division of large integers by karl hasselström .
"when close ico , token will be send to this contract , then this function will be call and token will be distribute among early investor ."
fix for the erc20 short address attack .
change ownership of the token .
generate new tokens .
get the token balance of the specified address .
transfer token to another address .
transfer tokens from an different address to another address .
approve the indicated address to spend the specified amount of tokens on the sender 's behalf .
check how many tokens the indicated address can spend on behalf of the owner .
change ownership of the assembler .
change the cardboardunicorns token contract manage by this contract .
change the real unicorn contract location .
update the price of a cardboardunicorn to be 1 / 1000 a real unicorn 's price .
set a specific price for a cardboardunicorn .
strap a horn to a horse ! .
initializes contract with initial supply tokens to the creator of the contract .
this be just to inform the owner that a user want to redeem some of their iou tokens .
this be just to inform the investor that the owner redeem some of their iou tokens .
ref : github . com / openzeppelin / zeppelin-solidity .
safety to withdraw unbought tokens back to seller .
safety to prevent anymore purchase / sales from occur in the event of unforeseen issue .
update available iou to purchase .
update iou price .
release buyer 's eth to seller only if amount of contract 's tokens balance be to the amount that still need to be withdraw .
add next address package to the internal white list .
safety to withdraw eth .
initiate ico purchase .
update available bet to purchase .
update bet price .
modifier that allow only shareholders to vote and create new proposals .
change rule .
function to create a new proposal .
grant tokens to a specified address .
is currently in the period after the private start time and before the public start time .
is currently the crowdfund period .
is complete .
may only be call by the owner address .
may only be call if the crowdfund have not be halt .
transfer amount of tokens from sender account to recipient .
constant function return the current adx price .
"calculate wmount of adx we get , give the wei and the rat we 've define per 1 eth ."
"given the rate of a purchase and the remain tokens in this tranche , it will throw if the sale would take it past the limit of the tranche ."
special function can only be call by pre-buy and only during the pre-crowdsale period .
to be call at the end of crowdfund period .
failsafe drain .
send coin .
allow another contract to spend some tokens in your behalf .
approve and then comunicate the approve contract in a single tx .
a contract attempt to get the coin .
allows the developer to shut down everything except withdrawals in emergencies .
withdraws all eth deposit or bet purchase by the sender .
allow developer to add eth to the buy execution bounty .
"buys tokens in the crowdsale and reward the caller , callable by anyone ."
"a helper function for the default function , allow contract to interact ."
for good debug .
safety to withdraw all tokens back to seller in the event any get strand .
"safety to prevent anymore purchase / sales from occur in the event of unforeseen issue , or if seller wish to limit this particular sale price and start a new contract with a new price ."
function to check the current tokens sold in the ico .
function to get total tokens issued during ico ( dev + sold ) .
function to check percentage of goal achieve .
function to initiate payout of either tokens or ether payback .
function to pay back ether .
function to pay out tokens .
function to pay the creator upon success .
burn _value of tokens from your balance .
"contribute function , accept incoming payments and track balance ."
function to view current token balance of the crowdsale contract .
"function to check if crowdsale have start yet , have we pass the start block ? ."
"function to check if crowdsale be complete ( have we eigher hit our max , or pass the crowdsale completion block ? ) ."
"function to check if crowdsale have be successful ( have incoming contribution balance meet , or exceed the minimum goal ? ) ."
function to check the ether balance of a contributor .
function to check the saved ether balance of a contributor .
exchanges can buy on behalf of participant .
get last address .
set beneficiary .
set build cost .
set security check report uri .
run script creation contract .
inherited from cvextender .
the ability to transfer tokens be disabled .
call this to authorize participants to this pre-ico sale .
useful for contributor to check before send ether .
this will be later set by the owner of this contract .
function call by the ico contract to transform the tokens into etch tokens .
"if you mark a function nonreentrant , you should also mark it external ."
users can claim eth by themselves if they want to in case of eth failure .
only owner methods .
owner can return eth for multiple users in one call .
owner set new address of suncontracttoken .
owner can claim reserve tokens on the end of crowsale .
owner can remove allowance of designated presale contributor .
set token contract where mint will be do ( tokens will be issue ) .
withdraw fund from contract .
withdraw remain balance to manually return where contract send have fail .
escrow api vote yes - immediately send fund to the peer .
vote no - freeze fund for arbitration .
arbiter 's decision on the case .
allow buyer or seller to take timeouted fund .
goods api add new description to the goods .
buy with escrow .
remove buyer from the watchlist .
participate to a presale .
participate to a presale .
owner function .
moderator function .
only when creator want to get the money back only can refund back to creator .
constant function .
functions with this modifier can only be execute by the owner .
atomic increment of approved spend .
atomic decrement of approved spend .
ico never happen .
buys pay for the contract with user fund .
claims pay at a price determine by the block number .
true if the contract implement the requested interface .
the associated address .
sets the address associate with an ens node .
contenttype the content type of the return value .
ownership-related function .
what be the current totalsupply ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
fetch the current allowance of a spender .
allow owner to add tokens to the total supply .
withdraws all eth deposit or pay purchase by the sender .
allow anyone to contribute to the buy execution bounty .
"buys tokens in the crowdsale and reward the caller , callable by anyone ."
"a helper function for the default function , allow contract to interact ."
withdraws snt claim by the user .
claims snt at a price determine by the block number .
accepts ether and create new ddft tokens .
ends the fund period and send the eth home .
allows contributors to recover their ether in the case of a failed fund campaign .
updates splitter contract with ownership change .
withdraws all eth deposit or pay purchase by the sender .
allow anyone to contribute to the buy execution bounty .
"buys tokens in the crowdsale and reward the caller , callable by anyone ."
"a helper function for the default function , allow contract to interact ."
only the owner can use this method .
transfer coins .
check reward .
swap executor .
set developers account .
set olde4 addresses .
get account info .
"debug only - end this contract , suicide to developers ."
all old token holders can opt into this new contract by call this function .
"allocate a new account by set alloc to true add holder index , bump the num account ."
begin erc-20 from standardtoken .
sender transfer tokens to a new acct do not use this fcn for a token-split transfer from the old token contract ! .
"calc current point for a token holder ; that be , point that be due to this token holder for all dividends receive by the contract during the current period ."
one never know if this will come in handy .
sender withdraw entire reward / dividends .
allow sender to transfer dividends .
set gas for operations .
moderator function .
only when creator want to get the money back only can refund back to creator .
social bridge be require even in trustless environments .
transparency in action keep actors honest .
neither assets nor currencies have inherent worth .
calculate ( _basen / _based ) ( _expn / _expd ) .
"input range : numerator : 1 , uint256_max precision denominator : 1 , uint256_max precision output range : 0 , 0x9b43d4f8d6 ."
"input range : 0x100000000 , uint256_max output range : 0 , 0x9b43d4f8d6 ."
returns log2 ( x 32 ) 32 1 .
"fixedexp be a 'protected ' version of fixedexpunsafe , which assert instead of overflow ."
dev function for withdraw any amount from raise fund ( activate only if minimumtarget be reach ) .
"dev function for withdraw amount , which be reserve by minimumtarget ( activate only if minimumtarget be reach ) ."
dev function for close crowdsale .
check if the minimumtarget have be reach .
function for return non sell tokens to dev account after crowdsale .
return your fund after deadline if minimumtarget be not reach ( activate if crowdsale close ) .
allow another contract to spend some tokens in your behalf .
claims snt at a price determine by the block number .
sends tokens from sender 's account .
transfers tokens an approved account .
"allows contract owner to mint new tokens , prevent numerical overflow ."
1y and 2y locked balance for an account .
1y and 2y locked total supply .
an account can unlock their 1y lock tokens 1y after token launch date .
an account can unlock their 2y lock tokens 2y after token launch date .
openanx can change the crowdsale wallet address .
"openanx can set number of tokens per 1 , 000 eth ."
accept ethers from one account for tokens to be create for another account .
openanx to finalise the crowdsale - to add the lock tokens to this contract and the total supply .
openanx to add precommitment fund token balance before the crowdsale commence .
"transfer the balance from owner 's account to another account , with kyc verification check for the crowdsale participant 's first transfer ."
"spender of tokens transfer an amount of tokens from the token owner 's balance to another account , with kyc verification check for the crowdsale participant 's first transfer ."
openanx to kyc verify the participant 's account .
"any account can burn _from 's tokens as long a the _from account have approve the _amount to be burnt use approve ( 0x0 , _amount ) ."
1y locked balance for an account .
new owner have to accept transfer of contract .
2y locked balance for an account .
1y and 2y locked balance for an account .
1y locked total supply .
2y locked total supply .
1y and 2y locked total supply .
unlocked total supply .
openanx can transfer out any accidentally send erc20 tokens .
add remain tokens to lock 1y balance .
add to 1y locked balance and totalsupply .
add to 2y locked balance and totalsupply .
1y locked balance for an account .
2y locked balance for an account .
initializes contract with initial supply tokens to the creator of the contract .
transfer _value bpnt tokens from sender 's account msg . sender .
create tokens when fund be active .
finalize crowdfunding .
get back the ether send during the fund in case the fund have not reach the minimum level .
just a safeguard for people who might invest and then loose the key .
total amount of art .
send _value art to _to from msg . sender .
withdraws all eth / snt own by the user in the ratio currently own by the contract .
allow users to simulate enter the crowdsale to avoid the fee .
buys tokens in the crowdsale and reward the sender .
"a helper function for the default function , allow contract to interact ."
lock the vault .
lock the vault .
contribution be the only address that can call a function with this modifier .
this method should be call by the owner before the contribution period start this initialize most of the parameters .
sets the limit for a guaranteed address .
this method will generally be call by the snt token contract to acquire snts .
this method will can be call by the owner before the contribution period end or by anybody after the endblock .
this should be call by the creator of the contract to commit all the curve .
total tokens issue in weis .
total ether collect .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
withdraw function send all the fund to the wallet if condition be correct .
the dev ( owner ) will call this method to extract the tokens .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
anybody can reveal the next curve if he know it .
this method should be call by the sgt holders to collect their corresponding snts .
the owner of this contract can change the controller of the snt token .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
reveal multiple curve at once .
"move to curve , use a a failsafe ."
return the fund to collect for the current point on the curve ( or 0 if no curve reveal yet ) .
calculates the hash of a curve .
return the total number of curve commit ( can be large than the number of actual curve on the curve to hide the real number of curve ) .
from dsvalue : bool have ; bytes32 val ; .
"use this to reset everything , will never be call after lockrelease ."
"get the founder , auxpartner , developer ."
update the ico status .
request refund .
payout reward to all token holders use a second hold variable call payoutbalance to do the actual payout from b / c too much gas to iterate thru each payee .
sender withdraw entire reward / dividends .
set gas for operations .
get gas for operations .
check reward .
"icocheckup - check up call for administrators after sale be close if min ico tokens sell , 10 percent will be distribute to company to cover various operate expense after sale and usage dealines have be meet , remain 90 percent will be distribute to company ."
swap executor .
tokens hold reserve the top two bytes for the payid last pay .
swap developers account .
change founder .
change auxpartner .
"debug only - end this contract , suicide to developers ."
"get all ico status , fund and usage info ."
the standard value is stored in maxpaysper .
"allocate a new account by set alloc to true set the top to bytes of tokens to cur pay id to leave out of current round add holder index , bump the num account ."
begin erc-20 from standardtoken .
purchase token function - tokens only sell during sale period up until the max tokens purchase price be tokenprice .
accept payment from e4row contract .
"set the e4row partner , this be only do once ."
return the total tokens purchase .
return the num game a report from the e4row contract .
todo : should be a library .
"modifiers be inherit , check own pattern http : / / solidity . readthedocs . io / en / develop / contract . html function-modifiers ."
"todo : implement group add someday , however func distributeandreturntopool get very complicate todo : function calcnewemployeepooloptions ( uint remain , uint8 groupsize ) todo : function addnewemployeestoesop ( address emps , uint32 issuedate , uint32 timetosign ) ."
minimal options after fadeout .
check if calculator i initialize .
withdraws all eth / snt own by the user in the ratio currently own by the contract .
allow anyone to contribute to the buy execution bounty .
buys tokens for the contract and reward the caller .
"a helper function for the default function , allow contract to interact ."
ends the fund period and send the eth home .
buys tokens in the crowdsale and reward the give address .
"use this to reset everything , will never be call after lockrelease ."
check reward .
swap executor .
set developers account .
set olde4 addresses .
all old token holders can opt into this new contract by call this function .
sender transfer tokens to a new acct do not use this fcn for a token-split transfer from the old token contract ! .
"calc current point for a token holder ; that be , point that be due to this token holder for all dividends receive by the contract during the current period ."
sender withdraw entire reward / dividends .
allow sender to transfer dividends .
set gas for operations .
return an arbiter token from an hgame .
call by arbiter when winner be decide * pass in high num for winnerbal for tie game .
"handle a bet make by a player , validate the player and game add to players balance ."
return if arb token exist .
return arbiter game stats .
"scan for a game 10 minutes old if find abort the game , cause fund to be return ."
return game info .
return arbtoken and low bytes from an hgame .
get operation gas amount .
set operation gas amount for forwading operations .
set a micheivous arbiter to lock .
"suicide the contract , not call for release ."
flush the house fee whenever command to .
withdraw expense fund to arbiter .
set the token partner .
"check active game and valid player , return player index ."
check the arbiter be valid by compare token .
check the arbiter be valid without compare token .
check if arbiter be lock out .
return if game be active .
"register game arbiter , max players of 5 , pass in exact registration fee ."
start game .
"clean up game , set to inactive , refund any balance call by housekeep only ."
accepts ether and create new sme tokens .
users be allow to join with . 1 .
get the token we be distribute .
participate to a presale .
how may tokens each investor get .
how many tokens remain unclaimed for an investor .
only owner be allow to set the vault initial token balance .
claim n buy tokens to the investor a the msg sender .
set the target crowdsale where we will move presale fund when the crowdsale open .
"set the target token , which override the ico token ."
resolve the contract umambigious state .
make an investment .
should be call only from verify claim .
send eth .
start vote at startblocknr for durationhrs .
return current vote result for give address in percent .
"return vote remain time ( hours , minutes ) ."
return current state of the vote .
start vote at startblocknr for durationhrs .
for test .
create new tokens and allocate them to an address . .
owner can allow a crowdsale contract to mint new tokens .
setting crowdsale for setconversionrate ( ) .
here you can set the new chf / eth rate .
allow to set soft cap .
get chf / eth pair a an integer .
wei price .
function which tranforms chf softcap to weis .
calculate the current price for buy in amount .
post crowdsale distribution process .
here you can set all the vaults .
can we run finalize properly .
called once by crowdsale finalize ( ) if the sale be success .
return current vote result for give address in percent .
check if it 's time to make payouts .
check if it 's time to make payouts .
pass the admin right to another address .
check only allowpublicwithdraw .
public function emergency manual refund .
internal function .
public function onlyowner move ether to _to address .
owner restrict function .
owner restrict function .
"after we distribute the bonus tokens , we will send them back to the coin itself ."
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
token owner can approve for spender to transferfrom ( . . . ) .
add new certified partner .
add allowance to create build in country to certified partner .
remove allowance to create build in country from certified partner .
connect two address so that they can send bspt without fee .
change bts requirement for buy bspt .
add address to whitelist for factory .
remove address from whitelist .
check if address be whitelisted for factory .
get factory address for give country .
check if address be member of blocksquare .
check if address have enough bst to buy bspt .
amount of bst require to buy bspt .
check if certified partner can create new build in factory .
get info about certified partner .
check if two address can send bspt without fee ; .
add factory .
add member to blocksquare group .
allow first buyers to collect fee from transactions .
save every transaction that bspt send .
get transaction index of last transaction that first buyer claim .
get number of first buyers .
get total number of transactions .
get total weighted contribution .
add new property under this bspt .
send tokens without fee .
allow first buyers contract to transfer bspt without fee .
calculate and distribute fee for fee-recievers .
send tokens .
send tokens .
"mint tokens , can only be do by first buyers contract ."
change status of freeze .
change fee percent .
get allowance .
total amount of token .
check balance of address .
get information about property .
get google map url of property location .
add first buyers .
crowdsale external interface .
low level token purchase * * * do not override .
validation of an incoming purchase .
determines how eth be store / forward on purchase .
"public function , can only be call from the outside ."
"public function , suppose to be call from another contract , after receive approval ."
"claim : public function , only suppose to be call from the outside ."
"claim : public function , only suppose to be call from the outside ."
"only call from within the this contract itself , will actually do the fund ."
"check if a claim be valid , by check the signature ."
require to be able to migrate to a new fundrequestcontract .
simple transfer .
advanced transfer .
return all current round info need for front end - functionhash - 0x747dff42 .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
return the amount of key you would get give an amount of eth .
return current eth price for x key .
get exist or register new pid .
check to make sure user pick a valid team .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
calculate number of key receive give x eth .
calculate amount of eth receive if you sell x key .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
return the price buyer will pay for next 1 individual key .
return time leave .
symbol of this token .
name of this token .
main method .
allow withdrawal of fund after selfdestructing of a child contract which return fund to this contract .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and up ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
"after the withdrawal , policy will transfer back the token to the ex-holder , the policy balance ledger will be update either ."
ensures that only the dappbridge system can call the function .
helper internal function .
this be call from dappbridge . com .
show if a player have any pending withdrawels due ( return the amount ) .
need to auto calc max bet private function .
show how much profit have be make ( houseedge ) .
end private function .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
"the main function , we call it when a new friend want to join ."
"this will return the stats for a ponzi friend / / return ( ponzifriendid , parent , amoutplayed , amountearned ) ."
"return some general stats about the game / / return ( friendslength , amountplayed , commissionssent ) ."
add ishuman check for the newponzifriend function ( we want to avoid contract to participate in this experience ) .
transfer token for a specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
total supply .
multi freeze account .
get the token balance for account tokenowner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
token owner can approve for spender to transferfrom ( . . . ) .
freeze account .
note : _amount of 1 fct be 10 * * decimals .
note : _amount of 1 fct be 10 * * decimals .
advanced transfer .
only emergency .
distribute eth base on fee to gen and pot .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
bid function .
only people with profit .
"converts all incoming ethereum to tokens for the caller , and pass down the referral addy ( if any ) ."
this method serve a a way for anyone to spread some love to all tokenholders without buy tokens .
converts all of caller 's dividends to tokens .
alias of sell ( ) and withdraw ( ) .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
"in case the amassador quota be not meet , the owner can manually disable the ambassador phase ."
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
use these to register name .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
bid function .
logic run whenever a buy order be execute .
prevent contract from interact with fomo3d .
end the round .
update round timer base on number of whole key buy .
"distribute eth base on fee to com , aff , and p3d ."
"distribute eth base on fee to com , aff , and p3d ."
multiple transactions .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
withdraws all of your earn .
use these to register name .
transfer the specified amount of tokens to the specify address .
transfer the specified amount of tokens to the specify address .
assemble the give address bytecode .
helper function that transfer to address .
helper function that transfer to contract .
"go to the next period , if sufficient time have pass ."
creates a sealed purchase order .
submit a sealed purchase order .
reveal a sealed purchase order and commit to a purchase .
place an unsealed purchase order immediately .
claim previously purchase tokens for an account .
"users can withdraw locked balance after the lock time have expire , for an account ."
contract owner can withdraw unlocked owner fund .
the owner can withdraw any unrevealed balance after the deadline .
calculate the number of tokens to mint during a period .
helper function to get current period index .
calculate token emission .
distribute eth base on fee to gen and pot .
initial token grant for various account .
grants a beneficiary jiffys use a vest schedule .
gets current grant balance for caller .
gets current grant balance for an account .
releases jiffys that have be vest for caller .
releases jiffys that have be vest for an account .
returns a lookup table of all vest grant beneficiaries .
revokes previously issue vest grant .
"in case the amassador quota be not meet , the administrator can manually disable the ambassador phase ."
symbol of this token .
name of this token .
initializes the sale .
checks if the sale be live .
checks whether the goal be reached .
transfer owner to another address .
send coin throw on any error rather then return a false flag to minimize user errors .
an account / contract attempt to get the coin throw on any error rather then return a false flag to minimize user errors .
withdraw accumulate balance for a payee .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
get exist or register new pid .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
deleteaccountsinbulk delete user account in bulk .
changeownerofmonethausersclaimstorage change ownership .
updateuserclaim update user claim status and add token to his wallet .
updateuserclaiminbulk update multiple users claim status and add token to their wallet .
deleteuserclaim delete user account .
deleteuserclaiminbulk delete user account in bulk .
claimtokens call updateuserclaim function of monethausersclaimstorage contract to update user 's token claim status and assign tokens to user .
claimtokensinbulk call updateuserclaim function of monethausersclaimstorage contract to update multiple users token claim status and assign tokens to user .
deleteaccount delete user 's claim token .
lock the tokens .
function to mint tokens .
burns a specific amount of tokens .
"integer division of two number , truncate the quotient ."
function to stop retrieve tokens .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
"administrators can : - change the name of the contract - change the name of the token - change the pos difficulty ( how many tokens it cost to hold a masternode , in case it get crazy high later ) they can not : - take fund - disable withdrawals - kill the contract - change the price of tokens ."
set reserve data .
wallet fee .
tax parameters .
this function be callable by anyone .
register wallets for fee share .
here the operator can set rate without other operators validation .
check how many tokens investor can claim .
claim n buy tokens to the investor a the msg sender .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
anyone can claim the card / pay gas for them .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
can only set limit once .
"can never adjust tradable card each season get a 'balancing beta ' totally immutable : season , rarity ."
store purity and shine a one number to save users gas .
check if goal be reach .
withdraw the fund .
some fomo3d function that deposit to forwarder .
for data track let make a function to check this contract balance .
some fomo3d function that deposit to forwarder .
some fomo3d function that deposit to forwarder .
some fomo3d function that deposit to forwarder .
this version will use up most gas .
this version just try a plain revert .
this one try an infinite loop ( another fail .
this one just run a set length loop that oog 's ( and . .
"multiplies two number , throw on overflow ."
transfer token for a specified address .
gets the balance of the specified address .
function to mint tokens .
function to mint tokens .
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
allows the current owner to transfer control of the contract to a newowner .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
logic run whenever a buy order be execute .
this be the core logic for any buy / reload that happen while a round be live .
withdraws all of your earn .
send coin .
this be the core logic for any buy / reload that happen while a round be live .
transfer tokens from other address .
allow another contract to spend some tokens in your behalf .
function to check the amount of tokens that an owner allow to a spender .
send coin .
"internal transfer , only can be call by this contract ."
a contract attempt to get the coin .
mint the specified amount of timelocked tokens .
mint the specified amount of vested tokens .
release vest tokens to the beneficiary .
revoke vest tokens .
use safemath for uint256 ; modifiers only people with tokens .
transfer tokens from the caller to a new holder .
this be the core logic for any buy / reload that happen while a round be live .
"distribute eth base on fee to com , aff , and p3d ."
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
prepare compression data and fire event for buy or reload tx 's .
withdraws all of your earn .
use these to register name .
"refund 75 since no transfer between bitguild and player , no need to call approveandcall ."
withraw all plat by dev .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
deposit funds .
withdrawl funds .
this only run once ever .
get the total balance of this contract .
get the balance of customer .
"internal transfer , only can be call by this contract ."
"allows _spender to spend no more than _value tokens in your behalf , and then ping the contract about it ."
remove _value tokens from the system irreversibly .
return the number of sub-tokens the call account purchase / be grant .
add a set of address to the whitelist .
remove a set of address from the whitelist .
pause the sale .
activate the sale .
"get the current bonus percentage , a a whole number ."
"allow an individual to buy tokens ( which will not be issue immediately ) individual instruct the tokens to be deliver to a specific account , which may be different than msg . sender ."
token sale participants call this to claim their tokens after the sale be complete and tokens be schedule for release .
token sale participants call this to request a refund if the sale be cancel .
the contract creator call this to withdraw contributed eth to a specific address .
"the contract owner call this to complete ( finalize / wrap up , etc . ) ."
"the creator can certify a sale , mean it can not be cancel , and eth can be withdraw from the sale by the creator ."
the creator can cancel a sale .
call by the delegate to reverse purchase / grant for a particular contributor .
call by the delegate to grant tokens to a recipient .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
calculate how many key would exist with give an amount of eth .
calculate how much eth would be in contract give a number of key .
prevent contract from interact with fomo3d .
register a name .
"players , if you register a profile , before a game be release , or set the all bool to false when you register , use this function to push your profile to a single game ."
"players , use this to push your player profile to all register game ."
players use this to change back to one of your old name .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
increase the amount of tokens that an owner allow to a spender .
destroy tokens .
destroy tokens from other account .
create _amount tokens and send it to _to .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
"administrators can : - change the name of the contract - change the name of the token - change the pos difficulty ( how many tokens it cost to hold a masternode , in case it get crazy high later ) they can not : - take fund - disable withdrawals - kill the contract - change the price of tokens ."
whether the tokencap be reach .
accumulate the purchased tokens to the total raise .
check the state when validate a purchase .
overrides parent method take into account variable rate ( a a percentage ) .
setup the map of bonus-rates ( a a percentage ) and total hardcap for each salestate tier to be call by the constructor .
get the current hardcap for the current salestate .
only allow the owner to modify the current salestate .
called at the end of the crowdsale when it be eneded .
check the state when validate a purchase .
set ( update ) the eth-to - lpc exchange rate .
allow for mint from owner account .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
"adds two addends together , return the sum ."
determines whether a value be equal to or less than another .
determines whether a value be great than another .
determines whether a value be equal to or great than another .
"subtracts the minuend from the subtrahend , return the difference ."
"multiplies two factor , return the product ."
"divides the dividend by divisor , return the truncated quotient ."
returns the less of two value .
returns the great of two value .
determines whether a value be less than another .
constructor function .
constructor function .
constructor function .
withdraws the tokens .
utility function to allow the owner to allocate tokens .
"distribute eth base on fee to com , aff , and p3d ."
increase the amount of tokens that an owner allow to a spender .
transfer token for a specified address .
transfer tokens from one address to another .
"distribute eth base on fee to com , aff , and p3d ."
this function be be call when a user press the button on the website ( or call it directly from the contract ) .
this function can be call only by the winner once the timer have end .
this function return the detail for the players by id ( instead of by address ) .
return the player id and the count of vtl for the connect player .
we loop through all of the players to get the main investor ( the one with the large amount of vtl token ) .
"this function return the current important stats of the game such a the timer , current balance and current winner , the current press price . . ."
safe math .
this be the core logic for any buy / reload that happen while a round be live .
get exist or register new pid .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
"multiplies two unsigned integers , throw on overflow ."
"multiplies two sign integers , throw on overflow ."
"integer division of two unsigned integers , truncate the quotient ."
"subtracts two unsigned integers , throw on overflow ( i . e ."
"subtracts two sign integers , throw on overflow ."
"adds two unsigned integers , throw on overflow ."
"adds two sign integers , throw on overflow ."
symbol of this token .
name of this token .
send some of your tokens to a give address .
a contract or person attempt to get the tokens of somebody else .
function for safe devide .
function for safe subtraction .
function for safe addition .
aprove address to spend amount of tokens .
ckeck that owners tokens be allow to send to spender .
enable investment in specified assets .
disable investment in specified assets .
give melon tokens to receive share of this fund .
"executes active investment and redemption request , in a way that minimise information advantage of investor ."
universal method for call exchange function through adapters .
calculates gross asset value of the fund .
add an asset to the list that this fund own .
calculates unclaimed fee of the fund manager .
calculates essential fund metrics .
converts unclaimed fee of the manager into fund share .
redeems by allocate an ownership percentage only of requestedassets to the participant .
quantity of asset hold in exchange accord to associate order id .
proofs that term and condition have be read and understood .
whether message sender be kyc verify through certifier .
whether the competition be on-going .
get registrantid from registrant address .
address of the fund register by the registrant address .
get time to end of the competition .
get value of mln amount in ether .
calculated payout in mln with bonus for payin in ether .
send _value tokens to _to from msg . sender .
returns an array of fund address and an associated array of whether compete and whether disqualify .
register to take part in the competition .
add batch address to whitelist with set maxbuyinquantity .
withdraw mln .
claim reward .
checks whether investment be permit for a participant .
checks whether redemption be permit for a participant .
checks whether an address be whitelisted in the competition contract and competition be active .
changes the competition address .
registers an asset information entry .
transfer _value tokens from _from to _to if msg . sender .
register an exchange information entry .
updates description information of a registered asset .
deletes an exist entry .
deletes an exist entry .
get asset specific information .
get exchange-specific information .
only owner ; same size input array .
gets price of an asset multiply by ten to the power of assetdecimals .
"price of a registered asset in format ( bool arerecent , uint price , uint decimals ) ."
allows _spender to transfer _value tokens from msg . sender .
internal so that feed inherit this one be not obligate to have an expose update ( . . . ) .
create a new stakingpricefeed .
override inherited update function to prevent manual update from authority .
burn state for a pricefeed operator .
from makerdao medianizer contract .
whether price of asset have be update less than validity second ago .
gets inverted price of an asset .
gets reference price of an asset pair .
gets price of order .
sparse array of address of owned pricefeeds .
dereference fund and shut it down .
get heart price .
get my revenue .
get time left .
buy some greedy heart .
we have two minters the crowdsale contract and the token deployer ( owner ) .
function to mint tokens .
function to stop mint new tokens .
destroyer must be settle .
add to beneficiary map in batch .
add to beneficiary map in batch .
check whether can tranfer tokens or not .
decrease the amount of tokens that an owner allow to a spender .
burn tokens can only use by owner .
set the tokentransfer flag .
"in emergency situation , admin can use emergencytransfer ( ) for protect user 's token ."
check whether register in lockaddress or not .
add or remove in lockaddress ( blacklist ) .
add or remove in unlockaddress ( whitelist ) .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
true if the transaction can buy tokens .
bid on auction .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
throws if _tokenid exist .
create new subtoken with unique tokenid .
gets the total amount of tokens store by the contract .
gets the balance of the specified address .
function to check the amount of tokens that an owner allow to a spender .
transfer token for a specified address .
transfer tokens from one address to another .
approves another address to transfer the give token id .
sets or unsets the approval of a give operator .
tells whether an operator be approve by a give owner .
transfers the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
returns whether the give spender can transfer a give token id .
internal function to mint a new token .
internal function to burn a specific token .
internal function to clear current approval of a give token id .
internal function to invoke onerc721received on a target address .
gets the token id at a give index of the tokens list of the requested owner .
gets list of tokens of the requested owner .
internal function to burn a specific token .
function to stop mint new tokens .
function to mint tokens .
internal function to remove a token id from the list of a give address .
anyone can pay the gas to create their very own tester token .
get any token metadata by pass in the id .
anyone can pay the gas to create their very own tester token .
get any token metadata by pass in the id .
buy key .
withdraw winned pot .
sell key .
checks if the smart contract include a specific interface .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
"since name be pass into the erc721 token constructor , it 's not store in the codexrecordproxy contract ."
"since symbol be pass into the erc721 token constructor , it 's not store in the codexrecordproxy contract ."
upgrades the codexrecordproxy to point at a new implementation .
only players with tokens .
"in case one of u dissapears , we need to replace them ."
only players with profit .
"ensure that tha original tokens in tha contract be go to be equally distributed mean , no divine dump be go to be possible result : healthy longevity ."
transfer token for a specified address .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
this be the core logic for any buy / reload that happen while a round be live .
get exist or register new pid .
decide if round end need to be run new round start .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
distribute eth base on fee to gen and pot .
prepare compression data and fire event for buy or reload tx 's .
convert all incoming ethereum to key .
"essentially the same a buy , but instead of you send ether from your wallet , it use your unwithdrawn earn ."
withdraws all of your earn .
use these to register name .
function to access name of token .
function to access symbol of token .
function to access decimals of token .
function to access total supply of tokens .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
this function can be use by owner in emergency to update run status parameter .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
transfer the balance from owner 's account to another account .
"this function will return false if invoke during the constructor of a contract , a the code be not actually create until after the constructor finish ."
internal function to invoke onerc721received on a target address .
sets the token 's interchangeable logic contract .
internal function to check if transfer a specific token be allow .
appends uint ( in decimal ) to a string .
returns an uri for a give token id .
internal function to add a token id to the list of a give address .
internal function to remove a token id from the list of a give address .
internal function to mint a new token .
external function to mint a new token .
internal function to burn a specific token .
external function to burn a specific token .
transfers the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
allows to transfer a token to another owner .
sets the specified token a user 's active hero .
queries list of tokens own by a specific address .
gets the genome of the active hero .
increments uniqueness index .
increments lasttokenid .
allows ( re - ) set the uniqueness index .
allows ( re - ) set lasttokenid .
allows set hero data for a hero .
allows set hero genome .
allows the admin to forcefully transfer a token from one address to another .
external function to set the token uri prefix for all tokens .
modifier for owner function .
activates vote .
deactivates vote .
sqrt root func .
nom token emission function .
pays . 555666xx .
pays . 555666xx .
pays random number from epoch_fund .
pays amount of money to to account from epoch_fund .
withdraw amount from team_fund to give address .
withdraw amount from redenom_dao_fund to give address .
modifier for admin function .
run this on every change of user balance .
adding bite to bitmask check if already set .
removes bite from bitmask check if already set .
checks whether some bite be present in bm .
refresh user acc .
returns current multipl .
removes burn value 123 - 120 .
returns rest .
new epoch can be start if : - current round be 9 - curen epoch 10 .
erc20 totalsupply : .
erc20 balanceof : get the token balance for account tokenowner .
erc20 allowance : .
erc20 transfer : .
erc20 approve : .
erc20 transferfrom : .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
voter requirements : .
add prop .
turns project on and off .
returns proj .
returns proj .
vote for proj .
shows currently win proj .
vesting initialization function .
setup array with vest stag date and percentages .
the initialization method .
internal funciton that help to check if the pre-sale be active .
this function different conversion rate while in presale .
it throw an exception if the transaction do not meet the precondition .
internal function that set whitelist status in batch .
public function that allow the owner to add multiple entries to whitelist .
public function that allow the owner to remove multiple entries from the whitelist ( i . e .
initialization function .
access control modifier that allow only whitelisted address to call the method .
methods allow the owner to change whitelist component address .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to mint tokens .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
whether crowdsale goal be reach or not .
pay commission by raise wei amount of crowdsale .
refund crowdsale tokens to refund wallet .
enable refund of crowdsale .
finalize a crowdsale .
"pause crowdsale , which will set the crowdsale state to refunding ."
claim crowdsale raise wei .
"claim token , which will transfer bought token amount to buyer ."
"claim refund , which will transfer refunded wei amount back to buyer ."
"note no default constructor be require , but remember to set commission wallet before operate ."
create a crowdsale .
buy token with wei .
"rember 18 zero for decimals of eth ( wei ) , and 2 zero for nvt ."
stop ico .
transfer token for a specified address .
function that be call when transaction target be a contract .
checks whether an address be whitelisted in the competition contract and competition be active .
this be the core logic for any buy / reload that happen while a round be live .
end the round .
distribute eth base on fee to gen and pot .
withdraws all of your earn .
transfers the tokens from contract balance of obl 's .
"verify , calculate and send tokens to beneficiary ."
"verify the ( sender address , amount of ethers ) ."
calculate amount of tokens give weiamount .
calculate amount of tokens give weiamount .
call erc20 's transfer function to send tokens to beneficiary .
deliver tokens to the beneficiary .
forward donations to the owner .
any call to the contract not from the creator 's account will be throw .
allows the current owner to transfer control of the contract to a new owner .
transfer tokens from one address to another .
invokes burn function .
function to mint tokens .
stop mint function .
function to check the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
transferring ownership from this contract also destroy the contract .
this be the core logic for any buy / reload that happen while a round be live .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
end the round .
"distribute eth base on fee to com , aff , and p3d ."
revokes a prior confirmation of the give operation .
owner can transfer out any accidentally send erc20 tokens .
total supply .
transfer tokens from the from account to the to account .
"the number of tokens that be burn , unissued , or otherwise not in circulation ."
the virtual reserve balance set here be add on to the actual ethereum balance of this contract when calculate price for buy / sell .
"audit the reserve balance , in the base token and in ether return : token balance , ether balance - ledger ."
get the buy price base on the order size .
get the sell price base on the order size .
buy tokens with ether .
sell tokens for ether .
variant of sell for one step order .
"withdraw accumulate fee , without disturb the core reserve ."
end the round .
convert all incoming ethereum to key .
it be possible that fund be send to this address before the contract be deploy .
extend parent behavior require beneficiary to be in whitelist .
sets the date that the tokens become transferable .
enables the token transfer .
function to mint tokens .
transfer token for a specified address .
transfer tokens from one address to another .
garantee that contract have the desire satge .
execute automatically transition between different stages base on time only .
sets the initial date and token .
returns de eth cap of the current currentstage .
returns de eth cap of the current currentstage .
returns the sale status .
checks and distribute the remain tokens .
finalizes the bonussale and set up the break and public sales .
finalizes the public sale .
validation of an incoming purchase .
override to extend the way in which ether be convert to tokens .
validation of an executed purchase .
"override for extensions that require an internal state to check for validity ( current user contributions , etc . ) ."
determines how eth be store / forward on purchase .
modifier to ensure generatetokens ( ) be only ran once by the constructor .
queries the total supply of tokens at a specific block number will return 0 if call before the creationblock value .
the generatetokens function will generate the initial supply of tokens .
enable tokens transfer to allow tokens to be trade .
internal helper function .
function use to update the balance map and the totalsupplyhistory .
function to check if address be a contract .
this method can be use by the controller to extract other tokens accidentally send to this contract .
erc token standard 20 interface methods for full compliance https : / / github . com / ethereum / eips / blob / master / eips / eip-20 - token-standard . md .
once constructor assign control to 0x0 the contract can not be change .
approveandcall allow users to use their tokens to interact with contract in a single function call msg . sender .
query the balance of an address at a specific block number .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
return time leave .
"distribute eth base on fee to com , aff , and p3d ."
send tokens amount of tokens from address from to address to .
modifier to scope access to price keep oracles ( script poll exchange ) / / revert if call not by oracle .
converts eth ( wei ) to usd cents .
converts usd cents to wei .
sets current eth price in cents .
add oracle role to an address .
revoke oracle role from an address .
increase the amount of tokens that an owner allow to a spender .
set the address to operator .
remove the address from operator .
it be possible to hand over owner s authority .
it be possible to hand over centerbanker s authority .
it be possible to hand over superowner s authority .
it be possible to hand over hiddenowner s authority .
block trade .
unlock limit for trade .
check a certain node be in a blacklist .
process blacklist .
process unblacklisting .
transfer all ether hold by the contract to the owner .
register the address a a cex address .
remove authorities of the address use in exchange .
register the address a a superinvestor address .
"after one month , the amount will be 1 , which mean 10 of the coin can be use ."
check the late limit .
"in case of investor transfer , value will be limit by timelock ."
"when the transfer function be run , there be two different type ; transfer from superinvestors to investor and to non-investors ."
"if investor be from in transforfrom , value will be limit by timelock ."
"if from be superinvestor in transforfrom , the function can t be use because of limit in approve ."
onlyowner be available and the amount of coin can be deposit in centerbanker .
only centerbanker be available and withdrawal of the amount of coin to owner be possible .
low level token purchase * * * do not override .
validation of an incoming purchase .
owner can set multisig wallet .
assign tokens to investor with locking period .
for wallet angel sales and pe sales .
for wallet founding investor and initiator team .
dev - use this to add admins .
dev - use this to remove admins .
"administrators can : - change the name of the contract - change the name of the token - change the pos difficulty ( how many tokens it cost to hold a masternode , in case it get crazy high later ) they can not : - take fund - disable withdrawals - kill the contract - change the price of tokens ."
return list of players .
return max entries .
return max entries .
return ticket leave in the contract .
get total lottery amount .
get total lottery amount .
calculating hash with a oracilize seed ( wolfram ) .
return list of players .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
modifier to make a function callable only when the contract be not terminate .
"call by the owner to pause , trigger stop state ."
withdraw ether and delete the htlc swap .
batch exection of regulartransfer ( ) function .
"reclaim an expired , non-empty swap into a multisig ."
batch exection of reclaimexpiredswaps ( ) function .
send ether out of this contract to multisig owner and update or delete entry in multisig map .
initialise and reparametrize multisig .
inititate / extend multisig unlocktime and / or initiate / refund multisig deposit .
withdraw ether from the multisig .
withdraw ether and delete the htlc swap .
first or second stage of atomic swap .
batch execution of convertintohtlc ( ) function .
end the round .
"internal transfer , only can be call by this contract ."
set allowance for other address and notify .
decrease the amount of tokens that an owner allow to a spender .
transfer tokens from one address to another .
"internal transfer , only can be call by this contract ."
create mintedamount tokens and send it to target .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
change the reciever of the tokens .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
what be the length of a particular growchain ? .
tenderly remove hand from growchain and place on another growchain .
perform the inevitable action which cause release of that which each growchain be build to deliver .
"allow splooger to cause a payload release from your growchain , multiple time , up to the point at which no further release be possible . ."
internal privats .
"distribute eth base on fee to com , aff , and p3d ."
end the round .
"distribute eth base on fee to com , aff , and p3d ."
fix for the erc20 short address attack http : / / vessenes . com / the-erc20 - short-address - attack-explained .
throws if call by any account other than the controller .
function to mint tokens .
function to stop mint new tokens .
function that be call when transaction target be a contract .
owner can update token information here .
function to access decimals of token .
function that be call when a user or another contract want to transfer fund .
validate certification to a student .
validate ipfs hash alone of a student .
validate content hash alone of a student .
validate transcript hash alone of a student .
get certification document count .
get certification document from doctype .
may fail due to gas exceptions .
add certification to a student .
validate certification to a student .
validate ipfs hash alone of a student .
validate content hash alone of a student .
validate content hash alone of a student .
add certification to a student .
count current sale 's stag .
set softcap .
set start date .
set period of sale .
add stage to sale .
remove stage from sale .
updates stage .
insert stage .
delete all stag .
calculate last sale date .
return index of current stage .
set mytc token .
set minimum investement threshold .
set master wallet address .
set slave wallet address .
set slave wallet percentage .
set direct mint agent .
mint directly from network .
split investment into master and slave wallets for security reason .
calculates and record contributions .
mint tokens .
function to retrieve and transfer back external tokens .
function to refund fund if softcap be not reach and sale period be over .
transfer for unlocked account .
transfer from for unlocked account .
lock an account for give a number of days .
set tge to pass agent when sale be finish .
set tge a new sale agent when sale be finish .
set lock period in days for team 's wallet .
set percentage for team 's wallet .
set percentage for bounty 's wallet .
set percentage for reserved wallet .
set max number of tokens to ever mint .
set address for team 's wallet .
set address for bountys 's wallet .
set address for reserved wallet .
mints remain tokens and finish mint when sale be successful .
"internal transfer , only can be call by this contract ."
extend parent behavior require beneficiary to be in whitelist .
overrides parent method take into account variable rate .
anybody can burn a specific amount of their tokens .
owner can burn a specific amount of tokens of other token holders .
accepts ether and create new tge tokens .
ends the fund period and send the eth home .
increase the amount of tokens that an owner allow to a spender .
function buy tokens from investors and burn it .
function calculate dividends and store result in map divmap .
function pay dividends to investors .
function set upper limit to receive fund value enter in whole ether .
enter amount in whole ether .
function sale token to investor .
disable if enable .
enable if diabled .
retruns true if sale be currently active .
function kill dividend contract and withdraw all fund to wallet .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer token for a specified address .
owner send tokens to admin .
overrides erc20 transferfrom function with modifier that prevent the ability to transfer tokens until after transfer have be enable .
overrides the burn function so that it can not be call until after transfer have be enable .
function to kill the token .
transfer tokens from one address to another .
burns a specific amount of tokens .
the list address be not valid recipients of tokens .
enables the ability of anyone to transfer their tokens .
disable the token transfer .
sell amount tokens to contract .
allows the current owner to transfer control of the contract to a newowner .
float fix point operations .
public function .
private function .
pay out the token balance if the king become the king twice in a row .
set the king to the ethereum address which be encode a 160 bits of the 256 bite mining nonce .
buy key .
withdraw winned pot .
bulk mint tokens ( different amount ) .
bulk send tokens ( same amount ) .
bulk send tokens ( different amount ) .
allows to enable or dissable token transfer .
finish token mint .
transfers token ownership to this contract owner .
"finish token mint , enable transfer and transfer token ownership ."
allows transfer token ownership back to distribution contract .
throws if call by other account than broker or client .
"allows broker and client to cancel contract , when both have cancel , status be update and contract become upgradeable ."
"creates policy , transfer ownership to msg . sender , ."
buy tokens from contract by send ether .
terminate contract and refund to owner .
transfer tokens .
allow users to buy tokens for newbuyprice eth and sell tokens for newsellprice eth .
destroy tokens from other ccount .
"internal transfer , only can be call by this contract ."
everyone be able to withdraw his own money if no softcap .
constructor function .
"allows the pendingowner address to finalize the transfer , as long a it be call within the specified start and end time ."
send tokens to other multi address in one function .
constructor function .
"internal transfer , only can be call by this contract ."
return the address currently assign ownership of a give pet .
purchase egg .
pet creation .
transfer pet function .
grade calculation base on parrot quality .
function for the opportunity to gift parrot before the start of the game .
check if a give address be the current owner of a particular pet .
purchase a parrot .
accept only round eth purchase .
override tokens amount a token have no decimal point and _rate not use .
transfer tokens .
transfer tokens from other address .
send eth to xinxian team .
allocate tokens to pre-sell address .
"set the token 's tokenexchangerate , ."
increase the token 's supply .
decrease the token 's supply .
turn on the fund state .
turn off the fund state .
set a new contract for recieve the tokens ( for update contract ) .
set a new owner .
send the tokens to new contract .
"receive approval from an erc20 token contract , take a record ."
send tokens to other multi address in one function .
throws if call by any account that 's not whitelisted .
add an address to the whitelist .
getter to determine if address be in whitelist .
remove an address from the whitelist .
checks weiraised value and return bonus due to the percentage of that value to the cap .
validation of an incoming purchase .
overrides delivery by mint tokens upon purchase .
override to extend the way in which ether be convert to tokens .
called after crowdsale finish .
"multiplies two number , throw on overflow ."
returns the address of the owner of the nft .
throws unless msg . sender .
"this work identically to the other function with an extra data parameter , except this function just set data to ."
the caller be responsible to confirm that _to be capable of receive nfts or else they maybe be permanently lose .
the zero address indicate there be no approved address .
this work even if sender do n't own any tokens at the time .
throws if _tokenid be not a valid nft .
checks if _operator be an approved operator for _owner .
actually perform the safetransferfrom .
does no check .
"integer division of two number , truncate the quotient ."
this be a private function which should be call from user-implemented external mint function .
clears the current approval of a give nft id .
use and override this function with caution .
this be a private function which should be call from user-implemented external mint function .
this be a private function which should be call from user-implemented external burn function .
use and override this function with caution .
use and override this function with caution .
returns the count of all exist nftokens .
"substracts two number , throw on overflow ( i . e ."
returns nft id by it index .
return the n-th nft id from a list of owner 's tokens .
allows the current owner to transfer control of the contract to a newowner .
this be a internal function which should be call from user-implemented external burn function .
this be a internal function which should be call from user-implemented external function .
returns a descriptive name for a collection of nftokens .
returns an abbreviated name for nftokens .
a distinct uri ( rfc 3986 ) for a give nft .
mints a new nft .
"adds two number , throw on overflow ."
removes a nft from owner .
returns whether the target address be a contract .
function to check which interfaces be suported by this contract .
guarantees that the msg . sender .
guarantees that the msg . sender .
guarantees that _tokenid be a valid token .
returns the number of nfts own by _owner .
"distribute eth base on fee to com , aff , and p3d ."
approves and then call the receive contract .
do not send 1 mil ether to this function it be strictly for test purpose .
signature methods .
withdraw asset erc20 token .
withdraw all eth from this contract .
function to easily check this contract balance .
primary function ; call with ether send to contract .
withdraws all eth deposit by the sender .
allow anyone to contribute to the buy executer 's reward .
"buys tokens in the crowdsale and reward the caller , callable by anyone ."
"a helper function for the default function , allow contract to interact ."
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
"the following function have be write by alex beregszaszi ( axic ) , use it under the term of the mit license ."
allow users to withdraw balance .
check if transfer should stop .
check to see if there be at least _value leave from the daily limit today .
fix for the erc20 short address attack .
a helper to notify if overflow occur for addition .
a helper to notify if overflow occur for multiplication .
kill the contract send everything to _to .
activates emergency stop for token .
outside-visible transact entry point .
confirm a transaction through just the hash .
a helper to notify if overflow occur .
a helper to notify if overflow occur for multiplication .
a helper to notify if underflow occur for subtraction .
the function currentswaprate ( ) return the current exchange rate between fyn tokens and ether during the token swap period .
the function minttokens be only usable by the choose wallet contract to mint a number of tokens proportional to the amount of ether send to the wallet contract .
the function disabletokenswaplock ( ) be call by the wallet contract once the token swap have reach it end condition .
"once activate , a new token contract will need to be create , mirror the current token hold ."
"buys tokens in the crowdsale , callable by anyone ."
refund invoice .
send coin .
allow message contract to spend some tokens in your behalf .
platform settlement .
mint support uint public max_creation_rate_per_second ; / / maximum token creation rate per second address public minter_address ; / / has permission to mint .
whether the authorization be successful or not .
whether the deauthorization be successful or not .
authorization_status for platform settlement .
migration support address migrationmaster ; .
disabling fairsale protection .
finalizing the crowdsale .
minting support - rewarding growth tokens for value-addeddata suppliers .
send coin .
whether the transfer be successful or not .
allow developer to unlock allocate tokens by transfer them to developer 's address on vest schedule of vested 100 on 1 year ) .
accepts eth and create wolk .
the value of the message must be sufficiently large to not be consider dust .
finalizing the crowdsale .
platform settlement .
mint new tokens .
whether the transfer be successful or not .
total amount of tokens .
the balance .
whether the approval be successful or not .
authorization_status for platform settlement .
amount of remain tokens allow to spend .
mint support uint public max_creation_rate_per_second ; / / maximum token creation rate per second address public minter_address ; / / has permission to mint migration support address migrationmaster ; .
accepts eth and create wolk .
the value of the message must be sufficiently large to not be consider dust .
disabling fairsale protection .
platform settlement .
mint support uint public max_creation_rate_per_second ; / / maximum token creation rate per second address public minter_address ; / / has permission to mint migration support address migrationmaster ; .
transfer the balance from owner 's account to another account .
spender of tokens transfer an amount of tokens from the token owner 's balance to another account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
the 160 lsb be the address of the balance .
"after seal , no more fill be possible ."
returns minimal amount to wager to return a profit in case of max win .
platform settlement .
mint support uint public max_creation_rate_per_second ; / / maximum token creation rate per second address public minter_address ; / / has permission to mint migration support address migrationmaster ; .
admin feature .
1 ether 1 spot .
dev function for withdraw any amount from amountraised ( active only if minimumtarget be reach ) .
dev function for withdraw resamount ( active only if minimumtarget be reach ) .
return your fund after deadline if minimumtarget be not reach ( active if crowdsale close ) .
geter function for variables .
set price of ntry correspond to ether .
add 125 bonus .
add 100 bonus .
add 62 . 5 .
in case of success fund will be transfer to beneficiary otherwise contributors can safely withdraw their fund .
withdraw remain balance to manually return where contract send have fail .
users can claim eth by themself if they want to in instance of eth faliure .
only owner methods .
owner can issue new tokens in token contract .
owner can return eth for multiple users in one call .
owner set new address of cofoundittoken .
owner can claim reserve tokens on the end of crowsale .
owner can remove allowance of designated presale contributor .
set token contract where mint will be do ( tokens will be issue ) .
withdraw fund from contract .
public interface .
only owner .
dev function for withdraw any amount from raise fund ( activate only if minimumtarget be reach ) .
"dev function for withdraw amount , which be reserve by minimumtarget ( activate only if minimumtarget be reach ) ."
return your fund after deadline if minimumtarget be not reach ( activate if crowdsale close ) .
/ / function betoncolumn / / bet type : column / / input : 0 for first column / / input : 1 for second column / / input : 2 for third column .
function to spin callable no eth allow .
check bets functions private .
"function solve bet once result be determine : send to winner , add loss to profit ."
checkbeton number ( input ) bet type : number input : choose number .
"checkbet on oddeven bet type : parity input : 0 for even , 1 for odd ."
"checkbet on lowhigh bet type : lowhigh input : 0 low , 1 high ."
"checkbet on dozen bet type : dozen input : 0 first , 1 second , 2 third ."
"checkbet on column bet type : column input : 0 first , 1 second , 2 third ."
change some settings within safety bound .
guarantees that gamble be under max bet and above min .
function record bet call by all others bet function .
bet on number .
function betoncolor bet type : color input : 0 for red input : 1 for black .
function betonlow_high bet type : lowhigh input : 0 for low input : 1 for low .
function betonoddeven bet type : parity input : 0 for even input : 1 for odd .
function betondozen / / bet type : dozen / / input : 0 for first dozen / / input : 1 for second dozen / / input : 2 for third dozen .
proof be currently a placeholder for when associate proof for addresstype be add .
accepts ether and create new bat tokens .
ends the fund period and send the eth home .
allows contributors to recover their ether in the case of a failed fund campaign .
throw if at stage other than current stage .
transfer appropriate percentage of raise amount to the company address .
refund in the case of an unsuccessful crowdsale .
propose the transfer of the token contract ownership to _dcorpaddress .
allows drp holders to vote on the poposed transfer of ownership .
calculates the vote and if the majority weigt approve the proposal the transfer of ownership be execute .
throw if at stage other than current stage .
throw if sender be not beneficiary .
throw if sender have a dcp balance of zero .
throw if the current transfer proposal 's deadline be in the past .
throw if the current transfer proposal 's deadline be in the future .
the amount in drp .
function to end the crowdsale by set the stage to ended .
generates a random number from 0 to max base on the last block hash .
payout any wager associate with the send address .
internal implementation of payout ( ) .
allow the owner to set maxwagerwei .
allow the owner to set waittimeblocks .
allow the owner to set payoutodds .
allow the owner to cash out the hold of this contract .
allow the owner to payout outstanding wager on others ' behalf .
make a wager .
view your wager .
view the wager for a give address .
generates a random number from 0 to max base on the last block hash .
internal implementation of getwager ( ) .
view your wager .
view your wager .
condition to be creator address to run some function .
condition for method to be execute only by bonus owner .
"availability for creator address to set when bonus period end , but not later then current end moment ."
bonus creator can withdraw their wei after bonus period end .
register investor account .
bonus owner can transfer their bonus wei to any investor account before bonus period end .
add information about bonus wei ownership .
condition to be creator address to run some function .
finish bonus if need ( if bonus system not efficient ) .
transfer tokens to another address ( owner ) .
set of availability of tokens transference for third party .
approve transference of tokens for third party .
condition to be allow address to run some function .
set address for fundaria source of ether .
expand allow address with new one .
remove allow address .
increase token balance of some address .
limit total tokens can be supply .
set course .
token for wei accord to course .
wei for token accord to course .
send coin .
a contract attempt to get the coin .
allows the owner to mint more tokens .
interface marker .
allow the token holder to transform all of their tokens to a new contract .
set an transform agent that handle .
get the state of the token transform .
crowdsale contract allow to mint tokens .
returns bonuses base on the current totalsupply in percents .
main function to buy tokens to specify address .
stops the crowdsale forever .
return current vote result for give address in percent .
get total count tokens ( to calculate profit for one token ) .
get holders address to make payment each of them .
"return vote remain time ( hours , minutes ) ."
participate to a presale .
load fund to the crowdsale for a single investor .
load fund to the crowdsale for all investor .
ico never happen .
set the target crowdsale where we will move presale fund when the crowdsale open .
allow to spend .
block account .
unblock account .
check be account blocked .
override transfer methods to throw on blocked account .
finish the crowdsale and withdraw fund .
block tokens of an voter .
unblock tokens of an voter .
create new proposal .
vote for an proposal .
finish vote on an proposal .
execute pass proposal .
modifier that allow only congress members to vote and create new proposals .
proposal-related function calculate hash of an proposal .
post crowdsale distribution process .
triggersoftcap trigger the early close time .
hook in to provide the soft cap time bomb .
get minimum fund goal in wei .
true if the crowdsale have raise enough money to be a succes .
reset hard cap .
called from invest ( ) to confirm if the curret investment do not break our cap rule .
true we have reach our soft cap .
only permit call by the reverse registrar .
sets the name for a node .
transfers ownership of the reverse ens record associate with the call account .
sets the name ( ) record for the reverse ens record associate with the call account .
returns the node hash for a give account 's reverse record .
an optimised function to compute the sha3 of the lower-case hexadecimal representation of an ethereum address .
allow address to do early participation .
participate to a presale .
load fund to the crowdsale for all investors .
how may tokens each investor get .
claim n buy tokens to the investor a the msg sender .
ico never happen .
determine whether transfer can be make .
unlock transfer .
"create tokens , only usable while saleactive ."
transfer tokens only allow after sale have end .
transfer tokens only allow after sale have end .
determine the low rate to acquire tokens give an amount of donated ethers .
"determine how many tokens we can get from each price tier , in case a donation 's amount overlaps multiple price tiers ."
"close the crowdsale manually and unlock the tokens this will only be successful if not already execute , if endblock have be reach , or if the cap have be reach ."
drain tokens that be send here by mistake because people will .
withdraw donation .
owner can recover anything .
atomic increment of approved spend .
atomic decrement of approved spend .
private and constant function add a player to the array of participants .
use to take create a reward from the fund of someone who have not idle in the last 10 minutes .
update the balance and update the total invest amount .
create a new reward that can be claim by users .
function call to forbid a player from claim all past reward .
function to compute the next reward of a player .
function to compute the lost amount .
public function to be call every day .
function call when a user want to invest in the contract after call this function you can not claim past reward .
function call when a user want to divest .
claim the reward .
send coin .
"this be merely a shortcut for sha3 ( owner , indexname ) ."
retrieve the node id of the previous node in the tree .
updates or inserts the id into the index at it appropriate location base on the value provide .
checks whether a node for the give unique identifier exist within the give index .
remove the node for the give unique identifier from the index .
query the index for the edge-most node that satisfy the give query .
"computes the id for a grove index which be sha3 ( owner , indexname ) ."
"computes the id for a node in a give grove index which be sha3 ( indexid , id ) ."
retrieves the name of an index .
retrieves the id of the root node for this index .
retrieve the unique identifier this node represent .
"this be merely a shortcut for sha3 ( indexid , id ) ."
retrieve the index id for the node .
retrieve the value of the node .
retrieve the height of the node .
retrieve the parent id of the node .
retrieve the leave child id of the node .
retrieve the right child id of the node .
retrieve the id of the node that come immediately before this one .
retrieve the id of the node that come immediately after this one .
update or insert a data element represent by the unique identifier id into the index .
query whether a node exist within the specified index for the unique identifier .
retrieve the unique identifier for the node .
remove the index node for the give unique identifier .
query the index for the edge-most node that satisfy the give query .
retrieve the index id for the node .
retrieve the value for the node .
retrieve the height of the node .
retrieve the parent id of the node .
retrieve the leave child id of the node .
retrieve the right child id of the node .
retrieve the node id of the next node in the tree .
remove the node for the give unique identifier from the index .
low level method for add fund to an account .
function wrapper around the _deposit event so that it can be use by contract .
safe function for deposit fund .
function wrapper around the _withdrawal event so that it can be use by contract .
function wrapper around the _insufficientfunds event so that it can be use by contract .
low level method for remove fund from an account .
safe function for withdraw fund .
the maximum allowed claim amount slowly rise across a window of block claim_growth_window prior to the call .
data accessor function .
claim api helpers .
address : 0xe54d323f9ef17c1f0dede47ecc86a9718fe5ea34 .
call scheduling .
default payment and donation value .
next call api .
updates or inserts the id into the index at it appropriate location base on the value provide .
make an investment .
preallocate tokens for the early investors .
modify trade behavior .
allow owner to remove trade token .
allow owner to remove arbitrary tokens include just in case contract receive wrong token .
allow owner to remove eth .
user buy token with eth .
execute a transaction use money from this wallet .
execute a transaction use money from this wallet .
transfer share to another address see : https : / / github . com / ethereum / eips / issue / 20 .
allow another contract to spend some share in your behalf ( shareholder call this ) .
"this function can be call from another contract , after it have allowance to transfer share in behalf of shareholder ."
"useful for dapp , to get array use loop ."
"not from wallet ( need msg . sender ) , ."
to count vote this transaction should be start manually from _any_ ethereum address after deadline .
approve and then comunicate the approve contract in a single tx .
contenttype the content type of the return value .
sets the abi associate with an ens node .
calculate bounty value by reduction equation .
crowdfunding run check .
crowdfundung failure check .
crowdfunding success check .
withdrawal balance on successfull finish .
refund donations when no minimal value achieve .
disable receive another tokens .
run script creation contract .
receive approve erc20 tokens .
"cancel presale contract by owner , bounty refund to owner ."
run script creation contract .
function for transer the coin from one address to another .
pay on a behalf of an address .
ensure that the result of add x and y be accurate .
simple function to deposit more eth to double donations .
ensure that the result of subtract y from x be accurate .
ensure that the result of multiply x and y be accurate .
"ensure that the result of divide x and y be accurate note : solidity now throw on division by zero , so a check be not need ."
return the large of two 64 bite integers .
return the low of two value .
return the large of two value .
owner be the only address that can call a function with this modifier ; the function body be insert where the special symbol _ ; in the definition of a modifier appear .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
data be an array of uints .
function that be call when a user or another contract want to transfer fund .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
assemble the give address bytecode .
override transfer methods to throw on blocked account .
calculate the current price for buy in amount .
atomic increment of approved spend .
atomic decrement of approved spend .
"jackpot condition , happen when today 's total bid be more than or equal to current pool * condition percent ."
reward all participants .
change minimum bid a more bidders enter .
in case we run out of gas .
change bid multiplier to manage volume .
change prejackpot cap to prevent game rig .
clear fee to etherspherehost .
manual claim .
returns token price constant .
regbase compliant changeresource ( ) to restrict caller to trustee rather than owner .
erc20 api function .
to transfer tokens .
to transfer tokens by proxy .
to approve a proxy for token transfer .
return the alloance of a proxy .
processes token transfer and subsequent change in vote power .
security functions .
release the contract from a panic after the panic period have expire .
queues a pending transaction .
execute the first tx in the pendingtxs queue .
trustee function .
for the trustee to commit an amount from the fund balance a a dividend .
for the trustee to add an address a a holder .
creates holder account .
for the trustee to allow or disallow payments make to the bakt .
for the trustee to revoke an early issue offer .
change the owner to _owner .
holder functions .
returns the holder 's withdrawable balance of ether .
for a holder to initiate a withdrawal of their ether balance .
to close a holder account .
token creation / destruction functions .
for holders to destroy tokens in return for ether during a redeeming round .
dividend functions .
ballot function .
loops through holders to find the holder with most vote and declare them to be the executive ; .
pulls vote from the preferred candidate require before any adjustments to tokenbalance or vote preference .
places vote with preferred candidate require after any adjustments to tokenbalance or vote preference .
blocks if reentry mutex or panic be true .
blocks if '_addr ' be not a holder .
block non-trustee holders .
public functions .
send contract balance to owner .
one time programable shoot to set the panic and pending periods .
returns calculate fund balance .
administrative function change owner : .
set managers .
remove managers .
set new price for tokens : .
buy tokens : if you get message : it seem this transaction will fail .
function for eth .
crowdfunding run check .
in between the sale and the network .
crowdfunding run check .
bet on number .
bet on color .
returns a pseudo random number .
function to recover the fund on the contract .
do withdrawal .
send _value token to _to from msg . sender .
withdrawalcomplete be call after the wait period .
"reward be base on the amount hold , relative to total supply of tokens ."
"quick withdrawal , need to send ether to this function for the fee ."
remove congress member .
change rule of vote .
create a new proposal .
check if a proposal code match .
proposal vote .
try to execute proposal .
count of proposals in archive .
modifier that allow only shareholders to vote and create new proposals .
append new congress member .
withdraw function send all the fund to the wallet if condition be correct .
add cantransfer modifier before allow transfer and transferfrom to go through .
not allow token grant .
send _amount tokens to _to from _from on the condition it be approve by _from .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
deploy ant be call only once to setup all the need contract .
whether the needed account have activate the sale .
get the price for a ant token at any give block number .
get what the stage be for a give blocknumber .
get what the price be for a give stage .
aragon dev need to make initial token allocations for presale partner .
dopayment ( ) be an internal function that send the ether that this contract receive to the aragondevmultisig and create tokens in the address of the .
function to stop sale for an emergency .
function to restart stopped sale .
finalizes sale generate the tokens for aragon dev .
deploy aragon network contract .
line be actually 10x the line to allow for half-point spread .
"return an array of structs be not allow , so it time for a hackjob that return a raw bytes dump of the combine home and away bid clients will have to parse the hex dump to get the bid out ."
"for function throw a stack too deep error , this helper will free up 2 local variable spot ."
"for over / under bid , the home boolean be equivalent to the over ."
run script creation contract .
this be the way to withdraw money from token .
this be the way to refill your token balance by ethers .
run script creation contract .
run script creation contract .
run script creation contract .
make an investment .
true if this resolver have a record of the provided type on the provided node .
true if the contract implement the requested interface .
sets the address associate with an ens node .
the associated content hash .
sets the content hash associate with an ens node .
this contract only define a modifier and a few useful function .
"this be the function that make the list of transfer and various check around that list , it be a little tricky , the data input be structure with the amount and the ( receive ) addr combine a one long number and then this number be deconstruct in this function to save gas and reduce the number of 0 's that be need to be store on the blockchain ."
this function actually make the send and track the amount of gas use if it take more gas than be send with the transaction then this function will need to be call a few time until .
helper function .
client 's capital .
deposit ether on the client 's account .
"true if ether be successfully withdraw , false otherwise ."
"true if ether be successfully withdraw , false otherwise ."
"true if fee and unaccounted ether be successfully withdraw , false otherwise ."
terminate account and send all it balance to advisor .
"update capital , i . e ."
_a * _b / 2 128 .
( _a / 2 128 ) _b * 2 128 .
function to change multisig address .
returns current bonus .
returns bonus for the specific moment .
issues tokens for users who make btc purchase .
crowdfunding contract issue new tokens for address .
function to change address that be allow to do emission .
function to change founder address .
transfer _value gnt tokens from sender 's account msg . sender .
set address of migration target contract and enable migration process .
create tokens when fund be active .
finalize crowdfunding .
allow developer to unlock allocate tokens by transfer them from gntallocation to developer 's address .
inserts to keep array sort ( assume input array be sort ) .
change some settings within safety bound .
/ / function betoncolumn / / bet type : column / / input : 0 for first column / / input : 1 for second column / / input : 2 for third column .
guarantees that gamble be under max bet and above min .
check number of bet in block ( to prevent miner cheat ) .
function record bet call by all others bet function .
bet on number .
function betoncolor bet type : color input : 0 for red input : 1 for black .
function betonlow_high bet type : lowhigh input : 0 for low input : 1 for low .
function betonoddeven bet type : parity input : 0 for even input : 1 for odd .
function betondozen / / bet type : dozen / / input : 0 for first dozen / / input : 1 for second dozen / / input : 2 for third dozen .
function ca n't have ether .
"add a registrant , only registrar allow public_function ."
"edit a registrant , only registrar allow public_function ."
"set new registrar address , only registrar allow public_function ."
get if a regsitrant be active or not .
get all the registrants .
desctruct the smart contract .
transfer share to another adress see : https : / / github . com / ethereum / eips / issue / 20 .
"this function can be call from another contract , after it have allowance to transfer share in behalf of shareholder ."
pass 0x0 to cancel .
pass 0x0 to cancel .
pass 0x0 to cancel .
cost 2 . 4m .
true if the contract implement the requested interface .
sets the address associate with an ens node .
sets the content hash associate with an ens node .
sets the abi associate with an ens node .
sets the secp256k1 public key associate with an ens node .
allow the token holder to upgrade some of their tokens to a new contract .
change the upgrade master .
rebuild the previous invest data back to the crowdsale .
rebuild the previous invest data and do a token reissuance .
"tuple ( time , price ) ."
type description .
the current price or 0 if we be outside milestone period .
calculate the current price for buy in amount .
function to invest in the crowdsale only callable if the crowdsale start and have n't be close already and the maxgoal be n't reach yet .
look up the current token price .
check if the goal or time limit have be reach and end the campaign .
allow the funders to withdraw their fund if the goal have not be reach .
"this function register a new client , and can be use to add fund or change ratio ."
this function be use to stop use the service .
this function be use to change the phone number in the service .
used to charge a client .
"use to charge for a single time period , in case client doesnt have enough dosh to pay all fee ."
this function be use to withdraw ether .
extra security measure to save fund in case of critical error or attack .
notpendingwithdrawal modifier guard the function from execute when a withdrawal have be request and be currently pending .
do withdrawal .
send _value token to _to from _from on the condition it be approve by _from .
withdrawalinitiate initiate the withdrawal by go into a waiting period .
withdrawalcomplete be call after the wait period .
this be modifier ( a special function ) which will execute before the function execution on which it apply .
here be the example of modifier this function code replace _ ; statement of modifier .
function for transer the coin from one address to another .
erc-20 approves and then call the receive contract .
"quick withdrawal , need to send ether to this function for the fee ."
public function player submit bet only if game be active bet be valid can query oraclize and set player vars .
semi-public function - only oraclize can call .
public function player submit bet only if game be active bet be valid can query oraclize and set player vars .
only owner adjust contract balance variable ( only use for max profit calc ) .
only owner address can suicide - emergency .
public function player submit bet only if game be active bet be valid can query oraclize and set player vars .
semi-public function - only oraclize can call .
return an arbiter token from an hgame .
"clean up game , set to inactive , refund any balance call by housekeep only ."
call by arbiter when winner be decide * pass in high num for winnerbal for tie game .
"handle a bet make by a player , validate the player and game add to players balance ."
return if arb token exist .
call by ico token contract .
return arbiter game stats .
"scan for a game 10 minutes old if find abort the game , cause fund to be return ."
return game info .
return arbtoken and low bytes from an hgame .
get operation gas amount .
"suicide the contract , not call for release ."
set operation gas amount for forwading operations .
set a micheivous arbiter to lock .
flush the house fee whenever command to .
set the token partner .
"check active game and valid player , return player index ."
"check valid player , return player index ."
check the arbiter be valid by compare token .
check the arbiter be valid without compare token .
check if arbiter be lock out .
return if game be active .
"register game arbiter , max players of 5 , pass in exact registration fee ."
start game .
do withdrawal .
erc-20 approves and then call the receive contract .
send _value token to _to from _from on the condition it be approve by _from .
withdrawalcomplete be call after the wait period .
"reward be base on the amount hold , relative to total supply of tokens ."
calculate the fee for quick withdrawal .
"quick withdrawal , need to send ether to this function for the fee ."
throw an exception if the amount be not equal .
set house cost to call oraclize query .
public function player submit bet only if game be active bet be valid can query oraclize and set player vars .
public function player submit bet only if game be active bet be valid can query oraclize and set player vars .
public function player submit bet only if game be active bet be valid can query oraclize and set player vars .
public function player submit bet only if game be active bet be valid can query oraclize and set player vars .
public function player submit bet only if game be active bet be valid can query oraclize and set player vars .
semi-public function - only oraclize can call .
only owner address can transfer ether .
public function player submit bet only if game be active bet be valid can query oraclize and set player vars .
public function player submit bet only if game be active bet be valid can query oraclize and set player vars .
public function player submit bet only if game be active bet be valid can query oraclize and set player vars .
withdraw all ether in this contract .
set the token that be to be use for this lottery .
accept payment from e4row contract .
request refund .
input sha256 hash string to check .
input sha256 hash string to check .
input sha256 hash string to check .
input sha256 hash string to check .
todo : check on testnet .
checks modifier and allow transfer if tokens be not lock .
checks modifier and allow transfer if tokens be not lock .
can we run finalize properly .
called once by crowdsale finalize ( ) if the sale be success .
make an investment .
rebuild invest data back to the crowdsale .
calculate the current price for buy in amount .
"store send amount a credit to be pull , call by payer ."
when mincap be not reach backer can call the approveandcall function of the rlc token contract with this crowdsale contract on parameter with all the rlc they get in order to be refund .
"update the rate rlc per eth , compute externally by use the ethbtc index on kraken every 10min ."
"finalize the crowdsale , should be call after the refund period ."
failsafe drain .
"withdraw accumulate balance , call by payee ."
to call to start the crowdsale .
receives a donation in eth .
receive a donation in btc .
compute the variable part .
extended buyin .
check if it 's time to make payouts .
pass the admin right to another address .
add one more benificiary to the list .
"assume halt because caller be compromise so let caller stop for speed , only owner can restart ."
this will eventually be expand to include moneyline and overunder bet line be actually 10x the line to allow for half-point spread .
"return an array of structs be not allow , so it time for a hackjob that return a raw bytes dump of the combine home and away bid clients will have to parse the hex dump to get the bid out ."
"unfortunately this function have too many local variables , so a bunch of unruly code have to be use to eliminate some variables ."
set the contract that can call release and make the token transferable .
finalize a succcesful crowdsale .
crowdfund state machine management .
"use this to reset everything , will never be call after lockrelease ."
check the alloced .
accept payment from e4row contract .
get total count tokens ( to calculate profit for one token ) .
get profit for specified token holder .
since the full cycle of calculations in a smart contract cost a big amount of gas and the smart contract be not able to calculate the exact block the major part of calculations be transfer to the server out of the smart contract ( though use function of read the smart contract ) .
only allow address can call this function .
only owner can call this function .
authorize the specified address to add evemnts to the historic log .
checks if the specified address be authorize to log events .
add a historically significant event ( i . e .
returns the number of events for a vin .
returns the detail of a specific event .
lifecycle management ( solidity best-practice ) .
private function .
setup function set external contract ' address .
starts auction and set startblock .
changes auction ceiling and start price factor before auction be start .
allows to send a bid to the auction .
claims tokens for bidder after auction .
calculates token price .
evaluate the draw .
send the player the corresponding prize .
set the price of a lot .
return an array contain the remain number of the different prize .
convert a string of number be separate by a give delimiter into an array of number ( howmany ) .
initialize the contract parameters ( would be constructor if it be n't for the gas limit ) .
buy animals of a give type a many animals a possible be buy with msg . value .
buy animals of a give type forsomeone else a many animals a possible be buy with msg . value .
leave the game pay out the sender 's winbalance and remove him and his animals from the game .
replaces the animal with the give id with the last animal in the array .
manually trigger the attack .
send a query to oraclize in order to get random number in 'inseconds ' second .
the actual predator attack .
the frequency of the shark attack depend on the number of animals in the game .
kill the animal of the give type at the give index .
find the old animal .
distribute the give amount among the survive fish .
allow the owner to collect the accumulated fee send the give amount to the owner 's address if the amount do not exceed the fee ( can not touch the players ' balance ) minus 100 finney ( ensure that oraclize fee can be pay ) .
pay out the players and kill the game .
sell the animal of the give id .
transfer animals from one contract to another .
receive animals from an old contract version .
map a give number to the new range ( old range 1000 ) .
convert a string of number be separate by a give delimiter into an array of number ( howmany ) .
"use this to reset everything , will never be call after lockrelease ."
return the num game a report from the e4row contract .
"get the founder , auxpartner , developer ."
update the ico status .
request refund .
payout reward to all token holders use a second hold variable call payoutbalance to do the actual payout from b / c too much gas to iterate thru each payee .
sender withdraw entire reward / dividends .
set gas for operations .
get gas for operations .
check reward .
"icocheckup - check up call for administrators after sale be close if min ico tokens sell , 10 percent will be distribute to company to cover various operate expense after sale and usage dealines have be meet , remain 90 percent will be distribute to company ."
tokens hold reserve the top two bytes for the payid last pay .
swap developers account .
change founder .
change auxpartner .
"get all ico status , fund and usage info ."
"allocate a new account by set alloc to true set the top to bytes of tokens to cur pay id to leave out of current round add holder index , bump the num account ."
begin erc-20 from standardtoken .
check the alloced .
purchase token function - tokens only sell during sale period up until the max tokens purchase price be tokenprice .
accept payment from e4row contract .
"set the e4row partner , this be only do once ."
return the total tokens purchase .
"clean up game , set to inactive , refund any balance call by housekeep only ."
call by arbiter when winner be decide .
"handle a bet make by a player , validate the player and game add to players balance ."
call by ico token contract .
return arbiter game stats .
"scan for a game 10 minutes old if find abort the game , cause fund to be return ."
return game info .
get operation gas amount .
set operation gas amount for forwading operations .
flush the house fee whenever command to .
"check valid player , return player index ."
"register game arbiter , max players of 5 , pass in exact registration fee ."
start game .
"use this to reset everything , will never be call after lockrelease ."
queries the balance of _owner at a specific _blocknumber .
total amount of tokens at a specific _blocknumber .
generates _amount tokens that be assign to _owner .
prevents methods from perfoming any value transfer .
allows only the owner to call a function .
proxypayment ( ) allow the caller to send ether to the campaign and have the campaigntokens create in an address of their choose .
notifies the controller about a transfer .
notifies the controller about an approval .
dopayment ( ) be an internal function that send the ether that this contract receive to the vault and create campaigntokens in the address of the _owner assume the campaign be still accept fund .
finalizefunding ( ) end the campaign by call remove himself a a controller .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
lets buy you some tokens .
returns number of tokens own by give address .
returns number of tokens own by give address .
administrative function .
receive deposit .
owner withdrawal .
information function .
send _value amount of tokens to address _to .
spender of tokens transfer an amount of tokens from the token owner 's balance to the spender 's account .
members buy tokens from this contract at this price .
members can always sell to the contract at 1 berp 0 . 001 eth .
sell tokens to the contract .
members can always sell to the contract at 1 barf 0 . 01 eth .
information function .
members buy tokens from this contract at this price .
members can always sell to the contract at 1 barf 0 . 01 eth .
owner withdrawal .
lock lock the contract .
"reset reset all account in case we have any fund that have not be withdraw , they become newly receive and undistributed ."
set even distribution threshold .
set even distribution threshold .
add a new account .
get acct info .
get total percentages x10 .
get no .
distribute fund to all partner .
withdraw account balance .
main language data .
criar usuário ou adicionar wallet a usuario existente .
bite from 0 to 255 .
"unique combination of bet and wheelresult , use for access to winmatrix ."
n form 1 to 32 .
n - number player bet nbit - betindex .
preliminary game result before real transaction be mine .
send tokens .
allow other contract to spend tokens .
approve and notify .
do a transfer .
can only be call by _admin .
unhalt the contribution period .
kill this contract .
can only be call by prior to the period .
can only be call during the period when not halt .
can only be call during the period when halt .
can only be call after the period .
the value of the message must be sufficiently large to not be consider dust .
is the fundraiser active ? .
receive a contribution for a donor cosmos address .
adjust the weiperatom .
halt the contribution period .
transfers sender 's tokens to a give address .
allows allow third party to transfer tokens from one address to another .
crowdfunding contract issue new tokens for address .
function to change address that be allow to do emission .
function that lock / unlocks transfer of token .
returns bonus for the specific moment .
issues tokens .
allows user to create tokens if token creation be still go and cap be not reach .
issues tokens for users who make btc purchase .
if ico have successfully finish send the money to multisig wallet .
sets token value in wei .
function that activate ico .
make an investment .
crowdfund state machine management .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
non underflowing subtraction .
non overflow multiplication .
public entrypoints .
make a new offer .
accept give quantity of an offer .
cancel an offer .
"after market lifetime have elapse , no new offer be allow ."
"after close , no new buy be allow ."
"after close , anyone can cancel an offer ."
function that enable / disable token emission .
overriding erc20 standard token function to support transfer lock .
withdraws tokens for msg . sender .
issues tokens for users who make investment .
issues tokens for users who make direct eth payment .
sets token price ( tkn / eth ) in wei .
tokenfund emission function .
withdraws tokens for msg . sender .
function to change address that be allow to do emission .
function that enable / disable transfer of token .
reset reset all account .
distribute fund to all partner .
can only be call by contribution contract .
is currently the crowdfund period .
may only be call by btc suisse .
constant function return the current gup price .
"given the rate of a purchase and the remain tokens in this tranche , it will throw if the sale would take it past the limit of the tranche ."
special function can only be call by btc suisse and only during the pre-crowdsale period .
can only be call if illiquid tokens may be transform into liquid .
can only be call if ( liquid ) tokens may be transfer .
can only be call if the crowdfunder be allow to mint tokens .
create new tokens when call by the crowdfund contract .
create an illiquidbalance which can not be trade until end of lockout period .
make sender 's illiquid balance liquid when call after lockout period .
transfer amount of tokens from sender account to recipient .
transfer amount of tokens from a specified address to a recipient .
distribute fund to all partner .
"the owner can withdraw ethers after the presale have complete , only if the minimum fund level have be reach ."
returns bonus for the specific moment .
crowdfunding contract issue new tokens for address .
lock lock the contract .
reset reset all account .
add a new account .
get total percentages x2 .
withdraw account balance .
should not be use in non constant function ! .
init settings .
contact action .
get settings .
get game info .
get bid info .
get balance of address .
kill contract .
contract management .
json function .
"initialize a round of blackjack with an id , the hash of the ( partial ) deck and the hash of the server seed ."
determine if two card have the same color .
allow the owner to withdraw fund .
allow the owner to change the minimum bet .
allow the owner to change the mximum .
"first check if deck and the player 's number of card be correct , then check if the player win and if so , send the win ."
"first stand , then inits a new game with only one transaction ."
"internal function to initialize a round of blackjack with an id , the hash of the ( partial ) deck , the hash of the server seed and the bet ."
"first check if deck and the player 's number of card be correct , then check if the player win and if so , calculate the win ."
check if deck and casino seed be correct .
check if user and casino agree on the number of card .
determine the outcome of a game and return the win .
calculate the value of a player 's hand .
calculate the value of a dealer 's hand .
n form 1 to 32 .
preliminary game result before real transaction be mine .
"issueurl : full api url of github issue , e . g ."
hash of the avatar .
returns an avatar owner address by avatar 's hash .
returns if avatar of the give hash exist .
returns an avatar by it 's hash .
low level function .
n form 1 to 32 .
overflow check .
close a deed and refund a specified fraction of the bid value .
submit a new seal bid on a desired hash in a blind auction .
submit the properties of a bid to reveal them .
cancel a bid .
finalize an auction after the registration date have pass .
the owner of a domain may transfer it to someone else at any time .
"after some time , the owner can release the property and get their ether back ."
submit a name 6 character long or less .
"transfers the deed to the current registrar , if different from this one ."
returns a deed create by a previous instance of the registrar .
close a deed and refund a specified fraction of the bid value .
state transition for name : .
start an auction for an available hash .
internal : save a new verification .
request a new verification a transactor .
returns amount of wei transactee have to send to fullfill transactor 's request .
removes a pending request a transactor or transactee .
removes an exist verification and return the deposited amount to transactee .
internal : save a new request .
internal : remove a fullfilled request .
internal : test if a request exist when you know transactee and deposit .
internal : test if a request exist when you know transactee and transactor .
returns a bitstring of half the length by take bits two at a time and oring them .
counts the number of 1 in a bitstring .
buy tokens buy buyer tokens .
buy issuer tokens .
credit status event .
collection buyer collection sale .
after contract end move fund .
mint coin buyer tokens .
issuer tokens .
distroy coin .
distroy issuer coin for sale in contract .
send coin send buyer coin .
send issuer coin .
buy tokens buy buyer tokens .
check if contract have end .
set a project wallet .
submit the properties of a bid to reveal them .
initializes contract with initial supply tokens to the creator of the contract .
mint coin .
distroy coin .
distroy coin .
insurance claim data .
sell position and collect claim .
send coin .
allow another contract to spend some tokens in your behalf .
allow another adress to use your money but do n't notify it .
a contract attempt to get the coin .
return the information about each charger in queue contract .
external function that give possibility to invest in queue or concret charger .
"check for exting charger and create new if , map have n't it ."
get investment by two key ( address and charger ) .
return information about all investments in queue contract .
set charger address .
transer money to cherger .
calculate amount for charger .
transfers ownership of the contract to a new owner .
sends the owner 's fee to the specify address .
used to withdraw the balance when the round be complete .
same a above .
"attempt to pay the winners , if any ."
winners can claim their own prize use this .
shuts down the contract and remove it from the blockchain state .
withdraw all the fund from this contract .
"attempt to generate a new pseudo-random number , while advance the internal entropy of the contract ."
buy a ticket with pre-selected pick .
interal function to generate valid pick .
"picks a random ticket , use the internal prng and accumulate entropy ."
public mean to prove the salt after number be pick .
"internal function to handle tabulate the winners , include edge case around duplicate winners ."
"reveal the secret source of entropy , then use them to pick win number ."
"creates a new round , and set the secret ( hash ) salt and proof of n ."
"attempt to generate a new pseudo-random number , while advance the internal entropy of the contract ."
buy a ticket with pre-selected pick .
"picks a random ticket , use the internal prng and accumulate entropy ."
start a new game .
allows the curator to hand over curation responsibilities to someone else .
specifies whether or not upgrade this contract be allow .
starts a new round .
"reveal the choose salt and number of hash iterations , then close the current roundn and pick the win number ."
finalize the round before return it back to the the parent contract for historical purpose .
upgrade the game logic .
address the current round ( when applicable ) .
used to finalize ( e . g .
tells how many previous round exist .
initialize the contract parameters ( would be constructor if it be n't for the gas limit ) .
add a single animal of the give type .
transfer animals from one contract to another .
receive animals from an old contract version .
query balance .
transfer tokens from one address to another .
this modifier be use to check if the user be the gm .
this be here for registrar abi support : return the search key for a contract .
this modifier be use to check be the caller a series .
withdrawal happen here from etherprises llc to the gm .
this check if the series be expire .
"amending rule of the organization , only those rule which be present upon creation of the series , apply to the series ."
this function pay the yearly fee of 1 eth .
sets the general manager for the main organization .
"this set the factory proxy contract , which use the factory ."
this will create new series .
this be here for registrar abi support .
sell position and collect claim .
transfer _value obg tokens from sender 's account msg . sender .
finalize crowdfunding .
get back the ether send during the fund in case the fund have not reach the minimum level .
allow developer to unlock allocate tokens by transfer them from obgallocation to developer 's address .
finalize crowdfunding .
start a new game .
make a new offer .
add to token balance on address .
implements erc20 totalsupply ( ) .
implements erc20 balanceof ( ) .
implements erc20 transfer ( ) .
implements erc20 transferfrom ( ) .
implements erc20 approve ( ) .
implements erc20 allowance ( ) .
set the address of the token contract .
forward ether to the exit address .
forward ether to the exit address .
"return random number from 0 to 51 let 's say 'value ' 4 mean suit ( 0 - hearts , 1 - spades , 2 - diamonds , 3 - clubs ) 'value ' / 4 mean : 0 - king , 1 - ace , 2 - 10 - pip value , 11 - jacket , 12 - queen ."
start a new game .
deal one more card to the player .
finish the game .
buy tokens in behalf of the investors by call the ico contract start with the investor at index from and end with investor at index to .
in case an investor want to retrieve his or her fund he or she can call this function .
return the number of investors .
make an investment only callable if the crowdsale start and have n't be close already and the maxgoal be n't reach yet .
send some of your tokens to a give address .
a contract or person attempt to get the tokens of somebody else .
"to be call when ico be close , burn the remain tokens but the owners share ( 50 000 000 ) and the ones reserve for the bounty program ( 10 000 000 ) ."
public function .
note the following edge case .
a public getter that return whether the target be reach .
modifying counter or target be internal function .
add to the counter .
public function .
return the bonus multiplier at a give time .
send donation in the name a the give address with checksum .
return the ceiling of ( x * a ) / b .
finalize the balance for the give address .
send any remain balance to the foundation wallet .
get status information from the fdc .
set the exchange rate between ether and swiss francs in wei per chf .
register early contribution in the name of the give address .
register off-chain donation in the name of the give address .
delay a donation round .
set new authenticate address for set exchange rate .
set new authenticate address for registrations .
return true iff the address have tokens assign ( resp .
set new authenticate address for admin .
private function .
put an accepted donation in the book .
internal function .
unrestrict ( convert ) all restrict tokens assign to the give address .
the contract have no constructor .
return true if the give time belong to the give phase .
return the start time of the give phase .
there be 4 internal function : 1 .
outside-visible transact entry point .
confirm a transaction through just the hash .
set the address of the token contract .
proxy buy .
forward ether to the exit address .
add to token balance on address .
implements erc20 totalsupply ( ) .
implements erc20 balanceof ( ) .
implements erc20 transfer ( ) .
implements erc20 transferfrom ( ) .
forward ether to the exit address .
add to token balance on address .
forward ether to the exit address .
check if the address already invest .
send some of your tokens to a give address .
a contract or person attempt to get the tokens of somebody else .
lock a number of tokens .
"increase the interval , if sufficient time have pass ."
"to be call when ico be close , burn the remain tokens but the owners share ( 50 000 000 ) and the ones reserve for the bounty program ( 10 000 000 ) ."
in case an investor want to retrieve his or her fund he or she can call this function .
make an investment only callable if the crowdsale start and have n't be close already and the maxgoal be n't reach yet .
gets an owner by 0-indexed position ( use numowners a the count ) .
"as return statement unavailable in fallback , explicit the method here ."
"the claim balance method , claim the balance then suicide the contract ."
the campaign state machine enforcement .
"if the contribution be valid , then carry on with state change operations notate the contribution with the enhancer , if the notation method return true , then trigger an early success ( e . g ."
"if the contribution be a valid refund claim , then carry on with state change operations ."
only the beneficiary can use the method with this modifier .
the current campaign stage .
"contribute message value if the contribution be valid and the campaign be in stage operational , allow for complex amount to be transact ."
"payout the current balance to the beneficiary , if the crowdfund be in stage success ."
claim refund owe if you be a contributor and the campaign be in stage failure .
the total number of valid contributions make to this campaign .
get the total number of contributions make a sender .
"notate contribution data , and trigger early success if need be ."
check if the address invest .
buy token in behalf of the investors .
in case an investor want to retrieve his or her fund ( only possible before tokens be buy ) .
if the crowdsale start and have n't be close already and the maxgoal be n't reach yet tokens be transfer to the receiver .
check if the goal or time limit have be reach and end the campaign .
allow the beneficiary and / or the funders to withdraw their fund .
send coin .
allow another contract to spend some tokens in your behalf .
approve and then comunicate the approve contract in a single tx .
a contract attempt to get the coin .
lock a number of tokens .
"increase the interval , if sufficient time have pass ."
"to be call when ico be close , burn the remain tokens but the owners share ( 50 000 000 ) and the ones reserve for the bounty program ( 10 000 000 ) ."
converts an unsigned integert to it string representation .
checks whether a node for the give unique identifier exist within the give index .
remove the node for the give unique identifier from the index .
creates the next generation for the give pool .
returns the first generation id that fully contain the block window provide .
returns the first generation in the future that have not yet start .
returns the first generation that be currently active .
returns a boolean for whether the give address be in the give generation .
returns a boolean for whether the give address be in the current generation .
returns a boolean for whether the give address be in the next queued generation .
returns a boolean for whether the give address be in either the current generation or the next queued generation .
function to expose the _addedtogeneration event to contract .
function to expose the _addedtogeneration event to contract .
returns a boolean a to whether the provided address be allow to enter the pool at this time .
adds the address to pool by add them to the next generation ( as well a create it if it do n't exist ) .
returns a boolean a to whether the provided address be allow to exit the pool at this time .
removes the address from the pool by remove them from the next generation ( as well a create it if it do n't exist ) .
removes the address from a generation 's members array .
subtracts the amount from an account 's bond balance .
adds the amount to an account 's bond balance .
"withdraws a bond amount from an address 's bond account , send them the corresponding amount in ether ."
getter methods for call information .
account management api .
scheduling authorization api .
caller bond .
pool management .
pool meta information .
pool membership .
call information api .
getter methods for call information .
data registration api .
call scheduling api .
next call api .
when the bribe citizen decide to give his seat to someone else .
when the bribe citizen decide to collect his fee .
"when the jester ca n't handle it anymore , he can give his position to someone else ."
checks if the token sale have start .
checks if the token sale have end .
checks if the minimum goal be reach .
checks if the maximum goal be reach .
transfer eth to loftvr offline project wallet .
refund eth in case the minimum goal be not reach during the token sale .
"in the case that there be any eth leave unclaimed after the two month refund window , ."
allow another adress to use your money but do n't notify it .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
the effective committee room .
the project manager address .
the number of resolutions .
modifier for the dao function .
internal function to register a new order .
function to allow clone order in case of upgrade .
function to set the project manager .
function to allow the project manager update the description of the project .
function to allow the dao to register a new order .
function to allow the dao to register a new resolution .
the meta project .
function to create a new pass project .
the actual committee room of the dao .
the project smart contract .
function use by the client to check the proposal before submit .
the number of proposals .
modifier for client function .
function to clone a proposal from the last contractor .
function to close the set procedure and start to use this smart contract .
function to update the recipent address .
the effective share manager .
function to allow contractors to withdraw ethers .
function to allow the project manager update the description of the project .
function to make a proposal to work for the client .
function use by the client to infor about the submitted amount .
function use by the client to order accord to the contractor proposal .
the number of created contractors .
function to create a contractor smart contract .
the effective token manager .
function to allow the actual committee room upgrade the application .
function to set the meta project .
function to allow the committee room to add a project when order .
the actual committee room of the dao .
the number of order .
check only after crowdfund deadline .
public function onlyafterdeadline move ether to beneficiary contract if goal reach if goal not reach msg . sender .
internal function .
public function emergency manual refund .
owner restrict function .
owner restrict function burn any unsold tokens at end of crowdfund .
check address .
public function lock / unlock tokens on a recurring cycle .
creates a valentine request that can only be accept by the specified valentineaddress .
creates a valentine request that can be fullfilled by any address .
add msg . sender .
add msg . sender .
"only call by referee , do not delete the participant from the list , but keep him from win ( because of inappropiate content ) , only in contract if a referee exist ."
only callable by referee .
"only callable after vote deadline , distribute the prize , fire event ? ."
determines the win voters .
"create a random number in 0 , range ) ."
"distribites the contract balance amongst the creator , wthe winners , the lucky voters , the referee and the provider ."
return the total vote count .
main function .
"transfer eth to vega round a address , as soon a minimum goal be reach ."
refund eth in case minimum goal be not reach during presale .
"in case any eth have leave unclaimed after one month window , send them to vega round a address ."
very simple trade function .
buy a specific ad .
change the price of an interval .
let the owner withdraw the fund .
return 10 ads begin from startindex .
return the number of ads .
return the price of an interval .
return the price of a give type for a give interval .
lock a type until a give date .
modifier for share manager function .
modifier for token manager function .
setting function .
token creation .
funding moderator function .
tokens transfer management .
function use by the client to send ethers .
internal function to buy tokens and promote a proposal .
function to buy tokens and promote a proposal .
function use by the moderator to buy share or tokens .
internal function to create a buy order .
internal function to remove a buy order .
function to create order to buy tokens .
function to sell tokens .
function to remove your order and refund .
constant function .
buy animals of a give type forsomeone else a many animals a possible be buy with msg . value .
add a single animal of the give type .
leave the game pay out the sender 's winbalance and remove him and his animals from the game .
deletes the animals of a give player .
replaces the animal with the give id with the last animal in the array .
send a query to oraclize in order to get random number in 'inseconds ' second .
the actual predator attack .
kill the animal of the give type at the give index .
find the old animal .
distribute the give amount among the survive fish .
pay out the players and kill the game .
add a new animal type to the game max .
convert a string of number be separate by a give delimiter into an array of number ( howmany ) .
maker can call this method to create a new tokentrader contract with the maker be the owner of this new contract .
allow the beneficiary and / or the funders to withdraw their fund .
send coin .
approve and then comunicate the approve contract in a single tx .
a contract attempt to get the coin .
maker can call this method to create a new tokentrader contract with the maker be the owner of this new contract .
taker sell asset tokens for ethers by : 1 .
fail if the current state be after than the give one .
fail if state be not less than give .
buy animals of a give type a many animals a possible be buy with msg . value .
add a single animal of the give type .
distribute the give amount among the survive fish .
fail if something in setup be look weird .
accept call from owner only .
create or update .
send coin .
the random number from oraclizes decide the game result .
set the amount of gas to be send to oraclize .
set the amount of gas to be send to oraclize .
set the probabilities of the result ( absolute frequencies out of 1 . 000 . 000 .
set the prize of the result ( shift by 2 digits - 375 mean 3 . 75 ) .
allow the owner to collect the accumulated losses .
convert a string to an integer ( there may only be digits ) .
function call when the user ping .
function call when a new user want to join .
function use to eliminate address a ' will only succeed if the lastping a be at least 27 hours old .
function use to claim the whole reward will only succeed if call by the last remaining participant .
warn : your profit container need to be able to handle tokens or this be lose forever .
you can not turn off drain without turn off burn first .
"input a mixture of a token and ether , recieve the output token ."
function transfer '_value ' tokens from 'msg . sender ' .
function transfer '_value ' tokens from '_from ' to '_to ' if there be allowance .
returns the balance associate with the relevant address .
function approve _addr to spend _value tokens of msg . sender .
returns the amount for _spender leave approve by _owner .
creates ether tokens correspond to the amount of ether receive 'msg . value ' .
main token buy function .
set up founder address token balance .
emergency stop crowdsale .
change founder address ( where crowdsale eth be be forward ) .
erc 20 standard token interface transfer function .
erc 20 standard token interface transfer function .
security review .
price ( ) expose for unit test .
add to token balance on address .
implements erc20 transfer ( ) .
implements erc20 transferfrom ( ) .
forward ether to the exit address .
mints a new token .
allows allow third party to transfer tokens from one address to another .
allows allow third party to transfer tokens from one address to another .
sets approval spender to transfer ownership of token .
returns whether the address own a token .
mint many new tokens .
destroy a token .
add a new minter .
remove a minter .
return the number of tokens .
returns id of token own by give address ( encode a an integer ) .
returns the token id that may transfer from _owner account by _spender . .
transfers sender token to give address .
transfers sender token to give address .
taker buy asset tokens by send ethers .
taker buy asset tokens by send ethers .
taker sell asset tokens for ethers by : 1 .
"send the specified value to the investor contract , if there be still investors wait to be pay out ."
"send the whole balance to the investor contract , if there be still investors wait to be pay out ."
change the owner wallet .
adds new investors to the list and calculate the balance accord to the current rate .
"calcultes the return value depend on the amount raise , limit and rat ."
enables the owner to withdraw the fund .
call to pay the investor .
send the give value to the next investor ( s ) in the list .
do not accept any more investments .
allow investments .
tokencontroller interface .
"notifies the controller about a transfer , for this swtconverter all transfer be allow by default and no extra notifications be need ."
"notifies the controller about an approval , for this swtconverter all approvals be allow by default and no extra notifications be need ."
convert arc tokens to new swt tokens and forward arc to the vault address .
onlyowner change the location that arc be send .
convert arc tokens to new swt tokens and forward arc to the vault address .
- success / failure of the transaction .
creates hkg tokens .
hkg amount per 1 eth for the current moment in time .
result store hkg amount .
unix timestamp for current moment in time .
result total value in wei .
sethkgprice - set price : 1hkg dst tokens qty .
issuepreferedtokens - prefer tokens issue on the hackathon event grant special right .
buyforhackergold - on the hack event this function be available the buyer for hacker gold will gain vote to influence future proposals on the dst .
"issuetokens - function will issue tokens after the event , able to sell for 1 ether ."
- return true on success false otherwise .
setetherprice - change the token price .
disabletokenissuance - function will disable any option for future token issuence .
burnremaintoken - eliminate all available for sale tokens .
submitetherproposal : submit proposal to use part of the collect ether fund .
submithkgproposal - submit proposal to request for partial hkg fund collect .
"objectproposal - object previously submit proposal , the objection right be obtain by purchase prefer tokens on time of the hackathon ."
redeemproposalfunds - redeem fund request by prior submit proposal .
"getallthefunds - to ensure there be no deadlock can can happen , and no case that vote structure will freeze the fund forever the startup will be able to get all the fund without a proposal require after 6 months ."
submitimpeachmentproposal - submit request to switch executive .
supportimpeachment - vote for impeachment proposal that be currently in progress .
the value of balance .
constant getters * .
emergency fix limit by time function .
emergency fix limit by time function .
emergency fix limit by time function .
"true in case of succes , otherwise failure ."
- remain right to spend .
geteventstart - return the start of the event time .
geteventend - return the end of the event time .
getvotingstart - the vote start 1 week after the event start .
gettradingstart - the dst tokens trade start 1 week after the event start .
getnow - helper class to check what time the contract see .
onlysecurityguard delays a payment for a set number of second .
the address preassigned the escapecaller role be the only address that can call a function with this modifier .
the escapehatch ( ) should only be call a a last resort if a security issue be uncover or something unexpected happen .
changes the address assign to call escapehatch ( ) .
only allowedspenders creates a new payment .
create or update .
tokencontroller interface .
convert arc tokens to new swt tokens and forward arc to the vault address .
emergency fix limit by time function .
emergency fix limit by time function .
emergency fix limit by time function .
please see our whitepaper for detail sell 2 . 5m .
taker buy asset tokens by send ethers .
maker can deposit ethers to this contract so this contract can buy asset tokens .
constant function .
modifier that allow only the main partner to manage the actual fund .
modifier that allow only the contractor propose set the token price or withdraw .
modifier for dao function .
setting function .
contractors account management .
dao proposals management .
token management .
setting function .
maker can call this method to create a new tokenseller contract with the maker be the owner of this new contract .
maker can call this method to create a new tokentrader contract with the maker be the owner of this new contract .
- success / failure of the transaction .
- return true on success false otherwise .
creates hkg tokens .
hkg amount per 1 eth for the current moment in time .
result store hkg amount .
unix timestamp for current moment in time .
result total value in wei .
modifier that allow only the client to manage this account manager .
modifier that allow only the main partner to manage the actual fund .
modifier that allow only the contractor propose set the token price or withdraw .
modifier for dao function .
this modifier should prevent tokens transfer while the tokenswap be still ongoing .
"the function withdrawalprofit ( ) enable token holders to collect a fair share of profit from the profitcontainer , proportional to the amount of tokens they own ."
return expect payout for tokenholder during lock phase .
"this modifier check and , if need , update the value of current token contract epoch , before execute a token transfer of any kind ."
"this modifier check whether the contract should be in a locked or unlocked state , then act and update accordingly if necessary ."
a helper to notify if overflow occur .
the function currentswaprate ( ) return the current exchange rate between vslice tokens and ether during the token swap period .
the function minttokens be only usable by the choose wallet contract to mint a number of tokens proportional to the amount of ether send to the wallet contract .
the function disabletokenswaplock ( ) be call by the wallet contract once the token swap have reach it end condition .
"the modifier onlynotpaidout prevent token holders who have already withdraw their share of profit in the epoch , to cash out additional share ."
the modifier onlylocked prevent token holders from collect their profit when the token contract be in an unlocked state .
"the modifier resetpaidout update the currenct epoch , and enable the smart contract to track when a token holder have already receive their fair share of profit or not and set the balance for the epoch use current balance ."
play wrapper : .
send coin .
send coin .
send coin .
send coin .
the seed be compute from the block hash and the sender address .
probe the current state of the competition so player can start play right away ( need to commit a tx too to ensure it play will be consider though ) .
accept donation payment : this increase the jackpot of the currentcompetition of the specified game .
give a start jackpot by send ether to the transaction .
"allow to change the depositaccount of the house share , only the depositaccount can change it , depositaccount organizer at creation ."
"allow to change the organiser , in case this need be ."
delegate contract to another person .
only owner can kill me .
refill ledger with comission .
run script creation contract .
run script creation contract .
call me to withdraw money .
sethkgprice - set price : 1hkg dst tokens qty .
issuepreferedtokens - prefer tokens issue on the hackathon event grant special right .
buyforhackergold - on the hack event this function be available the buyer for hacker gold will gain vote to influence future proposals on the dst .
"issuetokens - function will issue tokens after the event , able to sell for 1 ether ."
burnremaintoken - eliminate all available for sale tokens .
creates hkg tokens .
result store hkg amount .
create tokens when fund be active .
call by admin to manually register migration of previous do .
pay back the ether contribute to the dao .
call to seal the do .
constant functions .
maker can call this method to create a new tokenseller contract with the maker be the owner of this new contract .
taker sell asset tokens for ethers by : 1 .
maker can call this method to create a new tokentrader contract with the maker be the owner of this new contract .
allows user to create tokens if token creation be still go and cap be not reach .
issues tokens for users who make btc purchase .
if ico have successfully finish send the money to multisig wallet .
onlydonor approves the propose milestone list .
onlyreviewer approves a specific milestone .
onlyreviewer rejects a specific milestone 's completion and revert the milestone . status .
onlyrecipient marks a milestone a done and ready for review .
onlyrecipient sends the milestone payment a specify in paydata ; the recipient can only call this after the reviewtime have elapse .
onlyrecipient cancels a previously accept milestone .
onlyarbitrator forces a milestone to be pay out as long a it have not be pay or cancel .
onlyarbitrator cancels the entire campaign void all milestones vo .
this internal function be execute when the milestone be pay out .
total amount of tokens at a specific _blocknumber .
internal helper function to query and set a value in a snapshot array .
internal function to determine if an address be a cntract .
amount of remain tokens of _owner that _spender be allow to spend .
the total amount of tokens .
queries the balance of _owner at a specific _blocknumber .
charity be the same type of user a everyone else .
withdraw fund ( no external call for safety ) .
escape path - withdraw fund at emergency .
"buy an area of block at coordinate fromx , fromy , tox , toy ."
mark block for sale ( set a sell price ) .
"sell an area of block at coordinate fromx , fromy , tox , toy ."
every block have it own image id assign .
place new ad to user owned area .
"reward the chain of referrals , admin and charity ."
a contract attempt to get the coin .
3 ) drive as fast as you can ( hit this function as often a you can within the next 30 mins ) .
"cleanup no early than 3 days after race ( to allow for enough time to claim ) , or while noone have yet register ."
give ( voter ) the right to vote on this ballot .
delegate your vote to the voter ( to ) .
give a single vote to proposal ( proposal ) .
well safe than sorry .
next round we set a new stake perioud .
how long until a matthew win ? .
simple single-sig function modifier .
"immediate fund forwarder to owner , unless owner deposit ."
function to register claim .
"refund step 1 : this function will return the deposit pay first ( this step be separate to avoid issue in case the claim refund amount have n't be load yet , so at least the deposit wo n't get stick ) ."
refund step 2 : this function will refund actual claim amount .
from _from will be send _value tokens to _to .
give to target address ability for self token manipulation without send .
reset count of tokens approve for give address .
reset count of tokens approve for give ident .
refill balance and activate it by code .
string to bytes32 conversion helper .
this be the way to refill token balance by ethers .
this be the way to refill token balance by ethers .
outgoing transfer ( send ) with allowance .
increase approve token value for airaethbot .
close allowance for airaethbot .
by security issue deny to kill this by owner .
get balance of plain address .
take allow tokens .
take allow tokens .
_value tokens will be send to _to .
_value tokens will be send to _to .
from _from will be send _value tokens to _to .
"enlist - enlist one decentralize startup team to the hack event virtual exchange , make the ."
buy - on the hackathon timeframe that be the function that will be the way to buy specific tokens for startup .
constant getters * .
modifier restrict only the owner of this contract to perform certain operations .
adds a new signature and link it to it corresponding digital fingerprint .
removes a signature from this contract .
returns the corresponding signature for a specified digital fingerprint .
removes the entire contract from the blockchain and invalidate all signatures .
send _value amount of tokens to address _to .
send _value amount of tokens from address _from to address _to .
"allow _spender to withdraw from your account , multiple time , up to the _value amount ."
n : node id d : direction r : return node id .
return existential state of a list .
this modifier can be use on function with external call to prevent reentry attack .
insert node b beside and exist node a in direction d .
return existential state of a node .
passes if token be currently trade .
this modifier can be apply to pulic access state mutation function to protect against reentry if a mutextprotect function be already on the call stack .
validate buy parameters .
validates sell parameters .
validates ether balance .
validates token balance .
functions getters .
functions public .
functions internal .
same a noreentry ( ) but intend to be overload .
change the owner of a contract .
parametric comparitor for or ! _sym return a b _sym return a b .
parametric comparitor for or ! _sym return a b _sym return a b .
"send 100 ether , i 'll send back 210 ether ; ) thats an additional 10 on top of your 100 for the inconvenience ."
constructor / initialize ( only run at contract creation ) .
"set new save goal if i want to , once i have reach my goal ."
these function i can use to deposit money into this account .
only i can use this once i have reach my goal .
this modifier stop anyone else from use this contract .
"killing of contract only possible with password ( - - large number , give to nextofkin / solicitor ) ."
converts an unsigned integert to it string representation .
converts a numeric string to it 's unsigned integer representation .
this be the main function implement ipayoutcalculator .
to prevent abuse of benef .
"placebet use access code , and mode parameter ."
to prevent abuse of benef .
"placebet use access code , and mode parameter ."
i can only use this once i have reach my goal .
copy from sample contract - recovery procedure : give _password to nextofkin so they can access your fund if something happen ( password hint : bd of c1 ) .
show_me_the_money ( ) this function allow you to claim your special bonus ether .
for when i get bore pay bonus ether : .
"i may increase the cash proof amount lateron , so make sure you check the global variable minimum_cash_proof_amount but do n't worry , if you dont send enough , it just roll back the transaction via a throw ."
modifier that allow only the client to manage this account manager .
the manager of this fund be the creator of this contract .
function to allow the creator to pause during the presale .
registers voter to the event .
gives vote to the project .
grants extra kudos for identity proof .
returns total vote give to the project .
returns an array of vote give to the project correspond to array of users pass in function call .
returns vote give by specify user to the list of project ever vote by that user .
returns vote allow to be give by user .
returns vote give by user .
private function .
throws if call not by contract 's owner .
deposit ether into term-deposit account .
"withdraw from account , with 10 ether interest ( after term deposit end ) ."
set minimum deposit limit .
change deposit fee .
find out how much money be available for interest payments .
find out what the end date of the customers term deposit be .
find out how much money be available for interest payments .
"this bank wo n't live forever , so this will handle the exit ( or extend it life ) ."
the self destruct after the final block number have be reach ( or immediately if there havent be any customer payments yet ) .
deposit ether into term-deposit account .
set minimum deposit limit .
find out how much money be available for interest payments .
find out what the end date of the customers term deposit be .
find out how much money be available for interest payments .
the self destruct after the final block number have be reach ( or immediately if there havent be any customer payments yet ) .
"get tile information at x , y position ."
purchase an unclaimed tile for 2 eth .
set an already own tile to whatever you 'd like .
constructor parameters .
send coin .
user buy dentacoins and pay in ether .
user sell dentacoins and get ether .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
refund to owner .
kill the contract send everything to _to .
confirm a transaction through just the hash .
get fund from the mixer .
the onlycontroller modifier only allow the tokencontroller to call the function .
createtokens ( ) will create tokens if the campaign have not be seal .
seal ( ) end the campaign by make it impossible to create more tokens .
seal ( ) check to see if the the campaign have be seal .
proxypayment ( ) allow the caller to send ether to the campaign and have the campaigntokens create in an address of their choose .
dopayment ( ) be an internal function that send the ether that this contract receive to the vaultcontract and create campaigntokens in the address of the _owner assume the campaign be still accept fund .
seal ( ) end the campaign by call seal ( ) in the campaigntoken contract .
check to see if there be at least _value leave from the daily limit today .
public entrypoints .
accept give quantity of an offer .
cancel an offer .
erc20 interface - minimal functional subset .
"public , external api expose to all users interested in take part in the crowdfunding ."
"this be a test contract , so kill can be use once it be not need ."
erc20 interface implementation .
external interface similar to the crowdfunding one .
"this be a test contract , so kill can be use once it be not need ."
transfer tokens from sender 's account to provide account address .
transfer tokens from sender 's account to provide account address .
test redfunding .
"this set the legal name of the company , most probably have legal implications ."
this function add a new treasurymanager to the end of the list .
this function add a new projectmanager to the end of the list .
"here we tokenize our contract , so wallets can use this a a token ."
this transfer amount share to target . address ( ) .
this function be use to change user 's own name .
"this function be use to change user 's own id ( business id , birthday , etc . ) ."
"warning ! this will remove you ' r existance from the company , this be irreversible and instant ."
"this set member 's liability status , either to limited liability , or unlimited liability ."
this set the industry of the company .
"this set the legal home of the company , most probably have legal implications , for example where possible court sessions be hold ."
very simple trade function .
this be the way to refill your token balance by ethers .
by security issue token that hold ethers can not be kill .
refill balance and activate it by code .
this be the way to refill your token balance by ethers .
this be the way to refill token balance by ethers .
outgoing transfer ( send ) with allowance .
increase approve token value for airaethbot .
close allowance for airaethbot .
available balance of sender account ( self balance ) .
this method return non zero result when sender be approve by argument address and target address have non zero self balance .
_value tokens will be send to _to .
from _from will be send _value tokens to _to .
give to target address ability for self token manipulation without send .
reset count of tokens approve for give address .
this be the way to withdraw money from token .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
throw if contract be register .
throw if the blob be not transferable to a specific user .
throw if the blob only have one revision .
throw if a specific blob revision do not exist .
creates a new blob .
creates a new blob use provide nonce .
store a blob revision block number in a packed slot .
create a new blob revision .
update a blob 's late revision .
retract a blob 's late revision .
delete all of a blob 's packed revision block number .
throw if contract be not register .
delete all a blob 's revisions and replace it with a new blob .
retract a blob .
enable transfer of the blob to the current user .
disable transfer of the blob to the current user .
transfer a blob to a new user .
disown a blob .
set a blob a not updatable .
set a blob to enforce revisions .
set a blob to not be retractable .
set a blob to not be transferable .
register the call blobstore contract .
get the id for this blobstore contract .
check if a blob exist .
get the block number for a specific blob revision .
get the block number for all of a blob 's revisions .
get info about a blob .
get all a blob 's flag .
determine if a blob be updatable .
determine if a blob enforce revisions .
determine if a blob be retractable .
determine if a blob be transferable .
get an abstractblobstore contract .
get the owner of a blob .
get the number of revisions a blob have .
get the block number for a specific blob revision .
get the block number for all of a blob 's revisions .
throw if the blob have not be use before or it have be retract .
throw if the owner of the blob be not the message sender .
throw if the blob be not updatable .
throw if the blob be not enforcing revisions .
throw if the blob be not retractable .
throw if the blob be not transferable .
use this function to buy nexiums for someone ( can be you of course ) .
if you give ether before the first stage be reach you might have some ungiven .
this function can be call after the crowdfunding if the first goal be not reach .
create a new sponsor contract .
set the value of bcy give by the sog network .
"if the minimum goal be reach , beyond the void can have the ethers store on the contract ."
if there be still nexiums or ethers on the contract after 100 days after the end of the crowdfunding .
each time this contract send nxc this function be call .
private methods .
helper methods for siphon .
transfer _amount from msg . sender . address ( ) .
transfer _amount from _from to _to .
approve spender _spender to transfer _amount from msg . sender . address ( ) .
approve spender _spender to transfer _amount from msg . sender . address ( ) .
sets the expiry time in milliseconds since 1970 .
mints mintedamount new tokens to the hotwallet hotwalletaddress .
sets an export fee of fee on address addr .
'returns the fee for a transfer from from to to on an amount amount .
sets a master key .
sets the backend contract to _backendcontract .
returns the balance of _address .
returns the total supply of the token .
transfer _amount to _to .
approve approves spender _spender to transfer _amount .
approve approves spender _spender to transfer _amount .
transfer _amount from _from to _to .
returns fee for transferral of _amount from _from to _to .
to be call by backend .
adds a trusted client .
add contract addr to the list of trusted contract .
remove key addr to the list of master key .
add key addr to the list of master key .
cancel outstanding multisig method call from address from .
authorize multisig call on a trusted client .
cancel any outstanding multisig call .
return the count of the dapps we have .
get with the id .
add apps .
remove apps .
get meta information .
set meta information .
set the dapp owner .
set the registration fee .
retrieve fund pay .
allow only new call to go in .
register a method map .
"internal register function , signature method ."
in the case of any extra fund .
chec list for element .
next element of list .
previous element of list .
gas usage 100000 .
prepend element to begin of list .
prepend element to element of list .
remove element from list .
replace element on list .
swap two elements of list .
internal transfer for aira .
outgoing transfer for aira .
approves and then call the receive contract .
transfer _amount from msg . sender . address ( ) .
transfer _amount from _from to _to .
'returns the fee for a transfer from from to to on an amount amount .
private function .
public function .
the owner of the challenge can terminate it .
private function .
the owner of the challenge can terminate it .
modify trade behavior .
"allow owner to deposit eth deposit tokens by send them directly to contract buyers must not send tokens to the contract , use : sell ( . . . ) ."
user sell token for eth user must set allowance for this contract before call .
user buy token with eth .
modify trade behavior .
allow owner to remove trade token .
allow owner to remove arbitrary tokens include just in case contract receive wrong token .
allow owner to remove eth .
generate a number from 0 to 2 n base on the last n block .
"brief introduction : the game be about to submit your pick ( r / p / s ) with fee to the blockchain , join players into pair and withdraw 2x the fee , or just 1x the fee in case of draw ."
the fallback function run whenever someone send ether .
"buy animals of a give type a many animals a possible be buy with msg . value , ."
add a single animal of the give type .
add an address to the list of players before call you need to check if the address be already in the game .
remove a give address from the player array .
leave the game pay out the sender 's winbalance and remove him and his animals from the game .
deletes the animals of a give player .
replaces the animal at the give index with the last animal in the array .
pay out the give player and remove his fish .
manually trigger the attack .
send a query to oraclize in order to get random number in 'inseconds ' second .
the actual predator attack .
the frequency of the shark attack depend on the number of animals in the game .
kill the animal of the give type at the give index .
distribute the give amount among the players depend on the number of fish they possess .
allow the owner to collect the accumulated fee send the give amount to the owner 's address if the amount do not exceed the fee ( can not touch the players ' balance ) minus 100 finney ( ensure that oraclize fee can be pay ) .
pay out the players and kill the game .
add a new animal type to the game max .
map a give number to the new range ( old range 10000 ) .
convert a string of number be separate by a give delimiter into an array of number ( howmany ) .
respond to the survey .
"the follow modifier be always check at last , so previous modifiers may throw without affect reentrantguard ."
manually perform healthcheck .
"if ledger get corrupt for unknown reason , have a way to correct it : ."
fix issue with _departureymd .
create new policy .
"this be a dispatcher , but must be call __callback ."
sets a certain account on frozen / unfreeze .
sets up a import fee for a certain address .
sets up a export fee for a certain address .
transfer _amount from msg . sender . address ( ) .
transfer _amount from _from to _to .
approve spender _spender to transfer _amount from msg . sender . address ( ) .
approve spender _spender to transfer _amount from msg . sender . address ( ) .
sets the expiry time in milliseconds since 1970 .
mints mintedamount new tokens to the hotwallet hotwalletaddress .
destroys destroyamount new tokens from the hotwallet hotwalletaddress .
"setter methods , only for the unlocked state ."
transfers amount from the treasury to to .
sets an import fee of fee on address addr .
sets an export fee of fee on address addr .
sets allow transactions to allow .
destructs the contract and send remain this . balance .
sets freeze to freeze for account target .
seizes seizeamount of tokens from address and transfer it to hotwallet .
'returns the fee for a transfer from from to to on an amount amount .
shuts down all transaction and approval options on the asset contract .
helper methods for siphon .
sets the total supply .
private methods .
make sure only the front end asset can call the transfer methods .
"setter methods , only for the unlocked state ."
sets the token facade contract address .
sets the membership contract address .
sets the oversight address ( not the contract ) .
set the token standard the contract apply to .
sets the name of the contraxt .
sets the symbol .
sets the precision .
sets the balance of a certain account .
sets an allowance from a specific account to a specific account .
sets the treasure balance to a certain account .
transfer _amount from _caller to _to .
"transfer _amount from _from to _to , invoke by _caller ."
approve approves spender _spender to transfer _amount from _caller .
approve approves spender _spender to transfer _amount from _caller .
mints mintedamount new tokens to the hotwallet hotwalletaddress .
destroys destroyamount new tokens from the hotwallet hotwalletaddress .
sets allow transactions to allow .
seizes seizeamount of tokens from address and transfer it to hotwallet .
helper methods for siphon .
returns the balance of _address .
returns the total supply of the token .
transfer _amount to _to .
approve approves spender _spender to transfer _amount .
approve approves spender _spender to transfer _amount .
transfer _amount from _from to _to .
returns fee for transferral of _amount from _from to _to .
make sure only the front end asset can call the transfer methods .
request withdrawal of fund from the vault .
withdraw fund .
use the recovery address to send all fund to the nominated address and self-destruct this vault .
permits lock fund for long than the default duration ; useful if you will not have access to your recovery key for a while .
used to ensure only the owner can do some things .
used to ensure only the utils contract can do some things .
used only by the wizard to check his commission .
used only by the wizard to collect his commission .
makes sure a method be only call from the hotwallet .
"setter methods , only for the unlocked state ."
"sets the approval expiry window , call before the contract be lock ."
"approves an amount for a certain currency , call before the contract be lock ."
"sets the expiry window for a certain currency , call before the contract be lock ."
"sets an oversight address , on active or inactive , call before the contract be lock ."
sets the approval expiry window to secs .
adds and activate new oversight address addr .
removes / deactivate oversight address addr .
approve amount of asset currency to be withdraw .
validate that amount be allow to be transact for currency .
shutdown transactions on asset currency .
helper methods for siphon .
returns the amount of oversight address .
private methods .
check if the amount of for a certain asset / currency have be approve in the oversight address .
check if the amount of for a certain asset / currency have be approve in the oversight address and that the transfer be not to the hotwallet itself .
transfer amount of asset currency from the hotwallet to to .
transfer amount of asset currency from from to to .
approve spender to transfer amount of asset currency from the hotwallet and make a consequential call .
approve spender to transfer amount of asset currency from the hotwallet and make a consequential call .
private variables .
"n : max number of tokens to be issue price : in wei , e . g ."
the owner of the challenge can terminate it .
private function .
the owner of the challenge can terminate it .
private function .
private variables .
private function .
public function .
check if a give account belong to this daochallenge .
"converts give number to base58 , limit by _maxlength symbols ."
get record sender .
checks if enough fee provide .
checks if provide string have valid format .
concatenates two string .
checks if provide json string have valid chainy format .
sets configuration option .
returns configuration option .
add / remove service account .
set receiver address .
add record .
get record timestamp .
get record json .
lodge deposit for a set of address hash .
withdraw fund hold for expired deposit .
fetches information on a future withdrawal event .
checks if a deposit be hold for the provided address .
pays out a claim .
"deletes the contract , if no deposit be hold ."
splits the fund into 2 address .
splits the fund into 2 address .
the 160 lsb be the address of the balance .
"n : max number of tokens to be issue price : in szabo , e . g ."
prevents methods from perfoming any value transfer .
allows only the owner to call a function .
authorizes a regular account to act on behalf of a contract .
close the contract .
a contract attempt to get the coin .
allow another contract to spend some tokens in your behalf .
authorizes a regular account to act on behalf of a contract .
change troglog controller .
point troglog to ark .
send coin .
load / unload calls for company . .
taks fuer initialisierung . .
taks fuer abrechnung . .
geldeingang verbuchen . .
allow only registrar to exec the function .
point provide identities to the desire things array index in the lookup hash table idtothing .
public functions .
"create a new thing in the registry , only for registrants ."
create multiple things at once .
"add new ids to the thing , only registrants allow ."
update thing 's data .
"set validity of a thing , only registrants allow ."
delete previously add thing public_function .
get length of the schemas array constant_function .
get thing 's information constant_function .
check if thing be present in the registry by it 's id constant_function .
create a new schema .
desctruct the smart contract .
function ca n't contain ether value .
allow only registrants to exec the function .
return fund back to the curator .
return fund back to the curator .
"after market lifetime have elapse , no new offer be allow ."
convienience function for the curator to calculate the required amount of wei that need to be transfer to this contract .
this require that the token-holder authorize this contract 's address use the approve ( ) function .
return fund back to the curator .
private function .
allows only the owner to call a function .
constant function .
external function for players .
external function for investors .
draw function for everyone .
owner function .
private function .
add modifier .
only send eth .
only send etc .
protect user from etc / eth trap .
"i get rich lol , ez ."
take a gift .
function to recover the fund on the contract .
"issueurl : full api url of github issue , e . g ."
only send eth .
only send etc .
will clean-up : ) .
external : increments stack height onlythis : prevent actual external call .
accept value transfer .
external function for players .
draw function for everyone .
private function .
accept value transfer .
the owner can use this function to force the exit of an investor from the contract during an emergency withdrawal in the following situations : .
splits the fund into 2 address .
"the direction count count the position hold by this player in one direction , i . e ."
"buy the spot at _x , _y if it be available and gain point for every connected spot of your color share line with this spot ."
collect your pending payouts use this method .
returns the in array index of one position and throw on off-grid position .
will initiate the next game by clear most of the data and calculate the payouts .
splits the fund on a single chain .
convienience function for the curator to calculate the required amount of wei that need to be transfer to this contract .
this require that the token-holder authorize this contract 's address use the approve ( ) function .
mark contract a have enter an external function .
check if _name be a reasonable choice of name .
"extract a name from bytes _data ( presumably from msg . data ) , ."
turn a short name into a fuzzy hash with the property that extremely similar name will have the same fuzzy hash .
"false if either there be no monarchs , or if the late monarch have reign too long and be strike down by the curse ."
"how much you must pay to claim the throne now , in wei ."
"how much you must pay to claim the throne now , in finney ."
check if a name can be use a a monarch name .
get detail of the late monarch ( even if they be dead ) .
claim throne in the give _monarchname .
mark contract a have leave an external function .
used by either the topwizard or subwizard to transfer all right to future commission to the _replacement wizard .
allow commission fund to build up in contract for the wizards to withdraw ( carefully ring-fenced ) .
send compensation to late monarch ( or hold fund for them if can not through no fault of current caller ) .
see world . createkingdom ( . . ) .
create a new kingdom .
"index into kingdomsbynumber if find , or zero if not ."
check if a name can be use a a kingdom name .
check if rule would be allow for a new custom kingdom .
how much one must pay to create a new kingdom ( in finney ) .
create a new kingdom use custom rule .
used by topwizard to transfer all right to future fee and future kingdom wizardships to _replacement wizard .
used by topwizard to vary the fee for create kingdoms .
used by topwizard to vary the cap on claim price .
used by topwizard to vary the factory contract which will be use to create future kingdoms .
"if there be no exist kingdom call _kingdomname , create a record map that name to kingdom no ."
amount of ether hold for _address .
send the caller ( msg . sender ) .
send _valuewei of the ether own by the caller ( msg . sender ) .
internal version of withdrawfunds ( ) .
"internal version of withdrawfundsadvanced ( ) , also use by withdrawfundsrp ( ) ."
"make _rawvaluewei into a nicer , rounder number ."
convert _valuewei into a whole number of finney .
see world . createkingdom ( . . ) .
this require that the token-holder authorize this contract 's address use the approve ( ) function .
this function be only valid for a very small amount of time after which it will become useless ! .
"returns the ether on the real network to the sender , while forward the classic ether to a new address ."
prevents methods from perfoming any value transfer .
for test .
"the commiter get his bounty and deposit , there be three situations 1 ."
"if the campaign fail , the consumers can get back the bounty ."
private function .
public function .
distribute pending balance between etc and eth subwallets .
if the address be not valid and the institution name if the address be valid .
0x0000000000000000000000000000000000000000 if the name be not valid and the institution ethereum address if the name be valid .
function which change the admin address of the contract .
check the fork condition during creation of the contract .
these two function be for easy external interaction via api . etherscan . io : .
splits the fund into 2 address .
"if we be currently in the right branch of the blockchain , send money to the give recipient ."
splits the fund into 2 address .
pre-fork : return 0 puritanical : return 1 dao-rescue ( hard fork ) : return 2 .
"10m ether be 2m less than would be available for a short while in withdrawdao after the hf , but probably more than anyone be willing to drop into withdrawdao in classic ."
"failsafe : if the above assumption be incorrect , hf tine wo n't have balance in darkdao anyway , and classic have a sliver of time before darkdao split happen ."
lets the organizer add a new data request .
returns the amount of datarequests currently present .
logs the data request with the request id .
gets the data point associate with the provided datarequest .
lets the organizer add a new data point .
suicide : ( .
check the fork condition during creation of the contract .
constans function .
for investors .
for players .
for owner .
private function .
internal function .
restrict msg . sender .
do n't run recursively .
"could use kill ( ) straight-up , but want to test gas on live chain ."
simple single-sig function modifier .
main method : .
this use call . value ( ) ( ) .
value should be a comma-separated list of value .
main method : .
contract owner function .
general bank account function .
get account number from a owner address .
deposit function .
withdrawal / transfer function .
security function .
burn dao tokens in exchange for spork tokens .
transfer spork tokens from msg . sender .
transfer spork tokens from one account to another .
determine the spork token balance for an account .
approve an address to spend tokens on your behalf .
maximum amount a spender can withdraw from an account .
make a bet .
get all bet that have be make .
does a byte-by - byte lexicographical comparison of two string .
compares two string and return true iff they be equal .
function below give information about the game in ethereum wallet .
modifier to allow only the whitelisted address .
withdraw fund a / when need .
accept donations from anywhere and give credit .
log an event .
activate / deactivate a specific person .
update a person 's name .
update a person 's relation .
update a person 's dob .
update a person 's dod .
add a whitelist address .
remove a whitelist address .
only owner administration flag .
make a donation and acknowledge our development efforts .
"as a buyer , pay a transaction ."
"as a buyer , rate a transaction ."
simple single-sig function modifier .
this function be execute at initialization and set the owner of the contract .
constans function .
for investors .
for players .
for owner .
change some settings within safety bound .
/ / function betoncolumn / / bet type : column / / input : 0 for first column / / input : 1 for second column / / input : 2 for third column .
check that player have to spin the wheel .
prevents accidental send of eth when you should n't .
function to spin .
check if there be expired gamble .
check bets functions private .
"function solve bet once result be determine : send to winner , add loss to profit ."
checkbeton number ( input ) bet type : number input : choose number .
"checkbet on oddeven bet type : parity input : 0 for even , 1 for odd ."
"checkbet on lowhigh bet type : lowhigh input : 0 low , 1 high ."
"checkbet on dozen bet type : dozen input : 0 first , 1 second , 2 third ."
"checkbet on column bet type : column input : 0 first , 1 second , 2 third ."
update balance with profit losses when there be a withdraw / deposit of investors .
guarantees that gamble be under ( statistical ) safety limit for casino survival .
check number of bet in block ( to prevent miner cheat and keep max reward per block 5eth ) .
check that the player be not play already ( unless it have expire ) .
bet on number .
function betoncolor bet type : color input : 0 for red input : 1 for black .
function betonlow_high bet type : lowhigh input : 0 for low input : 1 for low .
function betonodd_even bet type : parity input : 0 for even input : 1 for odd .
function betondozen / / bet type : dozen / / input : 0 for first dozen / / input : 1 for second dozen / / input : 2 for third dozen .
for investors .
for players .
function to spin .
check that the player be not play already ( unless it have expire ) .
constans function .
internal function .
initializes cont ract with initial supply tokens to the creator of the contract .
send share function .
for investors .
for players .
for owner .
private function .
used to define the winner of the tournament 1 : the win team be updated 2 : all amount invest be gather in globalbet 3 : all balance of the win team update proportionally to the amount invest .
used to bet on the winner of the tournament 1 : check if bet be still open 2 : check if the bet be more than 0 . 1 eth 3 : check if the id of the team be correct ( possible value 1 to 24 ) param uint id the identifier of the team to bet on .
check earn for a specific address .
only allow the withdrawals of the fund once the winning team be update .
allow the creator of the game to send balance .
allow the creator to collect the 3 fee .
"account and amount send to dao , round down only txn 100 tokens ."
get number of element in array a_document ( do not use gas ) .
protects users by prevent the execution of method call that inadvertently also transfer ether .
simple single-sig function modifier .
( re ) set the daily limit .
do n't buy from exchange ! only buy from normal account in your full control ( private key ) .
function below be for owner only .
allow the creator to send their balance to the players .
modifier that allow only shareholders to vote and create new proposals .
register a new pull request .
close the current request in queue and move the queue to it next element .
get the last non publish pull-request from the queue .
check that the player be not already in the game .
"in case there be too much expire duel in queue for automatic payout , ."
todo : remove in release .
the following function design for mist ui .
"starttime should be set to the time when pos start ( on dec 17 , probably block 705000 or so ) ."
get information from accountsused structure .
this allow to end pos before 2550 days pass or to extend it far .
this allow to disable pos send for some of the cycle in case we need to send custom pos .
set to 0 to reward everyone .
first 90 days 50 yearly .
"cycle numeration start from 1 , 0 will be handle a not valid cycle ."
returns how much elcoin would be grant for user 's minimal balance x in cycle y .
this function log the balance after the transfer to be use in further calculations .
get minimal balance for address in some cycle .
get information from accountsused structure .
todo : remove in release .
when the mad king decide to give his seat to someone else the king cost will be reset to 1 ether .
anyone can usurpation the kingship .
when the king decide to collect his fee .
"this function check if the expiry date have pass and if it have , then return the tokens to the beneficiary ."
when the mad king decide to give his seat to someone else the king cost will be reset to 2 ether .
anyone can usurpation the kingship .
this be the function that actually insert a record .
updates the value of the give record .
unregister a give record .
transfer ownership of a give record .
tells whether a give key be register .
returns the owner of the give record .
returns the registration time of the give record .
returns the total number of record in this registry .
this function be use by subcontract when an error be detect and the value need to be return to the transaction originator .
registry owner can use this function to withdraw any value own by the registry .
drawpot trigger from host after time have pass or pot be mature .
this should only be need if a bug be discover in the code and the contract must be destroy .
drawpot trigger from host after time have pass or pot be mature .
game info display abi function : .
"set name , optionally play a round if ether be send ."
end public functions private functions : .
generate pseudo semi-random number between 1 - max .
play function ( play by contract function call ) .
random number generator ( between 1 and range ) .
function that determine randomly when the round should be end .
function to end round and pay winners .
full refund of current round ( if need ) .
function reactivates contract ( after change of settings for instance or a refound ) .
"function to change game settings ( within limit ) ( to adapt to community feedback , popularity ) ."
contract construtor .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
return contrarians .
full refund of current round ( if need ) .
desactiver l'envoi d'argent sur ces fonctions .
function below give information about the game in ethereum wallet .
initiate function .
contract management function .
contract informations .
public interface to the directory of game .
this be the function that actually insert a record .
updates the value of the give record .
returns the owner of the give record .
returns the registration time of the give record .
registry owner can use this function to withdraw any surplus value own by the registry .
returns the total number of record in this registry .
update balance so they display in ethereum-wallet .
this be the function that actually insert a record .
transfer ownership of a give record .
registry owner can use this function to withdraw any value own by the registry .
contract informations .
"function to modify settings , only if no player in a round ! ."
function below give information about the game in ethereum wallet .
contract management .
json function .
initiate function .
contract informations .
current number of players still wait for their payout .
the total payout this entry in line will receive .
the payout amount still due to this entry in line .
public interface to the line of players .
"jump in line , move entries back towards the end one at a time presume the line length have already be increase to accomodate the newcomer return the the number of position skip and the index of the vacant position in line ."
when the castle would be no more . . .
when the brided citizen decide to give his seat to someone else .
when the brided citizen decide to collect his fee .
initiate function .
contract informations .
simple onlyowners function modifier .
buy add .
distribute earn to participants .
check if contract be outdate which mean there be no any transacions since ( now - outdateduration ) second and it go to reset .
find and set referral id .
send fee to all contract owners .
change single ownership .
set official contract front-end website .
add new charity foundation to the list .
"clear charity foundations list , to make new one ."
fills or partially fill the order .
simpler call signature that use msg . sender .
simpler call signature that default to the account allowance .
simpler call signature that use msg . sender .
"cancel the order , return all fund to the owner ."
buy a ticket and send a hidden integer that will take part in determine the final winner .
initiate function .
core of the game .
fee function for creator .
contract informations .
simple manager function modifier .
get number of current day since 1970 .
calculate roi base on investor value .
when the game stop .
when the main player want to transfer his function .
when the main player decide to collect his fee .
when the guy players want to transfer his function .
add wallet to ticket if amount match .
find a winner when 5 ticket have be purchase .
decide if and to whom the jackpot be release .
manager privilege .
"in case the business get sell , the new manager will take over the management ."
it will only be use in case the fund get stick or any bug get discover in the future .
"in case any errors happen the balance can be modify manually , it will only be use a last resort ! ."
the manager can send short message to investors to keep them update .
"the manager can add manually the investors from the previous versions , so that those that invest in the old versions can join u in the new and updated versions ."
no further ether will be accept ( fe match be now live ) .
init payout .
"the manager can add manually the investors from the previous versions , so that those that invest in the old versions can join u in the new and updated versions ."
"the manager can add manually the investors from the previous versions , so that those that invest in the old versions can join u in the new and updated versions ."
the manager can deposit manually from previous version 's balance .
simple single-sig function modifier .
outside-visible transact entry point .
confirm a transaction through just the hash .
revokes a prior confirmation of the give operation .
"in case the business get sell , the new manager will take over the management ."
it will only be use in case the fund get stick or any bug get discover in the future .
manager privilege .
"in case the business get sell , the new manager will take over the management ."
it will only be use in case the fund get stick or any bug get discover in the future .
the manager can send short message to investors to keep them update .
chase the carrot .
contract management .
json function .
contract payout hald .
"if something go wrong , the owner can trigger pay back ."
contract can only be destruct if all payments where pay back .
initializes contract with initial supply tokens to the creator of the contract .
init function run on fallback .
for website .
uint public lastmsgvalue ; uint public lastmsggas ; uint public lastrandomnumber ; .
init function run on fallback .
function call for valid tx to the contract .
fee function for creator .
functions for change variables relate to the contract .
functions to provide information to end-user use json interface or other interfaces .
simple single-sig function modifier .
simple single-sig function modifier .
toggle lock flag .
set lock flag to address on the specific condition .
standard function transfer base on erc223 .
standard function transfer similar to erc20 transfer with no _data .
transfer tokens from one address to another .
allocate token to _address base on _ratio .
check whether msg . sender .
a of now this could be refactored out - there be verification in code .
allows to replace an owner with a new owner .
allows an owner to confirm a transaction .
allows an owner to execute a confirmed transaction .
returns the confirmation status of a transaction .
low level token purchase function .
transfer token for a specified address .
transfer tokens from one address to another .
burns a specific amount of tokens .
owner only functions .
use to exchange other token .
enter this arena .
get previous game record .
get previous game record .
function to access name of token .
function to access symbol of token .
function to access decimals of token .
function to access total supply of tokens .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
onlyowner be available and the amount of coin can be deposit in centerbanker .
only centerbanker be available and withdrawal of the amount of coin to owner be possible .
"when investors buy additional coin in exchange , the amount will require tockenlock for 10 months ."
get data relate to escrow .
return total number of piece .
"edit both title and metadata with one transaction , will make things easy on the front end ."
timeout where piece will be return to original owner if people dont sign .
override to extend the way in which ether be convert to tokens .
initializes contract with initial supply tokens to the creator of the contract .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
send coin .
a contract attempt to get the coin .
set the token transfer fee .
transfer of illegal fund .
burn tokens when user stops rent .
mint a new amount of tokens .
set the illegal fund wallet .
set the redeem wallet .
set the fee wallet .
returns the stake actualamount for active personal stake for an address .
returns the address that each personal stake be create for by an address .
"stakes a certain amount of tokens , this must transfer the give amount from the user ."
"stakes a certain amount of tokens , this must transfer the give amount from the caller ."
"unstakes a certain amount of tokens , this should return the give amount of tokens to the user , if unstaking be currently not possible the function must revert ."
returns the current total of tokens stake for an address .
returns the current total of tokens stake .
address of the token be use by the stake interface .
"must return true if the optional history function be implement , otherwise false ."
helper function to get specific properties of all of the personal stake create by an address .
helper function to create stake for a give address .
helper function to withdraw stake for the msg . sender .
returns the balance of credit at a user 's address .
spends credit for a user .
stakes tokens for the caller and reward them with credit .
"stakes tokens from the caller for a particular user , and reward that user with credit ."
"stakes tokens from the caller for a give user duration , and reward that user with credit ."
internal function to update the credit balance of a user when stake tokens .
sets the lockinduration for stake .
modifier that check that this contract can transfer tokens from the balance in the stakingtoken contract for the give address .
returns the timestamps for when active personal stake for an address will unlock .
transfers the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
safely transfer the ownership of a give token id to another address .
internal function to invoke onerc721received on a target address .
checks if the smart contract include a specific interface .
returns whether there be code in the target address .
updates token metadata hash to whatever be pass in .
gets the token give a token id .
returns an uri for a give token id .
based on mit license code https : / / github . com / oraclize / ethereum-api .
returns whether or not a bytes32 array be empty ( all null-bytes ) .
sets the address of the erc20 token use for fee in the contract .
sets the global tokenuriprefix for use when return token metadata .
creates a new token .
make trasferfrom ( ) pausable .
make safetrasferfrom ( ) pausable .
make modifymetadatahashes ( ) pausable .
checks if the smart contract include a specific interface .
make sure this function name match the contract name above .
logic run whenever a buy order be execute .
logic run whenever a reload order be execute .
return the amount of key you would get give an amount of eth .
return current eth price for x key .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
return the price buyer will pay for next 1 individual key .
return time leave .
returns whether the specify token be own .
internal function to invoke onerc721received on a target address .
returns an uri for a give token id .
gets the total token supply .
internal function to set the token uri for a give token .
gets the token id at a give index of all the tokens in this contract .
query if a contract implement an interface .
complete the release auction .
place a bid on an active auction .
withdraw a bid that be overbid .
token must be release to execute .
token id must be in range .
symbol of this token .
name of this token .
set the king to the ethereum address which be encode a 160 bits of the 256 bite mining nonce .
withdraw any eth inside .
send tokens out .
set allocation buy admin .
remove allocation .
set internal allocation _buyer the adress of the buyer _tokenamount amount allocated tokens + 18 decimals .
transfer a recipients available allocation to their address .
loop address and distribute tokens .
withdraw available tokens .
transfer a recipients available allocation to _recipient .
allow transfer of tokens back to owner or reserve wallet .
owner can transfer tokens that be send here by mistake .
throws if call by any account other than the admin .
throws if call by any account other than the owner or admin .
allows the current adminowner to transfer control of the contract to a newowner .
this be a constructor function which mean the following function name have to match the contract name declare above .
"recover signer address from a message by use his signature param hash bytes32 message , the hash be the signed message ."
only crowdsale contract be allow to distribute tokens .
owner can allow a crowdsale contract to distribute tokens .
function to distribute tokens .
"burns a specific amount of tokens , only can holder 's own token ."
function to burn down tokens .
function to resume distributing new tokens .
function to stop distributing new tokens .
overide erc20 for haltable .
transfer token for a specified address .
standard uint256 function .
uint128 function ( h be for half ) .
value should be a public key .
crowdsale owners can collect eth any number of time .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
allows the current owner to transfer control of the contract to a newowner .
transfers control of the contract to a newowner .
function to mint tokens .
function to stop mint new tokens .
gets the balance of the specified address include freeze tokens .
gets the balance of the specified address without freeze tokens .
get freeze count .
get freeze end date and freezing balance for the freezing portion specify by index .
freeze your tokens to the specify address .
release first available freeze tokens .
release all available for release freeze tokens .
burns a specific amount of tokens .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
mint the specified amount of token to the specify address and freeze it until the specified date .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
update the symbol .
return the currently run tier index a per time .
add a user to the whitelist .
remove an user from the whitelist .
add many users in one go to the whitelist .
method to check whether a user be there in the whitelist or not .
method to transfer all remanining tokens leave to owner leave with the sales contract after the sale have end .
method to check how many tokens be leave .
method to check the user balance .
method to check how many tokens have be sell out till now out of 450 . 5 million .
allows the current owner to transfer control of the contract to a newowner .
allowing owner to transfer the money rasied to the wallet address .
for emergency / hard stop of the sale .
must be call to end the sale .
can be call only once .
low level token purchase function .
method to calculate bonus for the user a per currently run phase and contribution by the user .
function to mint tokens .
return how much tokens will be mint a per algorithm .
new function .
this be a constructor function which mean the following function name have to match the contract name declare above .
throws if pause be true .
throws if pause be false .
set pause to true .
set pause to false .
withdraw erc20 token from contract .
purchase akc .
close crowdsale .
this be a constructor function which mean the following function name have to match the contract name declare above .
we implement erc721 here .
we implement erc721metadata ( optional ) and erc721enumerable ( optional ) .
new function .
close the raise .
close the raise .
withdraw eth form the contranct .
lock tokens .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
total supply .
function that be call when a user or another contract want to transfer fund .
increase the airdrop count to allow sweet humans ask for more beautiful lemon tokens .
define amount of lemon tokens to hold in order to get holder reward .
define how many wonderful lemon tokens will be issue for participate the selfdrop : basic and holder reward .
define how many wonderful lemon tokens will be issue for donators participate the selfdrop .
sends all eth contributions to lovely lemon owner .
"sends all remain lemon tokens to owner , just in case of emergency ."
"update number of lemon tokens remain for drop , just in case it be need ."
notice check if the msgsender be owner .
freeze all env .
this be a constructor function which mean the following function name have to match the contract name declare above .
a uint256 specify the amount of tokens still available for the spender .
a boolean that indicate if the operation be successful .
true if the operation be successful .
limit token transfer until the crowdsale be over .
set the contract that can call release and make the token transferable .
owner can allow a particular address ( a crowdsale contract ) to transfer tokens despite the lock up period .
an uint256 represent the amount own by the passed address .
owner can add the team member / advisor address .
end lock state .
resume lock state .
end lock state for team member / advisor .
sets an external manager that will be able to call setinterfaceimplementer ( ) on behalf of the address .
query if an address implement an interface and thru which contract .
sets the contract that will handle a specific interface ; only a manager define for that address can set it .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
override hasclosed to add minimal value logic .
override purchase validation to add extra value logic .
oraclize callback ( trigger by oraclize ) .
allows owner to schedule future oraclize call .
allows owner to schedule future oraclize call on a rolling schedule .
allows owner to manually set polyusd price .
allows owner to set new gas limit on oraclize query .
use it to get your real tai balance  .
use it to get your current tai balance in readable format ( the value will be round )  .
use it to transfer tai to another address  .
how much someone allow you to transfer from his / her address  .
transfer allow amount of tai tokens from another address  .
allow someone transfer tai tokens from your address  .
open support ticket to prove transfer mistake to unusable address .
token distribution .
erc20 token section .
owner section .
function to mint tokens .
transfer token for a specified address .
manually trigger the steal .
called by the token owner to unblock transfer .
called by the token owner to block transfer .
distory token leave for token sales .
makes sure that the ownership be only change by the owner .
1eth newrate tokens .
"_amount in odin , ."
"_amount , _freezeamount in odin ."
public functions .
admin functions .
private functions .
transfer token for a specified address if transfer be open .
symbol of this token .
name of this token .
"internal transfer , only can be call by this contract ."
function to mint tokens .
transfer token for a specified address .
transfer tokens from one address to another .
burns a specific amount of tokens .
mint a specific amount of tokens .
burn a specific amount of tokens .
allow owner to transfer ownership to newowner .
send fix value to multi address .
authorize part start .
authorize part end .
destroy tokens .
pause once card become tradable .
"start in bytes , length in bytes ."
can be call by anybody can miners withhold block - - not really give up block reward for extra chance - - still really low .
lock tokens .
utility function : - - - - - - - - - - - - - - - - - - - - - - ( ? ) cryptonomicaverification . stringtobytes32 ( string .
! ! ! can be call by any user or contract check for re-entrancy vulnerability http : / / solidity . readthedocs . io / en / develop / security-considerations . html re-entrancy .
only owner .
only owner .
see also : https : / / ethereum . stackexchange . com / question / 2519 / how-to - convert-a - bytes32-to - string .
verification function : - - - - - - - - - - - - - - - - - - - - - - from user acc ( ! ) gas requirement : infinite .
from 'manager ' account only ( ! ) gas requirement : infinite .
from user or 'manager ' account .
only owner .
only by new owner .
only owner .
only owner .
only by manager .
create mintedamount tokens and send it to target .
approves and then call the receive contract .
allows someone to send ether and obtain the token .
"if the user send 0 . 1 ether , he receive 20000tokens ."
function to set new admin address .
function to set new allow address .
function to set transfer lock .
transfer token to a specified address .
transfer token from an address to another specify address use allowance .
special only admin function for batch tokens assignments .
prefix a bytes32 value with x19ethereum signed message : and hash the result .
close the auction .
what be the length of a particular ioucoin ? .
tenderly remove hand from ioucoin and place on another ioucoin .
perform the inevitable action which cause release of that which each ioucoin be build to deliver .
"allow splooger to cause a payload release from your ioucoin , multiple time , up to the point at which no further release be possible . ."
"query stats of next reward , check for expired time , too ."
"sets the interval for daily reward , e . g ."
sets buffer for daily reward .
send ether to owner .
batch exection of regulartransfer ( ) function .
returns the rate of tokens per wei at the present time .
the late charity fraction .
the late price multiplier .
the late n - the price will increase every nth press .
how much time be leave in second if there 's a run campaign .
what be the late campaign 's deadline .
the number of press for the current campaign .
last presser .
returns the winner for any give campaign id .
the current ( or next ) campaign 's jackpot .
function modifier to put limit on how value can be set .
revenue account current balance .
the start balance of the next campaign .
total cumulative press for all campaign .
total cumulative charity for all campaign .
total cumulative revenue for all campaign .
returns the balance of any winner .
functions for handle value .
any winner can choose to donate their jackpot .
dev revenue withdrawal function .
dev charity transfer function - send all of the charity balance to the pre-set charity address .
this allow the owner to withdraw surplus eth .
this allow the owner to withdraw surplus tokens .
withdraw surplus eth .
withdraw surplus tokens .
"fractions must add up to 100 , and can only be set every 2 weeks ."
charity beneficiary can only be change every 13 weeks .
press logic .
"stopping will only affect new campaign , not already run ones ."
"get information about the late campaign or the next campaign if the last campaign have end , but no new one have start ."
anyone can finalize campaign in case the devs stop the contract .
press logic .
start a new campaign .
finalize campaign logic .
get the late parameters .
get the last winner address .
get the total stats ( cumulative for all campaign ) .
the late price for press the button .
"the late jackpot fraction - note the fraction can be change , but they do n't affect any currently run campaign ."
the late revenue fraction .
low level token purchase * * * do not override .
begin buy token related function .
below function can be use when you want to send every recipeint with different number of tokens .
this function can be use when you want to send same number of tokens to all the recipients .
fund retrieval related function .
vote for proj .
function to access total supply of tokens .
get balance of a token owner .
this function be modify for erc223 standard .
erc223 transfer function .
function which be call when transaction target be an address .
function which be call when transaction target be a contract .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
function to distribute tokens to the list of address by the provide uniform amount .
function to distribute tokens to the list of address by the provide various amount .
burns a specific amount of tokens .
function to access symbol of token .
function to access decimals of token .
holder balance .
holder balance .
holder address .
feature and proxy check do internally due to unknown symbol when the function be call .
emits error if call not by asset owner .
emits error if call not by asset proxy .
emits error if _from do n't trust _to .
function to check the amount of tokens that an owner allow to a spender .
release the amount on the time .
update year limit .
set day limit .
transfer different amount of tokens to multiple beneficiaries .
transfer the same amount of tokens to multiple beneficiaries .
perform the initial token distribution accord to the drone madness crowdsale rule .
update the current rate base on the scheme 1st of sep - 30rd of sep - 30 bonus 1st of oct - 31st of oct - 20 bonus 1st of nov - 30rd of oct - 10 bonus 1st of dec - 31st of dec - 0 bonus .
perform an airdrop from the airdrop pool to multiple beneficiaries .
transfer tokens to advisors from the advisor 's pool .
transfer the ownership of the token conctract .
validate min and max amount and other purchase condition .
update invest amount .
perform crowdsale finalization .
validate min investment amount .
only allow access from the late version of an 0racle contract within the zer0net after deployment .
initialize all delete methods .
initialize all setter methods .
erc20 functions .
"transfer function when _to represent a contract address , with the caveat that the contract need to implement the tokenfallback function in order to receive tokens ."
non-erc functions .
returns the total amount of tokens in supply .
returns the total amount of tokens ever burn .
returns the balance of a particular account .
transfer the balance from the sender 's address to the address _to .
allows _spender to withdraw the _allowance amount form sender .
erc223 functions .
get the contract constant _symbol .
get the contract constant _decimals .
transfer the balance from the sender 's address to the address _to with data _data .
fills the input order .
"multiplies two number , throw on overflow ."
to check whether address be whitelist or not .
burn specify number of gscp tokens .
total number of tokens in existence .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
transfer token for a specified address .
"transfer ownership of this contract , only by owner ."
renouncing to ownership will leave the contract without an owner .
"integer division of two number , truncate the quotient ."
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
to transfer back any accidental erc20 tokens send to this contract by owner .
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
throws if call by any account other than the owner .
this function have to be trigger once after ico sale be complete .
to pause token transfer .
to resume token transfer .
to add address into whitelist .
to remove address from whitelist .
multiplies method .
division method .
subtracts method .
add method .
burns _amount tokens from _owner .
this method can be use by the controller to extract mistakenly sent tokens to this contract .
internal function to determine if an address be a contract .
send coin .
allow another contract to spend some tokens in your behalf .
decreace allowance .
a contract attempt to get the coin .
generates _amount tokens that be assign to _owner .
safe math function .
"create new token , supply be hard , be serious on internal ."
withdraw fee to owner .
buy tokens from contract by send ether .
"associate a string , which represent an eos address , to the ethereum address of the entity interact with the contract ."
eth can not get lock in this contract .
if accidentally tokens be transfer to this contract .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
transfers vest tokens to beneficiary .
allows the owner to revoke the vest .
transfer balance to owner .
low level token purchase * * * do not override .
allows execution by the ico only .
throws if call by any account other than the owner .
transfers control of the contract to a newowner .
read only .
public write .
owner only write .
private helpers .
throws if call by any account other than the argument .
throws if call by any account other than either of the two arguments .
transfer token for a specified address .
approve should be call when allow _spender 0 .
guards from invocation only when state be active .
sets a price ( in wei ) for sell one token .
sets contract to active / non active state .
setup redemption destination address .
setup redemption fee value .
gets redemption fee value .
withdraws all ether from buyback contract to specify address .
serviceallowance interface implementation .
fallback function for erc223 standard .
add emission provider .
remove emission provider .
add burn man .
remove burn man .
"returns holder id for the specified address , create it if need ."
adds new address equivalent to holder .
remove an address own by a holder .
change operational status for holder .
changes text for holder .
updates limit per day for holder .
updates limit per month for holder .
change country limit .
increase the amount of tokens that an owner allow to a spender .
transfer tokens from this contract to an account .
deposit tokens to the bank .
withdraw tokens from the bank .
borrow tokens from the bank .
borrow tokens from the bank on behalf of another account .
repay tokens to the bank .
approve a new borrower .
revoke approval of a borrower .
gets balance of bank .
transfer tokens from an account to this contract .
- onlyowner modifier only allow the contract owner to run the code .
"the first four parameters relate to token order , the last eight relate to dex order ."
the order in this function have be wrap in structs to reduce the local variable count .
"iterates through a list of token order , transfer the sell order to this contract calculate if we have the ether need ."
performs a single trade via the requested exchange handler .
execute multiple trade in a single transaction .
allow the owner to withdraw ether .
allow the owner to withdraw tokens .
source : https : / / github . com / gnosis / multisigwallet / blob / master / contract / multisigwallet . sol .
borrow from the bank on behalf of an arbitrage contract and execute the arbitrage contract 's callback function .
allow the owner to set the bank address .
allow the owner to set the fee .
verify that the borrow tokens be return to the bank plus a fee by the end of transaction execution .
callback from flash lender .
calculate the amount owe after borrow .
spend eth to acquire tokens .
spend tokens to acquire eth .
get the available amount leave to fill for an order .
perform a buy order at the exchange .
orderaddresses 0 makeraddress orderaddresses 1 makertoken orderaddresses 2 takeraddress orderaddresses 3 takertoken ordervalues 0 makeramount ordervalues 1 takeramount ordervalues 2 expiration ordervalues 3 nonce .
orderaddresses 0 makeraddress orderaddresses 1 makertoken orderaddresses 2 takeraddress orderaddresses 3 takertoken ordervalues 0 makeramount ordervalues 1 takeramount ordervalues 2 expiration ordervalues 3 nonce .
set allowance for other address .
mint fortune .
start auction .
bid auction .
end auction .
erc20 semi .
use this function in case of bug .
change the price .
approves and then call the receive contract .
contract admin related function .
allow the owner of the contract to assign a new allocation .
transfer a recipients available allocation to their address .
calculates the amount that have already vest but have n't be release yet .
start pre pre ico .
start pre ico .
start postico .
low level token purchase * * * do not override .
"todo : override this method in the derived function , think about on-chain / off-chain communication mechanism ."
separate function a it be use by derived contract too .
we be start from tail and go upwards .
"must be call after crowdsale end , to do some extra finalization work ."
validation of an incoming purchase .
"override for extensions that require an internal state to check for validity ( current user contributions , etc . ) ."
override to extend the way in which ether be convert to tokens .
black list an address .
low level token purchase * * * do not override .
"the following function can not be execute when the contract be pause , give that they call function from pausabletoken ."
returns name of tokens .
returns symbol of tokens .
returns decimal of token .
returns total supply of tokens .
transfers sender 's tokens to a give address .
increase the token supply and send the new tokens to an account can only be call by the contract owner .
rewrite transfer method .
mint egas .
call any function from another contract .
mint tokens .
burn tokens .
true if the transfer be successful .
true if the transfer be successful .
transfer tokens from one address to another .
token owner can approve for spender to transferfrom ( . . . ) .
convert your token back to eth .
fix for the erc20 short address attack .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
can recommit this give you more chance if no-one else send the callback ( should never happen ) still only get a random extra chance .
can be call by anybody can miners withhold block - - not really give up block reward for extra chance - - still really low .
"call by the owner to unpause , return to normal state ."
function to mint tokens .
modifier to make a function callable only when the contract be pause .
"call by the owner to pause , trigger stop state ."
witness execute owner die .
utility functions .
"returns a positive number if other come lexicographically after self , a negative number if it come before , or zero if the content of the two slice be equal ."
create last will contract .
get address contracts .
token distribution .
warning : make sure that user who own bonus be still in whitelist ! ! ! .
source of tokens .
override to extend the way in which ether be convert to tokens .
determines how eth be store / forward on purchase .
low level token purchase * * * do not override .
validation of an incoming purchase .
create last will contract .
return nonce use function .
submit a presigned transfer .
submit a presigned approval .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
true if the sender can transfer .
user remove from blacklist .
user insert into blacklist .
transfer token for a specified address .
transfer tokens from one address to another .
releasing fund .
set reserve data .
tax parameters .
burns a specific amount of tokens .
token owner can approve for spender to execute another function .
throws if call when contract be frozen .
transfers tokens to a specified address .
transfers tokens from one address to another .
approves the passed address to spend the specified amount of tokens on behalf of msg . sender .
batch transfer for erc20 token . ( the .
batch transfer for erc20 token .
batch transfer for eth . ( the .
batch transfer for eth .
allows _spender to spend no more than _value tokens in your behalf .
function to check the amount of tokens that an owner allow to a spender .
burns a specific amount of tokens .
function to mint tokens .
function to stop mint new tokens .
function to distribute tokens to the list of address by the provided amount .
function to collect tokens from the list of address .
function to distribute tokens to the msg . sender .
allows the current owner to transfer control of the contract to a newowner .
prevent target from send or receive tokens .
prevent target from send or receive tokens by set unix time .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
transfer tokens from one address to another .
"_amount in fnk , ."
"_amount , _freezeamount in fnk ."
calculates the amount that have already vest .
"internal transfer , only can be call by this contract ."
"internal transfer , only can be call by this contract ."
calculates the amount that have already vest .
calculates the amount that have already vest .
"multiplies two number , throw on overflow ."
total number of tokens in existence .
transfer token for a specified address .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
function to mint tokens .
function to stop mint new tokens .
function to mint tokens .
burns a specific amount of tokens .
get the number of managers .
get list of managers .
check whether the address be in the list of managers .
adding a manager .
remove manager .
multi-transaction of tokens .
external purchase ( managers only ) .
closing the crowdsale contract and transfer the right of the token contract to the specify address .
renouncing to ownership will leave the contract without an owner .
allows the current owner to transfer control of the contract to a newowner .
transfers control of the contract to a newowner .
"internal transfer , only can be call by this contract ."
"call by the owner to pause , trigger stop state , end ."
"call by the owner to unpause , return to normal state , start ."
internal function to clear current approval of a give token id .
internal function to mint a new token .
internal function to add a token id to the list of a give address .
internal function to remove a token id from the list of a give address .
internal function to invoke onerc721received on a target address .
gets the token name .
gets the token symbol .
returns an uri for a give token id .
gets the total amount of tokens store by the contract .
internal function to add a token id to the list of a give address .
internal function to remove a token id from the list of a give address .
gets the balance of the specified address - overrriden from previous to save gas .
whether propose own the card .
the number of card which have be burn .
total supply .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
authorize part end .
create mintedamount tokens and send it to target .
function server relate .
set an exist server a offline .
get server at index .
function game relate .
get balance of address x .
register ztkcheck to the chain .
list all the check in the .
return ztkcheck information by supply beneficiary adddress .
return total count of registered ztkchecks .
issue token base on ether receive .
addition to erc20 token methods .
addition to erc20 token methods .
addition to erc20 token methods .
addition to standardtoken methods .
addition to standardtoken methods .
transfers tokens hold by timelock to beneficiary .
throws if call by any account other than the owner or the executor .
public function that allow users to determine the current price ( in wei ) per token .
"function to change the contract 's executor , which can then add address to the whitelist ."
overriden token value function .
adds single address to whitelist .
adds list of address to whitelist .
removes single address from whitelist .
validation of an incoming purchase .
investors can claim refund here if crowdsale be unsuccessful ( softcap not reach or a specify by owner ) .
allow the tokensale owner to specify that refund be allow regardless of soft cap goal .
"vault finalization task , call when owner call finalize ( ) ."
does the validshahashes map have an entry accescodehash true .
distribute token to multiple address .
withdraw an amount of available tokens in the contract .
set a token contract address .
the list address be not valid recipients of tokens .
erc20 methods .
token drain .
get the token balance for account tokenowner .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
returns the rate of tokens per wei at the present time .
overrides parent method take into account variable rate .
calculate the number of tokens available for teamaccount .
get the number of tokens available for the current private fund account .
team lock .
privately offer fund lock .
team account transaction .
team account authorization transaction .
privately offered fund transfer token .
privately offered fund transfer token .
destroy the msg sender 's token onlyowner .
transfer token .
transfer token .
privately offer fund .
issue the token .
get token price .
approves and then call the receive contract .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
destroy tokens .
destroy tokens from other account .
let the contract keep from the short-address attack .
send coin .
only stop for bonus distribution .
only owner or smart contract of the same owner in chain .
get rate : number of wei to buy 0 . 01 mozo token .
set rate : .
get flag indicate ico reach hardcap .
"add an address to the whitelist , sender must have enough tokens ."
"add address to the whitelist , sender must have enough tokens ."
remove an address from the whitelist .
remove address from the whitelist .
owner should release investmentdiscount smart contract before call this .
owner must release all sale smart contract .
get total distribution in wei .
get no .
get unsold tokens .
get distribute tokens .
override transfer token for a specified address .
override transfer token for a specified address .
owner must release all sale smart contract .
investor claim tokens .
"only call after release all sale smart contract , this smart contract must have enough mozo tokens ."
check address be valid owner ( owner or coowner ) .
only owner or coowner .
method to calculate reward ( call internally by callback ) .
calculate the number of tokens available for teamaccount .
get the number of tokens available for the current account private placement .
transfer token for a specified address .
transfer tokens from one address to another .
allows anyone to execute a confirmed transaction or ether withdraws until daily limit be reach .
privately offer fund .
issues the token .
get smart contract 's owner .
"internal transfer , only can be call by this contract ."
freeze ? prevent allow target from send receive tokens .
function to mint tokens .
check if the msgsender be owner .
constructor function .
get allowance .
"internal transfer , only can be call by this contract ."
set allowance for other address .
standard erc-20 function .
standard erc-20 function .
if something go wrong .
retrieves block number at which sender perform redemption .
retrieves eth balance of sender at the time of redemption .
checks to see if sender be redemption ready by verify that we have a balance and block for the sender .
attach the auth ( ) modifier to function to protect them .
attempts to trigger the action .
a version of auth ( ) which implicitly return garbage instead of throw .
an internal helper function for if you want to use the auth ( ) logic someplace other than the modifier ( like in a fallback function ) .
this function be use to both transfer the authority and update the mode .
todo gas ? ? ? .
"the authority can add members until they reach member_count , and then the contract be finalize ( updateauthority ( 0 , dsauthmodes . owner ) ) , ."
some constant getters .
public getter for the action map do n't work in web3 . js .
propose an action use the calldata from this sender 's last call .
propose an action .
allow another contract to spend some tokens in your behalf .
send coin .
a contract attempt to get the coin .
allow another contract to spend some tokens in your behalf .
checks if target address be a contract .
calls the tokenfallback function of the token receiver .
transfer specify amount of tokens to the specify address .
transfer specify amount of tokens to the specify address .
transfer specify amount of tokens from one address to another .
transfer specify amount of tokens from one address to another .
create a new timelock to replace the old one .
copies the balance of give address from the legacy contract .
copies the balance of a give address from the legacy contract .
destructs the contract and send any remain eth / syc to the owner .
function that be call when a user or another contract want to transfer fund .
function that be call when transaction target be a contract .
assemble the give address bytecode .
"airdrop token to address list , each address distribute the same number of token ."
this function be use to send ether to winner address .
this function be use to return iswinnerselected .
this function be use to return participantlist .
this function be use to return winner name .
this function be use to return organizer .
this function be use to transfer ether to particular address .
this function be use to return one number randomly from participantlist .
returns the eth balance of this wallet .
withdraw fund from this contract .
saveblock be how users post new content .
allows a user to like another users block .
allows a user to dislike another users block .
this will allow an admin to register a user .
allows general users to register their handle .
internal verify function .
get a certain number of block in ascend order .
get a certain number of block in descend order .
get a certain number of an address block in ascend order .
get a certain number of an address block in descend order .
get all block for a give address .
return the number of owners an address have .
return the address of a block owner .
return the address of a block owner .
throws if call by any address other than an admin .
allows the current owner to add / remove another admins status .
return the admin status for another address .
change the wallet that fund be store in .
change an options value .
returns the option value for a give key .
transfers the balance from msg . sender .
send _value amount of tokens from address _from to address _to .
"if whitelist be disable , that will become onlyowner ."
"if whitelist be disable , anyone can do this ."
"call after you have update the market provider , not require after initialize ."
return tokens and weight .
"owner can send eth to the index , to perform some task , this eth belong to him ."
standard function transfer similar to erc20 transfer with no _data .
function to mint tokens .
function to allow mint by a certain address .
function to stop mint new tokens .
burn unsold tokens after ico deadline .
"multiplies two number , throw on overflow ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
failsafe drain .
function for restrict token management .
function for restrict token management partner side .
function for transfer token to book .
function for return tokens .
function for admin .
limitation of buy tokens .
add new team percentage of tokens and lock their release time .
low level token purchase function .
transfer token for a specified address .
function to stop mint new tokens .
stores fund that may later be refund .
"allows for the beneficiary to withdraw their fund , reject further deposit ."
withdraws the beneficiary 's fund .
returns whether refundees can withdraw their deposit ( be refund ) .
"escrow finalization task , call when owner call finalize ( ) ."
extend parent behavior require beneficiary to be in whitelist .
return token price in cents .
string 123 . 45 to 12345 converter .
callback for oraclize .
price updater .
low level token purchase function .
to set ico sale value if need .
upgrade token function .
to send tokens for bitcoin bakers and bounty .
change owner for child contract .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
approves and then call the receive contract .
transfer tokens from the from account to the to account .
returns the amount of tokens approve by the owner that can be transfer to the spender 's account .
token owner can approve for spender to transferfrom ( . . . ) .
owner can transfer out any accidentally send erc20 tokens .
setter for feewallet smart contract ( only owner ) .
setter for traders smart contract ( only owner ) .
enable / disable trade with smart contract ( only owner ) .
buy a token .
sell a token .
trade buy or sell order .
fills a buy order .
transfer tradeables to user account .
collect service / affiliate fee for a buy .
check if an address be a valid member .
collect service / affiliate fee for a sell .
add a valid member address .
remove a member address .
set the new service account .
set the service percentage .
set the affiliate percentage .
calculates the service fee for a specific amount .
calculates the affiliate amount for a specific amount .
collects fee accord to last payment receivedi .
send coin .
a contract attempt to get the coin .
allow another contract to spend some tokens in your behalf .
this return total supply token .
burn token .
burn token from one address .
mint token to one address .
fress token from one address .
unfress token from one address .
contract self destruct .
your eth be go forever but at least you get a consolation prize .
tokens be sell by send them to this contract with approveandcall .
access modifier for cto-only functionality .
assigns a new address to act a the cto .
assigns a new address to act a the ceo .
for create room .
empty the room and refund each player .
a clean and efficient way to generate random and make sure that it will remain the same accross the execute nod of random value .
for pay out balance on contract .
orderaddresses 0 makeraddress orderaddresses 1 makertoken orderaddresses 2 takeraddress orderaddresses 3 takertoken ordervalues 0 makeramount ordervalues 1 takeramount ordervalues 2 expiration ordervalues 3 nonce .
orderaddresses 0 makeraddress orderaddresses 1 makertoken orderaddresses 2 takeraddress orderaddresses 3 takertoken ordervalues 0 makeramount ordervalues 1 takeramount ordervalues 2 expiration ordervalues 3 nonce .
set contribution date .
"enable ico , need to be true to actually start ico multisign wallet need to be set , because once ico start , invest fund be transfer to this address once ico be enable , follow parameters can not be change anymore : starttime , endtime , soldpresaletokens ."
low level token purchase function .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
"end ico by owner , not really need in normal situation ."
true if crowdsale event have end .
drain all eth for owner in an emergency situation .
token related operations .
enable token tranferability .
disable token tranferability .
transfer token to owner account for burn .
ico related operations .
check if the msgsender be owner .
low level token purchase function .
what be the length of a particular finderhyper ? .
tenderly remove hand from finderhyper and place on another finderhyper .
perform the inevitable action which cause release of that which each finderhyper be build to deliver .
"allow splooger to cause a payload release from your finderhyper , multiple time , up to the point at which no further release be possible . ."
default error to simply log the error message and return .
verify an order that the exchange have receive involve this wallet .
"withdraw any token , include ether from this wallet to an eoa ."
get the balance for a specific token .
success of the transaction .
"add a new user to the exchange , create a wallet for them ."
the success of this transaction .
execute an order that be submit by the external order book server .
set the rate of wei per edo token in or to calculate edo fee .
set the wallet for fee to be pay to .
set the minimum amount of ether require per order .
set a new order book account .
simply log the event to track wallet interaction off-chain .
simply log the event to track wallet interaction off-chain .
the total fee to be pay in edo tokens .
remove a version .
verify the input to order execution be valid .
execute the external transfer of tokens .
"compute the log10 of a give number , take the floor , ie ."
calculates keccak-256 hash of order with specified parameters .
returns the price ratio for this order .
compute the tradeable amount of the two verified order .
return the maximum of two uints .
return the minimum of two uints .
define if the ratio to be use be wei / tok to tok / wei .
confirm that the order do match and be valid .
the address of the logic contract to upgrade to .
ask each wallet to verify this order .
confirm wallet local balance and token balance match .
update the order structs .
"deposit ether into this wallet , default to address 0 for consistent token lookup ."
deposit any erc20 token into this wallet .
"the result of an order , update the balance of this wallet ."
success of this transaction .
success of this transaction .
4 * 21m coin total reward begin at 4 * 25 and be cut in half every reward era ( a tokens be mine ) .
transfer tokens from one address to another .
transfer token for a specified address .
increase the amount of tokens that an owner allow to a spender approve should be call when allow _spender 0 .
decrease the amount of tokens that an owner allow to a spender approve should be call when allow _spender 0 .
to transfer back any accidental erc20 tokens send to this contract by owner .
to pause crowdsale .
to resume crowdsale .
"initialize all wallets like team , advisors , bounty etc only by owner ."
burn specify number of pltn tokens .
total number of tokens in existence .
remove single address into the whitelist .
remove single address into the whitelist .
add single address into the whitelist .
transfer unsold tokens after ico deadline .
setup array with vest stag date and percentages .
this method can be use by the controller to extract mistakenly .
add or remove call permissions for an address .
called by 'owner ' to unlock the token .
calculates the total number of tokens that can be unlock base on time .
get how many months have pass since the contract be deploy .
"distribute unlockable tokens to three address , proportion 3 : 1 : 1 ."
get the timestamp of the current block .
owner can step down and assign some other address to this role .
transfer tokens from one address to another .
"initialize token attribution , only allow to call once ."
the dev ( owner ) will call this method to extract the tokens .
get the timestamp of the current block .
wallet fee .
transfer tokens .
transfer tokens from other address .
set allowance for other address .
destroy tokens .
gets the balance of the specified address .
withdraw the fund .
release 10 of reward token .
withdraw amount ether to owner .
buy tokens from contract by send ether .
sell amount tokens to contract .
burn burnamount tokens for target .
transfer tokens from one address to another .
set allowance for other address .
transfer token for a specified address . internal .
transfers tokens hold by timelock to beneficiary .
this be a fixed airdrop .
this be a multi-value airdrop .
this be a multi-value airdrop .
this be authorization drop .
change pause .
"withdraw ether to nami multisignature wallet , only escrow can call ."
"withdraw nac to nami multisignature wallet , only escrow can call ."
set controller address .
remove controller require input address be a controller execute any time in sc state .
burn tokens .
public function 1 transfer tokens .
internal transfer function 1 _transfer .
2 _buy .
3 _sell .
"2 transfer other 's tokens , who have approve some token to me ."
a be msg . sender .
4 allowance and notify the receipient / spender .
onlyowner function 11 freeze or unfreeze account .
12 transfer contract ownership to newowner and transfer all balanceof oldowner to newowner .
13 set price for sellprice or buyprice .
14 open / close user to buy token .
15 open / close user to sell token .
16 transfer eth back to owner .
internal transfer function which skip check - use carefully .
initial internal transfer function which skip check and save gas - use carefully .
whether propose own all of the card .
the address of the owner of the card .
the address approve to transfer this token .
the number of tokens control by owner .
whether the token be own by a non-zero address .
the name of this token .
the symbol of this token .
the total number of card in circulation .
constructor function .
aprove the passed address to spend the specified amount of tokens on beahlf of msg . sender .
mints a token to an address with a tokenuri and tokenhash .
mints many tokens to an address with their tokenuris and tokenhashes .
updates tokenuri for tokenid - to be use to correct errors .
updates tokenhash for tokenid - to be use only to correct errors .
contatenates two string .
converts a uint256 to string .
standard modifier on methods invokable only by contract owner .
a helper routine to bulk clean the storage .
helper routine to move 'processed ' bet into 'clean ' state .
get the expect win amount after house edge be subtract .
helper routine to process the payment .
"standard contract ownership transfer implementation , ."
see comment for secretsigner variable .
change max bet reward .
this function be use to bump up the jackpot fund .
funds withdrawal to cover cost of dice2 . win .
"contract may be destroy only when there be no ongoing bet , either settle or refund ."
betting logic .
"settlement transaction - can in theory be issue by anyone , but be design to be handle by the dice2 . win ."
reverts if not in bet time range .
reverts if it be not possible for the sender to refund the original bet .
reverts if it be not possible for the sender to claim the payout .
reverts if team be not valid .
places a bet for a give team .
refunds total bet amount iff it be not possible to determine the winner .
schedules a wolframalpha query to oraclize to determine the winner of the competition .
callback from oraclize with the name of the win team .
allow owner to suicide the contract after a year .
checks whether the period in which the bet be open have already elapse .
checks whether the sender be eligible for claim a refund .
checks whether the sender be eligible for claim a payout .
"calculates the total payout amount , commission , and donation amount ."
true if presale have start .
low level token purchase function .
implementation of low level token purchase function .
"low level transfer token override to create custom token transfer mechanism , eg ."
send ether to the fund collection wallet override to create custom fund forward mechanisms .
true if the transaction can buy tokens .
set whitelist state for multiple address .
true if presale event have end .
refund transaction - return the bet amount of a roll that be not process in a due timeframe .
get the expect win amount after house edge be subtract .
get the portion of bet amount that be to be accumulate in the jackpot .
betting logic .
"settlement transaction - can in theory be issue by anyone , but be design to be handle by the dice2 . win ."
low level token purchase function .
"remove all ether from the contract , which be the owner 's cut as well a any ether send directly to the contract address ."
creates and begin a new sale .
this be a state-modifying function that can be call while the contract be pause .
"allows to buy a sale item , complete the sale and transfer ownership of the nft if enough ether be supply ."
this be a state-modifying function that can be call while the contract be pause .
cancels a sale when the contract be pause .
returns sale info for an nft on sale .
returns the current price of a sale item .
returns true if the claimant own the token .
"escrows the cctoken , assign ownership to this contract ."
transfers a cctoken own by this contract to another address .
adds a sale to the list of open sales .
cancels a sale unconditionally .
update sale price of item .
computes the price and transfer winnings .
removes a sale item from the list of open sales .
computes owner 's cut of a sale .
allows the current owner to transfer control of the contract to a newowner .
allow a narco to travel between district travel be do by take exit - - index into the loctions .
proxy update to main contract .
emergency protocol .
constructor that give msg . sender .
return a pseudo random number between low and upper bound give the number of previous block it should hash .
transfer tokens from one address to another .
mintabletoken functionality .
function to mint tokens .
pause mint .
owner can transfer other tokens that be send here by mistake .
fix for the erc20 short address attack .
returns the rate of tokens per wei at the present time .
transfer token for a specify contract address .
finalize method mark the point where token transfer be finally allow for everybody .
initialize be call to check some configuration parameters .
allows the admin to change the wallet where eth contributions be send .
allows operator to add account to the whitelist .
allows the admin to set the price for tokens sell during phase 1 and 2 of the sale .
this be the main function to process incoming eth contributions .
allows the admin to move bonus tokens still available in the sale contract out before burn all remain unsold tokens in burnunsoldtokens ( ) .
allows the admin to finalize the sale and complete allocations .
"the internal one will be call if tokens be sell out or the end time for the sale be reach , in addition to be call from the public version of finalize ( ) ."
owner and admin can change the admin address .
owner and admin can change the operations address .
allows the current admin to set the pendingadmin address .
allows the current admin to set the admin in one tx .
allows the pendingadmin address to finalize the change admin process .
withdraw all erc20 compatible tokens .
withdraw ethers .
deactivates vote .
refresh user acc .
vote for proj .
main function .
sets the kybernetwork contract address .
transfer tokens from one address to another .
function to check the amount of tokens that an owner allow to a spender .
reverts if not in crowdsale time range .
low level token purchase * * * do not override .
validation of an incoming purchase .
reverts if beneficiary be not whitelisted .
we use this function to freeze a game .
we use this function to close a game .
returns some basic information about a specific game .
returns all the info relate to the bet .
returns the state of a specific game .
returns the result of a specific game .
returns the total number of game .
compare 2 string and return true if they be identical .
prevent to interact if the game be not open .
prevent to interact if the game be not frozen .
prevent to interact if the game be not close .
changes the minimum amount need to place a bet .
place a new bet .
returns an array contain the ids of the bet place by a specific address .
returns the info of a specific bet .
we use this function to withdraw the house cut from a game .
this function be call by a bettor to withdraw his payout .
returns the raw pool amount ( include the amount of the house cut ) .
returns the total of the pool ( minus the house part ) .
returns the potential payout from a bet .
changes the house cut percentage .
this function create a new game .
send tokens .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
"internal transfer , can only be call by this contract ."
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
overrides delivery by mint tokens upon purchase .
allows the current owner to transfer control of the contract to a newowner .
standard function .
public view function .
"return bool isprofit , uint profitorloss the position 's profit / loss denominate in positiontoken ."
the current margin amount ( a percentage - i . e .
owner function .
internal function .
modifier revert if bzxcontractaddress be n't set .
allows the current owner to transfer the bzx contract owner to a new contract address .
calculates partial value give a numerator and denominator .
provides a registered token 's address when give the token name .
"provides a registered token 's metadata , look up by address ."
"provides a registered token 's metadata , look up by name ."
"provides a registered token 's metadata , look up by symbol ."
returns an array contain all token address .
allows owner to add a new token to the registry .
allows owner to remove an exist token from the registry .
allows owner to modify an exist token 's name .
allows owner to modify an exist token 's symbol .
allows owner to modify an exist token 's icon url .
provides a registered token 's address when give the token symbol .
"provides a registered oracle 's metadata , look up by name ."
returns an array contain all oracle address .
"returns an array of oracle address , an array with the length of each oracle name , and a concatenated string of oracle name ."
concatenates two string .
allows owner to add a new oracle to the registry .
allows owner to remove an exist oracle from the registry .
allows owner to modify an exist oracle 's name .
checks if an oracle exist in the registry .
provides a registered oracle 's address when give the oracle name .
"provides a registered oracle 's metadata , look up by address ."
owner only function .
view function .
transfer biger token to _to with amount of _amount .
bylist function .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
calculates the total number of tokens that can be unlock base on time .
get how many months have pass since the contract be deploy .
get the timestamp of the current block .
transfer to multiple address to a different number of tokens .
transfer the same token number to multiple address .
the dev ( owner ) will call this method to extract the tokens .
check if goal be reach .
burns a specific amount of tokens .
"erc20 transferfrom , modify such that an allowance of max_uint represent an unlimited allowance ."
can be call by anybody .
make an investment .
calculate the amount of tokens purchase base on the value send and current token price .
to increace / reduce number of investment positions release for sale .
allows investment position price change .
emergency function to pause crowdsale .
emergency function to drain the contract of any fund .
function to manually finalize crowdsale .
whitelist function .
initialise and reparametrize multisig .
inititate / extend multisig unlocktime and / or initiate / refund multisig deposit .
withdraw ether from the multisig .
first or second stage of atomic swap .
total supply - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - allowance .
transfers '_value ' in atoken to the '_to ' address .
calculates the ask price in wei per atoken base on the current reserve amount .
calculates the bid price in wei per atoken base on the current reserve amount .
buys atoken in exchnage for wei at the current ask price .
"sells atoken in exchnage for wei at the current bid price , reduce resreve ."
create mintedamount tokens and send it to target .
"compute '_k * ( 1 + 1 / _q ) _n ' , with precision '_p ' ."
round the operand to one decimal place .
"the global maxexparray be sort in descend order , and therefore the following statements be equivalent : ."
return e ( x / fixed_1 ) * fixed_1 .
transfer owner to another address .
send coin .
approve and then communicate the approve contract in a single tx .
a contract attempt to get the coin .
constructor function .
allows for set the bridge address .
allows for set transfer on / off - use a hard stop .
throws if call by any account other than the owner or the someone in the management list .
checks whether fund goal be reach .
"vault finalization task , call when owner call finalize ( ) ."
"overrides crowdsale fund forward , send fund to vault if not finalise , otherwise to wallet ."
"must be call after crowdsale end , to do some extra finalization work ."
adds single address to whitelist .
adds list of address to whitelist .
removes single address from whitelist .
adds single address to the management whitelist .
removes single address from the management whitelist .
allows for update the open time in the event of a delay .
allows for update the private sale close time in the event of a delay .
allows for update the pre sale close time in the event of a delay .
allows for update the pre sale close time in the event of a delay .
allows for update the minimum contribution require to participate .
utility method for return a set of epoch date about the ico .
extend parent behavior to update user contributions so far .
checks whether the hard cap have be reach .
overridden method use to allow different rat for private / pre sale .
checks whether the period in which the crowdsale be open have elapse .
extend parent behavior require contract to not be pause .
allow owner to transfer tokens .
approves and then call the receive contract .
get contributors ' locked amount of token this lockup will be release in 8 batch which take place every 180 days .
get investors ' locked amount of token this lockup will be release in 3 batch : 1 .
set the beneficiary address of this contract .
"if the self-destruction delay have elapse , destroy this contract and remit any ether it own to the beneficiary address ."
"set the transfer fee , anywhere within the range 0-10 ."
base of transfer function .
withdraw tokens from the fee pool into a give account .
donate tokens from the sender 's balance into the fee pool .
add a new vest entry at a give time and quantity to an account 's schedule .
"internal transfer , only can be call by this contract ."
transfers tokens hold by timelock to beneficiary .
send value of ether to address to .
throws if call by any account other than the contractsolidstamp .
transfers control of the registry to a _newsolidstamp .
register an audit request .
withdraw an audit request .
mark contract a audit .
ability for owner to change the service commmission .
calculate the solidstamp commmission .
ability for owner to withdraw the commission .
this be public rather than external so we can call super . unpause .
drains arp .
throws if call by any account other than the owner .
calculate period .
releasableamount ( ) look for the current releasable amount .
release ( ) release the current releasable amount .
showrelease ( ) look for the already release amount of the address at some time .
showunrelease ( ) look for the not yet release amount of the address at some time .
showchargetime ( ) look for the charge time .
showchargecount ( ) look for the user total charge time .
shownextcliff ( ) look for the nex cliff time .
allows the current owner to transfer control of the contract to a _newfunddeposit .
showsegmentation ( ) look for the user balance segmentation .
increase the token 's supply .
decrease the token 's supply .
funding function .
turn on the fund state .
turn off the fund state .
set a new contract for recieve the tokens ( for update contract ) .
send the tokens to new contract by owner .
tokenraised and tokenissued control function base function .
issue token 1 : token issue .
issue token 2 : issue token take back .
issue token take from ethfunddeposit to user .
issue token take from user to ethfunddeposit .
tokenraised and tokenissued control function main function .
issues tokens deduction .
add the segmentation .
sub the segmentation .
"set the token 's tokenexchangerate , ."
calculate the tokenexchangerate .
append : the lockmechanism function by owner .
send eth to bugx team .
call by the owner to addtoblacklist .
call by the owner to unpdeletefromblacklistause .
call by the owner to check the blacklist address .
init segmentation .
transfer tokens .
"internal transfer , only can be call by this contract ."
airdrop to token holders .
burn tokens belong to a specified address .
modifier to allow action only when the contract is pause .
modifier to allow action only when the contract is pause .
copies the balance of a batch of address from the legacy contract .
copies the balance of a single address from the legacy contract .
copies the allowance of a batch of address from the legacy contract .
transfer token for a specified address .
allow internal token transfer .
transfer tokens from one address to another .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
mint tokens for a specified address .
"setkeyvalue assign ( key , value ) pair to a token ."
getkeyvalue get value correspoinding to a key .
el propietario puede transferir cualquier ficha erc20 enviada accidentalmente .
crowdsale stage management .
change the current rate .
finish : mint extra tokens a need before finalize the crowdsale .
calculates the amount that have already vest .
"this function will create a new artwork within the contract , the title be changeable later by the dev but the owner and baseprice can not be change once it 's be create ."
"simple rename function for the artworks , it be good to keep in mind that when the website sync with the blockchain , any title over 32 character will be clip ."
"this function be only for the website and whether or not it display a certain artwork , any user may still buy share for an invisible artwork although it 's not really art unless you can view it ."
the two withdrawal function below be here so that the dev can access the dividends of the contract if it own any artworks .
used to empty the contract balance to an address .
main artwork share purchasing function .
returns natural exponential function value of give x .
returns estimate of 2 * * x give x .
returns bound for value of 2 * * x give x .
returns natural logarithm value of give x .
returns estimate of log2 ( x ) give x .
returns bound for value of log2 ( x ) give x .
set the global registration fee .
set the default reputation reward for new manufacturers .
set the global reputation reward share allot to the author and manufacturers .
set the global block threshold for reward .
"only manufacturers can call , otherwise throw ."
"only irnadmins or owner can call , otherwise throw ."
register device on the atonomi network .
activates the device .
"registers and immediately activate device , use by manufacturers to prepay activation ."
update reputation for a device .
compute the portion of the reputation reward allot to the manufacturer and author .
compute total reward base on the author last submission .
register multiple devices on the atonomi network .
add a member to the network .
remove a member from the network .
change the ethereum wallet for a manufacturer use in reputation reward .
allow a token pool owner to set a new reward amount .
allow participants in the atonomi network to claim their reward .
allow the owner to change the default reputation for manufacturers .
track balance of any deposit go into a token pool .
track balance of any reward go out of the token pool .
ensure a device be validate for registration .
ensure a device be validate for activation .
ensure a device be validate for a new reputation score .
manual eth retrieve .
function to claim any token stick on contract .
this modifier limit function execution to the admin by level .
this function set the adminship level on the contract to _newadmin .
modifier to prevent execution if ico have end .
contribution handler .
check status .
successful closure handler .
check the total of vested tokens still lock for a particular address .
check the total of vested and release tokens assign to a particular address ( this be the actual token balance ) implement erc20 / erc223 interface .
external address ( wallets ) will have codesize 0 .
check the vest at the particular index for the address for amount eligible for release return the eligible amount .
"will release and make transferable any tokens eligible for release to avoid waste of gas , the call agent should have confirm with checkrelease that there actually be something to release ."
vest state access .
implement erc223 interface .
implement erc20 / erc223 interface .
implement erc20 / erc223 interface .
not use for this token implement erc20 interface .
not use for this token implement erc20 interface .
not use for this token implement erc20 interface .
view function to see that last time that the rate be update .
checks that a rate be valid .
transforms a bytes32 value take from makerdao 's medianizer contract into wei per usd rate .
receives rate from outside oracle .
view function to see the rate store in the contract .
gives admin the ability to update the address of btz223 .
returns the information of a user .
the function btz223 use to update user info in this contract .
the withdrawal function for admin .
function that be call when a user or another contract want to transfer fund .
gives admin the ability to switch prebridge state .
gives admin the ability to update the address of reciever contract .
deposit function for users to send tokens to bunz application .
does a byte-by - byte lexicographical comparison of two string .
compares two string and return true iff they be equal .
throws if call by any account that 's not multiowners .
throws if not in initialize stage .
the msg . sender .
the msg . sender .
judge if the event have already be authorize .
clear all the authorizations that have be give for a type of event .
add an address a one of the multiowners .
add an address to the whitelist .
function to stop initial stage .
finds the index of the first occurrence of _needle in _haystack .
add an address to the whitelist .
getter to determine if address be in multiowner list .
remove an address from the whitelist .
change the owner of the contract from this contract address to another one .
function to mint tokens .
function to stop mint new tokens .
freeze the account 's balance under urgent situation .
freeze the account 's balance .
freeze the account 's balance .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
transfers token for a specified address .
transfers tokens from one address to another .
finds the index of the first occurrence of _needle in _haystack .
allow a wallet to claim ownership of an account .
receive the call from oraclize .
"return wei charge by next single oraclize query , assume a constant prooftype , if not constant , amend a param ."
return the cost of the oraclize fee .
pay tournament winners .
check balance of token of each phase .
allow owner to withdraw fund to his wallet anytime in between the sale process .
for emergency stop of the sale .
"must be call after sale end , to do some extra finalization work ."
low level token purchase function .
internal private function .
first call token ( address ) . approve ( mny .
"base rate be 1 ether , so for 1 to 1 send in 1 ether ( towei ) ."
can only add / change tier contract in between mine cycle .
this allow u to use a different set of tiers can only be change in between mine cycle by admin .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
"see private method buildteammapping , buildboolmapping first element in the nested array represent the team user bet on : ( teamone - 0 , teamtwo - 1 , draw - 2 ) second element in nested array be the bet amount third element in nested array represent withdrawal status : ( false - 0 , true - 1 ) additionally ( apply to first level elements ) : first array hold player data for teamone second array hold player data for teamtwo third array hold pleyer data for draw ."
from kycbase .
from icoengineinterface .
from icoengineinterface .
add an emitter account .
remove an emitter account .
mint token in batch .
transfer token in batch .
burn tokens .
function to check the amount of tokens that an owner allow to a spender .
function to check the amount of tokens that _tokenowner have .
finish mint process .
send coin throw on any error rather then return a false flag to minimize user errors .
allows another account / contract to spend some tokens on it behalf throw on any error rather then return a false flag to minimize user errors .
an account / contract attempt to get the coin throw on any error rather then return a false flag to minimize user errors .
sell amount tokens to contract .
set many pixels with one tx .
sets the pixel .
sets canvas name .
adds all unpaid commission to the owner 's pending withdrawals .
adds all unpaid reward of the caller to his pending withdrawals .
calculates how much of commission there be to be pay .
calculates unpaid reward of a give address .
returns total amount of commission charge for a give canvas .
returns total amount of commission that have be already pay ( add to pending withdrawals ) .
returns all reward charge for the give canvas .
returns total amount of reward that have be already pay ( add to pending withdrawals ) by a give address .
calculates how the initial bid money will be split .
calculates how the money from sell canvas will be split .
adds a bid to fee history .
adds a bid to fee history .
gets a fee history of a canvas .
places bid for canvas that be in the state state_initial_bidding .
returns last bid for canvas .
buy artwork .
cancels previously make sell offer .
accepts buy offer for the canvas .
creates new canvas .
similar to createcanvas ( ) .
changes canvas . bookfor .
sets pixel .
set the kyc contribution cap for one address .
add the specified address to the aml whitelist .
for payments in other currencies .
"if the ico be finish and the goal have be reach , this function will be use to mint and transfer btnt tokens to each contributor ."
return the token sale bonus permille depend on the current time .
"if crowdsale be unsuccessful , investors can claim refund here ."
increase the token 's supply .
decrease the token 's supply .
during the public ico users can buy tuc tokens by send eth to this method .
"approve kyc of a user , who contribute in eth ."
"refusing kyc of a user , who contribute in eth ."
retrieve eth from the contract .
airdorp in batch .
set the halted tag when the emergent case happen .
allocate a particular amount of tokens from onwer to an account .
freeze a particular account in the case of need .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
token owner can approve for spender to transferfrom ( . . . ) .
function that be call when a user or another contract want to transfer fund .
function that be call when transaction target be an address .
transfer from one address to another take into account erc223 condition to verify that the to address be a contract or not .
function to increase the block height .
function to calculate the amount of coinbase of the block at this moment .
function to coinbase at new block .
returns value leave to reach crowdsale 's cap .
extend parent behavior require purchase to respect the fund 's low cap .
update tokenssoldcount .
manual send tokens to the specify address .
extend parent behavior require purchase to respect paused state .
"overrides crowdsale fund forward , send fund to vault ."
reverts if beneficiary be not whitelisted .
extend parent behavior require beneficiary to be in whitelist .
"only allow if the crowdsale have be finalize , it be 2 weeks after it close , contributor have not already claim bonus tokens and if purchase have be make at all ."
allows contributor to claim part of the tokens remain after crowdsale stage finalize .
allows owner to claim the remain tokens .
erases 75 of the remain token balance when owner call finalize ( ) or crowdsale reach the max cap .
defines the way in which ether be convert to tokens .
transfers remain token balance to the roll address .
sets address to transfer tokens to upon crowdsale finalization .
"create a reusable template , which should be a json document ."
submit the answer whose hash you send in a previous submitanswercommitment ( ) transaction .
"notify the contract that the arbitrator have be pay for a question , freeze it pending their decision ."
call to initialize distribution * * * do not override .
"request arbitration , freeze the question until we send submitanswerbyarbitrator ."
throws if call by any account other than the owner .
transfer token for a specified address .
transfer tokens from one address to another .
convert any eth provide in the transaction into cash before the function execute and convert any remain cash balance into eth after the function complete .
float fix point operations .
"if best bid be not set or price high than best bid price , this order be the new best bid ."
"if bad bid be not set or price low than bad bid price , this order be the new bad bid ."
"if best ask be not set or price low than best ask price , this order be the new best ask ."
"if bad ask be not set or price high than bad ask price , this order be the new bad ask ."
"if you mark a function nonreentrant , you should also mark it external ."
"consider : do we want the api to be in term of share a it be now , or would the desired amount of eth to place be preferable ? would both be useful ? ."
increase the airdrop count to allow sweet humans ask for more beautiful lemon tokens .
define how many wonderful lemon tokens contributors will receive for participate the selfdrop .
"sends all remain lemon tokens to owner , just in case of emergency ."
"update number of lemon tokens remain for drop , just in case it be need ."
"as a delegation target we can not override the fallback , so we provide a specific method to deposit eth ."
0 : find exchangeid 0 : not find .
pay the fee for the call / transaction .
"in contrast to kyber , bancor use a minimum return for the complete trade , instead of a minimum rate for 1 eth ( for buy ) or token ( when sell ) ."
functions for erc721 below : .
sets a centurion a approve for transfer to another address .
returns the number of centurions own by a specific address .
transfers a centurion to another address .
permit another address the right to transfer a specific centurion via transferfrom ( ) .
"transfer a centurion own by another address , for which the call address have previously be grant transfer approval by the owner ."
1000 centurions will ever exist .
list of all centurion ids assign to an address .
increase the airdrop count to allow sweet humans ask for more beautiful kitten coins .
send coin .
allow other contract to spend some tokens in your behalf .
a contract attempt to get the coin .
this will need to be call manually for each open market if a spender contract be update .
withdraw all fund to contract owner .
get the player id either by player name or address .
add a unconfirmed score to leaderboard / player .
confirm an unconfirmed score to leaderboard / player .
read board metadata for migration a contract owner only .
write board metadata for migration a contract owner only .
read player metadata for migration a contract owner .
write player metadata for migration a contract owner only .
change the cost for use the contract .
split the revenue of a new player between boardowner and contract owner .
add a new leaderboard .
simulate the creation of a leaderboard hash .
get the metadata of a leaderboard .
overwrite leaderboard name and desctiption a owner only .
add a new player to an exist leaderboard .
get player data by leaderboard hash and player id / index .
the leaderboard owner can remove a player .
use token address eth_token_address for ether .
this function always src or d be ether .
solhint-enable code-complexity .
use token address eth_token_address for ether .
solhint-enable function-max - line .
use token address eth_token_address for ether .
use token address eth_token_address for ether .
"when srcqty too small or 0 the expect rate will be calculate without quantity , will enable rate reference before commit to any quantity ."
"for small src quantities dest qty might be 0 , then return rate be zero ."
can be call only by admin .
"for small src quantities dest qty might be 0 , then return rate be zero ."
buys _amount share of every outcome in the specified market .
"cancellation : cancel an order , if a bid refund money , if an ask return share ."
issue refund .
this signature be intend for yesno and scalar market creation .
contract administration .
helper function .
what 's my balance ? .
what be the balance of a particular account ? .
transfer the balance from owner 's account to another account .
send _value amount of tokens from address _from to address _to .
claim dram function .
"multiplies two number , throw on overflow ."
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
burns a specific amount of tokens .
burns a specific amount of tokens from the target address and decrements allowance .
function to mint tokens .
"integer division of two number , truncate the quotient ."
function to freeze address .
function to freeze address .
transfer token for a specified address .
transfer tokens from one address to another .
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
throws if call by any account other than the owner .
renouncing to ownership will leave the contract without an owner .
allows the current owner to transfer control of the contract to a newowner .
transfers control of the contract to a newowner .
total number of tokens in existence .
transfer token for a specified address .
always round up .
claim dram function .
coverage : this be not cover and can not be .
allowed to run in bad time so order can be cancel .
public function .
construction helpers .
"consider : do we want the api to be in term of share a it be now , or would the desired amount of eth to place be preferable ? would both be useful ? ."
"multiplies two number , throw on overflow ."
the token sale contract ( s ) and team can move tokens .
set configuration .
lv of upgrade card .
set upgrade .
start game .
rank of production .
total users .
one card 's production .
decrease the amount of tokens that an owner allow to a spender .
set the contract that can call release and make the token transferable .
owner can allow a particular address to transfer tokens despite the lock up period .
transfer tokens from one address to another .
gets the owner of the specify token uuid .
gets the token id for the specified uuid .
returns the token data associate with a token id .
lock all trade of tokens .
unlock trade .
create a token and give to address .
update a token ( such a it 's treatment or designation or skin ) .
lock a token to prevent it from be trade .
unlock a token so it can be trade .
throws if call by any account other than the admin .
"when card be move around in the app , this will update their ownership on the block chain ."
"these be wrapper function to enable locked tokens , lock trade ."
this function be modify for erc223 standard .
function which be call when transaction target be an address .
function which be call when transaction target be a contract .
transfer tokens from one address to another .
function to distribute tokens to the list of address by the provide uniform amount .
function to distribute tokens to the list of address by the provide various amount .
returns the rate of tokens per wei at the present time .
functions change owner .
allow execution by the bncnetwork contract only .
"allow the owner to update enable the conversion whitelist contract address when set , only address that be whitelisted be actually allow to use the converter note that the whitelist check be actually do by the bncnetwork contract ."
return the expected return for buy the token for a connector token .
return the expected return for sell the token for one of it connector tokens .
return the expected return for sell one of the connector tokens for another connector token .
convert a specific amount of _fromtoken to _totoken .
"convert the token to any other token in the bnc network by follow a predefined conversion path note that when convert from an erc20 token ( a oppose to a smart token ) , allowance must be set beforehand ."
"convert the token to any other token in the bnc network by follow a predefined conversion path note that when convert from an erc20 token ( a oppose to a smart token ) , allowance must be set beforehand ."
create a new converter with the give arguments and transfer the ownership and management to the sender .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
called to mint the reserve tokens .
called to do an airdrop .
extend parent behavior require purchase to respect the minimum of the current phase .
override to extend the way in which ether be convert to tokens .
override to make sure we mint the rest of the tokens that be not purchase .
internal interface .
function to find out what be the current ico phase minimum .
transfer _value tokens from address _from to address _to use allowance msg . sender .
burn token of an specified address .
function to set new allow address .
function to set transfer lock .
transfer _value tokens to address _to .
pay tournament winners .
gets group members .
gets a list of group where pass user be a member .
register new policy rule .
check policy detail .
check policy detail .
gets list of txs ( paginate ) .
gets detail about vote for a tx .
get singe decision vote of a user for a tx .
register user .
discard user registration .
create group .
transfer out any accidentally send erc20 tokens .
multiple token transfer from one address to save gas and time .
sets the dao address .
sets the fund address .
sets the token address .
sets the mine token address .
get token reward .
returns the calculated reward amount .
set last get token reward time .
set last get token reward time .
uint256 the unix timestamp of the end of the last mine day .
"withdraw accumulate balance , call by payee ."
called by the payer to store the send _amount a credit to be pull .
exchanges the hlt tokens to hlpmt tokens .
produces the mine process and send reward to dao and fund .
sends the daily mine reward to hlpmt holder .
timestamp of token creation .
sends the daily mine reward to hlpmt holder .
returns the hlpmt token amount of holder .
max total number of tokens .
gets the balance of the specified address .
function to check the amount of tokens that an owner allow to a spender .
function to mint tokens .
allows the pendingowner address to finalize the transfer .
sets the manager address .
reclaim all erc20basic compatible tokens .
owner can destroy .
approving an address to tranfer tokens .
set _tokenaddress a the token address to be use in the auction .
changes auction price function parameters before auction be start .
finalize the auction - set the final xbet token price and change the auction stage after no bid be allow anymore .
send msg . value .
claim auction tokens for receiveraddress after the auction have end .
"get the xbet price in wei during the auction , at the time of call this function ."
"get the miss fund need to end the auction , calculate at the current xbet price in wei ."
calculates the token price ( wei / xbet ) at the current timestamp .
allocate tokens to the users .
buy tokens from contract by send ether .
drop token .
proxy transfer token .
withdraw all erc20 compatible tokens .
withdraw ethers .
"internal transfer , only can be call by this contract ."
transfer tokens from other address .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
"see private method buildteammapping , buildboolmapping first element in the nested array represent the team user bet on : ( teamone - 0 , teamtwo - 1 , draw - 2 ) second element in nested array be the bet amount third element in nested array represent withdrawal status : ( false - 0 , true - 1 ) additionally ( apply to first level elements ) : first array hold player data for teamone second array hold player data for teamtwo third array hold pleyer data for draw ."
get address of market team .
get address of finance team .
get token release time of first round .
get token release time of second round .
get token release time of third round .
get token release time of forth round .
get token release time of fifth round .
gets the releasedtoken of the specified address .
caculate amt to be release of each round .
transfers tokens hold by timelock to beneficiaries .
get amtoken contract address .
get address of management team .
standard modifier on methods invokable only by contract owner .
refund transaction - return the bet amount of a roll that be not process in a due timeframe .
a helper routine to bulk clean the storage .
get the expect win amount after house edge be subtract .
get the portion of bet amount that be to be accumulate in the jackpot .
"standard contract ownership transfer implementation , ."
change max bet reward .
this function be use to bump up the jackpot fund .
funds withdrawal to cover cost of dice2 . win .
"contract may be destroy only when there be no ongoing bet , either settle or refund ."
betting logic .
"settlement transaction - can in theory be issue by anyone , but be design to be handle by the dice2 . win ."
optional token name .
optional token symbol .
"internal transfer , only can be call by this contract ."
"internal transfer , only can be call by this contract ."
the function of the stop token .
the function of the open token .
the function of the stop token transfer .
the function of the open token transfer .
this be a modifier whether transfer token be available or not .
owner can lock the feature to transfer token .
overwrite due to lockup .
overwrite due to lockup .
transfer some fund to the target purchase address .
callback for oraclize .
initial oracle call trigger by eusd contract .
change eusd contract address .
calculate the percent variance between benchmark value and comparison value .
add new url to map .
change current gas price .
return amount of ether convert into eusd .
return current gas price .
a new 'block ' to be mine .
the number of zero the digest of the pow solution require .
200m coin total reward begin at 500 and be cut in half every reward era ( a tokens be mine ) .
help debug mine software .
help debug mine software .
function to mint tokens .
function to stop mint new tokens .
to determine the timeframe of sale .
allocate tokens to team members .
calculate number of tokens that will be receive in one ether .
to enable pause sale for break in ico and pre-ico .
to resume paused sale .
failsafe drain .
change country limit .
update metadata for token .
remove metadata for token .
return the current price .
"tokenid , x , y , sizea , sizeb , price , inner , outer ."
return token size .
return token scopes .
return token scope counter .
"mint new token , not sell new token ."
move generate units to sell array generate siblings and put it there .
update mint agent .
allow to mint tokens .
"init logo , call it as soon a possible call it after set platform in the token ."
sell new tokens during the round 0 all except logo .
allow user to make an offer after initial phase ( re-sale ) any offer minresalepercentage be accept automatically .
it allow token owner to create art work change request first user upload 2 image then do call this function admin can reject or approve it .
"tokenid , x , y , sizea , sizeb , price ."
withdraw a bid that be overbid and platform owner share .
withdraw ( for cold storage wallet ) a bid that be overbid and platform owner share .
"index of current tiers , if 100000 ( can not use - 1 ) then round 0 finish and we need to move to re-sale ."
"current tier stats index of current tiers , if 100000 ( can not use - 1 ) then initial sale be finish work only during the initial phase ."
approve the offer .
global admin update tier data .
check whether token be mint .
check whether exist unit with same x any y coordinate and it be sell already in order to prevent over write .
token metadata .
reset currentday to 0 and other housekeep function .
does what it say on the tin .
allow u to bring in winners from the previous contract this replace .
"returns holder id for the specified address , create it if need ."
universal method for call exchange function through adapters .
override inherited update function to prevent manual update from authority .
from makerdao medianizer contract .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
multisig msg . value .
withdraw ether and delete the htlc swap .
first or second stage of atomic swap .
"fires an event , prove that we say a player correspond to a give id ."
internal function to add a checklist item to the originals set .
internal function to add a checklist item to the iconics set .
external function to add a checklist item to our mystery set .
returns how many original checklist items we 've add .
returns how many iconic checklist items we 've add .
returns how many unreleased checklist items we 've add .
deploys originals 000 through 032 .
deploys originals 033 through 065 .
deploys originals 066 through 099 .
deploys all iconics and mark the deploy a complete ! .
"returns the mint limit for a give checklist item , base on it tier ."
"for a give owner , return two array ."
an internal method that create a new card and store it .
stops the mint and transfer token ownership to sale owner .
"give the owner the possibility to put the interface into an emergencymode , which will output always a price of 600 usd ."
update the pricefeedsource .
"return the usdeth price , ie get the usd price from maker fee with 18 digits , but last 18 digits be cut off ."
"call by the owner to unpause , return to normal state ."
transfer tokens from one address to another .
transfer token back to owner .
add to unminted .
mint rhem tokens .
mint rhem tokens and aproves the passed address to spend the minted amount of tokens .
decrease amount of rhem tokens that can be mint .
total number of tokens in existence .
gets the balance of the specified address .
transfer token for a specified address .
increase the amount of tokens that an owner allow to a spender .
500 xtv tokens per claimant .
burns tokens at address 0x00 .
token purchase function .
"must be call after crowdsale end , to do some extra finalization ( forward / refund ) work ."
investors can claim refund here if presale / crowdsale be unsuccessful .
low level token purchase function .
send _amount tokens to _to from msg . sender .
changes the foreignbridge .
mints _amount tokens that be assign to _owner .
burns _amount tokens from _owner .
"this be the actual transfer function in the token contract , it can only be call by other function in this contract ."
public variables of the token .
approves and then call the receive contract .
creates a lock for the provided _beneficiary with the provided amount .
creates lock for the provided _beneficiary with the provided amount .
revokes the lock for the provided _beneficiary and _id .
returns the number lock of the provided _beneficiary .
returns the detail of the lock reference by the provided _beneficiary and _id .
changes the beneficiary of the _id'th lock of the sender with the provided newbeneficiary .
releases the tokens for the call sender and _id .
releases the tokens for the provided _beneficiary and _id .
function to set the crowdsale address .
function to activate the controller .
this modifier limit function execution to the admin .
successful closure handler .
function to claim any token stick on contract .
this function transfer the adminship of the contract to _newadmin .
modifier to prevent execution if ico have end or be hold .
check remain and cost function .
whitelist function .
pause function .
contribution handler .
funtion to let users claim their tokens at the end of ico process .
funtion to let admins claim users tokens on behalf of them at the end of ico process .
process to check contract current status .
special only admin function for batch tokens assignments .
function to set supply lock .
burn token of an specified address .
burns a specific amount of tokens .
function to distribute tokens to the list of address by the provided amount .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
transfer tokens from one address to another .
verify investors .
withdraw investment .
prevalidate purchase .
process purchase .
forward fund .
forward fund .
postvalidate purchase .
distribute presale .
set rate .
unverified investors can withdraw their money only after the vreo sale end .
is the sale for iconiq investors ongoing ? .
is the vreo main sale ongoing ? .
get maximum possible wei investment while iconiq sale .
pre validate purchase .
get token amount .
deliver tokens .
distribute tokens .
fonction appelés par le propriétaire du contrat pour passer à l'étape suivante du processus de vente .
vérifier si la vente est validée .
sauvegarder un document ou un ensemble de document identifié ( s ) par le hash de la racine de l'arbre de merkle associé .
addition to erc20 token methods .
addition to erc20 token methods .
addition to erc20 token methods .
addition to standardtoken methods .
addition to standardtoken methods .
throws if call by any account other than the owner .
call by the operator to set the new operator to pause the token .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
burns a specific amount of tokens from the target address and decrements allowance .
override crowdsale validpurchase .
"internal transfer , only can be call by this contract ."
status function .
do a trade .
token owner can approve for spender to transferfrom ( . . . ) .
eth owner sign swap initializing time for correct work of close ( ) method .
btc owner check if eth owner sign swap .
eth owner create swap with secrethash .
btc owner withdraw money and add secret key to swap .
eth owner close swap .
eth owner refund money .
btc owner close swap .
low level token purchase function .
to change rate .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
internal transfer function 1 _transfer .
2 _buy .
3 _sell .
onlyowner function 11 freeze or unfreeze account .
callback for oraclize .
initial oracle call trigger by eusd contract .
transfer eusd token for a specified address .
transfer eusd tokens from one address to another .
approve the passed address to spend the specified amount of eusd tokens on behalf of msg . sender .
increase the amount of eusd tokens that an owner allow to a spender .
decrease the amount of eusd tokens that an owner allow to a spender .
function to mint eusd tokens .
set new oracle address .
record a new address .
transfer tokens from the from account to the to account .
token owner can approve for spender to transferfrom ( . . . ) .
get number of address .
get address by index .
allocate a particular amount of tokens from onwer to an account .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
send ether to the fund collection wallet override to create custom fund forward mechanisms .
500 xtv tokens per claimant .
anyone can call this function .
fix for the erc20 short address attack .
feature 6 ) : budget control .
feature 5 ) : 'convertible ' implement .
"receive approval from an erc20 token contract , take a record ."
return the amount of key you would get give an amount of eth .
end the round .
"distribute eth base on fee to com , aff , and p3d ."
function to access total supply of tokens .
function that be call when a user or another contract want to transfer fund .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
assemble the give address bytecode .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
eth have be transfer so we should not be allow to void transactions .
increase the amount of tokens that an owner allow to a spender .
function to access remain tokens allocate to this contract .
empties the contract of the remain tokens .
throws if call by any account other than the owner .
allows the owner to withdraw the balance of the tokens .
allows the owner to change the broker .
allows the owner to change the pool of tokens .
throws if call by an owner .
throws if call by any account other than the owner .
throws if call with a null address .
allows to add a new owner .
allows to remove an owner .
allows to destroy the contract and return the tokens to the owner .
allows to fund the contract with eth .
allows the owner to change the commission of the reward .
4 * 21m coin total reward begin at 4 * 25 and be cut in half every reward era ( a tokens be mine ) .
allows the unsigned integer store to be change .
returns the currently store unsigned integer .
allows the unsigned integer store to be change .
returns the currently store unsigned integer .
compression key 0-14 - timestamp 15-29 - caller pusher tracker 30-44 - global pusher tracker 45-46 - percent 47 - greedy .
withdraw a bid that be overbid .
transfer tokens from the from account to the to account .
"extenddeadline ( ) : allow the issuer to add more time to the presale , allow it to continue accept fulfillments ."
todo parameters that must be set before compilation init admin . status .
private function .
todo parameters that must be set before compilation init admin . status .
function to mint tokens .
"airdrop token to address list , each address distribute the same number of token ."
allows participants to buy tokens .
allow the owner to change the max gas price .
allow the owner to change token price .
triggers the finalization process .
checks if purchase be valid .
internal function that redirect recieved fund to wallet .
calculates the amount of tokens that buyer will recieve .
calculates wei cost of specific amount of tokens .
triggers the sale finalizations process .
"internal transfer , only can be call by this contract ."
set usd to eth value .
set the crowdsale contract address .
set the storage contract address .
pause the presale .
get fund .
prepare sell of the tokens .
execute sell of the tokens - send investor to investors storage and transfer tokens .
getter for usd price of tokens .
change usd price of tokens .
low level token purchase .
withdraw tokens only after the deliverytime .
executed when a purchase have be validate and be ready to be execute .
validation of an incoming purchase .
computes the bonus .
"performs the finalization task : - if goal reach , activate the controller and burn the remain tokens - transfer the ownership of the token contract back to the owner ."
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
function to distribute tokens to the list of address by the provided amount .
function that be call when a user or another contract want to transfer fund .
require that a valid signature of a bouncer be provide .
allow the owner to add additional bouncer address .
allow the owner to remove bouncer address .
be the signature of this + sender from a bouncer ? .
internal function to convert a hash to an eth sign message .
function to check if an address be whitelisted .
adds list of address to whitelist .
removes single address from whitelist .
handles the off-chain whitelisting .
adds single address to whitelist .
below function can be use when you want to send every recipeint with different number of tokens change the uint256 tosend value * 10 * * 18 ; to adjust the decimal point .
this function can be use when you want to send same number of tokens to all the recipients change the uint256 tosend value * 10 * * 18 ; to adjust the decimal point .
"internal transfer , only can be call by this contract ."
extracting the wrongly send token back into the contract set to 0 if want to get ether .
send _amount tokens to _to from _from on the condition it be approve by _from .
added support for the erc 223 tokenfallback method in a transfer function with a payload .
send _value tokens to _to from msg . sender .
give _spender approve _amount .
generate tokens .
burn tokens .
give _spender approve _amount .
low level token purchase function .
get eth deposit .
"airdrop function which take up a array of address , token amount and eth amount and call the transfer function to send the token plus send eth to the address be balance be 0 ."
public function .
tranfer tokens to address .
tranfer tokens from one address to other .
destroy tokens .
approve transfer .
token allowance .
withdraw all owner .
override to use cumulative rat to calculated amount for vest .
set rate .
set wallet .
send token .
use and override this function with caution .
this be a private function which should be call from user-implemented external mint function .
this be a private function which should be call from user-implemented external burn function .
use and override this function with caution .
use and override this function with caution .
guarantees that msg . sender .
mints a new nft .
returns a bytes4 of keccak256 of json schema represent 0xcert protocol convention .
returns proof for nft .
returns convention data value for a give index field .
returns expiration date from 0 index of token config value .
sets authorise address for mint .
sets mint authorise address .
assures that the provided address be a valid destination to transfer tokens to .
assures that tokens can be transfer .
transfers token to a specified address .
transfers tokens from one address to another .
enables token transfer .
only owner be allow to perform this operation .
set crowdsale address which can distribute tokens even when onlywhentransferallowed be false .
low level token purchase function .
true if crowdsale event have end .
check if currently active period be a give time period .
calculate amount of tokens for a give wei amount .
register and change authorize user .
identification check for kyc / aml .
"register members whose identity information have be verify on the website by batch system , for kyc / aml ."
throws if call by any account other than the congress .
allows the current congress to transfer control of the contract to a newcongress .
congress can regulate new token issuance by contract .
function to mint tokens .
function to burn down tokens .
function to resume mint new tokens .
owner can refund the wrong transfered erc20 .
"callable by owner only , after specified time , only for tokens implement erc20 ."
"when srcqty too small or 0 the expect rate will be calculate without quantity , will enable rate reference before commit to any quantity ."
"for small src quantities dest qty might be 0 , then return rate be zero ."
use token address eth_token_address for ether .
use token address eth_token_address for ether .
make a trade between src and dest token and send dest tokens to msg sender .
make a trade from ether to token .
"make a trade from token to ether , send ether to msg sender ."
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
burns a specific amount of tokens .
transfer token for a specified address .
transfer tokens from one address to another .
change basic ico parameters .
resume a previously suspend ico .
recalculate ico state base on current block time .
add address to ico whitelist .
remove address from ico whitelist .
trigger start of ico .
suspend this ico .
terminate the ico .
"to trigger payout two out of three administrators call this function , fund will be transfer right after verification of third signer call ."
two admnistrator can replace key of third administrator .
reset value of update ( keyupdate object ) .
modifier allow only if function be call by administrator .
override release function .
"must be call after crowdsale end , to do some extra finalization work ."
true if crowdsale event have end .
low level token purchase function .
add a valid trader address .
remove a trader address .
get trader by protocolid .
check if an address be a valid trader .
symbol of the token .
number of decimals for the token .
total number of tokens in circulation .
number of tokens currently belong to the owner of give address .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"true if token transfer be successfully approve , false otherwise ."
number of tokens give spender be currently allow to transfer from give owner .
transfer give number of token from the sign define by digital signature to give recipient .
create tokens .
burn tokens .
freeze token transfer .
unfreeze token transfer .
set smart contract owner .
set fee collector .
current nonce for token holder with give address .
set fee parameters .
fee parameters .
fee for transfer of give amount .
set flag for give address .
flag for give address .
set address of smart contract to delegate execution of delegatable methods to .
address of this smart contract .
address of this smart contract .
"true if tokens be transfer successfully , false otherwise ."
"true if tokens be transfer successfully , false otherwise ."
"true if token transfer be successfully approve , false otherwise ."
name of the token .
check if the address be frozen .
check if the address be frozen .
verify a be great than b .
freeze / unfreeze account can only be call by the contract owner .
increase the token supply and send the new tokens to an account can only be call by the contract owner .
remove tokens from an account and decrease the token supply can be call by the contract owner to destroy tokens from any account or by any holder to destroy tokens from his / her own account .
"send coin throw on any error rather then return a false flag to minimize user errors in addition to the standard check , the function throw if transfer be disable ."
"an account / contract attempt to get the coin throw on any error rather then return a false flag to minimize user errors in addition to the standard check , the function throw if transfer be disable ."
drains arp .
gets the balance of the specified address .
gets the withdrawal timestamp of the specified address .
deposits arp .
withdraws arp .
deposits arp .
set the price of summon a hero with merculet token .
pay with merculet .
"internal transfer , only can be call by this contract ."
function to mint tokens .
transfer the balance from owner 's account to another account .
functions with this modifier can only be execute by the owner .
functions with this modifier can only be execute by the owner .
"when ico be close , send the relaining ( unsold ) tokens to address 0x0 ."
"internal transfer , only can be call by this contract ."
destroy tokens .
total supply .
function modifiers .
public ( player ) function .
this function be call from the diipcoin contract .
only owner function .
private function .
total supply .
minting can only happen when mint be not finish .
owner can remove the ability to mint new coin .
transfer and call function for call function in other contract while send this token .
owner can mint new tokens .
827 section .
transfer token for a specified address .
recycle token for a specified address .
transfer token for a specified address .
transfer tokens from one address to another .
set description .
allows the owner to withdraw any exposure in the crowdsale contract .
allows the owner to change the fund wallet address .
allows the owner to change the exchange rate .
allows a participant to ensure they receive a specfic rate when purchase to prevent front-running by the owner .
assert ( b 0 ) ; / / solidity automatically throw when divide by 0 assert ( a b * c + a b ) ; / / there be no case in which this do n't hold .
gets the balance of the specified address .
transfer tokens from one address to another param _from address the address which you want to send tokens from param _to address the address which you want to transfer to param _value uint256 the amout of tokens to be transfer .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
of cent in usd or satoshi in btc ) .
"call by the owner to pause , trigger stop state ."
function to mint tokens .
function to stop mint new tokens .
"integer division of two number , truncate the quotient ."
locks msg . sender .
bops address setter .
"complete pending transfer , can only be call by msg . sender ."
"cancel pending transfer , can only be call by msg . sender ."
"complete pending approval , can only be call by msg . sender ."
"cancel pending approval , can only be call by msg . sender ."
"allowed hic address to methods : set , remove , be ."
"utility holders methods : set , remove , be ."
"presale priviledge addresses methods : set , remove , be ."
override mintabletoken mint to add kyc logic .
override mintabletoken transfer to add kyc logic .
override mintabletoken transferfrom to add kyc logic .
create the token to be sell .
update hardcap for sale .
update address where fund be collect .
update token units a buyer get per wei .
update token units a vip buyer get per wei .
add vip buyer address .
remove vip buyer address .
override crowdsale buytokens to add pausable sales and vip logic .
true if the transaction can buy tokens .
override finalizablecrowdsale finalization to add 20 of sell token for owner .
release the 1st year lock token .
release the 2nd year lock token .
information on balance of cell for holder .
information on lockup of cell for holder .
completion of operation with safe-keys .
withdrawal tokens from safe for issuer .
change parameters of the cell .
"installation of a lockup for safe , fix free amount on balance , token installation ( run once ) ."
change of safe-key .
transfer tokens from one cell to another .
issue : change to internal pure .
issue : change to internal pure .
check _value tokens allow to _spender by _owner .
"upgrade function , require the owner to first approve tokens equal to their old token balance to this address ."
transfer the balance from the sender 's address to the address _to with data _data .
infers if whether _address be a contract base on the presence of bytecode .
lets buy you some tokens .
adds bonus tokens by token supply buy by user .
transfer the balance from the sender 's address to the address _to .
withdraws to address _to form the address _from up to the amount _value .
allows _spender to withdraw the _allowance amount form sender .
function to check the amount of tokens that an owner allow to a spender .
transfer token for a specified address .
"transfer token from smart contract to another account , only by owner ."
"transfer ownership of this contract , only by owner ."
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
burn specify number of gscp tokens .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
get contributors ' locked amount of token this lockup will be release in 8 batch which take place every 180 days .
get investors ' locked amount of token this lockup will be release in 3 batch : 1 .
proxy transfer token .
proxy transfer token with reverse transfer fee .
proxy transfer token .
"wrapper function : transferproxy + transferreverseproxy address _addrs _from , _origin , _to uint256 _values _value , _feeproxy token flow _from - _origin : _value _from - sender : _feeproxy _origin - _to : _value _to - feeaccount : transferfee _from sign : ( _v 0 , _r 0 , _s 0 ) sign ( _from , _origin , _value , _feeproxy , nonces _from ) _origin sign : ( _v 1 , _r 1 , _s 1 ) sign ( _origin , _to , _value ) ."
"proxy approve that some one can authorize the agent for broadcast transaction which call approve method , and agents may charge agency fee ."
allocate tokens to the users .
"internal transfer , only can be call by this contract ."
set allowance for other address .
"internal transfer , only can be call by this contract ."
allows the current owner to transfer control of the contract to a newowner .
gets the balance of the specified address .
set lock position .
get lockposition info .
set lock position .
get lockposition1 info .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
token owner can approve for spender to transferfrom ( . . . ) .
transfer tokens from the from account to the to account .
sall a token from a contract .
set rate .
"add a contract address to the contract storage , allow it to access storage ."
todo : write unit test to verify .
"notice , override previous implementation ."
function to check the amount of tokens that an owner allow to a spender .
public public function .
sell amount tokens to contract .
"adds two number , throw on overflow ."
"ringbell be a payable function that allow people to celebrate the couple 's marriage , and also send ether to the marriage contract ."
withdraw allow the owner of the contract to withdraw all ether collect by bell ringers .
withdraw allow the owner of the contract to withdraw all ether collect by bell ringers .
"return contract metadata in one function call , rather than separate . call ( ) s ."
"instead of send byte string for the transaction data , string type be use for more detailed description ."
check if the give address be non-user .
set ico contract address to supply tokens .
supply tokens to ico contract .
this function be modify for erc223 standard .
get balance of a token owner .
only owner can submit tracked click ( from ad server ) .
allows the current owner to transfer control of the contract to a newowner .
allows to destroy the contract and return the tokens to the owner .
get the token balance of the contract .
allows the owner to destroy the contract and return the tokens to the owner .
allows the owner to withdraw the token fund .
allows the owner to withdraw the balance of the tokens .
allows the owner to change the beneficiary .
get the token allowance of the contract to the spender .
allows the owner to set up the allowance to the spender .
allows the owner to update the allowance of the spender .
allows the owner to change the spender .
allows the owner make a reward .
allows the owner to change the brokerimp .
allows the owner make a reward .
transfer token for a specified address .
transfer tokens from one address to another .
burns a specific amount of tokens .
this be a constructor function which mean the following function name have to match the contract name declare above .
setting the ownership function of this contract .
create mintedamount tokens and send it to target .
freeze ? prevent allow target from send receive tokens .
"dividend payout section when user want to claim for dividend , they should press this function which will freeze their account temporarily after diviendend payout be complete ."
owner will perform this action to payout the dividend and unfreeze the frozen account .
set the master function of this contract .
set the addition / removal of master address .
set the admin function of this contract .
set the addition / removal of admin address .
"internal transfer , only can be call by this contract ."
transfer tokens from one address to another .
airdrops supm tokens to the specify adresses .
burns a specific amount of tokens from yourself ( the owner ) .
burns a specific amount of tokens from another address .
freeze ? prevent allow target from send tokens .
transfer token for a specified address .
override purchase validation to add extra value logic .
for test .
for test .
set all the date .
testable method .
low level token pledge function .
airdrop to other holders .
set new owner for the smart contract .
airdrop to other holders .
airdrop to other holders .
freeze account - prevent allow target from send receive tokens .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
the address assign the role of securityguard be the only address that can call a function with this modifier .
"by default , we dis-allow payment disburements if the contract be pause ."
states the total number of authorized payments in this contract .
only allowedspenders creates a new payment .
anyone can call this function to disburse the payment to the recipient after earliestpaytime have pass .
convience function to disburse multiple payments in a single tx .
onlysecurityguard delays a payment for a set number of second .
onlyowner cancel a payment all together .
onlyowner adds a spender to the allowedspenders white list .
onlyowner sets the address of securityguard .
onlyowner changes timelock ; the new timelock can not be low than absolutemintimelock .
onlyowner changes the maximum number of second securityguard can delay a payment .
call by the owner to pause the contract .
only callable whenpaused b / c pause the contract will reset allowdisbursepaymentwhenpaused to false .
for overidding during test .
spender interface .
onlysecurityguard can checkin .
it be not recommened to call this function outside of the giveth dapp ( giveth . io ) .
it be not recommened to call this function outside of the giveth dapp ( giveth . io ) .
it be not recommened to call this function outside of the giveth dapp ( giveth . io ) .
it be not recommened to call this function outside of the giveth dapp ( giveth . io ) .
the owner can call this function to add / remove a token from the whitelist .
transfer tokens / eth to the escapehatchdestination .
allow the escapehatchdestination to deposit eth into this contract w / o call donate method .
use to actually receive the donation .
gets the store manage the specify app .
returns true if the registry look ready .
sets new manager .
"sets a wallet a customer service to perform emergency removal of wrong , abused , squatted tweedentities ( due , for example , to hack of the twitter account ) ."
unable / disable a store .
internal getters .
allows other contract to check if a store be active .
return a numeric code about the upgradability of a couple wallet-uid in a certain app .
returns the address of a store .
sets a new identity .
unsets an existent identity .
allow the sender to unset it existent identity .
update the minimum time before allow a wallet to update it data .
sets a store to be use by the manager .
sets the claimer which will verify the ownership and call to set a tweedentity .
sets a new claimer during update .
create the token to be sell .
low level token purchase function .
allow a wallet to claim ownership of an account .
updates the checker for the store .
sets the manager .
sets new manager .
sets new manager .
sets the app .
allows the current owner to relinquish control of the contract .
"multiplies two number , throw on overflow ."
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
function to call from other contract to ensure that this be the proper contract .
function to call from other contract to ensure that this be the proper contract .
function to check if crowdsale be open .
allows the owner to set the current rate for calculate the number of tokens for a purchase .
allows the owner to update the total amount of usd raise .
gets the purchase record for a give address .
adds single address to whitelist .
adds list of address to whitelist .
removes single address from whitelist .
finalizes the crowdsale .
extend parent behavior to check if current stage should close .
overrides parent by store balance in timelock contract instead of issue tokens right away .
"override for extensions that require an internal state to check for validity ( current user contributions , etc . ) ."
finalizes crowdsale .
function to call from other contract to ensure that this be the proper contract .
sets the crowdsale address to allow authorize lock permissions .
sets the token allowance provider address .
marks the crowdsale a be finish and set the crowdsale finish date .
gets the total amount of tokens for a give address .
gets the total number of lock for a give address .
gets the lock at a give index for a give address .
revokes the lock at a give index for a give address .
locks tokens for a give beneficiary .
transfers any tokens hold in a timelock vault to beneficiary if they be due for release .
transfers tokens hold by timelock to all beneficiaries within the provided range .
reviews and release token for a give beneficiary .
allow to set the minter of magnolia tokens once .
"the intention be to set the owner a the dx-proxy , once it be deploy ."
lock token .
airdrop to other holders .
constructor-function create exchange .
allow to close possible theoretical close market .
claim buyer fund for one auction .
clear an auction .
return price in units token2 / token1 .
gives best estimate for market price of a token in eth of any price oracle on the ethereum network .
helper fns .
math fns .
returns whether an add operation cause an overflow .
returns whether a subtraction operation cause an underflow .
returns whether a multiply operation cause an overflow .
returns sum if no overflow occur .
returns difference if no overflow occur .
returns product if no overflow occur .
for quick overview of possible sellerbalances to calculate the possible withdraw tokens .
for quick overview of current sellerbalances for a user .
for quick overview of possible buyerbalances to calculate the possible withdraw tokens .
for quick overview of current sellerbalances for a user .
for quick overview of approved tokens .
for multiple withdraw .
for multiple withdraw .
transfer token for a specified address .
gets the balance of the specified address .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
ends the fund period and send the eth home .
requires the token sale to have close .
requires the token sale to have close .
set rate .
approve user 's withdraw application .
user 's withdraw will success in two case : 1 .
withdraw directly when withdrawenabled true .
admin withdraw accord to user 's sign withdraw info .
swap maker and taker 's tokens accord to their sign order info .
charge fee . fee .
help to refund token to users . this .
constructs the token contract and give all of the supply to the address that deploy it .
the balance of tokens in the wallet .
true if the transfer succeed .
true if the transfer succeed .
true if the approval succeed .
the number of tokens allow to be transfer .
constructor function .
all call_func from msg . sender .
send coin .
create last will contract .
allows anyone to execute a confirmed transaction .
just to check that fund go to the right place tokens be not give in return .
getcontributorremainingcap return remain cap for a contributor .
throws if call by any account other than the owner .
allows the current owner to transfer control of the contract to a newowner .
modifier to make a function callable only when the contract be not pause .
modifier to make a function callable only when the contract be pause .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
the balance .
burns a specific amount of tokens .
if token transfer .
"this modifier check whether the contract should be in a locked or unlocked state , then act and update accordingly if necessary ."
"mint the tokens , can be call only by owner ."
split function to lower the price .
get reserve information .
burn function .
extend parent behavior require beneficiary to be in whitelist .
burns a specific amount of tokens .
override buytokens function a tokens should only be deliver when release .
calculates the token amount per eth contribute base on the time now .
"change the private contribution , in ether , wei units ."
allows owner to start / unpause crowdsale .
allows owner to stop / pause crowdsale .
release tokens to multiple address .
stops crowdsale and release of tokens .
overrides _prevalidatepurchase function in crowdsale .
overrides _gettokenamount function in crowdsale .
overrides _updatepurchasingstate function from crowdsale .
overrides _processpurchase function from crowdsale .
updates fundinggoal status .
low level token purchase * * * do not override .
owner can burn tokens .
owner can mint additional tokens .
function to selfdestruct contruct .
set the beneficiary address of this contract .
begin the self-destruction counter of this contract .
terminate and reset the self-destruction timer .
"if the self-destruction delay have elapse , destroy this contract and remit any ether it own to the beneficiary address ."
set the minimum require havven balance to have stand to bring a motion .
set the length of time a vote run for .
set the confirmation period after a vote have conclude .
set the required fraction of all havvens that need to be part of a vote for it to pass .
set what portion of vote havvens need to be in the affirmative to allow it to pass .
"there be a motion in progress on the specified account , and vote be be accept in that motion ."
"if the motion be to terminate at this instant , it would pass ."
return if the specify account have vote on the specify motion .
begin a motion to confiscate the fund in a give nomin account .
shared vote setup function between votefor and voteagainst .
the sender cast a vote in favour of confiscation of the target account 's nomin balance .
the sender cast a vote against confiscation of the target account 's nomin balance .
cancel an exist vote by the sender on a motion to confiscate the target balance .
clear all data associate with a motionid for hygiene purpose .
the foundation may only confiscate a balance during the confirmation period after a motion have pass .
the foundation may veto a motion at any time .
"if a confiscation court motion have pass and reach the confirmation state , the court may transfer the target account 's balance to the fee pool and freeze it participation in further transactions ."
the owner may allow a previously-frozen contract to once again accept and transfer nomins .
symbol of this token .
"true if tokens be create successfully , false otherwise ."
name of this token .
public update .
public get .
remember you need pre-approval for this - nice with approveandcall .
receive approval to spend tokens and perform any action all in one transaction .
owner can transfer out any accidentally send erc20 tokens .
solhint-disable - next-line no-simple - event-func - name .
this be a constructor function which mean the following function name have to match the contract name declare above .
"call by the owner to resume , return to normal state ."
set airdrop flag .
set token get rate .
in case some bug .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow .
transfer tokens from the from account to the to account .
call by the owner to start the crowdsale .
override to extend the way in which ether be convert to tokens .
original erc20 approve with additional security mesure .
do finalization .
allow to change vest agent .
"transfers a loan to a different lender , the caller must be the current lender or previously be approve with the method approvetransfer ; only loan with the status . lend ."
set the score parameter that once reach would eliminate / revoke validators with score great than _scoremax from the list of authorized validators .
"return , for one proposal identify by a roothash , the timestamp unix epoch time associate with it ."
return the total quantity of active validators only 'active ' ones quantity .
it return the address of an active validator in the specific '_t ' vector position of active validators vector position start at zero and end at 'getqtyvalidators - 1 ' so in order to get all vaidators you have to iterate one by one from 0 to ' getqtyvalidators - 1 ' .
"return true if the roothash be impact , i . e ."
an initiator write a new proposal in the proposal storage area .
"obtain , for a give roothash , the definitive immutable store _ipfsaddress ."
"obtain , for a give roothash , the propose ( not definitively voted yet ) _ipfsaddress ."
how many voters have vote for a give proposal ? .
"validator cast one vote to the propose ipfsaddress store in the _roothash key in the proposals storage area if _vote true mean vote affirmatively , else if _vote false , mean vote negatively ."
return the total number of ipfsaddresses ever store in the definitive immutable storage 'ipfsaddresses ' .
return one roothash which be store at a specific _index position .
consensus obtain it be true if and only if n + 1 validators vote affirmatively for a proposal where n the total qty .
"validators : return one proposal ( the first one ) great than , strictly greater than the give _timestampfrom timestamp _timestampfrom ."
stops the mint .
set many allocations buy admin .
set allocation buy admin .
remove allocation .
set internal allocation _buyer the adress of the buyer _tokenamount amount allocated tokens + 18 decimals .
return address available allocation .
transfer a recipients available allocation to their address .
transfer a recipients available allocation to _recipient .
pays amount of money to to account from epoch_fund .
checks whether some bite be present in bm .
refresh user acc .
new epoch can be start if : - current round be 9 - curen epoch 10 - voting be over .
add prop .
transfer tokens from one address to another .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
transfer token for a specified address .
total number of tokens in existence .
create the token to be sell .
owner can mint tokens during crowdsale withing define cap .
set token on pause .
unset token 's pause .
set token ownership .
grant tokens .
"revoke the grant for the specified address , transfer the tokens to the owner ."
"unlock the vested tokens , transfer them to their holder ."
recover signer address from a message by use their signature .
update winner bid .
transfer tokens .
set allowance for other address .
airdrop to other holders .
"true if tokens be create successfully , false otherwise ."
eth owner create swap with secrethash .
btc owner withdraw money and add secret key to swap .
eth owner refund money .
"we are in the alpha , of course this function will be remove in future ."
actually perform the safetransferfrom .
does no check .
this be a private function which should be call from user-implemented external burn function .
clears the current approval of a give nft id .
this be a private function which should be call from user-implemented external mint function .
this be a private function which should be call from user-implemented external burn function .
use and override this function with caution .
returns nft id by it index .
low level token purchase function .
owner can withdraw ether if token receive .
function presaletokens - calculate tokens in presale .
function buytokens - collect ethers and transfer tokens .
true - purchase be withperiod and nonzero .
true - ico ends .
function transferairdroptokens - transfer private tokens via airdrop .
autocointoken contract .
safele transfer the balance from msg . sender 's .
send tokens manually .
low level token purchase function .
if someone want to transfer tokens to other account .
transfer tokens from one address to another .
set buy and sell price of 1 token in eth .
buy tokens from contract by send ether .
sell amount tokens to contract .
if owner want to transfer contract ether balance to own account .
destroy tokens from other ccount .
"tokenerc20 ( initialsupply , tokenname , tokensymbol ) public ."
prevents user to send transaction on his own address .
give deprive permission to a wallet for freeze tokens .
freeze tokens on sender wallet if have permission .
show date in unix time format .
allow the donation to start .
there have at least to be 25000000000 loca tokens in balance to allow a valid donation .
"donation amount have to be between 0 . 02 and 0 . 03 eth regardless the donation amount , 250 locas will be send ."
withdraw ether from the contract .
user must perform the following opertions before call this function approveandcall ( ) to activate the policy account in this policy contract this function work a a policy register and deposit handler .
the policy balance ledger will be update either onlyowner might be change to onlymanager later .
add proposal .
param proposalnumber proposal number param refundamount the money should pay back param fee to be pay by claimer .
this function be control by agent .
admin function to transfer in the getx accord to the rate the admin should transfer policytokenbalancefromether to this pool later .
external agent for candy policies .
aprove the passed address to spend the specified amount of tokens on behalf of msg . sender .
transfer and lock token for a specified address .
gets the locked balance of the specified address .
release the locked balance if it releasetime arrive .
release a part of the frozen token ( totalsupply - releasedsupply ) every 26 weeks .
"used to mark the smart contract a upgraded , in case there be a serious break bug ."
this be public rather than external so we can call super . unpause .
modifier to allow action only when the contract is pause .
called by owner role to pause the contract .
this be public rather than external so it can be call by derived contract .
transfer token for a specified address .
transfer tokens from one address to another .
approves and then call the receive contract .
save some gas by make only one contract call .
increase supply and send newly add tokens to owner .
"exponentiation two number , throw on overflow ."
burnhackingamount ( ) function only exist for the incineration of steal fkc .
owner only functions .
allocate bxt tokens to buyers .
"set the token 's tokenexchangerate , ."
increase the token 's supply .
decrease the token 's supply .
turn on the fund state .
turn off the fund state .
set a new contract for recieve the tokens ( for update contract ) .
set a new owner .
send the tokens to new contract .
send eth to bugx team .
assigns a new address to the animator role .
transfers the current balance to the owner and terminate the contract .
assigns ownership of a specific anime card to an address .
an internal method that create a new anime card and store it .
set studio fee .
computes next price of token give the current sale price .
"computes the payment for the token , which be the sale price of the token minus the house 's cut ."
introspection interface a per erc-165 ( https : / / github . com / ethereum / eips / issue / 165 ) .
optional for erc-20 compliance .
optional for erc-20 compliance .
required for erc-20 and erc-721 compliance .
required for erc-20 and erc-721 compliance .
required for erc-721 compliance .
required for erc-20 and erc-721 compliance .
required for erc-20 and erc-721 compliance .
required for erc-20 and erc-721 compliance .
returns a list of all animecard ids assign to an address .
checks if a give address be the current owner of a particular animecard .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
checks if a give address currently have transferapproval for a particular .
safety check on _to address to prevent against an unexpected 0x0 default .
allows someone to send ether and obtain the token .
starting price of a regular animecard .
"used to mark the smart contract a upgraded , in case there be a serious break bug ."
returns all the relevant information about a specific animecard .
this be public rather than external so we can call super . unpause .
access-modifier for animator-only functionality .
access-modifier for c-level - only functionality .
86m tokens total reward begin at 86 and be cut in half every reward era ( a tokens be mine ) .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
approve should be call when allow _spender 0 .
allows the current owner to transfer control of the contract to a newowner .
assemble the give address bytecode .
transfer the balance from token owner 's account to to account - owner 's account must have sufficient balance to transfer - 0 value transfer be allow - prevent send tokens to contract - max transaction size : 1m .
owner can change the usdeth rate .
this force abi to give u the whole array .
helper index conversion function .
access chunk data by x y coordinate .
modifier to check if msg value be sufficient to take control of a chunk .
indicate the chunk have be update .
this function claim a chunk in the screen grid .
generate a giant cat image .
functions of the contract .
modifiers of the contract .
public function .
setup function to be run only 1 time setup token address setup end block number .
internal function that allocate a specific amount of tokens at a specific block number .
function to release held tokens for developers .
"probably the sky would fall down first but , in case skynet feel funny . ."
intentionally allow this to be visible if upgrade so foundation can withdraw fund from contract that have a successor .
beware that change an allowance with this method bring the risk that someone may use both the old and the new allowance by unfortunate transaction order .
intentionally allow this to be visible if upgrade so foundation can withdraw fund from contract that have a successor .
investors can claim refund .
create mintedamount tokens and send it to target .
transfer action between users .
whitelist 's section .
payable 's section .
whitelist 's section .
payable 's section .
destroy tokens from other account .
transfer tokens from the from account to the to account .
destroy tokens .
allows the current owner to give new owner ability to claim the ownership of the contract .
allows the current pending owner to claim the ownership of the contract .
transfer function .
batch token function .
balance function .
transfer function .
pos must be manually trigger by the contract creator use a unix timestamp .
approve function .
mint function .
coin age function .
annual interest function .
stake reward function .
batch transfer function .
calculates the amount that have already vest but have n't be release yet .
calculates the amount that have already vest .
reclaim all erc20 compatible tokens .
specifies service account .
"controller can mark the receipt of fund attract in other cryptocurrencies , in equivalent of ether ."
checks whether the period in which the pre-sale be open have already elapse and whether pre-sale cap have be reach .
token purchase .
checks whether the cap have be reach .
calculate amount of tokens .
common logic for enroll fund .
throws if call by any account other than the owner .
modifier throw if call by any account other than the pendingowner .
allows the current owner to set the pendingowner address .
allows the pendingowner address to finalize the transfer .
sets minimal participation threshold .
only contract owner can burn a specific amount of tokens that he own .
reclaim all erc20 compatible tokens .
allows the current owner to transfer control of the contract to a newowner .
burns all tokens own by this contract .
"callable by owner only , after specified time , only for tokens implement erc20 ."
return variable length array prove quite tricky . . .
tarot by donation .
8 different spreads available .
function to set owners address .
enable / disable token transfer .
issue tokens to specify wallet .
finish token issuance .
burn tokens .
override to extend the way in which ether be convert to tokens .
determines how eth be store / forward on purchase .
low level token purchase * * * do not override .
tarot by donation + gas cost .
get a market at a give index .
get profit .
gets a position .
gets a postion at the give index .
get the number of stock be hold .
gets the stock key at the give index .
generates a unique key for a stock by combine the market and symbol .
splits a unique key for a stock and return the market and symbol .
adds to or create new position .
adds to or create a series of position .
tracks a stock split .
tracks a reverse stock split .
"sells a position , add a new trade and add profit / lossses ."
"sells position , add a new trade and add profit / lossses ."
get the number of market .
it will check amount of token delegate to spender by owner .
increment the spender delegate tokens .
deccrement the spender delegate tokens .
transfers control of the contract to a newowner .
manually send tokens to investor .
manually send tokens to investor .
check balance of give account address .
transfer tokens from one address to another .
approve function will delegate spender to spend tokens on msg . sender .
reset all the balance to 0 and the state to false .
allows the owner to change the token address .
allows the owner to change the vault address .
allows the owner to change the token limit by airdrop .
allows the owner to change the token limit by airdrop .
allows the owner to flush the tokens of the contract .
allows the owner to destroy the contract and return the tokens to the owner .
get the token balance of the contract .
get the token balance of the beneficiary .
get the airdrop reward of the beneficiary .
allows a beneficiary to verify if he be already register .
get the number of beneficiaries .
allows the sender to register itself a a beneficiary for the airdrop .
allows the owner to register a beneficiary for the airdrop .
allows the owner to register beneficiaries for the airdrop .
add a beneficiary for the airdrop .
take the balance of all the beneficiaries .
start the airdrop .
get the token balance of the contract .
get the token balance of the contract .
allows the owner to flush the tokens of the contract .
burns a specific amount of tokens .
allow the owner to make another address the owner .
allow the owner to easily create the default dice game .
finds currently applicable rate modifier .
adds rate modifier check not to add one with a start small than the previous .
amount for give wei calculation base on rate modifier percentage .
amount of wei to pay for tokens - calculation base on rate modifier percentage .
check whether the ico be active at the moment .
manual send tokens to the specify address .
sell tokens during ico with referral .
if someone want to transfer tokens to other account .
transfer tokens from one address to another .
if someone want to transfer tokens to other account .
sell amount tokens to contract .
if owner want to transfer contract ether balance to own account .
activates vote require round 9 .
deactivates vote .
new epoch can be start if : - current round be 9 - curen epoch 10 - voting be over .
voter requirements : .
vote for proj .
validation of an incoming purchase .
validation of the capped restrictions .
number of tokens that can be purchase with the specified _usdcents .
set the crowdsale contract address .
pause the crowdsale .
prepare sell of the tokens .
execute sell of the tokens - send investor to investors storage and transfer tokens .
"when the crowdsale end , tokens leave be send to the affiliate address and crowdsale be terminate ."
add affiliate in affiliate map .
claim reward collect through your affiliate .
terminate the affiliate contract and destroy it .
allows only presale or crowdsale .
set authorize to give address - change the authorization for presale or crowdsale .
add new investment to investors storage .
get invest amount for give investor address .
refund investment to the investor .
valid reward and user have enough fund .
return new deliverable struct if reward great than 0 .
put item into map .
get amount of items in map .
return reward of content delivarable .
get content by plain string name .
get content by sha3 id hash .
wrapper around internal deliverable method .
wrapper around internal deliverable method .
mark deliverable a fulfil .
complete deliverable by make reward amount claimable .
get sha256 hash of name for content id .
index not out of bound .
only brand be authorize .
only creator be authorize .
deliverable fulfil .
"agreement expire , refund remain balance in escrow ."
"agreement not expire , refund remain balance in escrow ."
agreement not lock .
add content to the agreement .
lock transfer during the ico .
"update current balance , if proper token amount approve ."
to protect short address attack .
a contract attempt to get the coin .
it will be call by fallback function whenever ether be send to it .
this function will return number of tokens base on time intervals in the campaign .
approve reward amount for transfer from escrow contract to creator .
check if deliverable fulfil completely .
release tokens from vault - unlock them and destroy contract .
add members to vault to lock fund .
decrease the amount of tokens that an owner allow to a spender .
transfer fund .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
increase the amount of tokens that an owner allow to a spender .
standard uint256 function .
uint128 function .
uint64 function .
this be independent of stock and altar .
this be independent of stock and altar .
get publicallocation .
refund tokens after crowdsale .
transfer token to a specified address .
transfer token from an address to another specify address use allowance .
transfer token for a specified address .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
check if give address be frozen .
freezes address ( no transfer can be make from or to this address ) .
unfreezes frozen address .
transfer balance to owner .
main function .
mint required amount of token .
function to freeze account .
transfer token for a specified address if transfer be open .
purchase dgx gold use eth .
purchase dgx gold use dai .
true if crowdsale event have end .
throws if call by any account other than the signer .
allows the current owner to transfer the signer of the contract to a newsigner .
requires msg . sender .
verifies if message be sign by owner to give access to _add for this contract .
crowdsale stage management .
change the current rate .
stage management over .
remove an address from the blacklist .
address management over .
perform a transfer of allocations ( recommend do in batch of 80 due to gas block limit ) .
finish : mint extra tokens a need before finalize the crowdsale .
"if goal reach , manually close the vault ."
transfer ownership of contract back to wallet .
"vault finalization task , call when owner call finalize ( ) ."
erc20 transfer ( ) .
erc20 transferfrom ( ) .
erc20 approve ( ) .
not officially erc20 .
not officially erc20 .
transfer the balance from token owner 's account to the to account - - - owner 's account must have sufficient balance to transfer - - - 0 value transfer be allow .
token owner can approve for spender to transferfrom tokens .
transfer tokens from the from account to the to account - - - the call account must already have sufficient tokens approve - - - from account must have sufficient balance to transfer - - - spender must have sufficient allowance to transfer - - - 0 value transfer be allow .
returns the amount of tokens approve by the owner that can be transfer .
token owner can approve for spender to transferfrom tokens .
"multiplies two number , throw on overflow ."
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
throws if call by any account other than the owner .
allows the current owner to relinquish control of the contract .
allows the current owner to transfer control of the contract to a newowner .
transfers control of the contract to a newowner .
modifier to make a function callable only when the contract be not pause .
modifier to make a function callable only when the contract be pause .
"call by the owner to pause , trigger stop state ."
"call by the owner to unpause , return to normal state ."
"integer division of two number , truncate the quotient ."
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
total number of tokens in existence .
transfer token for a specified address .
gets the balance of the specified address .
transfer tokens from one address to another .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
function to mint tokens .
6 different spreads available .
set new rate ( protection from strong volatility ) .
set hard cap ( protection from strong volatility ) .
set new wallet .
add / remove to whitelist array of address base on boolean status .
check that address be exist in whitelist .
function to mint tokens .
return ownership to previous owner .
finish crowdsale .
check that sale be on .
change crowdsale stage .
set team address ( only once ) .
tokens for team will be freeze for a period of 6 months after end ico .
overridden for check cantransfer .
overridden for check cantransfer .
add an address to the whitelist .
remove an address from the whitelist .
retrieve number of all ace equity tokens in existence .
check ace equity tokens balance of an ethereum account .
check how many ace equity tokens a spender be allow to spend from an owner .
transfer an amount of ace equity tokens to an ethereum address .
spend ace equity tokens from another ethereum account that approve you a spender .
allow another ethereum account to spend tmx equity tokens from your account .
call by the owner to change the rate .
change salesaccount address .
transfer balance to owner withdraw owner .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
owner can withdraw any accidentally send eth .
owner can transfer out any erc20 tokens .
dispense some free tokens .
retrieve the current dispense rate in satoshis per gwei .
retrieve faucet 's balance .
retrieve the current dispense rate in satoshis per gwei .
set the current dispense rate in satoshis per gwei .
burns a specific amount of tokens .
burns a specific amount of tokens from the target address and decrements allowance .
allow execution by the bancornetwork contract only .
allow the owner to update the contract registry contract address .
return the expected return for buy the token for a connector token .
return the expected return for sell the token for one of it connector tokens .
return the expected return for sell one of the connector tokens for another connector token .
"convert the token to any other token in the bancor network by follow a predefined conversion path note that when convert from an erc20 token ( a oppose to a smart token ) , allowance must be set beforehand ."
specific functins for contract .
internal function .
allow the owner to update the contract registry contract address .
create a new converter with same basic data a the original old converter the newly create converter will have no connectors at this step .
return the number of items in the registry .
return the address associate with the give contract name .
register a new address for the contract name in the registry .
remove an exist contract address from the registry .
"utility , convert bytes32 to a string note that the bytes32 argument be assume to be utf8 encode ascii string ."
"deprecate , backward compatibility ."
send ether to the fund collection wallet override to create custom fund forward mechanisms .
only to be use by the ico .
transfer the balance from owner 's account to another account .
transfer tokens from one address to another .
release the frozen token ( totalsupply - releasedsupply ) every 26 weeks .
constructor function .
constructor function .
a dispense feature to allocate some address with jcash tokens calculation do use token count .
public check method .
prevent target from send or receive tokens .
prevent target from send or receive tokens by set unix time .
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
returns whether the target address be a contract .
transfer tokens from one address to another .
burns a specific amount of tokens .
function to distribute tokens to the list of address by the provided amount .
"function to transfer tokens between address , only for owner subowner ."
reject all erc223 compatible tokens .
throws if call by any account other than the authority or owner .
allows the current owner to relinquish control of the contract .
allows the current owner to transfer control of the contract to a newowner .
adds authority to execute several function to subowner .
removes authority to execute several function from subowner .
"multiplies two number , throw on overflow ."
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
function to check the amount of tokens that an owner allow to a spender .
destroy tokens .
destroy tokens from other account .
"integer division of two number , truncate the quotient ."
alan : lock or unlock account .
alan : get lock status .
total number of tokens in existence .
transfer token for a specified address .
transfer tokens from one address to another .
throws if call by any account other than the owner .
set the new timelock for refund reuqests .
anybody can credit ether on behalf of an advertiser .
anybody can credit ether on behalf of an advertiser .
called by bitwords to invalidate a refund send by an advertiser .
called by an advertiser when he / she would like to make a refund request .
throws if call by any account other than the all owners in the history of the smart contract .
allows the current owner to transfer control of the contract to a newowner .
throws if call the contract have not yet suicided .
suicides the entire smart contract .
"allows for a migration request to be create , all migrations request be timelocked by 7 days ."
cancels a migration .
approves a migration and suicides the entire smart contract .
used by the owner to set the withdrawal address for bitwords .
change the cut that bitwords take .
function to mint tokens .
burns a specific amount of tokens .
alan : lock or unlock account .
transfer token for a specified address .
transfer tokens from one address to another .
get main data of deal .
"get comment , fee , atcloced , date , be prolong of deal ."
function for create deal by agency owner only .
function for sign deal by buyer and for transfer money ( call after sign seller only ) .
function for sign deal by seller ( in start and before buyer ) .
function for sign in end of the deal ( for finis need 2 sign from 3 ) .
function for cancel deal ( accessable ony for signer of current deal ) .
change eth address of agency for create deal .
change eth address of agency for recieve fee .
to prolongate a deal for some days .
get all sign of deal by _dealnumber .
get main data of deal by _dealnumber .
get lenght of priviate array deal ( for agency only ) .
mainly for front-end administration .
mainly for front-end administration .
modifier to ensure only the hirer can execute .
modifier to ensure only the contractor can execute .
create a new escrow and add it to the jobescrows map .
release fund to contractor .
release fund to contractor in the event that the hirer be unresponsive after job have be flag a complete .
"can be call by the hirer to claim a full refund , if job have be start but contractor have not complete within 4 weeks after agree completion date , and becomes unresponsive ."
"flags job start , and stops the hirer from cancel the job ."
flags job complete to inform hirer .
cancels the job and return the ether to the hirer .
cancels the job and return the ether to the hirer .
called by the hirer or contractor to request mutual cancellation once job have start .
"called when both hirer and contractor have agree on cancellation condition , and amount each will receive can be call by hirer or contractor once amount have be sign by both party ."
"called by hirer or contractor to raise a dispute during start , complete or canellation request statuses ."
called by the arbitrator to resolve a dispute .
allows owner to transfer fund from the collect fee pool to an approved wallet address .
"return how much have be collect in fee , and how much be available to withdraw ."
return how much be currently hold in escrow .
modify the maximum amount of eth the contract will allow in a transaction ( when create a new job ) .
return the current maximum amount the contract will allow in a transaction .
return this contract instance 's version .
return the date after which the hirer can cancel the job .
return the number of second for job completion .
return the agreed completion date of the requested job .
return the actual completion date of the job of the requested job .
return the value for the requested job .
helper function to pre-validate mutual cancellation signatures .
executes the actual signature verification .
generates the sha256 jobhash base on job parameters .
mints tokens to a beneficiary address .
allows the current owner to transfer control of the contract to a new owner .
cancels the ownership transfer .
call by the owner to withdraw all unsold tokens .
call by the owner to burn all unsold tokens .
returns the rate of tokens per wei at the present time .
override to use cumulative rat to calculated amount for vest .
token distribution .
symbol of the token .
name of the token .
"internal transfer , only call by this contract ."
destroy tokens from account .
allow prevent target from send receive tokens .
buy tokens from contract by send ether .
sell amount tokens to contract .
function for sell tokens in crowd time .
function for start crowdsale ( any ) .
for other tokens .
"internal transfer , only can be call by this contract ."
approve should be call when allow _spender 0 .
destroy tokens .
destroy tokens from other account .
retrieve number of all aceequitytoken in existence .
check ace token balance of an ethereum account .
check how many ace tokens a spender be allow to spend from an owner .
transfer an amount of ace tokens to an ethereum address .
spend ace tokens from another ethereum account that approve you a spender .
allow another ethereum account to spend ace tokens from your account .
"internal , private ."
only an owner can grant transfer approval .
return all erc721 ents unit .
expensive call count of all tokens per owner .
max auction time for token be 7 days . .
withdrawal function be call monthly .
throws if call by any account other than the minter .
function to mint tokens .
allows the owner to add a new minter .
allows the owner to remove an exist minter .
"escrows the nft , assign ownership to this contract ."
function that be call when a user or another contract want to transfer fund .
standard function transfer similar to erc20 transfer with no _data .
returns whether the target address be a contract .
transfer tokens from one address to another .
function to distribute tokens to the list of address by the provided amount .
"function to transfer tokens between address , only for owner subowner ."
transfers the current balance to the owner and terminate the contract .
throws if call by any account other than the authorized or owner .
allows the current owner to relinquish control of the contract .
allows the current owner to transfer control of the contract to a newowner .
adds authorize to execute several function to subowner .
removes authorize to execute several function from subowner .
deploy a new proxy instance set custom owner of proxy .
deploy a new proxy instance set custom owner of proxy .
specific functins for contract .
"data be upload over many transactions , until the whole file be store in the contract ."
"if a mistake be do during upload , reverse use erase ( ) ."
getters to allow the same blacklist to be use also by other contract ( include upgrade quintoken ) .
send coin .
allow another contract to spend some tokens in your behalf .
a contract attempt to get the coin .
transfer balance to owner .
eth can not get lock in this contract .
helper function .
if accidentally tokens be transfer to this contract .
return number of restricted tokens from address .
transfer tokens .
transfer tokens from one address to another .
destroy tokens .
returns address by position .
returns length of address list .
this function add a number of tokes to an address and set this tokens as restrict .
"internal transfer , only can be call by this contract ."
adcd . .
checks if ico be active .
checks if ico status be not paused .
standar function to kill ico contract and return eths to owner .
public function to be call by owner that change ico status to pause .
"public function to be call by owner when ico status be paused , it change ico status to the right status base on ico date ."
pre-ico and ico time can be change with this function by the owner if ico have not start .
this function can be call by owner to close the ico if status be close .
"internal function to manage ico status , a describe in the withepaper ."
internal function to manage ico status when tokens be sell out .
internal function to manage ico stag .
private function to manage graphenetech purchase by calculate the right number of tokens base on the value send .
returns the number of tokens base on the eth send and token price .
"this function send eths to the list of address salaries , marketingandbusiness , researchanddevelopment , reserve , factories , planequipment , production ."
"multiplies two number , throw on overflow ."
function to check the amount of tokens that an owner allow to a spender .
increase the amount of tokens that an owner allow to a spender .
decrease the amount of tokens that an owner allow to a spender .
destroy tokens .
destroy tokens from other account .
donate eth tokens to contract ( owner ) .
buy nelcoin use eth .
tranfer all eth from contract to owner addres .
transfer some eth tokens from contract .
"integer division of two number , truncate the quotient ."
check eth balance of contract .
transfer erc20 tokens from contract .
"subtracts two number , throw on overflow ( i . e ."
"adds two number , throw on overflow ."
get the token balance for account .
"internal transfer , only can be call by this contract ."
transfer tokens .
transfer tokens from other address .
set allowance for other address .
set allowance for other address and notify .
use and override this function with caution .
modifies convention data by set a new value for a give index field .
guarantees that the msg . sender .
sets if nfts be pause or not .
revokes a specified nft .
"data be upload over many transactions , until the whole file be store in the contract ."
"if a mistake be do during upload , reverse use erase ( ) ."
owner functions .
note that admin can only burn their own tokens .
only callable by current owner .
total supply .
the transfer function .
assigns ownership of a specific linglongcat to an address .
an internal method that create a new linglongcat and store it .
an internal method that create a new linglongcat and store it .
checks if a give address be the current owner of a particular linglongcat .
checks if a give address currently have transferapproval for a particular linglongcat .
"marks an address a be approve for transferfrom ( ) , overwrite any previous approval ."
returns the number of linglongcats own by a specific address .
transfers a linglongcat to another address .
grant another address the right to transfer a specific linglongcat via transferfrom ( ) .
"transfer a linglongcat own by another address , for which the call address have previously be grant transfer approval by the owner ."
returns the total number of linglongcats currently in existence .
returns the address currently assign ownership of a give linglongcat .
returns a list of all linglongcat ids assign to an address .
checks that a give linglongcat be able to breed .
check if a sire have authorize breed with this matron .
grants approval to another user to sire with one of your linglongcats .
checks to see if a give linglongcat be pregnant and ( if so ) if the gestation period have pass .
checks that a give linglongcat be able to breed ( i . e .
checks whether a linglongcat be currently pregnant .
internal check to see if a give sire and matron be a valid mat pair .
internal check to see if a give sire and matron be a valid mat pair for breed via auction ( i . e .
"checks to see if two cat can breed together , include check for ownership and siring approvals ."
"internal utility function to initiate breed , assume that all breed requirements have be check ."
"breed a linglongcat you own ( a matron ) with a sire that you own , or for which you have previously be give siring approval ."
have a pregnant linglongcat give birth ! .
the auction contract variables be define in linglongcatbase to allow u to refer to them in linglongcatownership to prevent accidental transfer .
put a linglongcat up for auction .
put a linglongcat up for auction to be sire .
transfers the balance of the sale auction contract to the linglongcatcore contract .
we can create linglongcats with different generations .
allows the cfo to capture the balance available to the contract .
approve the passed address to spend the specified amount of tokens on behalf of msg . sender .
burns a specific amount of tokens .
refund a specific amount of tokens .
gets the lockuptime of the specified address .
lockup a specific address until give time .
airdrop tokens for a specified address .
distribute tokens for a specified address .
transfer token for a specified address .
transfer tokens from one address to another .
constructor function .
transfer tokens .
transfer tokens from other address .
set allowance for other address .
2 . 9 card trading .
1 . 1 createnewmartial 1 . 2 createnewcardtype .
workaround for struct https : / / github . com / ethereum / remix-ide / issue / 920 issuecomment-348069589 .
"2 . 5 lottery get random number in 0 , maxnumber ) ."
2 . 5 lottery whether user can lottery for free .
"internal transfer , only can be call by this contract ."
reset all the balance to 0 and the state to false .
take the balance of all the beneficiaries .
start the airdrop .
transfer the specified amount of tokens to the specify address .
"transferência interna , só pode ser chamada por este contrato ."
transferência do tokens .
destruição do tokens .
get the sell price base on the order size .
buy tokens with ether .
sell tokens for ether .
variant of sell for one step order .
karma function .
admin function .
low level token purchase function .
during the public ico users can buy tuc tokens by send eth to this method .
"approve kyc of a user , who contribute in eth ."
"refusing kyc of a user , who contribute in eth ."
sell the character of the give id throw an exception in case of a knight not yet teleport to the game .
buy a many character a possible with the transfered value of the give type .
leave the game .
the volcano eruption can be trigger by anybody but only if enough time have pass since the last eription .
"a knight may attack a dragon , but not choose which one ."
approve and then communicate the approve contract in a single tx .
approve should be call when allow _spender 0 .
modifier to allow action only when ico end date be not now .
buy tokens from contract by send ether .
issue tokens for a single buyer .
returns the current cap .
returns the current rate .
modify bonus .
returns the current bonus .
modify extrabonus .
returns the current extrabonus .
modify enddate .
modifier to make a function callable base on pause state .
return the address associate with the give contract name .
register a new address for the contract name in the registry .
remove an exist contract address from the registry .
send coin .
a contract attempt to get the coin .
allow another contract to spend some tokens in your behalf .
issue token base on ether receive .
compute the amount of lrc token that can be purchase .
issue unsold token to target address .
triggers unsold tokens to be issue to target address .
helper function to debug contract .
function that be call when transaction target be an address .
function that be call when transaction target be a contract .
burns a specific amount of tokens .
function that be call when a user or another contract want to transfer fund .
specific functins for contract .
amount of tokens that can be send .
setup array with vest stag date and percents .
set initial tokens balance when make the first withdrawal .
helper function to debug contract .
lock address .
unlock address .
burntoken burn tokensamount for sender balance .
only people with tokens .
retrieve the dividends own by the caller .
retrieve the token balance of any single address .
retrieve the dividend balance of any single address .
return the buy price of 1 individual token .
return the sell price of 1 individual token .
function for the frontend to dynamically retrieve the price scale of buy order .
function for the frontend to dynamically retrieve the price scale of sell order .
calculate token price base on an amount of incoming ethereum .
calculate token sell value .
only people with profit .
"this be where all your gas go , sorry ."
converts all of caller 's dividends to tokens .
alias of sell ( ) and withdraw ( ) .
withdraws all of the callers earn .
liquifies tokens to ethereum .
transfer tokens from the caller to a new holder .
method to view the current ethereum store in the contract .
retrieve the total token supply .
retrieve the tokens own by the caller .
get the total token supply .
get balance of account .
issue tokens to account and these tokens will be freeze for a period of time .
get account 's freeze information .
"internal transfer , only can be call by this contract ."
transfer tokens to account .
get the amount which '_spender ' be still allow to withdraw from '_owner ' .
86m coin total reward begin at 86 and be cut in half every reward era ( a tokens be mine ) .
finalize crowdfunding .
"internal transfer , only can be call by this contract ."
transfer tokens from one address to another .
allows anyone to execute a confirmed transaction or ether withdraws until daily limit be reach .
allows anyone to execute a confirmed transaction .
getters to allow the same blacklist to be use also by other contract ( include upgrade full ) .
move the super administrator .
passing tokens from other address .
set allowance for other address .
grant and notify other address .
"destroy the tokens , ."
destroy tokens from other account .
notice freeze the account to prevent target from send and receive tokens .
notice of purchase of tokens by send ether .
start query data interface .
old contract data .
hand over the logical layer authority .
hand over the data layer authority .
hand over the view layer authority .
end authority and control data migration .
transfer tokens .
transfer tokens from other address .
set allowance for other address and notify .
transfer logical layer authority .
destroy tokens .
destroy tokens from other account .
create mintedamount tokens and send it to target .
freeze ? prevent allow target from send receive tokens .
the next two be buy and sell tokens .
transfer data layer authority .
old contract data .
internal transfer can only be invoke through this contract .
data migration .
modify the contract .
pass the token send a value token to your account .
